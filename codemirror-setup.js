(function () {
  'use strict';

  function _arrayLikeToArray$c(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$c(r);
  }

  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _unsupportedIterableToArray$c(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$c(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$c(r, a) : void 0;
    }
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$c(r) || _nonIterableSpread();
  }

  function _typeof$1(o) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$1(o);
  }

  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == _typeof$1(e) || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }

  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }

  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }

  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }

  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }

  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: true,
        configurable: true
      }
    }), Object.defineProperty(t, "prototype", {
      writable: false
    }), e && _setPrototypeOf(t, e);
  }

  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray$c(r, e) || _nonIterableRest();
  }

  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }

  function toPrimitive(t, r) {
    if ("object" != _typeof$1(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof$1(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (String )(t);
  }

  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof$1(i) ? i : i + "";
  }

  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }

  // These are filled with ranges (rangeFrom[i] up to but not including
  // rangeTo[i]) of code points that count as extending characters.
  let rangeFrom = [], rangeTo = []

  ;(() => {
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    for (let i = 0, n = 0; i < numbers.length; i++)
      (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
  })();

  function isExtendingChar(code) {
    if (code < 768) return false
    for (let from = 0, to = rangeFrom.length;;) {
      let mid = (from + to) >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true
      if (from == to) return false
    }
  }

  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF
  }

  const ZWJ = 0x200d;

  function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
  }

  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt$1(str, pos);
    pos += codePointSize$1(prev);
    while (pos < str.length) {
      let next = codePointAt$1(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize$1(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
        if (countBefore % 2 == 0) break
        else pos += 2;
      } else {
        break
      }
    }
    return pos
  }

  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found
      pos--;
    }
    return 0
  }

  function codePointAt$1(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow$1(code1)) return code0
    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
  }

  function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
  function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
  function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

  function _createForOfIteratorHelper$b(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$b(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$b(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$b(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$b(r, a) : void 0; } }
  function _arrayLikeToArray$b(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function _callSuper$6(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$7() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$7() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _superPropGet$1(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }

  /**
  The data structure for documents. @nonabstract
  */
  var Text = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Text() {
      _classCallCheck(this, Text);
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    return _createClass(Text, [{
      key: "lineAt",
      value:
      /**
      Get the line description around the given position.
      */
      function lineAt(pos) {
        if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
        return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
    }, {
      key: "line",
      value: function line(n) {
        if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
        return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        var _clip = clip(this, from, to);
        var _clip2 = _slicedToArray(_clip, 2);
        from = _clip2[0];
        to = _clip2[1];
        var parts = [];
        this.decompose(0, from, parts, 2 /* Open.To */);
        if (text.length) text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
        this.decompose(to, this.length, parts, 1 /* Open.From */);
        return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
    }, {
      key: "append",
      value: function append(other) {
        return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
    }, {
      key: "slice",
      value: function slice(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var _clip3 = clip(this, from, to);
        var _clip4 = _slicedToArray(_clip3, 2);
        from = _clip4[0];
        to = _clip4[1];
        var parts = [];
        this.decompose(from, to, parts, 0);
        return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        if (other == this) return true;
        if (other.length != this.length || other.lines != this.lines) return false;
        var start = this.scanIdentical(other, 1),
          end = this.length - this.scanIdentical(other, -1);
        var a = new RawTextCursor(this),
          b = new RawTextCursor(other);
        for (var skip = start, pos = start;;) {
          a.next(skip);
          b.next(skip);
          skip = 0;
          if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
          pos += a.value.length;
          if (a.done || pos >= end) return true;
        }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
    }, {
      key: "iter",
      value: function iter() {
        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        return new RawTextCursor(this, dir);
      }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
    }, {
      key: "iterRange",
      value: function iterRange(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        return new PartialTextCursor(this, from, to);
      }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
    }, {
      key: "iterLines",
      value: function iterLines(from, to) {
        var inner;
        if (from == null) {
          inner = this.iter();
        } else {
          if (to == null) to = this.lines + 1;
          var start = this.line(from).from;
          inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
        }
        return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
    }, {
      key: "toString",
      value: function toString() {
        return this.sliceString(0);
      }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        var lines = [];
        this.flatten(lines);
        return lines;
      }
    }], [{
      key: "of",
      value: function of(text) {
        if (text.length == 0) throw new RangeError("A document must have at least one line");
        if (text.length == 1 && !text[0]) return Text.empty;
        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
    }]);
  }(); // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  var TextLeaf = /*#__PURE__*/function (_Text) {
    function TextLeaf(text) {
      var _this;
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);
      _classCallCheck(this, TextLeaf);
      _this = _callSuper$6(this, TextLeaf);
      _this.text = text;
      _this.length = length;
      return _this;
    }
    _inherits(TextLeaf, _Text);
    return _createClass(TextLeaf, [{
      key: "lines",
      get: function get() {
        return this.text.length;
      }
    }, {
      key: "children",
      get: function get() {
        return null;
      }
    }, {
      key: "lineInner",
      value: function lineInner(target, isLine, line, offset) {
        for (var i = 0;; i++) {
          var string = this.text[i],
            end = offset + string.length;
          if ((isLine ? line : end) >= target) return new Line$1(offset, end, line, string);
          offset = end + 1;
          line++;
        }
      }
    }, {
      key: "decompose",
      value: function decompose(from, to, target, open) {
        var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
        if (open & 1 /* Open.From */) {
          var prev = target.pop();
          var joined = appendText(text.text, prev.text.slice(), 0, text.length);
          if (joined.length <= 32 /* Tree.Branch */) {
            target.push(new TextLeaf(joined, prev.length + text.length));
          } else {
            var mid = joined.length >> 1;
            target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
          }
        } else {
          target.push(text);
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        if (!(text instanceof TextLeaf)) return _superPropGet$1(TextLeaf, "replace", this, 3)([from, to, text]);
        var _clip5 = clip(this, from, to);
        var _clip6 = _slicedToArray(_clip5, 2);
        from = _clip6[0];
        to = _clip6[1];
        var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
        var newLen = this.length + text.length - (to - from);
        if (lines.length <= 32 /* Tree.Branch */) return new TextLeaf(lines, newLen);
        return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
    }, {
      key: "sliceString",
      value: function sliceString(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
        var _clip7 = clip(this, from, to);
        var _clip8 = _slicedToArray(_clip7, 2);
        from = _clip8[0];
        to = _clip8[1];
        var result = "";
        for (var pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
          var line = this.text[i],
            end = pos + line.length;
          if (pos > from && i) result += lineSep;
          if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
          pos = end + 1;
        }
        return result;
      }
    }, {
      key: "flatten",
      value: function flatten(target) {
        var _iterator = _createForOfIteratorHelper$b(this.text),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var line = _step.value;
            target.push(line);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "scanIdentical",
      value: function scanIdentical() {
        return 0;
      }
    }], [{
      key: "split",
      value: function split(text, target) {
        var part = [],
          len = -1;
        var _iterator2 = _createForOfIteratorHelper$b(text),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var line = _step2.value;
            part.push(line);
            len += line.length + 1;
            if (part.length == 32 /* Tree.Branch */) {
              target.push(new TextLeaf(part, len));
              part = [];
              len = -1;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (len > -1) target.push(new TextLeaf(part, len));
        return target;
      }
    }]);
  }(Text); // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  var TextNode = /*#__PURE__*/function (_Text2) {
    function TextNode(children, length) {
      var _this2;
      _classCallCheck(this, TextNode);
      _this2 = _callSuper$6(this, TextNode);
      _this2.children = children;
      _this2.length = length;
      _this2.lines = 0;
      var _iterator3 = _createForOfIteratorHelper$b(children),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          _this2.lines += child.lines;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return _this2;
    }
    _inherits(TextNode, _Text2);
    return _createClass(TextNode, [{
      key: "lineInner",
      value: function lineInner(target, isLine, line, offset) {
        for (var i = 0;; i++) {
          var child = this.children[i],
            end = offset + child.length,
            endLine = line + child.lines - 1;
          if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
          offset = end + 1;
          line = endLine + 1;
        }
      }
    }, {
      key: "decompose",
      value: function decompose(from, to, target, open) {
        for (var i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
          var child = this.children[i],
            end = pos + child.length;
          if (from <= end && to >= pos) {
            var childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
            if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
          }
          pos = end + 1;
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        var _clip9 = clip(this, from, to);
        var _clip10 = _slicedToArray(_clip9, 2);
        from = _clip10[0];
        to = _clip10[1];
        if (text.lines < this.lines) for (var i = 0, pos = 0; i < this.children.length; i++) {
          var child = this.children[i],
            end = pos + child.length;
          // Fast path: if the change only affects one child and the
          // child's size remains in the acceptable range, only update
          // that child
          if (from >= pos && to <= end) {
            var updated = child.replace(from - pos, to - pos, text);
            var totalLines = this.lines - child.lines + updated.lines;
            if (updated.lines < totalLines >> 5 /* Tree.BranchShift */ - 1 && updated.lines > totalLines >> 5 /* Tree.BranchShift */ + 1) {
              var copy = this.children.slice();
              copy[i] = updated;
              return new TextNode(copy, this.length - (to - from) + text.length);
            }
            return _superPropGet$1(TextNode, "replace", this, 3)([pos, end, updated]);
          }
          pos = end + 1;
        }
        return _superPropGet$1(TextNode, "replace", this, 3)([from, to, text]);
      }
    }, {
      key: "sliceString",
      value: function sliceString(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
        var _clip11 = clip(this, from, to);
        var _clip12 = _slicedToArray(_clip11, 2);
        from = _clip12[0];
        to = _clip12[1];
        var result = "";
        for (var i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
          var child = this.children[i],
            end = pos + child.length;
          if (pos > from && i) result += lineSep;
          if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
          pos = end + 1;
        }
        return result;
      }
    }, {
      key: "flatten",
      value: function flatten(target) {
        var _iterator4 = _createForOfIteratorHelper$b(this.children),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;
            child.flatten(target);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "scanIdentical",
      value: function scanIdentical(other, dir) {
        if (!(other instanceof TextNode)) return 0;
        var length = 0;
        var _ref = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1],
          _ref2 = _slicedToArray(_ref, 4),
          iA = _ref2[0],
          iB = _ref2[1],
          eA = _ref2[2],
          eB = _ref2[3];
        for (;; iA += dir, iB += dir) {
          if (iA == eA || iB == eB) return length;
          var chA = this.children[iA],
            chB = other.children[iB];
          if (chA != chB) return length + chA.scanIdentical(chB, dir);
          length += chA.length + 1;
        }
      }
    }], [{
      key: "from",
      value: function from(children) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
          return l + ch.length + 1;
        }, -1);
        var lines = 0;
        var _iterator5 = _createForOfIteratorHelper$b(children),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _ch = _step5.value;
            lines += _ch.lines;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        if (lines < 32 /* Tree.Branch */) {
          var flat = [];
          var _iterator6 = _createForOfIteratorHelper$b(children),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var ch = _step6.value;
              ch.flatten(flat);
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          return new TextLeaf(flat, length);
        }
        var chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */),
          maxChunk = chunk << 1,
          minChunk = chunk >> 1;
        var chunked = [],
          currentLines = 0,
          currentLen = -1,
          currentChunk = [];
        function add(child) {
          var last;
          if (child.lines > maxChunk && child instanceof TextNode) {
            var _iterator7 = _createForOfIteratorHelper$b(child.children),
              _step7;
            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var node = _step7.value;
                add(node);
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
            flush();
            chunked.push(child);
          } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */) {
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
          } else {
            if (currentLines + child.lines > chunk) flush();
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk.push(child);
          }
        }
        function flush() {
          if (currentLines == 0) return;
          chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
          currentLen = -1;
          currentLines = currentChunk.length = 0;
        }
        var _iterator8 = _createForOfIteratorHelper$b(children),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var child = _step8.value;
            add(child);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        flush();
        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
    }]);
  }(Text);
  Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
    var length = -1;
    var _iterator9 = _createForOfIteratorHelper$b(text),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var line = _step9.value;
        length += line.length + 1;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return length;
  }
  function appendText(text, target) {
    var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;
    for (var pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
      var line = text[i],
        end = pos + line.length;
      if (end >= from) {
        if (end > to) line = line.slice(0, to - pos);
        if (pos < from) line = line.slice(from - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  function sliceText(text, from, to) {
    return appendText(text, [""], from, to);
  }
  var RawTextCursor = /*#__PURE__*/function () {
    function RawTextCursor(text) {
      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      _classCallCheck(this, RawTextCursor);
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text];
      this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
    }
    return _createClass(RawTextCursor, [{
      key: "nextInner",
      value: function nextInner(skip, dir) {
        this.done = this.lineBreak = false;
        for (;;) {
          var last = this.nodes.length - 1;
          var top = this.nodes[last],
            offsetValue = this.offsets[last],
            offset = offsetValue >> 1;
          var size = top instanceof TextLeaf ? top.text.length : top.children.length;
          if (offset == (dir > 0 ? size : 0)) {
            if (last == 0) {
              this.done = true;
              this.value = "";
              return this;
            }
            if (dir > 0) this.offsets[last - 1]++;
            this.nodes.pop();
            this.offsets.pop();
          } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
            this.offsets[last] += dir;
            if (skip == 0) {
              this.lineBreak = true;
              this.value = "\n";
              return this;
            }
            skip--;
          } else if (top instanceof TextLeaf) {
            // Move to the next string
            var next = top.text[offset + (dir < 0 ? -1 : 0)];
            this.offsets[last] += dir;
            if (next.length > Math.max(0, skip)) {
              this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
              return this;
            }
            skip -= next.length;
          } else {
            var _next = top.children[offset + (dir < 0 ? -1 : 0)];
            if (skip > _next.length) {
              skip -= _next.length;
              this.offsets[last] += dir;
            } else {
              if (dir < 0) this.offsets[last]--;
              this.nodes.push(_next);
              this.offsets.push(dir > 0 ? 1 : (_next instanceof TextLeaf ? _next.text.length : _next.children.length) << 1);
            }
          }
        }
      }
    }, {
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (skip < 0) {
          this.nextInner(-skip, -this.dir);
          skip = this.value.length;
        }
        return this.nextInner(skip, this.dir);
      }
    }]);
  }();
  var PartialTextCursor = /*#__PURE__*/function () {
    function PartialTextCursor(text, start, end) {
      _classCallCheck(this, PartialTextCursor);
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
      this.pos = start > end ? text.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    return _createClass(PartialTextCursor, [{
      key: "nextInner",
      value: function nextInner(skip, dir) {
        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
          this.value = "";
          this.done = true;
          return this;
        }
        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
        var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
        if (skip > limit) skip = limit;
        limit -= skip;
        var _this$cursor$next = this.cursor.next(skip),
          value = _this$cursor$next.value;
        this.pos += (value.length + skip) * dir;
        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
        this.done = !this.value;
        return this;
      }
    }, {
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
        return this.nextInner(skip, this.cursor.dir);
      }
    }, {
      key: "lineBreak",
      get: function get() {
        return this.cursor.lineBreak && this.value != "";
      }
    }]);
  }();
  var LineCursor = /*#__PURE__*/function () {
    function LineCursor(inner) {
      _classCallCheck(this, LineCursor);
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    return _createClass(LineCursor, [{
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var _this$inner$next = this.inner.next(skip),
          done = _this$inner$next.done,
          lineBreak = _this$inner$next.lineBreak,
          value = _this$inner$next.value;
        if (done && this.afterBreak) {
          this.value = "";
          this.afterBreak = false;
        } else if (done) {
          this.done = true;
          this.value = "";
        } else if (lineBreak) {
          if (this.afterBreak) {
            this.value = "";
          } else {
            this.afterBreak = true;
            this.next();
          }
        } else {
          this.value = value;
          this.afterBreak = false;
        }
        return this;
      }
    }, {
      key: "lineBreak",
      get: function get() {
        return false;
      }
    }]);
  }();
  if (typeof Symbol != "undefined") {
    Text.prototype[Symbol.iterator] = function () {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
      return this;
    };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  var Line$1 = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Line(
    /**
    The position of the start of the line.
    */
    from,
    /**
    The position at the end of the line (_before_ the line break,
    or at the end of document for the last line).
    */
    to,
    /**
    This line's line number (1-based).
    */
    number,
    /**
    The line's content.
    */
    text) {
      _classCallCheck(this, Line);
      this.from = from;
      this.to = to;
      this.number = number;
      this.text = text;
    }
    /**
    The length of the line (not including any line break after it).
    */
    return _createClass(Line, [{
      key: "length",
      get: function get() {
        return this.to - this.from;
      }
    }]);
  }();
  function clip(text, from, to) {
    from = Math.max(0, Math.min(text.length, from));
    return [from, Math.max(from, Math.min(text.length, to))];
  }

  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos) {
    var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    return findClusterBreak$1(str, pos, forward, includeExtending);
  }
  function surrogateLow(ch) {
    return ch >= 0xDC00 && ch < 0xE000;
  }
  function surrogateHigh(ch) {
    return ch >= 0xD800 && ch < 0xDC00;
  }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
    var code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
    var code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1)) return code0;
    return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint(code) {
    if (code <= 0xffff) return String.fromCharCode(code);
    code -= 0x10000;
    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up in a JavaScript string.
  */
  function codePointSize(code) {
    return code < 0x10000 ? 1 : 2;
  }
  var DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/function (MapMode) {
    /**
    Map a position to a valid new position, even when its context
    was deleted.
    */
    MapMode[MapMode["Simple"] = 0] = "Simple";
    /**
    Return null if deletion happens across the position.
    */
    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
    /**
    Return null if the character _before_ the position is deleted.
    */
    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
    /**
    Return null if the character _after_ the position is deleted.
    */
    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode;
  }(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  var ChangeDesc = /*#__PURE__*/function () {
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    function ChangeDesc(
    /**
    @internal
    */
    sections) {
      _classCallCheck(this, ChangeDesc);
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    return _createClass(ChangeDesc, [{
      key: "length",
      get: function get() {
        var result = 0;
        for (var i = 0; i < this.sections.length; i += 2) result += this.sections[i];
        return result;
      }
      /**
      The length of the document after the change.
      */
    }, {
      key: "newLength",
      get: function get() {
        var result = 0;
        for (var i = 0; i < this.sections.length; i += 2) {
          var ins = this.sections[i + 1];
          result += ins < 0 ? this.sections[i] : ins;
        }
        return result;
      }
      /**
      False when there are actual changes in this set.
      */
    }, {
      key: "empty",
      get: function get() {
        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
      }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
    }, {
      key: "iterGaps",
      value: function iterGaps(f) {
        for (var i = 0, posA = 0, posB = 0; i < this.sections.length;) {
          var len = this.sections[i++],
            ins = this.sections[i++];
          if (ins < 0) {
            f(posA, posB, len);
            posB += len;
          } else {
            posB += ins;
          }
          posA += len;
        }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
    }, {
      key: "iterChangedRanges",
      value: function iterChangedRanges(f) {
        var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
    }, {
      key: "invertedDesc",
      get: function get() {
        var sections = [];
        for (var i = 0; i < this.sections.length;) {
          var len = this.sections[i++],
            ins = this.sections[i++];
          if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
        }
        return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
    }, {
      key: "composeDesc",
      value: function composeDesc(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other);
      }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
    }, {
      key: "mapDesc",
      value: function mapDesc(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return other.empty ? this : mapSet(this, other, before);
      }
    }, {
      key: "mapPos",
      value: function mapPos(pos) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
        var posA = 0,
          posB = 0;
        for (var i = 0; i < this.sections.length;) {
          var len = this.sections[i++],
            ins = this.sections[i++],
            endA = posA + len;
          if (ins < 0) {
            if (endA > pos) return posB + (pos - posA);
            posB += len;
          } else {
            if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
            if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
            posB += ins;
          }
          posA = endA;
        }
        if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
        return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
    }, {
      key: "touchesRange",
      value: function touchesRange(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        for (var i = 0, pos = 0; i < this.sections.length && pos <= to;) {
          var len = this.sections[i++],
            ins = this.sections[i++],
            end = pos + len;
          if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
          pos = end;
        }
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        var result = "";
        for (var i = 0; i < this.sections.length;) {
          var len = this.sections[i++],
            ins = this.sections[i++];
          result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
        }
        return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.sections;
      }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
          return typeof a != "number";
        })) throw new RangeError("Invalid JSON representation of ChangeDesc");
        return new ChangeDesc(json);
      }
      /**
      @internal
      */
    }, {
      key: "create",
      value: function create(sections) {
        return new ChangeDesc(sections);
      }
    }]);
  }();
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
    function ChangeSet(sections,
    /**
    @internal
    */
    inserted) {
      var _this3;
      _classCallCheck(this, ChangeSet);
      _this3 = _callSuper$6(this, ChangeSet, [sections]);
      _this3.inserted = inserted;
      return _this3;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    _inherits(ChangeSet, _ChangeDesc);
    return _createClass(ChangeSet, [{
      key: "apply",
      value: function apply(doc) {
        if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
        _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
          return doc = doc.replace(fromB, fromB + (toA - fromA), text);
        }, false);
        return doc;
      }
    }, {
      key: "mapDesc",
      value: function mapDesc(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return mapSet(this, other, before, true);
      }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
    }, {
      key: "invert",
      value: function invert(doc) {
        var sections = this.sections.slice(),
          inserted = [];
        for (var i = 0, pos = 0; i < sections.length; i += 2) {
          var len = sections[i],
            ins = sections[i + 1];
          if (ins >= 0) {
            sections[i] = ins;
            sections[i + 1] = len;
            var index = i >> 1;
            while (inserted.length < index) inserted.push(Text.empty);
            inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
          }
          pos += len;
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
    }, {
      key: "compose",
      value: function compose(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other, true);
      }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
    }, {
      key: "map",
      value: function map(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return other.empty ? this : mapSet(this, other, before, true);
      }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
    }, {
      key: "iterChanges",
      value: function iterChanges(f) {
        var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
    }, {
      key: "desc",
      get: function get() {
        return ChangeDesc.create(this.sections);
      }
      /**
      @internal
      */
    }, {
      key: "filter",
      value: function filter(ranges) {
        var resultSections = [],
          resultInserted = [],
          filteredSections = [];
        var iter = new SectionIter(this);
        done: for (var i = 0, pos = 0;;) {
          var next = i == ranges.length ? 1e9 : ranges[i++];
          while (pos < next || pos == next && iter.len == 0) {
            if (iter.done) break done;
            var len = Math.min(iter.len, next - pos);
            addSection(filteredSections, len, -1);
            var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
            addSection(resultSections, len, ins);
            if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
            iter.forward(len);
            pos += len;
          }
          var end = ranges[i++];
          while (pos < end) {
            if (iter.done) break done;
            var _len = Math.min(iter.len, end - pos);
            addSection(resultSections, _len, -1);
            addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
            iter.forward(_len);
            pos += _len;
          }
        }
        return {
          changes: new ChangeSet(resultSections, resultInserted),
          filtered: ChangeDesc.create(filteredSections)
        };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        var parts = [];
        for (var i = 0; i < this.sections.length; i += 2) {
          var len = this.sections[i],
            ins = this.sections[i + 1];
          if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[i >> 1].toJSON()));
        }
        return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
    }], [{
      key: "of",
      value: function of(changes, length, lineSep) {
        var sections = [],
          inserted = [],
          pos = 0;
        var total = null;
        function flush() {
          var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          if (!force && !sections.length) return;
          if (pos < length) addSection(sections, length - pos, -1);
          var set = new ChangeSet(sections, inserted);
          total = total ? total.compose(set.map(total)) : set;
          sections = [];
          inserted = [];
          pos = 0;
        }
        function process(spec) {
          if (Array.isArray(spec)) {
            var _iterator10 = _createForOfIteratorHelper$b(spec),
              _step10;
            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var sub = _step10.value;
                process(sub);
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          } else if (spec instanceof ChangeSet) {
            if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
            flush();
            total = total ? total.compose(spec.map(total)) : spec;
          } else {
            var from = spec.from,
              _spec$to = spec.to,
              to = _spec$to === void 0 ? from : _spec$to,
              _insert = spec.insert;
            if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
            var insText = !_insert ? Text.empty : typeof _insert == "string" ? Text.of(_insert.split(lineSep || DefaultSplit)) : _insert;
            var insLen = insText.length;
            if (from == to && insLen == 0) return;
            if (from < pos) flush();
            if (from > pos) addSection(sections, from - pos, -1);
            addSection(sections, to - from, insLen);
            addInsert(inserted, sections, insText);
            pos = to;
          }
        }
        process(changes);
        flush(!total);
        return total;
      }
      /**
      Create an empty changeset of the given length.
      */
    }, {
      key: "empty",
      value: function empty(length) {
        return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
    }, {
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
        var sections = [],
          inserted = [];
        for (var i = 0; i < json.length; i++) {
          var part = json[i];
          if (typeof part == "number") {
            sections.push(part, -1);
          } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
            return i && typeof e != "string";
          })) {
            throw new RangeError("Invalid JSON representation of ChangeSet");
          } else if (part.length == 1) {
            sections.push(part[0], 0);
          } else {
            while (inserted.length < i) inserted.push(Text.empty);
            inserted[i] = Text.of(part.slice(1));
            sections.push(part[0], inserted[i].length);
          }
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
    }, {
      key: "createSet",
      value: function createSet(sections, inserted) {
        return new ChangeSet(sections, inserted);
      }
    }]);
  }(ChangeDesc);
  function addSection(sections, len, ins) {
    var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (len == 0 && ins <= 0) return;
    var last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (last >= 0 && len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
    if (value.length == 0) return;
    var index = sections.length - 2 >> 1;
    if (index < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index) values.push(Text.empty);
      values.push(value);
    }
  }
  function _iterChanges(desc, f, individual) {
    var inserted = desc.inserted;
    for (var posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
      var len = desc.sections[i++],
        ins = desc.sections[i++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        var endA = posA,
          endB = posB,
          text = Text.empty;
        for (;;) {
          endA += len;
          endB += ins;
          if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);
          if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;
          len = desc.sections[i++];
          ins = desc.sections[i++];
        }
        f(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before) {
    var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // Produce a copy of setA that applies to the document after setB
    // has been applied (assuming both start at the same document).
    var sections = [],
      insert = mkSet ? [] : null;
    var a = new SectionIter(setA),
      b = new SectionIter(setB);
    // Iterate over both sets in parallel. inserted tracks, for changes
    // in A that have to be processed piece-by-piece, whether their
    // content has been inserted already, and refers to the section
    // index.
    for (var inserted = -1;;) {
      if (a.done && b.len || b.done && a.len) {
        throw new Error("Mismatched change set lengths");
      } else if (a.ins == -1 && b.ins == -1) {
        // Move across ranges skipped by both sets.
        var len = Math.min(a.len, b.len);
        addSection(sections, len, -1);
        a.forward(len);
        b.forward(len);
      } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
        // If there's a change in B that comes before the next change in
        // A (ordered by start pos, then len, then before flag), skip
        // that (and process any changes in A it covers).
        var _len2 = b.len;
        addSection(sections, b.ins, -1);
        while (_len2) {
          var piece = Math.min(a.len, _len2);
          if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
            addSection(sections, 0, a.ins);
            if (insert) addInsert(insert, sections, a.text);
            inserted = a.i;
          }
          a.forward(piece);
          _len2 -= piece;
        }
        b.next();
      } else if (a.ins >= 0) {
        // Process the part of a change in A up to the start of the next
        // non-deletion change in B (if overlapping).
        var _len3 = 0,
          left = a.len;
        while (left) {
          if (b.ins == -1) {
            var _piece = Math.min(left, b.len);
            _len3 += _piece;
            left -= _piece;
            b.forward(_piece);
          } else if (b.ins == 0 && b.len < left) {
            left -= b.len;
            b.next();
          } else {
            break;
          }
        }
        addSection(sections, _len3, inserted < a.i ? a.ins : 0);
        if (insert && inserted < a.i) addInsert(insert, sections, a.text);
        inserted = a.i;
        a.forward(a.len - left);
      } else if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB) {
    var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var sections = [];
    var insert = mkSet ? [] : null;
    var a = new SectionIter(setA),
      b = new SectionIter(setB);
    for (var open = false;;) {
      if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else if (a.ins == 0) {
        // Deletion in A
        addSection(sections, a.len, 0, open);
        a.next();
      } else if (b.len == 0 && !b.done) {
        // Insertion in B
        addSection(sections, 0, b.ins, open);
        if (insert) addInsert(insert, sections, b.text);
        b.next();
      } else if (a.done || b.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        var len = Math.min(a.len2, b.len),
          sectionLen = sections.length;
        if (a.ins == -1) {
          var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
          addSection(sections, len, insB, open);
          if (insert && insB) addInsert(insert, sections, b.text);
        } else if (b.ins == -1) {
          addSection(sections, a.off ? 0 : a.len, len, open);
          if (insert) addInsert(insert, sections, a.textBit(len));
        } else {
          addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
          if (insert && !b.off) addInsert(insert, sections, b.text);
        }
        open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
        a.forward2(len);
        b.forward(len);
      }
    }
  }
  var SectionIter = /*#__PURE__*/function () {
    function SectionIter(set) {
      _classCallCheck(this, SectionIter);
      this.set = set;
      this.i = 0;
      this.next();
    }
    return _createClass(SectionIter, [{
      key: "next",
      value: function next() {
        var sections = this.set.sections;
        if (this.i < sections.length) {
          this.len = sections[this.i++];
          this.ins = sections[this.i++];
        } else {
          this.len = 0;
          this.ins = -2;
        }
        this.off = 0;
      }
    }, {
      key: "done",
      get: function get() {
        return this.ins == -2;
      }
    }, {
      key: "len2",
      get: function get() {
        return this.ins < 0 ? this.len : this.ins;
      }
    }, {
      key: "text",
      get: function get() {
        var inserted = this.set.inserted,
          index = this.i - 2 >> 1;
        return index >= inserted.length ? Text.empty : inserted[index];
      }
    }, {
      key: "textBit",
      value: function textBit(len) {
        var inserted = this.set.inserted,
          index = this.i - 2 >> 1;
        return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
    }, {
      key: "forward",
      value: function forward(len) {
        if (len == this.len) this.next();else {
          this.len -= len;
          this.off += len;
        }
      }
    }, {
      key: "forward2",
      value: function forward2(len) {
        if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
          this.ins -= len;
          this.off += len;
        }
      }
    }]);
  }();
  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  var SelectionRange = /*#__PURE__*/function () {
    function SelectionRange(
    /**
    The lower boundary of the range.
    */
    from,
    /**
    The upper boundary of the range.
    */
    to, flags) {
      _classCallCheck(this, SelectionRange);
      this.from = from;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    return _createClass(SelectionRange, [{
      key: "anchor",
      get: function get() {
        return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from;
      }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
    }, {
      key: "head",
      get: function get() {
        return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to;
      }
      /**
      True when `anchor` and `head` are at the same position.
      */
    }, {
      key: "empty",
      get: function get() {
        return this.from == this.to;
      }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
    }, {
      key: "assoc",
      get: function get() {
        return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0;
      }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
    }, {
      key: "bidiLevel",
      get: function get() {
        var level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
        return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
    }, {
      key: "goalColumn",
      get: function get() {
        var value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
        return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
    }, {
      key: "map",
      value: function map(change) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var from, to;
        if (this.empty) {
          from = to = change.mapPos(this.from, assoc);
        } else {
          from = change.mapPos(this.from, 1);
          to = change.mapPos(this.to, -1);
        }
        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
    }, {
      key: "extend",
      value: function extend(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
        var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
        return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        var includeAssoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          anchor: this.anchor,
          head: this.head
        };
      }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
        return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
    }, {
      key: "create",
      value: function create(from, to, flags) {
        return new SelectionRange(from, to, flags);
      }
    }]);
  }();
  /**
  An editor selection holds one or more selection ranges.
  */
  var EditorSelection = /*#__PURE__*/function () {
    function EditorSelection(
    /**
    The ranges in the selection, sorted by position. Ranges cannot
    overlap (but they may touch, if they aren't empty).
    */
    ranges,
    /**
    The index of the _main_ range in the selection (which is
    usually the range that was added last).
    */
    mainIndex) {
      _classCallCheck(this, EditorSelection);
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    return _createClass(EditorSelection, [{
      key: "map",
      value: function map(change) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        if (change.empty) return this;
        return EditorSelection.create(this.ranges.map(function (r) {
          return r.map(change, assoc);
        }), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        var includeAssoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
        for (var i = 0; i < this.ranges.length; i++) if (!this.ranges[i].eq(other.ranges[i], includeAssoc)) return false;
        return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
    }, {
      key: "main",
      get: function get() {
        return this.ranges[this.mainIndex];
      }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
    }, {
      key: "asSingle",
      value: function asSingle() {
        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
    }, {
      key: "addRange",
      value: function addRange(range) {
        var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
    }, {
      key: "replaceRange",
      value: function replaceRange(range) {
        var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
        var ranges = this.ranges.slice();
        ranges[which] = range;
        return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          ranges: this.ranges.map(function (r) {
            return r.toJSON();
          }),
          main: this.mainIndex
        };
      }
      /**
      Create a selection from a JSON representation.
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
        return new EditorSelection(json.ranges.map(function (r) {
          return SelectionRange.fromJSON(r);
        }), json.main);
      }
      /**
      Create a selection holding a single range.
      */
    }, {
      key: "single",
      value: function single(anchor) {
        var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
    }, {
      key: "create",
      value: function create(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
        for (var pos = 0, i = 0; i < ranges.length; i++) {
          var range = ranges[i];
          if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
          pos = range.to;
        }
        return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
    }, {
      key: "cursor",
      value: function cursor(pos) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
        var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */);
      }
      /**
      Create a selection range.
      */
    }, {
      key: "range",
      value: function range(anchor, head, goalColumn, bidiLevel) {
        var flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */ | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
        return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
      }
      /**
      @internal
      */
    }, {
      key: "normalized",
      value: function normalized(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var main = ranges[mainIndex];
        ranges.sort(function (a, b) {
          return a.from - b.from;
        });
        mainIndex = ranges.indexOf(main);
        for (var i = 1; i < ranges.length; i++) {
          var range = ranges[i],
            prev = ranges[i - 1];
          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            var from = prev.from,
              to = Math.max(range.to, prev.to);
            if (i <= mainIndex) mainIndex--;
            ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }
        return new EditorSelection(ranges, mainIndex);
      }
    }]);
  }();
  function checkSelection(selection, docLength) {
    var _iterator11 = _createForOfIteratorHelper$b(selection.ranges),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var range = _step11.value;
        if (range.to > docLength) throw new RangeError("Selection points outside of document");
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
  }
  var nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

  Note that `Facet` instances can be used anywhere where
  [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
  */
  var Facet = /*#__PURE__*/function () {
    function Facet(
    /**
    @internal
    */
    combine,
    /**
    @internal
    */
    compareInput,
    /**
    @internal
    */
    compare, isStatic, enables) {
      _classCallCheck(this, Facet);
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare;
      this.isStatic = isStatic;
      /**
      @internal
      */
      this.id = nextID++;
      this["default"] = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Returns a facet reader for this facet, which can be used to
    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
    */
    return _createClass(Facet, [{
      key: "reader",
      get: function get() {
        return this;
      }
      /**
      Define a new facet.
      */
    }, {
      key: "of",
      value:
      /**
      Returns an extension that adds the given value to this facet.
      */
      function of(value) {
        return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
    }, {
      key: "compute",
      value: function compute(deps, get) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
    }, {
      key: "computeN",
      value: function computeN(deps, get) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
    }, {
      key: "from",
      value: function from(field, get) {
        if (!get) get = function get(x) {
          return x;
        };
        return this.compute([field], function (state) {
          return get(state.field(field));
        });
      }
    }], [{
      key: "define",
      value: function define() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new Facet(config.combine || function (a) {
          return a;
        }, config.compareInput || function (a, b) {
          return a === b;
        }, config.compare || (!config.combine ? sameArray$1 : function (a, b) {
          return a === b;
        }), !!config["static"], config.enables);
      }
    }]);
  }();
  function sameArray$1(a, b) {
    return a == b || a.length == b.length && a.every(function (e, i) {
      return e === b[i];
    });
  }
  var FacetProvider = /*#__PURE__*/function () {
    function FacetProvider(dependencies, facet, type, value) {
      _classCallCheck(this, FacetProvider);
      this.dependencies = dependencies;
      this.facet = facet;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    return _createClass(FacetProvider, [{
      key: "dynamicSlot",
      value: function dynamicSlot(addresses) {
        var _this4 = this;
        var _a;
        var getter = this.value;
        var compare = this.facet.compareInput;
        var id = this.id,
          idx = addresses[id] >> 1,
          multi = this.type == 2 /* Provider.Multi */;
        var depDoc = false,
          depSel = false,
          depAddrs = [];
        var _iterator12 = _createForOfIteratorHelper$b(this.dependencies),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var dep = _step12.value;
            if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
        return {
          create: function create(state) {
            state.values[idx] = getter(state);
            return 1 /* SlotStatus.Changed */;
          },
          update: function update(state, tr) {
            if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
              var newVal = getter(state);
              if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                state.values[idx] = newVal;
                return 1 /* SlotStatus.Changed */;
              }
            }
            return 0;
          },
          reconfigure: function reconfigure(state, oldState) {
            var newVal,
              oldAddr = oldState.config.address[id];
            if (oldAddr != null) {
              var oldVal = getAddr(oldState, oldAddr);
              if (_this4.dependencies.every(function (dep) {
                return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
              }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                state.values[idx] = oldVal;
                return 0;
              }
            } else {
              newVal = getter(state);
            }
            state.values[idx] = newVal;
            return 1 /* SlotStatus.Changed */;
          }
        };
      }
    }]);
  }();
  function compareArray(a, b, compare) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) if (!compare(a[i], b[i])) return false;
    return true;
  }
  function ensureAll(state, addrs) {
    var changed = false;
    var _iterator13 = _createForOfIteratorHelper$b(addrs),
      _step13;
    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var addr = _step13.value;
        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */) changed = true;
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    var providerAddrs = providers.map(function (p) {
      return addresses[p.id];
    });
    var providerTypes = providers.map(function (p) {
      return p.type;
    });
    var dynamic = providerAddrs.filter(function (p) {
      return !(p & 1);
    });
    var idx = addresses[facet.id] >> 1;
    function get(state) {
      var values = [];
      for (var i = 0; i < providerAddrs.length; i++) {
        var value = getAddr(state, providerAddrs[i]);
        if (providerTypes[i] == 2 /* Provider.Multi */) {
          var _iterator14 = _createForOfIteratorHelper$b(value),
            _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var val = _step14.value;
              values.push(val);
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
        } else values.push(value);
      }
      return facet.combine(values);
    }
    return {
      create: function create(state) {
        var _iterator15 = _createForOfIteratorHelper$b(providerAddrs),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var addr = _step15.value;
            ensureAddr(state, addr);
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
        state.values[idx] = get(state);
        return 1 /* SlotStatus.Changed */;
      },
      update: function update(state, tr) {
        if (!ensureAll(state, dynamic)) return 0;
        var value = get(state);
        if (facet.compare(value, state.values[idx])) return 0;
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      },
      reconfigure: function reconfigure(state, oldState) {
        var depChanged = ensureAll(state, providerAddrs);
        var oldProviders = oldState.config.facets[facet.id],
          oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        var value = get(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      }
    };
  }
  var initField = /*@__PURE__*/Facet.define({
    "static": true
  });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  var StateField = /*#__PURE__*/function () {
    function StateField(
    /**
    @internal
    */
    id, createF, updateF, compareF,
    /**
    @internal
    */
    spec) {
      _classCallCheck(this, StateField);
      this.id = id;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      /**
      @internal
      */
      this.provides = undefined;
    }
    /**
    Define a state field.
    */
    return _createClass(StateField, [{
      key: "create",
      value: function create(state) {
        var _this5 = this;
        var init = state.facet(initField).find(function (i) {
          return i.field == _this5;
        });
        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
    }, {
      key: "slot",
      value: function slot(addresses) {
        var _this6 = this;
        var idx = addresses[this.id] >> 1;
        return {
          create: function create(state) {
            state.values[idx] = _this6.create(state);
            return 1 /* SlotStatus.Changed */;
          },
          update: function update(state, tr) {
            var oldVal = state.values[idx];
            var value = _this6.updateF(oldVal, tr);
            if (_this6.compareF(oldVal, value)) return 0;
            state.values[idx] = value;
            return 1 /* SlotStatus.Changed */;
          },
          reconfigure: function reconfigure(state, oldState) {
            var init = state.facet(initField),
              oldInit = oldState.facet(initField),
              reInit;
            if ((reInit = init.find(function (i) {
              return i.field == _this6;
            })) && reInit != oldInit.find(function (i) {
              return i.field == _this6;
            })) {
              state.values[idx] = reInit.create(state);
              return 1 /* SlotStatus.Changed */;
            }
            if (oldState.config.address[_this6.id] != null) {
              state.values[idx] = oldState.field(_this6);
              return 0;
            }
            state.values[idx] = _this6.create(state);
            return 1 /* SlotStatus.Changed */;
          }
        };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
    }, {
      key: "init",
      value: function init(create) {
        return [this, initField.of({
          field: this,
          create: create
        })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
    }, {
      key: "extension",
      get: function get() {
        return this;
      }
    }], [{
      key: "define",
      value: function define(config) {
        var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
          return a === b;
        }, config);
        if (config.provide) field.provides = config.provide(field);
        return field;
      }
    }]);
  }();
  var Prec_ = {
    lowest: 4,
    low: 3,
    "default": 2,
    high: 1,
    highest: 0
  };
  function prec(value) {
    return function (ext) {
      return new PrecExtension(ext, value);
    };
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  var Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /*@__PURE__*/prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /*@__PURE__*/prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    "default": /*@__PURE__*/prec(Prec_["default"]),
    /**
    A lower-than-default precedence.
    */
    low: /*@__PURE__*/prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
    _classCallCheck(this, PrecExtension);
    this.inner = inner;
    this.prec = prec;
  });
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  var Compartment = /*#__PURE__*/function () {
    function Compartment() {
      _classCallCheck(this, Compartment);
    }
    return _createClass(Compartment, [{
      key: "of",
      value:
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      function of(ext) {
        return new CompartmentInstance(this, ext);
      }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
    }, {
      key: "reconfigure",
      value: function reconfigure(content) {
        return Compartment.reconfigure.of({
          compartment: this,
          extension: content
        });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
    }, {
      key: "get",
      value: function get(state) {
        return state.config.compartments.get(this);
      }
    }]);
  }();
  var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
    _classCallCheck(this, CompartmentInstance);
    this.compartment = compartment;
    this.inner = inner;
  });
  var Configuration = /*#__PURE__*/function () {
    function Configuration(base, compartments, dynamicSlots, address, staticValues, facets) {
      _classCallCheck(this, Configuration);
      this.base = base;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
    }
    return _createClass(Configuration, [{
      key: "staticFacet",
      value: function staticFacet(facet) {
        var addr = this.address[facet.id];
        return addr == null ? facet["default"] : this.staticValues[addr >> 1];
      }
    }], [{
      key: "resolve",
      value: function resolve(base, compartments, oldState) {
        var fields = [];
        var facets = Object.create(null);
        var newCompartments = new Map();
        var _iterator16 = _createForOfIteratorHelper$b(flatten(base, compartments, newCompartments)),
          _step16;
        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var ext = _step16.value;
            if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
        var address = Object.create(null);
        var staticValues = [];
        var dynamicSlots = [];
        var _loop = function _loop() {
          var field = _fields[_i];
          address[field.id] = dynamicSlots.length << 1;
          dynamicSlots.push(function (a) {
            return field.slot(a);
          });
        };
        for (var _i = 0, _fields = fields; _i < _fields.length; _i++) {
          _loop();
        }
        var oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
        var _loop2 = function _loop2() {
          var providers = facets[id],
            facet = providers[0].facet;
          var oldProviders = oldFacets && oldFacets[id] || [];
          if (providers.every(function (p) {
            return p.type == 0;
          } /* Provider.Static */)) {
            address[facet.id] = staticValues.length << 1 | 1;
            if (sameArray$1(oldProviders, providers)) {
              staticValues.push(oldState.facet(facet));
            } else {
              var value = facet.combine(providers.map(function (p) {
                return p.value;
              }));
              staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
            }
          } else {
            var _iterator17 = _createForOfIteratorHelper$b(providers),
              _step17;
            try {
              var _loop3 = function _loop3() {
                var p = _step17.value;
                if (p.type == 0 /* Provider.Static */) {
                  address[p.id] = staticValues.length << 1 | 1;
                  staticValues.push(p.value);
                } else {
                  address[p.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(function (a) {
                    return p.dynamicSlot(a);
                  });
                }
              };
              for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                _loop3();
              }
            } catch (err) {
              _iterator17.e(err);
            } finally {
              _iterator17.f();
            }
            address[facet.id] = dynamicSlots.length << 1;
            dynamicSlots.push(function (a) {
              return dynamicFacetSlot(a, facet, providers);
            });
          }
        };
        for (var id in facets) {
          _loop2();
        }
        var dynamic = dynamicSlots.map(function (f) {
          return f(address);
        });
        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
    }]);
  }();
  function flatten(extension, compartments, newCompartments) {
    var result = [[], [], [], [], []];
    var seen = new Map();
    function inner(ext, prec) {
      var known = seen.get(ext);
      if (known != null) {
        if (known <= prec) return;
        var found = result[known].indexOf(ext);
        if (found > -1) result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
      }
      seen.set(ext, prec);
      if (Array.isArray(ext)) {
        var _iterator18 = _createForOfIteratorHelper$b(ext),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var e = _step18.value;
            inner(e, prec);
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
        var content = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content);
        inner(content, prec);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec].push(ext);
        if (ext.provides) inner(ext.provides, prec);
      } else if (ext instanceof FacetProvider) {
        result[prec].push(ext);
        if (ext.facet.extensions) inner(ext.facet.extensions, Prec_["default"]);
      } else {
        var _content = ext.extension;
        if (!_content) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
        inner(_content, prec);
      }
    }
    inner(extension, Prec_["default"]);
    return result.reduce(function (a, b) {
      return a.concat(b);
    });
  }
  function ensureAddr(state, addr) {
    if (addr & 1) return 2 /* SlotStatus.Computed */;
    var idx = addr >> 1;
    var status = state.status[idx];
    if (status == 4 /* SlotStatus.Computing */) throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2 /* SlotStatus.Computed */) return status;
    state.status[idx] = 4 /* SlotStatus.Computing */;
    var changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  var languageData = /*@__PURE__*/Facet.define();
  var allowMultipleSelections = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (v) {
        return v;
      });
    },
    "static": true
  });
  var lineSeparator = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : undefined;
    },
    "static": true
  });
  var changeFilter = /*@__PURE__*/Facet.define();
  var transactionFilter = /*@__PURE__*/Facet.define();
  var transactionExtender = /*@__PURE__*/Facet.define();
  var readOnly = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : false;
    }
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  var Annotation = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Annotation(
    /**
    The annotation type.
    */
    type,
    /**
    The value of this annotation.
    */
    value) {
      _classCallCheck(this, Annotation);
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    return _createClass(Annotation, null, [{
      key: "define",
      value: function define() {
        return new AnnotationType();
      }
    }]);
  }();
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  var AnnotationType = /*#__PURE__*/function () {
    function AnnotationType() {
      _classCallCheck(this, AnnotationType);
    }
    return _createClass(AnnotationType, [{
      key: "of",
      value:
      /**
      Create an instance of this annotation.
      */
      function of(value) {
        return new Annotation(this, value);
      }
    }]);
  }();
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  var StateEffectType = /*#__PURE__*/function () {
    /**
    @internal
    */
    function StateEffectType(
    // The `any` types in these function types are there to work
    // around TypeScript issue #37631, where the type guard on
    // `StateEffect.is` mysteriously stops working when these properly
    // have type `Value`.
    /**
    @internal
    */
    map) {
      _classCallCheck(this, StateEffectType);
      this.map = map;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    return _createClass(StateEffectType, [{
      key: "of",
      value: function of(value) {
        return new StateEffect(this, value);
      }
    }]);
  }();
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  var StateEffect = /*#__PURE__*/function () {
    /**
    @internal
    */
    function StateEffect(
    /**
    @internal
    */
    type,
    /**
    The value of this effect.
    */
    value) {
      _classCallCheck(this, StateEffect);
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    return _createClass(StateEffect, [{
      key: "map",
      value: function map(mapping) {
        var mapped = this.type.map(this.value, mapping);
        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
    }, {
      key: "is",
      value: function is(type) {
        return this.type == type;
      }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
    }], [{
      key: "define",
      value: function define() {
        var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new StateEffectType(spec.map || function (v) {
          return v;
        });
      }
      /**
      Map an array of effects through a change set.
      */
    }, {
      key: "mapEffects",
      value: function mapEffects(effects, mapping) {
        if (!effects.length) return effects;
        var result = [];
        var _iterator19 = _createForOfIteratorHelper$b(effects),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var effect = _step19.value;
            var mapped = effect.map(mapping);
            if (mapped) result.push(mapped);
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
        return result;
      }
    }]);
  }();
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  var Transaction = /*#__PURE__*/function () {
    function Transaction(
    /**
    The state from which the transaction starts.
    */
    startState,
    /**
    The document changes made by this transaction.
    */
    changes,
    /**
    The selection set by this transaction, or undefined if it
    doesn't explicitly set a selection.
    */
    selection,
    /**
    The effects added to the transaction.
    */
    effects,
    /**
    @internal
    */
    annotations,
    /**
    Whether the selection should be scrolled into view after this
    transaction is dispatched.
    */
    scrollIntoView) {
      _classCallCheck(this, Transaction);
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView;
      /**
      @internal
      */
      this._doc = null;
      /**
      @internal
      */
      this._state = null;
      if (selection) checkSelection(selection, changes.newLength);
      if (!annotations.some(function (a) {
        return a.type == Transaction.time;
      })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    return _createClass(Transaction, [{
      key: "newDoc",
      get:
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      function get() {
        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
    }, {
      key: "newSelection",
      get: function get() {
        return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
    }, {
      key: "state",
      get: function get() {
        if (!this._state) this.startState.applyTransaction(this);
        return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
    }, {
      key: "annotation",
      value: function annotation(type) {
        var _iterator20 = _createForOfIteratorHelper$b(this.annotations),
          _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var ann = _step20.value;
            if (ann.type == type) return ann.value;
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
        return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
    }, {
      key: "docChanged",
      get: function get() {
        return !this.changes.empty;
      }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
    }, {
      key: "reconfigured",
      get: function get() {
        return this.startState.config != this.state.config;
      }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
    }, {
      key: "isUserEvent",
      value: function isUserEvent(event) {
        var e = this.annotation(Transaction.userEvent);
        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
    }], [{
      key: "create",
      value: function create(startState, changes, selection, effects, annotations, scrollIntoView) {
        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
    }]);
  }();
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
    var result = [];
    for (var iA = 0, iB = 0;;) {
      var from = void 0,
        to = void 0;
      if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
        from = a[iA++];
        to = a[iA++];
      } else if (iB < b.length) {
        from = b[iB++];
        to = b[iB++];
      } else return result;
      if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a, b, sequential) {
    var _a;
    var mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b.changes;
      mapForB = ChangeSet.empty(b.changes.length);
      changes = a.changes.compose(b.changes);
    } else {
      mapForA = b.changes.map(a.changes);
      mapForB = a.changes.mapDesc(b.changes, true);
      changes = a.changes.compose(mapForA);
    }
    return {
      changes: changes,
      selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
      effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
      annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
      scrollIntoView: a.scrollIntoView || b.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    var sel = spec.selection,
      annotations = asArray$1(spec.annotations);
    if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray$1(spec.effects),
      annotations: annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false) filter = false;
    for (var i = 1; i < specs.length; i++) {
      if (specs[i].filter === false) filter = false;
      var seq = !!specs[i].sequential;
      s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
    }
    var tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
    var state = tr.startState;
    // Change filters
    var result = true;
    var _iterator21 = _createForOfIteratorHelper$b(state.facet(changeFilter)),
      _step21;
    try {
      for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
        var filter = _step21.value;
        var value = filter(tr);
        if (value === false) {
          result = false;
          break;
        }
        if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
      }
    } catch (err) {
      _iterator21.e(err);
    } finally {
      _iterator21.f();
    }
    if (result !== true) {
      var changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        var filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    // Transaction filters
    var filters = state.facet(transactionFilter);
    for (var i = filters.length - 1; i >= 0; i--) {
      var _filtered = filters[i](tr);
      if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray$1(_filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    var state = tr.startState,
      extenders = state.facet(transactionExtender),
      spec = tr;
    for (var i = extenders.length - 1; i >= 0; i--) {
      var extension = extenders[i](tr);
      if (extension && Object.keys(extension).length) spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  var none$3 = [];
  function asArray$1(value) {
    return value == null ? none$3 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/function (CharCategory) {
    /**
    Word characters.
    */
    CharCategory[CharCategory["Word"] = 0] = "Word";
    /**
    Whitespace.
    */
    CharCategory[CharCategory["Space"] = 1] = "Space";
    /**
    Anything else.
    */
    CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory;
  }(CharCategory || (CharCategory = {}));
  var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  var wordChar;
  try {
    wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_) {}
  function hasWordChar(str) {
    if (wordChar) return wordChar.test(str);
    for (var i = 0; i < str.length; i++) {
      var ch = str[i];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return function (_char) {
      if (!/\S/.test(_char)) return CharCategory.Space;
      if (hasWordChar(_char)) return CharCategory.Word;
      for (var i = 0; i < wordChars.length; i++) if (_char.indexOf(wordChars[i]) > -1) return CharCategory.Word;
      return CharCategory.Other;
    };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  var EditorState = /*#__PURE__*/function () {
    function EditorState(
    /**
    @internal
    */
    config,
    /**
    The current document.
    */
    doc,
    /**
    The current selection.
    */
    selection,
    /**
    @internal
    */
    values, computeSlot, tr) {
      _classCallCheck(this, EditorState);
      this.config = config;
      this.doc = doc;
      this.selection = selection;
      this.values = values;
      this.status = config.statusTemplate.slice();
      this.computeSlot = computeSlot;
      // Fill in the computed state immediately, so that further queries
      // for it made during the update return this state
      if (tr) tr._state = this;
      for (var i = 0; i < this.config.dynamicSlots.length; i++) ensureAddr(this, i << 1);
      this.computeSlot = null;
    }
    return _createClass(EditorState, [{
      key: "field",
      value: function field(_field) {
        var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var addr = this.config.address[_field.id];
        if (addr == null) {
          if (require) throw new RangeError("Field is not present in this state");
          return undefined;
        }
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
    }, {
      key: "update",
      value: function update() {
        for (var _len4 = arguments.length, specs = new Array(_len4), _key = 0; _key < _len4; _key++) {
          specs[_key] = arguments[_key];
        }
        return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
    }, {
      key: "applyTransaction",
      value: function applyTransaction(tr) {
        var _this7 = this;
        var conf = this.config,
          _conf = conf,
          base = _conf.base,
          compartments = _conf.compartments;
        var _iterator22 = _createForOfIteratorHelper$b(tr.effects),
          _step22;
        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var effect = _step22.value;
            if (effect.is(Compartment.reconfigure)) {
              if (conf) {
                compartments = new Map();
                conf.compartments.forEach(function (val, key) {
                  return compartments.set(key, val);
                });
                conf = null;
              }
              compartments.set(effect.value.compartment, effect.value.extension);
            } else if (effect.is(StateEffect.reconfigure)) {
              conf = null;
              base = effect.value;
            } else if (effect.is(StateEffect.appendConfig)) {
              conf = null;
              base = asArray$1(base).concat(effect.value);
            }
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
        var startValues;
        if (!conf) {
          conf = Configuration.resolve(base, compartments, this);
          var intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(function () {
            return null;
          }), function (state, slot) {
            return slot.reconfigure(state, _this7);
          }, null);
          startValues = intermediateState.values;
        } else {
          startValues = tr.startState.values.slice();
        }
        var selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
        new EditorState(conf, tr.newDoc, selection, startValues, function (state, slot) {
          return slot.update(state, tr);
        }, tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
    }, {
      key: "replaceSelection",
      value: function replaceSelection(text) {
        if (typeof text == "string") text = this.toText(text);
        return this.changeByRange(function (range) {
          return {
            changes: {
              from: range.from,
              to: range.to,
              insert: text
            },
            range: EditorSelection.cursor(range.from + text.length)
          };
        });
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
    }, {
      key: "changeByRange",
      value: function changeByRange(f) {
        var sel = this.selection;
        var result1 = f(sel.ranges[0]);
        var changes = this.changes(result1.changes),
          ranges = [result1.range];
        var effects = asArray$1(result1.effects);
        for (var i = 1; i < sel.ranges.length; i++) {
          var result = f(sel.ranges[i]);
          var newChanges = this.changes(result.changes),
            newMapped = newChanges.map(changes);
          for (var j = 0; j < i; j++) ranges[j] = ranges[j].map(newMapped);
          var mapBy = changes.mapDesc(newChanges, true);
          ranges.push(result.range.map(mapBy));
          changes = changes.compose(newMapped);
          effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
        }
        return {
          changes: changes,
          selection: EditorSelection.create(ranges, sel.mainIndex),
          effects: effects
        };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
    }, {
      key: "changes",
      value: function changes() {
        var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        if (spec instanceof ChangeSet) return spec;
        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
    }, {
      key: "toText",
      value: function toText(string) {
        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
    }, {
      key: "sliceDoc",
      value: function sliceDoc() {
        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
        return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
    }, {
      key: "facet",
      value: function facet(_facet) {
        var addr = this.config.address[_facet.id];
        if (addr == null) return _facet["default"];
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
    }, {
      key: "toJSON",
      value: function toJSON(fields) {
        var result = {
          doc: this.sliceDoc(),
          selection: this.selection.toJSON()
        };
        if (fields) for (var prop in fields) {
          var value = fields[prop];
          if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
        }
        return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
    }, {
      key: "tabSize",
      get:
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      function get() {
        return this.facet(EditorState.tabSize);
      }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
    }, {
      key: "lineBreak",
      get: function get() {
        return this.facet(EditorState.lineSeparator) || "\n";
      }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
    }, {
      key: "readOnly",
      get: function get() {
        return this.facet(readOnly);
      }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
    }, {
      key: "phrase",
      value: function phrase(_phrase) {
        for (var _len5 = arguments.length, insert = new Array(_len5 > 1 ? _len5 - 1 : 0), _key2 = 1; _key2 < _len5; _key2++) {
          insert[_key2 - 1] = arguments[_key2];
        }
        var _iterator23 = _createForOfIteratorHelper$b(this.facet(EditorState.phrases)),
          _step23;
        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var map = _step23.value;
            if (Object.prototype.hasOwnProperty.call(map, _phrase)) {
              _phrase = map[_phrase];
              break;
            }
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
        if (insert.length) _phrase = _phrase.replace(/\$(\$|\d*)/g, function (m, i) {
          if (i == "$") return "$";
          var n = +(i || 1);
          return !n || n > insert.length ? m : insert[n - 1];
        });
        return _phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
    }, {
      key: "languageDataAt",
      value: function languageDataAt(name, pos) {
        var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var values = [];
        var _iterator24 = _createForOfIteratorHelper$b(this.facet(languageData)),
          _step24;
        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var provider = _step24.value;
            var _iterator25 = _createForOfIteratorHelper$b(provider(this, pos, side)),
              _step25;
            try {
              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                var result = _step25.value;
                if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
              }
            } catch (err) {
              _iterator25.e(err);
            } finally {
              _iterator25.f();
            }
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
        return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
    }, {
      key: "charCategorizer",
      value: function charCategorizer(at) {
        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
    }, {
      key: "wordAt",
      value: function wordAt(pos) {
        var _this$doc$lineAt = this.doc.lineAt(pos),
          text = _this$doc$lineAt.text,
          from = _this$doc$lineAt.from,
          length = _this$doc$lineAt.length;
        var cat = this.charCategorizer(pos);
        var start = pos - from,
          end = pos - from;
        while (start > 0) {
          var prev = findClusterBreak(text, start, false);
          if (cat(text.slice(prev, start)) != CharCategory.Word) break;
          start = prev;
        }
        while (end < length) {
          var next = findClusterBreak(text, end);
          if (cat(text.slice(end, next)) != CharCategory.Word) break;
          end = next;
        }
        return start == end ? null : EditorSelection.range(start + from, end + from);
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var fields = arguments.length > 2 ? arguments[2] : undefined;
        if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
        var fieldInit = [];
        if (fields) {
          var _loop4 = function _loop4() {
            if (Object.prototype.hasOwnProperty.call(json, prop)) {
              var field = fields[prop],
                value = json[prop];
              fieldInit.push(field.init(function (state) {
                return field.spec.fromJSON(value, state);
              }));
            }
          };
          for (var prop in fields) {
            _loop4();
          }
        }
        return EditorState.create({
          doc: json.doc,
          selection: EditorSelection.fromJSON(json.selection),
          extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
        });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
    }, {
      key: "create",
      value: function create() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var configuration = Configuration.resolve(config.extensions || [], new Map());
        var doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
        var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
        checkSelection(selection, doc.length);
        if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(function () {
          return null;
        }), function (state, slot) {
          return slot.create(state);
        }, null);
      }
    }]);
  }();
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : 4;
    }
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
    compare: function compare(a, b) {
      var kA = Object.keys(a),
        kB = Object.keys(b);
      return kA.length == kB.length && kA.every(function (k) {
        return a[k] == b[k];
      });
    }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults) {
    var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var result = {};
    var _iterator26 = _createForOfIteratorHelper$b(configs),
      _step26;
    try {
      for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
        var config = _step26.value;
        for (var _i2 = 0, _Object$keys = Object.keys(config); _i2 < _Object$keys.length; _i2++) {
          var _key3 = _Object$keys[_i2];
          var value = config[_key3],
            current = result[_key3];
          if (current === undefined) result[_key3] = value;else if (current === value || value === undefined) ; // No conflict
          else if (Object.hasOwnProperty.call(combine, _key3)) result[_key3] = combine[_key3](current, value);else throw new Error("Config merge conflict for field " + _key3);
        }
      }
    } catch (err) {
      _iterator26.e(err);
    } finally {
      _iterator26.f();
    }
    for (var key in defaults) if (result[key] === undefined) result[key] = defaults[key];
    return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  var RangeValue = /*#__PURE__*/function () {
    function RangeValue() {
      _classCallCheck(this, RangeValue);
    }
    return _createClass(RangeValue, [{
      key: "eq",
      value:
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      function eq(other) {
        return this == other;
      }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        return Range$1.create(from, to, this);
      }
    }]);
  }();
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  var Range$1 = /*#__PURE__*/function () {
    function Range(
    /**
    The range's start position.
    */
    from,
    /**
    Its end position.
    */
    to,
    /**
    The value associated with this range.
    */
    value) {
      _classCallCheck(this, Range);
      this.from = from;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    return _createClass(Range, null, [{
      key: "create",
      value: function create(from, to, value) {
        return new Range(from, to, value);
      }
    }]);
  }();
  function cmpRange(a, b) {
    return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  var Chunk = /*#__PURE__*/function () {
    function Chunk(from, to, value,
    // Chunks are marked with the largest point that occurs
    // in them (or -1 for no points), so that scans that are
    // only interested in points (such as the
    // heightmap-related logic) can skip range-only chunks.
    maxPoint) {
      _classCallCheck(this, Chunk);
      this.from = from;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    return _createClass(Chunk, [{
      key: "length",
      get: function get() {
        return this.to[this.to.length - 1];
      }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
    }, {
      key: "findIndex",
      value: function findIndex(pos, side, end) {
        var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var arr = end ? this.to : this.from;
        for (var lo = startAt, hi = arr.length;;) {
          if (lo == hi) return lo;
          var mid = lo + hi >> 1;
          var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
          if (mid == lo) return diff >= 0 ? lo : hi;
          if (diff >= 0) hi = mid;else lo = mid + 1;
        }
      }
    }, {
      key: "between",
      value: function between(offset, from, to, f) {
        for (var i = this.findIndex(from, -1e9 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++) if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false) return false;
      }
    }, {
      key: "map",
      value: function map(offset, changes) {
        var value = [],
          from = [],
          to = [],
          newPos = -1,
          maxPoint = -1;
        for (var i = 0; i < this.value.length; i++) {
          var val = this.value[i],
            curFrom = this.from[i] + offset,
            curTo = this.to[i] + offset,
            newFrom = void 0,
            newTo = void 0;
          if (curFrom == curTo) {
            var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
            if (mapped == null) continue;
            newFrom = newTo = mapped;
            if (val.startSide != val.endSide) {
              newTo = changes.mapPos(curFrom, val.endSide);
              if (newTo < newFrom) continue;
            }
          } else {
            newFrom = changes.mapPos(curFrom, val.startSide);
            newTo = changes.mapPos(curTo, val.endSide);
            if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
          }
          if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
          if (newPos < 0) newPos = newFrom;
          if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
          value.push(val);
          from.push(newFrom - newPos);
          to.push(newTo - newPos);
        }
        return {
          mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
          pos: newPos
        };
      }
    }]);
  }();
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  var RangeSet = /*#__PURE__*/function () {
    function RangeSet(
    /**
    @internal
    */
    chunkPos,
    /**
    @internal
    */
    chunk,
    /**
    @internal
    */
    nextLayer,
    /**
    @internal
    */
    maxPoint) {
      _classCallCheck(this, RangeSet);
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    return _createClass(RangeSet, [{
      key: "length",
      get:
      /**
      @internal
      */
      function get() {
        var last = this.chunk.length - 1;
        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
    }, {
      key: "size",
      get: function get() {
        if (this.isEmpty) return 0;
        var size = this.nextLayer.size;
        var _iterator27 = _createForOfIteratorHelper$b(this.chunk),
          _step27;
        try {
          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
            var chunk = _step27.value;
            size += chunk.value.length;
          }
        } catch (err) {
          _iterator27.e(err);
        } finally {
          _iterator27.f();
        }
        return size;
      }
      /**
      @internal
      */
    }, {
      key: "chunkEnd",
      value: function chunkEnd(index) {
        return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
    }, {
      key: "update",
      value: function update(updateSpec) {
        var _updateSpec$add = updateSpec.add,
          add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
          _updateSpec$sort = updateSpec.sort,
          sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
          _updateSpec$filterFro = updateSpec.filterFrom,
          filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
          _updateSpec$filterTo = updateSpec.filterTo,
          filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
        var filter = updateSpec.filter;
        if (add.length == 0 && !filter) return this;
        if (sort) add = add.slice().sort(cmpRange);
        if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
        var cur = new LayerCursor(this, null, -1)["goto"](0),
          i = 0,
          spill = [];
        var builder = new RangeSetBuilder();
        while (cur.value || i < add.length) {
          if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
            var range = add[i++];
            if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
          } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
            cur.nextChunk();
          } else {
            if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
              if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range$1.create(cur.from, cur.to, cur.value));
            }
            cur.next();
          }
        }
        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
          add: spill,
          filter: filter,
          filterFrom: filterFrom,
          filterTo: filterTo
        }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
    }, {
      key: "map",
      value: function map(changes) {
        if (changes.empty || this.isEmpty) return this;
        var chunks = [],
          chunkPos = [],
          maxPoint = -1;
        for (var i = 0; i < this.chunk.length; i++) {
          var start = this.chunkPos[i],
            chunk = this.chunk[i];
          var touch = changes.touchesRange(start, start + chunk.length);
          if (touch === false) {
            maxPoint = Math.max(maxPoint, chunk.maxPoint);
            chunks.push(chunk);
            chunkPos.push(changes.mapPos(start));
          } else if (touch === true) {
            var _chunk$map = chunk.map(start, changes),
              mapped = _chunk$map.mapped,
              pos = _chunk$map.pos;
            if (mapped) {
              maxPoint = Math.max(maxPoint, mapped.maxPoint);
              chunks.push(mapped);
              chunkPos.push(pos);
            }
          }
        }
        var next = this.nextLayer.map(changes);
        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
    }, {
      key: "between",
      value: function between(from, to, f) {
        if (this.isEmpty) return;
        for (var i = 0; i < this.chunk.length; i++) {
          var start = this.chunkPos[i],
            chunk = this.chunk[i];
          if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
        }
        this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
    }, {
      key: "iter",
      value: function iter() {
        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        return HeapCursor.from([this])["goto"](from);
      }
      /**
      @internal
      */
    }, {
      key: "isEmpty",
      get: function get() {
        return this.nextLayer == this;
      }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
    }], [{
      key: "create",
      value: function create(chunkPos, chunk, nextLayer, maxPoint) {
        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
    }, {
      key: "iter",
      value: function iter(sets) {
        var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return HeapCursor.from(sets)["goto"](from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
    }, {
      key: "compare",
      value: function compare(oldSets, newSets,
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration.
      */
      textDiff, comparator) {
        var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var a = oldSets.filter(function (set) {
          return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
        });
        var b = newSets.filter(function (set) {
          return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
        });
        var sharedChunks = findSharedChunks(a, b, textDiff);
        var sideA = new SpanCursor(a, sharedChunks, minPointSize);
        var sideB = new SpanCursor(b, sharedChunks, minPointSize);
        textDiff.iterGaps(function (fromA, fromB, length) {
          return _compare(sideA, fromA, sideB, fromB, length, comparator);
        });
        if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
    }, {
      key: "eq",
      value: function eq(oldSets, newSets) {
        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var to = arguments.length > 3 ? arguments[3] : undefined;
        if (to == null) to = 1000000000 /* C.Far */ - 1;
        var a = oldSets.filter(function (set) {
          return !set.isEmpty && newSets.indexOf(set) < 0;
        });
        var b = newSets.filter(function (set) {
          return !set.isEmpty && oldSets.indexOf(set) < 0;
        });
        if (a.length != b.length) return false;
        if (!a.length) return true;
        var sharedChunks = findSharedChunks(a, b);
        var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
          sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);
        for (;;) {
          if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
          if (sideA.to > to) return true;
          sideA.next();
          sideB.next();
        }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
    }, {
      key: "spans",
      value: function spans(sets, from, to, iterator) {
        var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var cursor = new SpanCursor(sets, null, minPointSize)["goto"](from),
          pos = from;
        var openRanges = cursor.openStart;
        for (;;) {
          var curTo = Math.min(cursor.to, to);
          if (cursor.point) {
            var active = cursor.activeForPoint(cursor.to);
            var openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
            iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
            openRanges = Math.min(cursor.openEnd(curTo), active.length);
          } else if (curTo > pos) {
            iterator.span(pos, curTo, cursor.active, openRanges);
            openRanges = cursor.openEnd(curTo);
          }
          if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
          pos = cursor.to;
          cursor.next();
        }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
    }, {
      key: "of",
      value: function of(ranges) {
        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var build = new RangeSetBuilder();
        var _iterator28 = _createForOfIteratorHelper$b(ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges),
          _step28;
        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var range = _step28.value;
            build.add(range.from, range.to, range.value);
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
        return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
    }, {
      key: "join",
      value: function join(sets) {
        if (!sets.length) return RangeSet.empty;
        var result = sets[sets.length - 1];
        for (var i = sets.length - 2; i >= 0; i--) {
          for (var layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer) result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
        }
        return result;
      }
    }]);
  }();
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1) for (var prev = ranges[0], i = 1; i < ranges.length; i++) {
      var cur = ranges[i];
      if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
      prev = cur;
    }
    return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  var RangeSetBuilder = /*#__PURE__*/function () {
    /**
    Create an empty builder.
    */
    function RangeSetBuilder() {
      _classCallCheck(this, RangeSetBuilder);
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1e9 /* C.Far */;
      this.lastTo = -1e9 /* C.Far */;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    return _createClass(RangeSetBuilder, [{
      key: "finishChunk",
      value: function finishChunk(newArrays) {
        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
        this.chunkPos.push(this.chunkStart);
        this.chunkStart = -1;
        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
        this.maxPoint = -1;
        if (newArrays) {
          this.from = [];
          this.to = [];
          this.value = [];
        }
      }
    }, {
      key: "add",
      value: function add(from, to, value) {
        if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
      }
      /**
      @internal
      */
    }, {
      key: "addInner",
      value: function addInner(from, to, value) {
        var diff = from - this.lastTo || value.startSide - this.last.endSide;
        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
        if (diff < 0) return false;
        if (this.from.length == 250 /* C.ChunkSize */) this.finishChunk(true);
        if (this.chunkStart < 0) this.chunkStart = from;
        this.from.push(from - this.chunkStart);
        this.to.push(to - this.chunkStart);
        this.last = value;
        this.lastFrom = from;
        this.lastTo = to;
        this.value.push(value);
        if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
        return true;
      }
      /**
      @internal
      */
    }, {
      key: "addChunk",
      value: function addChunk(from, chunk) {
        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
        if (this.from.length) this.finishChunk(true);
        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
        this.chunks.push(chunk);
        this.chunkPos.push(from);
        var last = chunk.value.length - 1;
        this.last = chunk.value[last];
        this.lastFrom = chunk.from[last] + from;
        this.lastTo = chunk.to[last] + from;
        return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
    }, {
      key: "finish",
      value: function finish() {
        return this.finishInner(RangeSet.empty);
      }
      /**
      @internal
      */
    }, {
      key: "finishInner",
      value: function finishInner(next) {
        if (this.from.length) this.finishChunk(false);
        if (this.chunks.length == 0) return next;
        var result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
        this.from = null; // Make sure further `add` calls produce errors
        return result;
      }
    }]);
  }();
  function findSharedChunks(a, b, textDiff) {
    var inA = new Map();
    var _iterator29 = _createForOfIteratorHelper$b(a),
      _step29;
    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
        var set = _step29.value;
        for (var i = 0; i < set.chunk.length; i++) if (set.chunk[i].maxPoint <= 0) inA.set(set.chunk[i], set.chunkPos[i]);
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
    var shared = new Set();
    var _iterator30 = _createForOfIteratorHelper$b(b),
      _step30;
    try {
      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
        var _set = _step30.value;
        for (var _i3 = 0; _i3 < _set.chunk.length; _i3++) {
          var known = inA.get(_set.chunk[_i3]);
          if (known != null && (textDiff ? textDiff.mapPos(known) : known) == _set.chunkPos[_i3] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + _set.chunk[_i3].length))) shared.add(_set.chunk[_i3]);
        }
      }
    } catch (err) {
      _iterator30.e(err);
    } finally {
      _iterator30.f();
    }
    return shared;
  }
  var LayerCursor = /*#__PURE__*/function () {
    function LayerCursor(layer, skip, minPoint) {
      var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      _classCallCheck(this, LayerCursor);
      this.layer = layer;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    return _createClass(LayerCursor, [{
      key: "startSide",
      get: function get() {
        return this.value ? this.value.startSide : 0;
      }
    }, {
      key: "endSide",
      get: function get() {
        return this.value ? this.value.endSide : 0;
      }
    }, {
      key: "goto",
      value: function _goto(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1e9;
        this.chunkIndex = this.rangeIndex = 0;
        this.gotoInner(pos, side, false);
        return this;
      }
    }, {
      key: "gotoInner",
      value: function gotoInner(pos, side, forward) {
        while (this.chunkIndex < this.layer.chunk.length) {
          var next = this.layer.chunk[this.chunkIndex];
          if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
          this.chunkIndex++;
          forward = false;
        }
        if (this.chunkIndex < this.layer.chunk.length) {
          var rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
          if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
        }
        this.next();
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
      }
    }, {
      key: "next",
      value: function next() {
        for (;;) {
          if (this.chunkIndex == this.layer.chunk.length) {
            this.from = this.to = 1000000000 /* C.Far */;
            this.value = null;
            break;
          } else {
            var chunkPos = this.layer.chunkPos[this.chunkIndex],
              chunk = this.layer.chunk[this.chunkIndex];
            var from = chunkPos + chunk.from[this.rangeIndex];
            this.from = from;
            this.to = chunkPos + chunk.to[this.rangeIndex];
            this.value = chunk.value[this.rangeIndex];
            this.setRangeIndex(this.rangeIndex + 1);
            if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
          }
        }
      }
    }, {
      key: "setRangeIndex",
      value: function setRangeIndex(index) {
        if (index == this.layer.chunk[this.chunkIndex].value.length) {
          this.chunkIndex++;
          if (this.skip) {
            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
          }
          this.rangeIndex = 0;
        } else {
          this.rangeIndex = index;
        }
      }
    }, {
      key: "nextChunk",
      value: function nextChunk() {
        this.chunkIndex++;
        this.rangeIndex = 0;
        this.next();
      }
    }, {
      key: "compare",
      value: function compare(other) {
        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
      }
    }]);
  }();
  var HeapCursor = /*#__PURE__*/function () {
    function HeapCursor(heap) {
      _classCallCheck(this, HeapCursor);
      this.heap = heap;
    }
    return _createClass(HeapCursor, [{
      key: "startSide",
      get: function get() {
        return this.value ? this.value.startSide : 0;
      }
    }, {
      key: "goto",
      value: function _goto2(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1e9;
        var _iterator31 = _createForOfIteratorHelper$b(this.heap),
          _step31;
        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var cur = _step31.value;
            cur["goto"](pos, side);
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }
        for (var i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);
        this.next();
        return this;
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        var _iterator32 = _createForOfIteratorHelper$b(this.heap),
          _step32;
        try {
          for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
            var cur = _step32.value;
            cur.forward(pos, side);
          }
        } catch (err) {
          _iterator32.e(err);
        } finally {
          _iterator32.f();
        }
        for (var i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);
        if ((this.to - pos || this.value.endSide - side) < 0) this.next();
      }
    }, {
      key: "next",
      value: function next() {
        if (this.heap.length == 0) {
          this.from = this.to = 1000000000 /* C.Far */;
          this.value = null;
          this.rank = -1;
        } else {
          var top = this.heap[0];
          this.from = top.from;
          this.to = top.to;
          this.value = top.value;
          this.rank = top.rank;
          if (top.value) top.next();
          heapBubble(this.heap, 0);
        }
      }
    }], [{
      key: "from",
      value: function from(sets) {
        var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var heap = [];
        for (var i = 0; i < sets.length; i++) {
          for (var cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
            if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, i));
          }
        }
        return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
    }]);
  }();
  function heapBubble(heap, index) {
    for (var cur = heap[index];;) {
      var childIndex = (index << 1) + 1;
      if (childIndex >= heap.length) break;
      var child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur.compare(child) < 0) break;
      heap[childIndex] = cur;
      heap[index] = child;
      index = childIndex;
    }
  }
  var SpanCursor = /*#__PURE__*/function () {
    function SpanCursor(sets, skip, minPoint) {
      _classCallCheck(this, SpanCursor);
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      // A currently active point range, if any
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1e9 /* C.Far */;
      this.endSide = 0;
      // The amount of open active ranges at the start of the iterator.
      // Not including points.
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    return _createClass(SpanCursor, [{
      key: "goto",
      value: function _goto3(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1e9;
        this.cursor["goto"](pos, side);
        this.active.length = this.activeTo.length = this.activeRank.length = 0;
        this.minActive = -1;
        this.to = pos;
        this.endSide = side;
        this.openStart = -1;
        this.next();
        return this;
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);
        this.cursor.forward(pos, side);
      }
    }, {
      key: "removeActive",
      value: function removeActive(index) {
        remove(this.active, index);
        remove(this.activeTo, index);
        remove(this.activeRank, index);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
    }, {
      key: "addActive",
      value: function addActive(trackOpen) {
        var i = 0,
          _this$cursor = this.cursor,
          value = _this$cursor.value,
          to = _this$cursor.to,
          rank = _this$cursor.rank;
        // Organize active marks by rank first, then by size
        while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0) i++;
        insert(this.active, i, value);
        insert(this.activeTo, i, to);
        insert(this.activeRank, i, rank);
        if (trackOpen) insert(trackOpen, i, this.cursor.from);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
    }, {
      key: "next",
      value: function next() {
        var from = this.to,
          wasPoint = this.point;
        this.point = null;
        var trackOpen = this.openStart < 0 ? [] : null;
        for (;;) {
          var a = this.minActive;
          if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
            if (this.activeTo[a] > from) {
              this.to = this.activeTo[a];
              this.endSide = this.active[a].endSide;
              break;
            }
            this.removeActive(a);
            if (trackOpen) remove(trackOpen, a);
          } else if (!this.cursor.value) {
            this.to = this.endSide = 1000000000 /* C.Far */;
            break;
          } else if (this.cursor.from > from) {
            this.to = this.cursor.from;
            this.endSide = this.cursor.startSide;
            break;
          } else {
            var nextVal = this.cursor.value;
            if (!nextVal.point) {
              // Opening a range
              this.addActive(trackOpen);
              this.cursor.next();
            } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
              // Ignore any non-empty points that end precisely at the end of the prev point
              this.cursor.next();
            } else {
              // New point
              this.point = nextVal;
              this.pointFrom = this.cursor.from;
              this.pointRank = this.cursor.rank;
              this.to = this.cursor.to;
              this.endSide = nextVal.endSide;
              this.cursor.next();
              this.forward(this.to, this.endSide);
              break;
            }
          }
        }
        if (trackOpen) {
          this.openStart = 0;
          for (var i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--) this.openStart++;
        }
      }
    }, {
      key: "activeForPoint",
      value: function activeForPoint(to) {
        if (!this.active.length) return this.active;
        var active = [];
        for (var i = this.active.length - 1; i >= 0; i--) {
          if (this.activeRank[i] < this.pointRank) break;
          if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide) active.push(this.active[i]);
        }
        return active.reverse();
      }
    }, {
      key: "openEnd",
      value: function openEnd(to) {
        var open = 0;
        for (var i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--) open++;
        return open;
      }
    }]);
  }();
  function _compare(a, startA, b, startB, length, comparator) {
    a["goto"](startA);
    b["goto"](startB);
    var endB = startB + length;
    var pos = startB,
      dPos = startB - startA;
    for (;;) {
      var dEnd = a.to + dPos - b.to,
        diff = dEnd || a.endSide - b.endSide;
      var end = diff < 0 ? a.to + dPos : b.to,
        clipEnd = Math.min(end, endB);
      if (a.point || b.point) {
        if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
      } else {
        if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
      }
      if (end > endB) break;
      if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange) comparator.boundChange(end);
      pos = end;
      if (diff <= 0) a.next();
      if (diff >= 0) b.next();
    }
  }
  function sameValues(a, b) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) if (a[i] != b[i] && !a[i].eq(b[i])) return false;
    return true;
  }
  function remove(array, index) {
    for (var i = index, e = array.length - 1; i < e; i++) array[i] = array[i + 1];
    array.pop();
  }
  function insert(array, index, value) {
    for (var i = array.length - 1; i >= index; i--) array[i + 1] = array[i];
    array[index] = value;
  }
  function findMinIndex(value, array) {
    var found = -1,
      foundPos = 1000000000 /* C.Far */;
    for (var i = 0; i < array.length; i++) if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array[i];
    }
    return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize) {
    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;
    var n = 0;
    for (var i = 0; i < to && i < string.length;) {
      if (string.charCodeAt(i) == 9) {
        n += tabSize - n % tabSize;
        i++;
      } else {
        n++;
        i = findClusterBreak(string, i);
      }
    }
    return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
    for (var i = 0, n = 0;;) {
      if (n >= col) return i;
      if (i == string.length) break;
      n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
      i = findClusterBreak(string, i);
    }
    return strict === true ? -1 : string.length;
  }

  const C = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {finish} = options || {};

      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
      }

      function render(selectors, spec, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";")
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                   value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                      " {" + local.join(" ") + "}");
        }
      }

      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() { return this.rules.join("\n") }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36)
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  }

  let adoptedSet = new Map; //<Document, StyleSet>

  class StyleSet {
    constructor(root, nonce) {
      let doc = root.ownerDocument || root, win = doc.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc);
        if (adopted) return root[SET] = adopted
        this.sheet = new win.CSSStyleSheet;
        adoptedSet.set(doc, this);
      } else {
        this.styleTag = doc.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }

    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i], index = this.modules.indexOf(mod);
        if (index < j && index > -1) { // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }

      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }

    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

  function keyName(event) {
    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
    // On IE, shift effect is never included in `.key`.
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  function _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function _callSuper$5(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$6() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$6() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _createForOfIteratorHelper$a(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$a(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$a(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$a(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$a(r, a) : void 0; } }
  function _arrayLikeToArray$a(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function getSelection(root) {
    var target;
    // Browsers differ on whether shadow roots have a getSelection
    // method. If it exists, use that, otherwise, call it on the
    // document.
    if (root.nodeType == 11) {
      // Shadow root
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode) return false;
    try {
      // Firefox will raise 'permission denied' errors when accessing
      // properties of `sel.anchorNode` when it's in a generated CSS
      // element.
      return contains(dom, selection.anchorNode);
    } catch (_) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node) {
    for (var index = 0;; index++) {
      node = node.previousSibling;
      if (!node) return index;
    }
  }
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (;;) {
      if (node == targetNode && off == targetOff) return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV") return false;
        var parent = node.parentNode;
        if (!parent || parent.nodeType != 1) return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false") return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
    var x = left ? rect.left : rect.right;
    return {
      left: x,
      right: x,
      top: rect.top,
      bottom: rect.bottom
    };
  }
  function windowRect(win) {
    var vp = win.visualViewport;
    if (vp) return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function getScale(elt, rect) {
    var scaleX = rect.width / elt.offsetWidth;
    var scaleY = rect.height / elt.offsetHeight;
    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1) scaleX = 1;
    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1) scaleY = 1;
    return {
      scaleX: scaleX,
      scaleY: scaleY
    };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
    var doc = dom.ownerDocument,
      win = doc.defaultView || window;
    for (var cur = dom, stop = false; cur && !stop;) {
      if (cur.nodeType == 1) {
        // Element
        var bounding = void 0,
          top = cur == doc.body;
        var scaleX = 1,
          scaleY = 1;
        if (top) {
          bounding = windowRect(win);
        } else {
          if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position)) stop = true;
          if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
            cur = cur.assignedSlot || cur.parentNode;
            continue;
          }
          var _rect = cur.getBoundingClientRect();
          // Make sure scrollbar width isn't included in the rectangle
          var _getScale = getScale(cur, _rect);
          scaleX = _getScale.scaleX;
          scaleY = _getScale.scaleY;
          bounding = {
            left: _rect.left,
            right: _rect.left + cur.clientWidth * scaleX,
            top: _rect.top,
            bottom: _rect.top + cur.clientHeight * scaleY
          };
        }
        var moveX = 0,
          moveY = 0;
        if (y == "nearest") {
          if (rect.top < bounding.top) {
            moveY = rect.top - (bounding.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top) moveY = rect.top - (bounding.top + yMargin);
          }
        } else {
          var rectHeight = rect.bottom - rect.top,
            boundingHeight = bounding.bottom - bounding.top;
          var targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x == "nearest") {
          if (rect.left < bounding.left) {
            moveX = rect.left - (bounding.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX) moveX = rect.left - (bounding.left + xMargin);
          }
        } else {
          var targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top) {
            win.scrollBy(moveX, moveY);
          } else {
            var movedX = 0,
              movedY = 0;
            if (moveY) {
              var start = cur.scrollTop;
              cur.scrollTop += moveY / scaleY;
              movedY = (cur.scrollTop - start) * scaleY;
            }
            if (moveX) {
              var _start = cur.scrollLeft;
              cur.scrollLeft += moveX / scaleX;
              movedX = (cur.scrollLeft - _start) * scaleX;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1) x = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1) y = "nearest";
          }
        }
        if (top) break;
        if (rect.top < bounding.top || rect.bottom > bounding.bottom || rect.left < bounding.left || rect.right > bounding.right) rect = {
          left: Math.max(rect.left, bounding.left),
          right: Math.min(rect.right, bounding.right),
          top: Math.max(rect.top, bounding.top),
          bottom: Math.min(rect.bottom, bounding.bottom)
        };
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        // A shadow root
        cur = cur.host;
      } else {
        break;
      }
    }
  }
  function scrollableParents(dom) {
    var doc = dom.ownerDocument,
      x,
      y;
    for (var cur = dom.parentNode; cur;) {
      if (cur == doc.body || x && y) {
        break;
      } else if (cur.nodeType == 1) {
        if (!y && cur.scrollHeight > cur.clientHeight) y = cur;
        if (!x && cur.scrollWidth > cur.clientWidth) x = cur;
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        cur = cur.host;
      } else {
        break;
      }
    }
    return {
      x: x,
      y: y
    };
  }
  var DOMSelectionState = /*#__PURE__*/function () {
    function DOMSelectionState() {
      _classCallCheck(this, DOMSelectionState);
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    return _createClass(DOMSelectionState, [{
      key: "eq",
      value: function eq(domSel) {
        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
    }, {
      key: "setRange",
      value: function setRange(range) {
        var anchorNode = range.anchorNode,
          focusNode = range.focusNode;
        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
    }, {
      key: "set",
      value: function set(anchorNode, anchorOffset, focusNode, focusOffset) {
        this.anchorNode = anchorNode;
        this.anchorOffset = anchorOffset;
        this.focusNode = focusNode;
        this.focusOffset = focusOffset;
      }
    }]);
  }();
  var preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
    if (dom.setActive) return dom.setActive(); // in IE
    if (preventScrollSupported) return dom.focus(preventScrollSupported);
    var stack = [];
    for (var cur = dom; cur; cur = cur.parentNode) {
      stack.push(cur, cur.scrollTop, cur.scrollLeft);
      if (cur == cur.ownerDocument) break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = {
          preventScroll: true
        };
        return true;
      }
    } : undefined);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (var i = 0; i < stack.length;) {
        var elt = stack[i++],
          top = stack[i++],
          left = stack[i++];
        if (elt.scrollTop != top) elt.scrollTop = top;
        if (elt.scrollLeft != left) elt.scrollLeft = left;
      }
    }
  }
  var scratchRange;
  function textRange(node, from) {
    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
    var range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from);
    return range;
  }
  function dispatchKey(elt, name, code, mods) {
    var options = {
      key: name,
      code: name,
      keyCode: code,
      which: code,
      cancelable: true
    };
    if (mods) {
      options.altKey = mods.altKey;
      options.ctrlKey = mods.ctrlKey;
      options.shiftKey = mods.shiftKey;
      options.metaKey = mods.metaKey;
    }
    var down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    var up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  function clearAttributes(node) {
    while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
    var node = selection.focusNode,
      offset = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;
    // Safari can report bogus offsets (#1152)
    offset = Math.min(offset, maxOffset(node));
    for (;;) {
      if (offset) {
        if (node.nodeType != 1) return false;
        var prev = node.childNodes[offset - 1];
        if (prev.contentEditable == "false") offset--;else {
          node = prev;
          offset = maxOffset(node);
        }
      } else if (node == doc) {
        return true;
      } else {
        offset = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  function isScrolledToBottom(elt) {
    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
    for (var node = startNode, offset = startOffset;;) {
      if (node.nodeType == 3 && offset > 0) {
        return {
          node: node,
          offset: offset
        };
      } else if (node.nodeType == 1 && offset > 0) {
        if (node.contentEditable == "false") return null;
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node);
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  function textNodeAfter(startNode, startOffset) {
    for (var node = startNode, offset = startOffset;;) {
      if (node.nodeType == 3 && offset < node.nodeValue.length) {
        return {
          node: node,
          offset: offset
        };
      } else if (node.nodeType == 1 && offset < node.childNodes.length) {
        if (node.contentEditable == "false") return null;
        node = node.childNodes[offset];
        offset = 0;
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node) + 1;
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  var DOMPos = /*#__PURE__*/function () {
    function DOMPos(node, offset) {
      var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      _classCallCheck(this, DOMPos);
      this.node = node;
      this.offset = offset;
      this.precise = precise;
    }
    return _createClass(DOMPos, null, [{
      key: "before",
      value: function before(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom), precise);
      }
    }, {
      key: "after",
      value: function after(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
      }
    }]);
  }();
  var noChildren = [];
  var ContentView = /*#__PURE__*/function () {
    function ContentView() {
      _classCallCheck(this, ContentView);
      this.parent = null;
      this.dom = null;
      this.flags = 2 /* ViewFlag.NodeDirty */;
    }
    return _createClass(ContentView, [{
      key: "overrideDOMText",
      get: function get() {
        return null;
      }
    }, {
      key: "posAtStart",
      get: function get() {
        return this.parent ? this.parent.posBefore(this) : 0;
      }
    }, {
      key: "posAtEnd",
      get: function get() {
        return this.posAtStart + this.length;
      }
    }, {
      key: "posBefore",
      value: function posBefore(view) {
        var pos = this.posAtStart;
        var _iterator = _createForOfIteratorHelper$a(this.children),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            if (child == view) return pos;
            pos += child.length + child.breakAfter;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        throw new RangeError("Invalid child in posBefore");
      }
    }, {
      key: "posAfter",
      value: function posAfter(view) {
        return this.posBefore(view) + view.length;
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (this.flags & 2 /* ViewFlag.NodeDirty */) {
          var parent = this.dom;
          var prev = null,
            next;
          var _iterator2 = _createForOfIteratorHelper$a(this.children),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var child = _step2.value;
              if (child.flags & 7 /* ViewFlag.Dirty */) {
                if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                  var contentView = ContentView.get(next);
                  if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);
                }
                child.sync(view, track);
                child.flags &= -8 /* ViewFlag.Dirty */;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (track && !track.written && track.node == parent && next != child.dom) track.written = true;
              if (child.dom.parentNode == parent) {
                while (next && next != child.dom) next = rm$1(next);
              } else {
                parent.insertBefore(child.dom, next);
              }
              prev = child.dom;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (next && track && track.node == parent) track.written = true;
          while (next) next = rm$1(next);
        } else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
          var _iterator3 = _createForOfIteratorHelper$a(this.children),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _child = _step3.value;
              if (_child.flags & 7 /* ViewFlag.Dirty */) {
                _child.sync(view, track);
                _child.flags &= -8 /* ViewFlag.Dirty */;
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(_dom) {}
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM(node, offset) {
        var after;
        if (node == this.dom) {
          after = this.dom.childNodes[offset];
        } else {
          var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
          for (;;) {
            var parent = node.parentNode;
            if (parent == this.dom) break;
            if (bias == 0 && parent.firstChild != parent.lastChild) {
              if (node == parent.firstChild) bias = -1;else bias = 1;
            }
            node = parent;
          }
          if (bias < 0) after = node;else after = node.nextSibling;
        }
        if (after == this.dom.firstChild) return 0;
        while (after && !ContentView.get(after)) after = after.nextSibling;
        if (!after) return this.length;
        for (var i = 0, pos = 0;; i++) {
          var child = this.children[i];
          if (child.dom == after) return pos;
          pos += child.length + child.breakAfter;
        }
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround(from, to) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var fromI = -1,
          fromStart = -1,
          toI = -1,
          toEnd = -1;
        for (var i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
          var child = this.children[i],
            end = pos + child.length;
          if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
          if (end >= from && fromI == -1) {
            fromI = i;
            fromStart = pos;
          }
          if (pos > to && child.dom.parentNode == this.dom) {
            toI = i;
            toEnd = prevEnd;
            break;
          }
          prevEnd = end;
          pos = end + child.breakAfter;
        }
        return {
          from: fromStart,
          to: toEnd < 0 ? offset + this.length : toEnd,
          startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
          endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
        };
      }
    }, {
      key: "markDirty",
      value: function markDirty() {
        var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.flags |= 2 /* ViewFlag.NodeDirty */;
        this.markParentsDirty(andParent);
      }
    }, {
      key: "markParentsDirty",
      value: function markParentsDirty(childList) {
        for (var parent = this.parent; parent; parent = parent.parent) {
          if (childList) parent.flags |= 2 /* ViewFlag.NodeDirty */;
          if (parent.flags & 1 /* ViewFlag.ChildDirty */) return;
          parent.flags |= 1 /* ViewFlag.ChildDirty */;
          childList = false;
        }
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        if (this.parent != parent) {
          this.parent = parent;
          if (this.flags & 7 /* ViewFlag.Dirty */) this.markParentsDirty(true);
        }
      }
    }, {
      key: "setDOM",
      value: function setDOM(dom) {
        if (this.dom == dom) return;
        if (this.dom) this.dom.cmView = null;
        this.dom = dom;
        dom.cmView = this;
      }
    }, {
      key: "rootView",
      get: function get() {
        for (var v = this;;) {
          var parent = v.parent;
          if (!parent) return v;
          v = parent;
        }
      }
    }, {
      key: "replaceChildren",
      value: function replaceChildren(from, to) {
        var _this$children;
        var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noChildren;
        this.markDirty();
        for (var i = from; i < to; i++) {
          var child = this.children[i];
          if (child.parent == this && children.indexOf(child) < 0) child.destroy();
        }
        if (children.length < 250) (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));else this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
        for (var _i = 0; _i < children.length; _i++) children[_i].setParent(this);
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation(_rec) {
        return false;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(_event) {
        return false;
      }
    }, {
      key: "childCursor",
      value: function childCursor() {
        var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
        return new ChildCursor(this.children, pos, this.children.length);
      }
    }, {
      key: "childPos",
      value: function childPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        return this.childCursor().findPos(pos, bias);
      }
    }, {
      key: "toString",
      value: function toString() {
        var name = this.constructor.name.replace("View", "");
        return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
      }
    }, {
      key: "isEditable",
      get: function get() {
        return true;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return false;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return false;
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        return false;
      }
    }, {
      key: "become",
      value: function become(other) {
        return false;
      }
    }, {
      key: "canReuseDOM",
      value: function canReuseDOM(other) {
        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
    }, {
      key: "getSide",
      value: function getSide() {
        return 0;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator4 = _createForOfIteratorHelper$a(this.children),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;
            if (child.parent == this) child.destroy();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        this.parent = null;
      }
    }], [{
      key: "get",
      value: function get(node) {
        return node.cmView;
      }
    }]);
  }();
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
    var next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  var ChildCursor = /*#__PURE__*/function () {
    function ChildCursor(children, pos, i) {
      _classCallCheck(this, ChildCursor);
      this.children = children;
      this.pos = pos;
      this.i = i;
      this.off = 0;
    }
    return _createClass(ChildCursor, [{
      key: "findPos",
      value: function findPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        for (;;) {
          if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
            this.off = pos - this.pos;
            return this;
          }
          var next = this.children[--this.i];
          this.pos -= next.length + next.breakAfter;
        }
      }
    }]);
  }();
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
    var children = parent.children;
    var before = children.length ? children[fromI] : null;
    var last = insert.length ? insert[insert.length - 1] : null;
    var breakAtEnd = last ? last.breakAfter : breakAtStart;
    // Change within a single child
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;
    if (toI < children.length) {
      var after = children[toI];
      // Make sure the end of the child after the update is preserved in `after`
      if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
        // If we're splitting a child, separate part of it to avoid that
        // being mangled when updating the child before the update.
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        // If the element after the replacement should be merged with
        // the last replacing element, update `content`
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert[insert.length - 1] = after;
        } else {
          // Remove the start of the after element, if necessary, and
          // add it to `content`.
          if (toOff || after.children.length && !after.children[0].length) after.merge(0, toOff, null, false, 0, openEnd);
          insert.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        // The element at `toI` is entirely covered by this range.
        // Preserve its line break, if any.
        if (last) last.breakAfter = 1;else breakAtStart = 1;
      }
      // Since we've handled the next element from the current elements
      // now, make sure `toI` points after that.
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
          before.breakAfter = insert.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    // Try to merge widgets on the boundaries of the replacement
    while (fromI < toI && insert.length) {
      if (children[toI - 1].become(insert[insert.length - 1])) {
        toI--;
        insert.pop();
        openEnd = insert.length ? 0 : openStart;
      } else if (children[fromI].become(insert[0])) {
        fromI++;
        insert.shift();
        openStart = insert.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
    if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
    var cur = parent.childCursor();
    var _cur$findPos = cur.findPos(to, 1),
      toI = _cur$findPos.i,
      toOff = _cur$findPos.off;
    var _cur$findPos2 = cur.findPos(from, -1),
      fromI = _cur$findPos2.i,
      fromOff = _cur$findPos2.off;
    var dLen = from - to;
    var _iterator5 = _createForOfIteratorHelper$a(insert),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var view = _step5.value;
        dLen += view.length;
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }
  var nav = typeof navigator != "undefined" ? navigator : {
    userAgent: "",
    vendor: "",
    platform: ""
  };
  var doc = typeof document != "undefined" ? document : {
    documentElement: {
      style: {}
    }
  };
  var ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
  var ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
  var ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  var ie = !!(ie_upto10 || ie_11up || ie_edge);
  var gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
  var chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
  var webkit = "webkitFontSmoothing" in doc.documentElement.style;
  var safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
  var ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
    windows: /*@__PURE__*//Win/.test(nav.platform),
    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
    ie: ie,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko: gecko,
    gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios: ios,
    android: /*@__PURE__*//Android\b/.test(nav.userAgent),
    safari: safari,
    webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  var MaxJoinLen = 256;
  var TextView = /*#__PURE__*/function (_ContentView) {
    function TextView(text) {
      var _this;
      _classCallCheck(this, TextView);
      _this = _callSuper$5(this, TextView);
      _this.text = text;
      return _this;
    }
    _inherits(TextView, _ContentView);
    return _createClass(TextView, [{
      key: "length",
      get: function get() {
        return this.text.length;
      }
    }, {
      key: "createDOM",
      value: function createDOM(textDOM) {
        this.setDOM(textDOM || document.createTextNode(this.text));
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (!this.dom) this.createDOM();
        if (this.dom.nodeValue != this.text) {
          if (track && track.node == this.dom) track.written = true;
          this.dom.nodeValue = this.text;
        }
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(dom) {
        if (dom.nodeType == 3) this.createDOM(dom);
      }
    }, {
      key: "merge",
      value: function merge(from, to, source) {
        if (this.flags & 8 /* ViewFlag.Composition */ || source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen || source.flags & 8 /* ViewFlag.Composition */)) return false;
        this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
        this.markDirty();
        return true;
      }
    }, {
      key: "split",
      value: function split(from) {
        var result = new TextView(this.text.slice(from));
        this.text = this.text.slice(0, from);
        this.markDirty();
        result.flags |= this.flags & 8 /* ViewFlag.Composition */;
        return result;
      }
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM(node, offset) {
        return node == this.dom ? offset : offset ? this.text.length : 0;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return new DOMPos(this.dom, pos);
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround(_from, _to, offset) {
        return {
          from: offset,
          to: offset + this.length,
          startDOM: this.dom,
          endDOM: this.dom.nextSibling
        };
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        return textCoords(this.dom, pos, side);
      }
    }]);
  }(ContentView);
  var MarkView = /*#__PURE__*/function (_ContentView2) {
    function MarkView(mark) {
      var _this2;
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      _classCallCheck(this, MarkView);
      _this2 = _callSuper$5(this, MarkView);
      _this2.mark = mark;
      _this2.children = children;
      _this2.length = length;
      var _iterator6 = _createForOfIteratorHelper$a(children),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var ch = _step6.value;
          ch.setParent(_this2);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return _this2;
    }
    _inherits(MarkView, _ContentView2);
    return _createClass(MarkView, [{
      key: "setAttrs",
      value: function setAttrs(dom) {
        clearAttributes(dom);
        if (this.mark["class"]) dom.className = this.mark["class"];
        if (this.mark.attrs) for (var name in this.mark.attrs) dom.setAttribute(name, this.mark.attrs[name]);
        return dom;
      }
    }, {
      key: "canReuseDOM",
      value: function canReuseDOM(other) {
        return _superPropGet(MarkView, "canReuseDOM", this, 3)([other]) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(node) {
        if (node.nodeName == this.mark.tagName.toUpperCase()) {
          this.setDOM(node);
          this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
        }
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.flags & 4 /* ViewFlag.AttrsDirty */) this.setAttrs(this.dom);
        _superPropGet(MarkView, "sync", this, 3)([view, track]);
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, _hasStart, openStart, openEnd) {
        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
        this.markDirty();
        return true;
      }
    }, {
      key: "split",
      value: function split(from) {
        var result = [],
          off = 0,
          detachFrom = -1,
          i = 0;
        var _iterator7 = _createForOfIteratorHelper$a(this.children),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var elt = _step7.value;
            var end = off + elt.length;
            if (end > from) result.push(off < from ? elt.split(from - off) : elt);
            if (detachFrom < 0 && off >= from) detachFrom = i;
            off = end;
            i++;
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        var length = this.length - from;
        this.length = from;
        if (detachFrom > -1) {
          this.children.length = detachFrom;
          this.markDirty();
        }
        return new MarkView(this.mark, result, length);
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        return coordsInChildren(this, pos, side);
      }
    }]);
  }(ContentView);
  function textCoords(text, pos, side) {
    var length = text.nodeValue.length;
    if (pos > length) pos = length;
    var from = pos,
      to = pos,
      flatten = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        // These browsers reliably return valid rectangles for empty ranges
        if (pos) {
          from--;
          flatten = 1;
        } // FIXME this is wrong in RTL text
        else if (to < length) {
          to++;
          flatten = -1;
        }
      }
    } else {
      if (side < 0) from--;else if (to < length) to++;
    }
    var rects = textRange(text, from, to).getClientRects();
    if (!rects.length) return null;
    var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
      return r.width;
    }) || rect;
    return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  var WidgetView = /*#__PURE__*/function (_ContentView3) {
    function WidgetView(widget, length, side) {
      var _this3;
      _classCallCheck(this, WidgetView);
      _this3 = _callSuper$5(this, WidgetView);
      _this3.widget = widget;
      _this3.length = length;
      _this3.side = side;
      _this3.prevWidget = null;
      return _this3;
    }
    _inherits(WidgetView, _ContentView3);
    return _createClass(WidgetView, [{
      key: "split",
      value: function split(from) {
        var result = WidgetView.create(this.widget, this.length - from, this.side);
        this.length -= from;
        return result;
      }
    }, {
      key: "sync",
      value: function sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable) this.dom.contentEditable = "false";
        }
      }
    }, {
      key: "getSide",
      value: function getSide() {
        return this.side;
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        this.length = from + (source ? source.length : 0) + (this.length - to);
        return true;
      }
    }, {
      key: "become",
      value: function become(other) {
        if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
          if (!this.widget.compare(other.widget)) this.markDirty(true);
          if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          return true;
        }
        return false;
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation() {
        return true;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        if (this.length == 0) return Text.empty;
        var top = this;
        while (top.parent) top = top.parent;
        var _top = top,
          view = _top.view,
          text = view && view.state.doc,
          start = this.posAtStart;
        return text ? text.slice(start, start + this.length) : Text.empty;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom) return custom;
        var rects = this.dom.getClientRects(),
          rect = null;
        if (!rects.length) return null;
        var fromBack = this.side ? this.side < 0 : pos > 0;
        for (var i = fromBack ? rects.length - 1 : 0;; i += fromBack ? -1 : 1) {
          rect = rects[i];
          if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
        }
        return flattenRect(rect, !fromBack);
      }
    }, {
      key: "isEditable",
      get: function get() {
        return false;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return true;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return this.widget.isHidden;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(WidgetView, "destroy", this, 3)([]);
        if (this.dom) this.widget.destroy(this.dom);
      }
    }], [{
      key: "create",
      value: function create(widget, length, side) {
        return new WidgetView(widget, length, side);
      }
    }]);
  }(ContentView); // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  var WidgetBufferView = /*#__PURE__*/function (_ContentView4) {
    function WidgetBufferView(side) {
      var _this4;
      _classCallCheck(this, WidgetBufferView);
      _this4 = _callSuper$5(this, WidgetBufferView);
      _this4.side = side;
      return _this4;
    }
    _inherits(WidgetBufferView, _ContentView4);
    return _createClass(WidgetBufferView, [{
      key: "length",
      get: function get() {
        return 0;
      }
    }, {
      key: "merge",
      value: function merge() {
        return false;
      }
    }, {
      key: "become",
      value: function become(other) {
        return other instanceof WidgetBufferView && other.side == this.side;
      }
    }, {
      key: "split",
      value: function split() {
        return new WidgetBufferView(this.side);
      }
    }, {
      key: "sync",
      value: function sync() {
        if (!this.dom) {
          var dom = document.createElement("img");
          dom.className = "cm-widgetBuffer";
          dom.setAttribute("aria-hidden", "true");
          this.setDOM(dom);
        }
      }
    }, {
      key: "getSide",
      value: function getSide() {
        return this.side;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
      }
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM() {
        return 0;
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos) {
        return this.dom.getBoundingClientRect();
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        return Text.empty;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return true;
      }
    }]);
  }(ContentView);
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
    var dom = parent.dom,
      children = parent.children,
      i = 0;
    for (var off = 0; i < children.length; i++) {
      var child = children[i],
        end = off + child.length;
      if (end == off && child.getSide() <= 0) continue;
      if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
      if (pos <= off) break;
      off = end;
    }
    for (var j = i; j > 0; j--) {
      var prev = children[j - 1];
      if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);
    }
    for (var _j = i; _j < children.length; _j++) {
      var next = children[_j];
      if (next.dom.parentNode == dom) return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
    var last,
      children = parent.children;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    var before = null,
      beforePos = -1,
      after = null,
      afterPos = -1;
    function scan(view, pos) {
      for (var i = 0, off = 0; i < view.children.length && off <= pos; i++) {
        var child = view.children[i],
          end = off + child.length;
        if (end >= pos) {
          if (child.children.length) {
            scan(child, pos - off);
          } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end > pos || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos - off;
          } else if (off < pos || off == end && child.getSide() < 0 && !child.isHidden) {
            before = child;
            beforePos = pos - off;
          }
        }
        off = end;
      }
    }
    scan(view, pos);
    var target = (side < 0 ? before : after) || before || after;
    if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    var last = view.dom.lastChild;
    if (!last) return view.dom.getBoundingClientRect();
    var rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function onSameLine(a, b) {
    var posA = a.coordsAt(0, 1),
      posB = b.coordsAt(0, 1);
    return posA && posB && posB.top < posA.bottom;
  }
  function combineAttrs(source, target) {
    for (var name in source) {
      if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
    }
    return target;
  }
  var noAttrs$1 = /*@__PURE__*/Object.create(null);
  function attrsEq(a, b, ignore) {
    if (a == b) return true;
    if (!a) a = noAttrs$1;
    if (!b) b = noAttrs$1;
    var keysA = Object.keys(a),
      keysB = Object.keys(b);
    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0)) return false;
    for (var _i2 = 0, _keysA = keysA; _i2 < _keysA.length; _i2++) {
      var key = _keysA[_i2];
      if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key])) return false;
    }
    return true;
  }
  function _updateAttrs(dom, prev, attrs) {
    var changed = false;
    if (prev) for (var name in prev) if (!(attrs && name in attrs)) {
      changed = true;
      if (name == "style") dom.style.cssText = "";else dom.removeAttribute(name);
    }
    if (attrs) for (var _name in attrs) if (!(prev && prev[_name] == attrs[_name])) {
      changed = true;
      if (_name == "style") dom.style.cssText = attrs[_name];else dom.setAttribute(_name, attrs[_name]);
    }
    return changed;
  }
  function getAttrs$1(dom) {
    var attrs = Object.create(null);
    for (var i = 0; i < dom.attributes.length; i++) {
      var attr = dom.attributes[i];
      attrs[attr.name] = attr.value;
    }
    return attrs;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  var WidgetType = /*#__PURE__*/function () {
    function WidgetType() {
      _classCallCheck(this, WidgetType);
    }
    return _createClass(WidgetType, [{
      key: "eq",
      value:
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      function eq(widget) {
        return false;
      }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
    }, {
      key: "updateDOM",
      value: function updateDOM(dom, view) {
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "compare",
      value: function compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
    }, {
      key: "estimatedHeight",
      get: function get() {
        return -1;
      }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
    }, {
      key: "lineBreaks",
      get: function get() {
        return 0;
      }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return true;
      }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
    }, {
      key: "coordsAt",
      value: function coordsAt(dom, pos, side) {
        return null;
      }
      /**
      @internal
      */
    }, {
      key: "isHidden",
      get: function get() {
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "editable",
      get: function get() {
        return false;
      }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
    }, {
      key: "destroy",
      value: function destroy(dom) {}
    }]);
  }();
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/function (BlockType) {
    /**
    A line of text.
    */
    BlockType[BlockType["Text"] = 0] = "Text";
    /**
    A block widget associated with the position after it.
    */
    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
    /**
    A block widget associated with the position before it.
    */
    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
    /**
    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
    */
    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType;
  }(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  var Decoration = /*#__PURE__*/function (_RangeValue) {
    function Decoration(
    /**
    @internal
    */
    startSide,
    /**
    @internal
    */
    endSide,
    /**
    @internal
    */
    widget,
    /**
    The config object used to create this decoration. You can
    include additional properties in there to store metadata about
    your decoration.
    */
    spec) {
      var _this5;
      _classCallCheck(this, Decoration);
      _this5 = _callSuper$5(this, Decoration);
      _this5.startSide = startSide;
      _this5.endSide = endSide;
      _this5.widget = widget;
      _this5.spec = spec;
      return _this5;
    }
    /**
    @internal
    */
    _inherits(Decoration, _RangeValue);
    return _createClass(Decoration, [{
      key: "heightRelevant",
      get: function get() {
        return false;
      }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
    }, {
      key: "hasHeight",
      value:
      /**
      @internal
      */
      function hasHeight() {
        return this.widget ? this.widget.estimatedHeight > -1 : false;
      }
    }], [{
      key: "mark",
      value: function mark(spec) {
        return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
    }, {
      key: "widget",
      value: function widget(spec) {
        var side = Math.max(-1e4, Math.min(10000, spec.side || 0)),
          block = !!spec.block;
        side += block && !spec.inlineOrder ? side > 0 ? 300000000 /* Side.BlockAfter */ : -4e8 /* Side.BlockBefore */ : side > 0 ? 100000000 /* Side.InlineAfter */ : -1e8 /* Side.InlineBefore */;
        return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
    }, {
      key: "replace",
      value: function replace(spec) {
        var block = !!spec.block,
          startSide,
          endSide;
        if (spec.isBlockGap) {
          startSide = -5e8 /* Side.GapStart */;
          endSide = 400000000 /* Side.GapEnd */;
        } else {
          var _getInclusive = getInclusive(spec, block),
            start = _getInclusive.start,
            end = _getInclusive.end;
          startSide = (start ? block ? -3e8 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */) - 1;
          endSide = (end ? block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */ : -6e8 /* Side.NonIncEnd */) + 1;
        }
        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
    }, {
      key: "line",
      value: function line(spec) {
        return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
    }, {
      key: "set",
      value: function set(of) {
        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return RangeSet.of(of, sort);
      }
    }]);
  }(RangeValue);
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  var MarkDecoration = /*#__PURE__*/function (_Decoration) {
    function MarkDecoration(spec) {
      var _this6;
      _classCallCheck(this, MarkDecoration);
      var _getInclusive2 = getInclusive(spec),
        start = _getInclusive2.start,
        end = _getInclusive2.end;
      _this6 = _callSuper$5(this, MarkDecoration, [start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -6e8 /* Side.NonIncEnd */, null, spec]);
      _this6.tagName = spec.tagName || "span";
      _this6["class"] = spec["class"] || "";
      _this6.attrs = spec.attributes || null;
      return _this6;
    }
    _inherits(MarkDecoration, _Decoration);
    return _createClass(MarkDecoration, [{
      key: "eq",
      value: function eq(other) {
        var _a, _b;
        return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && (this["class"] || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a["class"])) == (other["class"] || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b["class"])) && attrsEq(this.attrs, other.attrs, "class");
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (from >= to) throw new RangeError("Mark decorations may not be empty");
        return _superPropGet(MarkDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  MarkDecoration.prototype.point = false;
  var LineDecoration = /*#__PURE__*/function (_Decoration2) {
    function LineDecoration(spec) {
      _classCallCheck(this, LineDecoration);
      return _callSuper$5(this, LineDecoration, [-2e8 /* Side.Line */, -2e8 /* Side.Line */, null, spec]);
    }
    _inherits(LineDecoration, _Decoration2);
    return _createClass(LineDecoration, [{
      key: "eq",
      value: function eq(other) {
        return other instanceof LineDecoration && this.spec["class"] == other.spec["class"] && attrsEq(this.spec.attributes, other.spec.attributes);
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
        return _superPropGet(LineDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  var PointDecoration = /*#__PURE__*/function (_Decoration3) {
    function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
      var _this7;
      _classCallCheck(this, PointDecoration);
      _this7 = _callSuper$5(this, PointDecoration, [startSide, endSide, widget, spec]);
      _this7.block = block;
      _this7.isReplace = isReplace;
      _this7.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      return _this7;
    }
    // Only relevant when this.block == true
    _inherits(PointDecoration, _Decoration3);
    return _createClass(PointDecoration, [{
      key: "type",
      get: function get() {
        return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
    }, {
      key: "heightRelevant",
      get: function get() {
        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
    }, {
      key: "eq",
      value: function eq(other) {
        return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
        if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
        return _superPropGet(PointDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  PointDecoration.prototype.point = true;
  function getInclusive(spec) {
    var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var start = spec.inclusiveStart,
      end = spec.inclusiveEnd;
    if (start == null) start = spec.inclusive;
    if (end == null) end = spec.inclusive;
    return {
      start: start !== null && start !== void 0 ? start : block,
      end: end !== null && end !== void 0 ? end : block
    };
  }
  function widgetsEq(a, b) {
    return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges) {
    var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
  }
  var LineView = /*#__PURE__*/function (_ContentView5) {
    function LineView() {
      var _this8;
      _classCallCheck(this, LineView);
      _this8 = _callSuper$5(this, LineView, arguments);
      _this8.children = [];
      _this8.length = 0;
      _this8.prevAttrs = undefined;
      _this8.attrs = null;
      _this8.breakAfter = 0;
      return _this8;
    }
    // Consumes source
    _inherits(LineView, _ContentView5);
    return _createClass(LineView, [{
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        if (source) {
          if (!(source instanceof LineView)) return false;
          if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
        }
        if (hasStart) this.setDeco(source ? source.attrs : null);
        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
        return true;
      }
    }, {
      key: "split",
      value: function split(at) {
        var end = new LineView();
        end.breakAfter = this.breakAfter;
        if (this.length == 0) return end;
        var _this$childPos = this.childPos(at),
          i = _this$childPos.i,
          off = _this$childPos.off;
        if (off) {
          end.append(this.children[i].split(off), 0);
          this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
          i++;
        }
        for (var j = i; j < this.children.length; j++) end.append(this.children[j], 0);
        while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();
        this.children.length = i;
        this.markDirty();
        this.length = at;
        return end;
      }
    }, {
      key: "transferDOM",
      value: function transferDOM(other) {
        if (!this.dom) return;
        this.markDirty();
        other.setDOM(this.dom);
        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
        this.prevAttrs = undefined;
        this.dom = null;
      }
    }, {
      key: "setDeco",
      value: function setDeco(attrs) {
        if (!attrsEq(this.attrs, attrs)) {
          if (this.dom) {
            this.prevAttrs = this.attrs;
            this.markDirty();
          }
          this.attrs = attrs;
        }
      }
    }, {
      key: "append",
      value: function append(child, openStart) {
        joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
    }, {
      key: "addLineDeco",
      value: function addLineDeco(deco) {
        var attrs = deco.spec.attributes,
          cls = deco.spec["class"];
        if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
        if (cls) this.attrs = combineAttrs({
          "class": cls
        }, this.attrs || {});
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(node) {
        if (node.nodeName == "DIV") {
          this.setDOM(node);
          this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
        }
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        var _a;
        if (!this.dom) {
          this.setDOM(document.createElement("div"));
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : undefined;
        } else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
          clearAttributes(this.dom);
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : undefined;
        }
        if (this.prevAttrs !== undefined) {
          _updateAttrs(this.dom, this.prevAttrs, this.attrs);
          this.dom.classList.add("cm-line");
          this.prevAttrs = undefined;
        }
        _superPropGet(LineView, "sync", this, 3)([view, track]);
        var last = this.dom.lastChild;
        while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;
        if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(function (ch) {
          return ch instanceof TextView;
        }))) {
          var hack = document.createElement("BR");
          hack.cmIgnore = true;
          this.dom.appendChild(hack);
        }
      }
    }, {
      key: "measureTextSize",
      value: function measureTextSize() {
        if (this.children.length == 0 || this.length > 20) return null;
        var totalWidth = 0,
          textHeight;
        var _iterator8 = _createForOfIteratorHelper$a(this.children),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var child = _step8.value;
            if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
            var rects = clientRectsFor(child.dom);
            if (rects.length != 1) return null;
            totalWidth += rects[0].width;
            textHeight = rects[0].height;
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        return !totalWidth ? null : {
          lineHeight: this.dom.getBoundingClientRect().height,
          charWidth: totalWidth / this.length,
          textHeight: textHeight
        };
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var rect = coordsInChildren(this, pos, side);
        // Correct rectangle height for empty lines when the returned
        // height is larger than the text height.
        if (!this.children.length && rect && this.parent) {
          var heightOracle = this.parent.view.viewState.heightOracle,
            height = rect.bottom - rect.top;
          if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
            var _dist = (height - heightOracle.textHeight) / 2;
            return {
              top: rect.top + _dist,
              bottom: rect.bottom - _dist,
              left: rect.left,
              right: rect.left
            };
          }
        }
        return rect;
      }
    }, {
      key: "become",
      value: function become(other) {
        return other instanceof LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
    }, {
      key: "covers",
      value: function covers() {
        return true;
      }
    }], [{
      key: "find",
      value: function find(docView, pos) {
        for (var i = 0, off = 0; i < docView.children.length; i++) {
          var block = docView.children[i],
            end = off + block.length;
          if (end >= pos) {
            if (block instanceof LineView) return block;
            if (end > pos) break;
          }
          off = end + block.breakAfter;
        }
        return null;
      }
    }]);
  }(ContentView);
  var BlockWidgetView = /*#__PURE__*/function (_ContentView6) {
    function BlockWidgetView(widget, length, deco) {
      var _this9;
      _classCallCheck(this, BlockWidgetView);
      _this9 = _callSuper$5(this, BlockWidgetView);
      _this9.widget = widget;
      _this9.length = length;
      _this9.deco = deco;
      _this9.breakAfter = 0;
      _this9.prevWidget = null;
      return _this9;
    }
    _inherits(BlockWidgetView, _ContentView6);
    return _createClass(BlockWidgetView, [{
      key: "merge",
      value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        this.length = from + (source ? source.length : 0) + (this.length - to);
        return true;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
    }, {
      key: "split",
      value: function split(at) {
        var len = this.length - at;
        this.length = at;
        var end = new BlockWidgetView(this.widget, len, this.deco);
        end.breakAfter = this.breakAfter;
        return end;
      }
    }, {
      key: "children",
      get: function get() {
        return noChildren;
      }
    }, {
      key: "sync",
      value: function sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable) this.dom.contentEditable = "false";
        }
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "become",
      value: function become(other) {
        if (other instanceof BlockWidgetView && other.widget.constructor == this.widget.constructor) {
          if (!other.widget.compare(this.widget)) this.markDirty(true);
          if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          this.deco = other.deco;
          this.breakAfter = other.breakAfter;
          return true;
        }
        return false;
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation() {
        return true;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
    }, {
      key: "isEditable",
      get: function get() {
        return false;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return true;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom) return custom;
        if (this.widget instanceof BlockGapWidget) return null;
        return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(BlockWidgetView, "destroy", this, 3)([]);
        if (this.dom) this.widget.destroy(this.dom);
      }
    }, {
      key: "covers",
      value: function covers(side) {
        var _this$deco = this.deco,
          startSide = _this$deco.startSide,
          endSide = _this$deco.endSide;
        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
    }]);
  }(ContentView);
  var BlockGapWidget = /*#__PURE__*/function (_WidgetType) {
    function BlockGapWidget(height) {
      var _this10;
      _classCallCheck(this, BlockGapWidget);
      _this10 = _callSuper$5(this, BlockGapWidget);
      _this10.height = height;
      return _this10;
    }
    _inherits(BlockGapWidget, _WidgetType);
    return _createClass(BlockGapWidget, [{
      key: "toDOM",
      value: function toDOM() {
        var elt = document.createElement("div");
        elt.className = "cm-gap";
        this.updateDOM(elt);
        return elt;
      }
    }, {
      key: "eq",
      value: function eq(other) {
        return other.height == this.height;
      }
    }, {
      key: "updateDOM",
      value: function updateDOM(elt) {
        elt.style.height = this.height + "px";
        return true;
      }
    }, {
      key: "editable",
      get: function get() {
        return true;
      }
    }, {
      key: "estimatedHeight",
      get: function get() {
        return this.height;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  var ContentBuilder = /*#__PURE__*/function () {
    function ContentBuilder(doc, pos, end, disallowBlockEffectsFor) {
      _classCallCheck(this, ContentBuilder);
      this.doc = doc;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0 /* Buf.No */;
      this.bufferMarks = [];
      // Set to false directly after a widget that covers the position after it
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc.iter();
      this.skip = pos;
    }
    return _createClass(ContentBuilder, [{
      key: "posCovered",
      value: function posCovered() {
        if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
        var last = this.content[this.content.length - 1];
        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
    }, {
      key: "getLine",
      value: function getLine() {
        if (!this.curLine) {
          this.content.push(this.curLine = new LineView());
          this.atCursorPos = true;
        }
        return this.curLine;
      }
    }, {
      key: "flushBuffer",
      value: function flushBuffer() {
        var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.bufferMarks;
        if (this.pendingBuffer) {
          this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
          this.pendingBuffer = 0 /* Buf.No */;
        }
      }
    }, {
      key: "addBlockWidget",
      value: function addBlockWidget(view) {
        this.flushBuffer();
        this.curLine = null;
        this.content.push(view);
      }
    }, {
      key: "finish",
      value: function finish(openEnd) {
        if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();else this.pendingBuffer = 0 /* Buf.No */;
        if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView)) this.getLine();
      }
    }, {
      key: "buildText",
      value: function buildText(length, active, openStart) {
        while (length > 0) {
          if (this.textOff == this.text.length) {
            var _this$cursor$next = this.cursor.next(this.skip),
              value = _this$cursor$next.value,
              lineBreak = _this$cursor$next.lineBreak,
              done = _this$cursor$next.done;
            this.skip = 0;
            if (done) throw new Error("Ran out of text content when drawing inline views");
            if (lineBreak) {
              if (!this.posCovered()) this.getLine();
              if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
              this.flushBuffer();
              this.curLine = null;
              this.atCursorPos = true;
              length--;
              continue;
            } else {
              this.text = value;
              this.textOff = 0;
            }
          }
          var take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
          this.flushBuffer(active.slice(active.length - openStart));
          this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
          this.atCursorPos = true;
          this.textOff += take;
          length -= take;
          openStart = 0;
        }
      }
    }, {
      key: "span",
      value: function span(from, to, active, openStart) {
        this.buildText(to - from, active, openStart);
        this.pos = to;
        if (this.openStart < 0) this.openStart = openStart;
      }
    }, {
      key: "point",
      value: function point(from, to, deco, active, openStart, index) {
        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
          if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
          if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
        }
        var len = to - from;
        if (deco instanceof PointDecoration) {
          if (deco.block) {
            if (deco.startSide > 0 && !this.posCovered()) this.getLine();
            this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
          } else {
            var view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
            var cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
            var cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
            var line = this.getLine();
            if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable) this.pendingBuffer = 0 /* Buf.No */;
            this.flushBuffer(active);
            if (cursorBefore) {
              line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
              openStart = active.length + Math.max(0, openStart - active.length);
            }
            line.append(wrapMarks(view, active), openStart);
            this.atCursorPos = cursorAfter;
            this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
            if (this.pendingBuffer) this.bufferMarks = active.slice();
          }
        } else if (this.doc.lineAt(this.pos).from == this.pos) {
          // Line decoration
          this.getLine().addLineDeco(deco);
        }
        if (len) {
          // Advance the iterator past the replaced content
          if (this.textOff + len <= this.text.length) {
            this.textOff += len;
          } else {
            this.skip += len - (this.text.length - this.textOff);
            this.text = "";
            this.textOff = 0;
          }
          this.pos = to;
        }
        if (this.openStart < 0) this.openStart = openStart;
      }
    }], [{
      key: "build",
      value: function build(text, from, to, decorations, dynamicDecorationMap) {
        var builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
        builder.openEnd = RangeSet.spans(decorations, from, to, builder);
        if (builder.openStart < 0) builder.openStart = builder.openEnd;
        builder.finish(builder.openEnd);
        return builder;
      }
    }]);
  }();
  function wrapMarks(view, active) {
    var _iterator9 = _createForOfIteratorHelper$a(active),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var mark = _step9.value;
        view = new MarkView(mark, [view], view.length);
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return view;
  }
  var NullWidget = /*#__PURE__*/function (_WidgetType2) {
    function NullWidget(tag) {
      var _this11;
      _classCallCheck(this, NullWidget);
      _this11 = _callSuper$5(this, NullWidget);
      _this11.tag = tag;
      return _this11;
    }
    _inherits(NullWidget, _WidgetType2);
    return _createClass(NullWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.tag == this.tag;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        return document.createElement(this.tag);
      }
    }, {
      key: "updateDOM",
      value: function updateDOM(elt) {
        return elt.nodeName.toLowerCase() == this.tag;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return true;
      }
    }]);
  }(WidgetType);
  NullWidget.inline = /*@__PURE__*/new NullWidget("span");
  NullWidget.block = /*@__PURE__*/new NullWidget("div");

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/function (Direction) {
    // (These are chosen to match the base levels, in bidi algorithm
    // terms, of spans in that direction.)
    /**
    Left-to-right.
    */
    Direction[Direction["LTR"] = 0] = "LTR";
    /**
    Right-to-left.
    */
    Direction[Direction["RTL"] = 1] = "RTL";
    return Direction;
  }(Direction || (Direction = {}));
  var LTR = Direction.LTR,
    RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
    var result = [];
    for (var i = 0; i < str.length; i++) result.push(1 << +str[i]);
    return result;
  }
  // Character types for codepoints 0 to 0xf8
  var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  var Brackets = /*@__PURE__*/Object.create(null),
    BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (var _i3 = 0, _arr$1 = ["()", "[]", "{}"]; _i3 < _arr$1.length; _i3++) {
    var p = _arr$1[_i3];
    var l = /*@__PURE__*/p.charCodeAt(0),
      r = /*@__PURE__*/p.charCodeAt(1);
    Brackets[l] = r;
    Brackets[r] = -l;
  }
  function charType(ch) {
    return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ : 0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
  }
  var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  var BidiSpan = /*#__PURE__*/function () {
    /**
    @internal
    */
    function BidiSpan(
    /**
    The start of the span (relative to the start of the line).
    */
    from,
    /**
    The end of the span.
    */
    to,
    /**
    The ["bidi
    level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
    of the span (in this context, 0 means
    left-to-right, 1 means right-to-left, 2 means left-to-right
    number inside right-to-left text).
    */
    level) {
      _classCallCheck(this, BidiSpan);
      this.from = from;
      this.to = to;
      this.level = level;
    }
    /**
    @internal
    */
    return _createClass(BidiSpan, [{
      key: "dir",
      get:
      /**
      The direction of this span.
      */
      function get() {
        return this.level % 2 ? RTL : LTR;
      }
    }, {
      key: "side",
      value: function side(end, dir) {
        return this.dir == dir == end ? this.to : this.from;
      }
      /**
      @internal
      */
    }, {
      key: "forward",
      value: function forward(_forward, dir) {
        return _forward == (this.dir == dir);
      }
      /**
      @internal
      */
    }], [{
      key: "find",
      value: function find(order, index, level, assoc) {
        var maybe = -1;
        for (var i = 0; i < order.length; i++) {
          var span = order[i];
          if (span.from <= index && span.to >= index) {
            if (span.level == level) return i;
            // When multiple spans match, if assoc != 0, take the one that
            // covers that side, otherwise take the one with the minimum
            // level.
            if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
          }
        }
        if (maybe < 0) throw new RangeError("Index out of range");
        return maybe;
      }
    }]);
  }();
  function isolatesEq(a, b) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) {
      var iA = a[i],
        iB = b[i];
      if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner)) return false;
    }
    return true;
  }
  // Reused array of character types
  var types = [];
  // Fill in the character types (in `types`) from `from` to `to` and
  // apply W normalization rules.
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
    for (var iI = 0; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      var prevType = iI ? 256 /* T.NI */ : outerType;
      // W1. Examine each non-spacing mark (NSM) in the level run, and
      // change the type of the NSM to the type of the previous
      // character. If the NSM is at the start of the level run, it will
      // get the type of sor.
      // W2. Search backwards from each instance of a European number
      // until the first strong type (R, L, AL, or sor) is found. If an
      // AL is found, change the type of the European number to Arabic
      // number.
      // W3. Change all ALs to R.
      // (Left after this: L, R, EN, AN, ET, CS, NI)
      for (var i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
        var type = charType(line.charCodeAt(i));
        if (type == 512 /* T.NSM */) type = prev;else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */) type = 16 /* T.AN */;
        types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
        if (type & 7 /* T.Strong */) prevStrong = type;
        prev = type;
      }
      // W5. A sequence of European terminators adjacent to European
      // numbers changes to all European numbers.
      // W6. Otherwise, separators and terminators change to Other
      // Neutral.
      // W7. Search backwards from each instance of a European number
      // until the first strong type (R, L, or sor) is found. If an L is
      // found, then change the type of the European number to L.
      // (Left after this: L, R, EN+AN, NI)
      for (var _i4 = from, _prev = prevType, _prevStrong = prevType; _i4 < to; _i4++) {
        var _type2 = types[_i4];
        if (_type2 == 128 /* T.CS */) {
          if (_i4 < to - 1 && _prev == types[_i4 + 1] && _prev & 24 /* T.Num */) _type2 = types[_i4] = _prev;else types[_i4] = 256 /* T.NI */;
        } else if (_type2 == 64 /* T.ET */) {
          var end = _i4 + 1;
          while (end < to && types[end] == 64 /* T.ET */) end++;
          var _replace = _i4 && _prev == 8 /* T.EN */ || end < rTo && types[end] == 8 /* T.EN */ ? _prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */ : 256 /* T.NI */;
          for (var j = _i4; j < end; j++) types[j] = _replace;
          _i4 = end - 1;
        } else if (_type2 == 8 /* T.EN */ && _prevStrong == 1 /* T.L */) {
          types[_i4] = 1 /* T.L */;
        }
        _prev = _type2;
        if (_type2 & 7 /* T.Strong */) _prevStrong = _type2;
      }
    }
  }
  // Process brackets throughout a run sequence.
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
    var oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
    for (var iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      // N0. Process bracket pairs in an isolating run sequence
      // sequentially in the logical order of the text positions of the
      // opening paired brackets using the logic given below. Within this
      // scope, bidirectional types EN and AN are treated as R.
      for (var i = from, ch, br, type; i < to; i++) {
        // Keeps [startIndex, type, strongSeen] triples for each open
        // bracket on BracketStack.
        if (br = Brackets[ch = line.charCodeAt(i)]) {
          if (br < 0) {
            // Closing bracket
            for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
              if (BracketStack[sJ + 1] == -br) {
                var flags = BracketStack[sJ + 2];
                var _type3 = flags & 2 /* Bracketed.EmbedInside */ ? outerType : !(flags & 4 /* Bracketed.OppositeInside */) ? 0 : flags & 1 /* Bracketed.OppositeBefore */ ? oppositeType : outerType;
                if (_type3) types[i] = types[BracketStack[sJ]] = _type3;
                sI = sJ;
                break;
              }
            }
          } else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
            break;
          } else {
            BracketStack[sI++] = i;
            BracketStack[sI++] = ch;
            BracketStack[sI++] = context;
          }
        } else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
          var embed = type == outerType;
          context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
          for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
            var cur = BracketStack[_sJ + 2];
            if (cur & 2 /* Bracketed.EmbedInside */) break;
            if (embed) {
              BracketStack[_sJ + 2] |= 2 /* Bracketed.EmbedInside */;
            } else {
              if (cur & 4 /* Bracketed.OppositeInside */) break;
              BracketStack[_sJ + 2] |= 4 /* Bracketed.OppositeInside */;
            }
          }
        }
      }
    }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
    for (var iI = 0, prev = outerType; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      // N1. A sequence of neutrals takes the direction of the
      // surrounding strong text if the text on both sides has the same
      // direction. European and Arabic numbers act as if they were R in
      // terms of their influence on neutrals. Start-of-level-run (sor)
      // and end-of-level-run (eor) are used at level run boundaries.
      // N2. Any remaining neutrals take the embedding direction.
      // (Left after this: L, R, EN+AN)
      for (var i = from; i < to;) {
        var type = types[i];
        if (type == 256 /* T.NI */) {
          var end = i + 1;
          for (;;) {
            if (end == to) {
              if (iI == isolates.length) break;
              end = isolates[iI++].to;
              to = iI < isolates.length ? isolates[iI].from : rTo;
            } else if (types[end] == 256 /* T.NI */) {
              end++;
            } else {
              break;
            }
          }
          var beforeL = prev == 1 /* T.L */;
          var afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
          var _replace2 = beforeL == afterL ? beforeL ? 1 /* T.L */ : 2 /* T.R */ : outerType;
          for (var j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
            if (j == fromJ) {
              j = isolates[--jI].from;
              fromJ = jI ? isolates[jI - 1].to : rFrom;
            }
            types[--j] = _replace2;
          }
          i = end;
        } else {
          prev = type;
          i++;
        }
      }
    }
  }
  // Find the contiguous ranges of character types in a given range, and
  // emit spans for them. Flip the order of the spans as appropriate
  // based on the level, and call through to compute the spans for
  // isolates at the proper point.
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
    var ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
    if (level % 2 == baseLevel % 2) {
      // Same dir as base direction, don't flip
      for (var iCh = from, iI = 0; iCh < to;) {
        // Scan a section of characters in direction ourType, unless
        // there's another type of char right after iCh, in which case
        // we scan a section of other characters (which, if ourType ==
        // T.L, may contain both T.R and T.AN chars).
        var sameDir = true,
          isNum = false;
        if (iI == isolates.length || iCh < isolates[iI].from) {
          var next = types[iCh];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16 /* T.AN */;
          }
        }
        // Holds an array of isolates to pass to a recursive call if we
        // must recurse (to distinguish T.AN inside an RTL section in
        // LTR text), null if we can emit directly
        var recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
        var localLevel = sameDir ? level : level + 1;
        var iScan = iCh;
        run: for (;;) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum) break run;
            var iso = isolates[iI];
            // Scan ahead to verify that there is another char in this dir after the isolate(s)
            if (!sameDir) for (var upto = iso.to, jI = iI + 1;;) {
              if (upto == to) break run;
              if (jI < isolates.length && isolates[jI].from == upto) upto = isolates[jI++].to;else if (types[upto] == ourType) break run;else break;
            }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh) order.push(new BidiSpan(iCh, iso.from, localLevel));
              var dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
        if (recurse) emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);else if (iCh < iScan) order.push(new BidiSpan(iCh, iScan, localLevel));
        iCh = iScan;
      }
    } else {
      // Iterate in reverse to flip the span order. Same code again, but
      // going from the back of the section to the front
      for (var _iCh = to, _iI = isolates.length; _iCh > from;) {
        var _sameDir = true,
          _isNum = false;
        if (!_iI || _iCh > isolates[_iI - 1].to) {
          var _next = types[_iCh - 1];
          if (_next != ourType) {
            _sameDir = false;
            _isNum = _next == 16 /* T.AN */;
          }
        }
        var _recurse = !_sameDir && ourType == 1 /* T.L */ ? [] : null;
        var _localLevel = _sameDir ? level : level + 1;
        var _iScan = _iCh;
        run: for (;;) {
          if (_iI && _iScan == isolates[_iI - 1].to) {
            if (_isNum) break run;
            var _iso = isolates[--_iI];
            // Scan ahead to verify that there is another char in this dir after the isolate(s)
            if (!_sameDir) for (var _upto = _iso.from, _jI = _iI;;) {
              if (_upto == from) break run;
              if (_jI && isolates[_jI - 1].to == _upto) _upto = isolates[--_jI].from;else if (types[_upto - 1] == ourType) break run;else break;
            }
            if (_recurse) {
              _recurse.push(_iso);
            } else {
              if (_iso.to < _iCh) order.push(new BidiSpan(_iso.to, _iCh, _localLevel));
              var _dirSwap = _iso.direction == LTR != !(_localLevel % 2);
              computeSectionOrder(line, _dirSwap ? level + 1 : level, baseLevel, _iso.inner, _iso.from, _iso.to, order);
              _iCh = _iso.from;
            }
            _iScan = _iso.from;
          } else if (_iScan == from || (_sameDir ? types[_iScan - 1] != ourType : types[_iScan - 1] == ourType)) {
            break;
          } else {
            _iScan--;
          }
        }
        if (_recurse) emitSpans(line, _iScan, _iCh, level + 1, baseLevel, _recurse, order);else if (_iScan < _iCh) order.push(new BidiSpan(_iScan, _iCh, _localLevel));
        _iCh = _iScan;
      }
    }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
    var outerType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
    computeCharTypes(line, from, to, isolates, outerType);
    processBracketPairs(line, from, to, isolates, outerType);
    processNeutrals(from, to, isolates, outerType);
    emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
    if (!line) return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
    if (direction == LTR && !isolates.length && !BidiRE.test(line)) return trivialOrder(line.length);
    if (isolates.length) while (line.length > types.length) types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
    var order = [],
      level = direction == LTR ? 0 : 1;
    computeSectionOrder(line, level, level, isolates, 0, line.length, order);
    return order;
  }
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  var movedOver = "";
  // This implementation moves strictly visually, without concern for a
  // traversal visiting every logical position in the string. It will
  // still do so for simple input, but situations like multiple isolates
  // with the same level next to each other, or text going against the
  // main dir at the end of the line, will make some positions
  // unreachable with this motion. Each visible cursor position will
  // correspond to the lower-level bidi span that touches it.
  //
  // The alternative would be to solve an order globally for a given
  // line, making sure that it includes every position, but that would
  // require associating non-canonical (higher bidi span level)
  // positions with a given visual position, which is likely to confuse
  // people. (And would generally be a lot more complicated.)
  function moveVisually(line, order, dir, start, forward) {
    var _a;
    var startIndex = start.head - line.from;
    var spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
    var span = order[spanI],
      spanEnd = span.side(forward, dir);
    // End of span
    if (startIndex == spanEnd) {
      var nextI = spanI += forward ? 1 : -1;
      if (nextI < 0 || nextI >= order.length) return null;
      span = order[spanI = nextI];
      startIndex = span.side(!forward, dir);
      spanEnd = span.side(forward, dir);
    }
    var nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
    if (nextIndex < span.from || nextIndex > span.to) nextIndex = spanEnd;
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level) return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
    for (var i = from; i < to; i++) {
      var type = charType(text.charCodeAt(i));
      if (type == 1 /* T.L */) return LTR;
      if (type == 2 /* T.R */ || type == 4 /* T.AL */) return RTL;
    }
    return LTR;
  }
  var clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  var dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  var mouseSelectionStyle = /*@__PURE__*/Facet.define();
  var exceptionSink = /*@__PURE__*/Facet.define();
  var updateListener = /*@__PURE__*/Facet.define();
  var inputHandler$1 = /*@__PURE__*/Facet.define();
  var focusChangeEffect = /*@__PURE__*/Facet.define();
  var clipboardInputFilter = /*@__PURE__*/Facet.define();
  var clipboardOutputFilter = /*@__PURE__*/Facet.define();
  var perLineTextDirection = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  var nativeSelectionHidden = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  var scrollHandler = /*@__PURE__*/Facet.define();
  var ScrollTarget = /*#__PURE__*/function () {
    function ScrollTarget(range) {
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "nearest";
      var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "nearest";
      var yMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
      var xMargin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;
      var isSnapshot = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      _classCallCheck(this, ScrollTarget);
      this.range = range;
      this.y = y;
      this.x = x;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
      this.isSnapshot = isSnapshot;
    }
    return _createClass(ScrollTarget, [{
      key: "map",
      value: function map(changes) {
        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    }, {
      key: "clip",
      value: function clip(state) {
        return this.range.to <= state.doc.length ? this : new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    }]);
  }();
  var _scrollIntoView2 = /*@__PURE__*/StateEffect.define({
    map: function map(t, ch) {
      return t.map(ch);
    }
  });
  var setEditContextFormatting = /*@__PURE__*/StateEffect.define();
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
    var handler = state.facet(exceptionSink);
    if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
  }
  var editable = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : true;
    }
  });
  var nextPluginID = 0;
  var viewPlugin = /*@__PURE__*/Facet.define();
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view.
  */
  var ViewPlugin = /*#__PURE__*/function () {
    function ViewPlugin(
    /**
    @internal
    */
    id,
    /**
    @internal
    */
    create,
    /**
    @internal
    */
    domEventHandlers,
    /**
    @internal
    */
    domEventObservers, buildExtensions) {
      _classCallCheck(this, ViewPlugin);
      this.id = id;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.domEventObservers = domEventObservers;
      this.extension = buildExtensions(this);
    }
    /**
    Define a plugin from a constructor function that creates the
    plugin's value, given an editor view.
    */
    return _createClass(ViewPlugin, null, [{
      key: "define",
      value: function define(create, spec) {
        var _ref = spec || {},
          eventHandlers = _ref.eventHandlers,
          eventObservers = _ref.eventObservers,
          provide = _ref.provide,
          deco = _ref.decorations;
        return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, function (plugin) {
          var ext = [viewPlugin.of(plugin)];
          if (deco) ext.push(decorations.of(function (view) {
            var pluginInst = view.plugin(plugin);
            return pluginInst ? deco(pluginInst) : Decoration.none;
          }));
          if (provide) ext.push(provide(plugin));
          return ext;
        });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
    }, {
      key: "fromClass",
      value: function fromClass(cls, spec) {
        return ViewPlugin.define(function (view) {
          return new cls(view);
        }, spec);
      }
    }]);
  }();
  var PluginInstance = /*#__PURE__*/function () {
    function PluginInstance(spec) {
      _classCallCheck(this, PluginInstance);
      this.spec = spec;
      // When starting an update, all plugins have this field set to the
      // update object, indicating they need to be updated. When finished
      // updating, it is set to `false`. Retrieving a plugin that needs to
      // be updated with `view.plugin` forces an eager update.
      this.mustUpdate = null;
      // This is null when the plugin is initially created, but
      // initialized on the first update.
      this.value = null;
    }
    return _createClass(PluginInstance, [{
      key: "update",
      value: function update(view) {
        if (!this.value) {
          if (this.spec) {
            try {
              this.value = this.spec.create(view);
            } catch (e) {
              logException(view.state, e, "CodeMirror plugin crashed");
              this.deactivate();
            }
          }
        } else if (this.mustUpdate) {
          var _update = this.mustUpdate;
          this.mustUpdate = null;
          if (this.value.update) {
            try {
              this.value.update(_update);
            } catch (e) {
              logException(_update.state, e, "CodeMirror plugin crashed");
              if (this.value.destroy) try {
                this.value.destroy();
              } catch (_) {}
              this.deactivate();
            }
          }
        }
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy(view) {
        var _a;
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
          try {
            this.value.destroy();
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
          }
        }
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        this.spec = this.value = null;
      }
    }]);
  }();
  var editorAttributes = /*@__PURE__*/Facet.define();
  var contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  var decorations = /*@__PURE__*/Facet.define();
  var outerDecorations = /*@__PURE__*/Facet.define();
  var atomicRanges = /*@__PURE__*/Facet.define();
  var bidiIsolatedRanges = /*@__PURE__*/Facet.define();
  function getIsolatedRanges(view, line) {
    var isolates = view.state.facet(bidiIsolatedRanges);
    if (!isolates.length) return isolates;
    var sets = isolates.map(function (i) {
      return i instanceof Function ? i(view) : i;
    });
    var result = [];
    RangeSet.spans(sets, line.from, line.to, {
      point: function point() {},
      span: function span(fromDoc, toDoc, active, open) {
        var from = fromDoc - line.from,
          to = toDoc - line.from;
        var level = result;
        for (var i = active.length - 1; i >= 0; i--, open--) {
          var direction = active[i].spec.bidiIsolate,
            update = void 0;
          if (direction == null) direction = autoDirection(line.text, from, to);
          if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
            update.to = to;
            level = update.inner;
          } else {
            var add = {
              from: from,
              to: to,
              direction: direction,
              inner: []
            };
            level.push(add);
            level = add.inner;
          }
        }
      }
    });
    return result;
  }
  var scrollMargins = /*@__PURE__*/Facet.define();
  function getScrollMargins(view) {
    var left = 0,
      right = 0,
      top = 0,
      bottom = 0;
    var _iterator10 = _createForOfIteratorHelper$a(view.state.facet(scrollMargins)),
      _step10;
    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var source = _step10.value;
        var m = source(view);
        if (m) {
          if (m.left != null) left = Math.max(left, m.left);
          if (m.right != null) right = Math.max(right, m.right);
          if (m.top != null) top = Math.max(top, m.top);
          if (m.bottom != null) bottom = Math.max(bottom, m.bottom);
        }
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
    return {
      left: left,
      right: right,
      top: top,
      bottom: bottom
    };
  }
  var styleModule = /*@__PURE__*/Facet.define();
  var ChangedRange = /*#__PURE__*/function () {
    function ChangedRange(fromA, toA, fromB, toB) {
      _classCallCheck(this, ChangedRange);
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    return _createClass(ChangedRange, [{
      key: "join",
      value: function join(other) {
        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
    }, {
      key: "addToSet",
      value: function addToSet(set) {
        var i = set.length,
          me = this;
        for (; i > 0; i--) {
          var range = set[i - 1];
          if (range.fromA > me.toA) continue;
          if (range.toA < me.fromA) break;
          me = me.join(range);
          set.splice(i - 1, 1);
        }
        set.splice(i, 0, me);
        return set;
      }
    }], [{
      key: "extendWithRanges",
      value: function extendWithRanges(diff, ranges) {
        if (ranges.length == 0) return diff;
        var result = [];
        for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
          var next = dI == diff.length ? null : diff[dI],
            off = posA - posB;
          var end = next ? next.fromB : 1e9;
          while (rI < ranges.length && ranges[rI] < end) {
            var from = ranges[rI],
              to = ranges[rI + 1];
            var fromB = Math.max(posB, from),
              toB = Math.min(end, to);
            if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
            if (to > end) break;else rI += 2;
          }
          if (!next) return result;
          new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
          posA = next.toA;
          posB = next.toB;
        }
      }
    }]);
  }();
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  var ViewUpdate = /*#__PURE__*/function () {
    function ViewUpdate(
    /**
    The editor view that the update is associated with.
    */
    view,
    /**
    The new editor state.
    */
    state,
    /**
    The transactions involved in the update. May be empty.
    */
    transactions) {
      _classCallCheck(this, ViewUpdate);
      this.view = view;
      this.state = state;
      this.transactions = transactions;
      /**
      @internal
      */
      this.flags = 0;
      this.startState = view.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      var _iterator11 = _createForOfIteratorHelper$a(transactions),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var tr = _step11.value;
          this.changes = this.changes.compose(tr.changes);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      var changedRanges = [];
      this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
        return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
      });
      this.changedRanges = changedRanges;
    }
    /**
    @internal
    */
    return _createClass(ViewUpdate, [{
      key: "viewportChanged",
      get:
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      function get() {
        return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
    }, {
      key: "viewportMoved",
      get: function get() {
        return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
    }, {
      key: "heightChanged",
      get: function get() {
        return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
    }, {
      key: "geometryChanged",
      get: function get() {
        return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
    }, {
      key: "focusChanged",
      get: function get() {
        return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
    }, {
      key: "docChanged",
      get: function get() {
        return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
    }, {
      key: "selectionSet",
      get: function get() {
        return this.transactions.some(function (tr) {
          return tr.selection;
        });
      }
      /**
      @internal
      */
    }, {
      key: "empty",
      get: function get() {
        return this.flags == 0 && this.transactions.length == 0;
      }
    }], [{
      key: "create",
      value: function create(view, state, transactions) {
        return new ViewUpdate(view, state, transactions);
      }
    }]);
  }();
  var DocView = /*#__PURE__*/function (_ContentView7) {
    function DocView(view) {
      var _this12;
      _classCallCheck(this, DocView);
      _this12 = _callSuper$5(this, DocView);
      _this12.view = view;
      _this12.decorations = [];
      _this12.dynamicDecorationMap = [false];
      _this12.domChanged = null;
      _this12.hasComposition = null;
      _this12.markedForComposition = new Set();
      _this12.editContextFormatting = Decoration.none;
      _this12.lastCompositionAfterCursor = false;
      // Track a minimum width for the editor. When measuring sizes in
      // measureVisibleLineHeights, this is updated to point at the width
      // of a given element and its extent in the document. When a change
      // happens in that range, these are reset. That way, once we've seen
      // a line/element of a given length, we keep the editor wide enough
      // to fit at least that element, until it is changed, at which point
      // we forget it again.
      _this12.minWidth = 0;
      _this12.minWidthFrom = 0;
      _this12.minWidthTo = 0;
      // Track whether the DOM selection was set in a lossy way, so that
      // we don't mess it up when reading it back it
      _this12.impreciseAnchor = null;
      _this12.impreciseHead = null;
      _this12.forceSelection = false;
      // Used by the resize observer to ignore resizes that we caused
      // ourselves
      _this12.lastUpdate = Date.now();
      _this12.setDOM(view.contentDOM);
      _this12.children = [new LineView()];
      _this12.children[0].setParent(_this12);
      _this12.updateDeco();
      _this12.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      return _this12;
    }
    // Update the document view to a given state.
    _inherits(DocView, _ContentView7);
    return _createClass(DocView, [{
      key: "length",
      get: function get() {
        return this.view.state.doc.length;
      }
    }, {
      key: "update",
      value: function update(_update2) {
        var _this13 = this;
        var _a;
        var changedRanges = _update2.changedRanges;
        if (this.minWidth > 0 && changedRanges.length) {
          if (!changedRanges.every(function (_ref2) {
            var fromA = _ref2.fromA,
              toA = _ref2.toA;
            return toA < _this13.minWidthFrom || fromA > _this13.minWidthTo;
          })) {
            this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
          } else {
            this.minWidthFrom = _update2.changes.mapPos(this.minWidthFrom, 1);
            this.minWidthTo = _update2.changes.mapPos(this.minWidthTo, 1);
          }
        }
        this.updateEditContextFormatting(_update2);
        var readCompositionAt = -1;
        if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
          if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel) readCompositionAt = this.domChanged.newSel.head;else if (!touchesComposition(_update2.changes, this.hasComposition) && !_update2.selectionSet) readCompositionAt = _update2.state.selection.main.head;
        }
        var composition = readCompositionAt > -1 ? findCompositionRange(this.view, _update2.changes, readCompositionAt) : null;
        this.domChanged = null;
        if (this.hasComposition) {
          this.markedForComposition.clear();
          var _this$hasComposition = this.hasComposition,
            from = _this$hasComposition.from,
            to = _this$hasComposition.to;
          changedRanges = new ChangedRange(from, to, _update2.changes.mapPos(from, -1), _update2.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
        }
        this.hasComposition = composition ? {
          from: composition.range.fromB,
          to: composition.range.toB
        } : null;
        // When the DOM nodes around the selection are moved to another
        // parent, Chrome sometimes reports a different selection through
        // getSelection than the one that it actually shows to the user.
        // This forces a selection update when lines are joined to work
        // around that. Issue #54
        if ((browser.ie || browser.chrome) && !composition && _update2 && _update2.state.doc.lines != _update2.startState.doc.lines) this.forceSelection = true;
        var prevDeco = this.decorations,
          deco = this.updateDeco();
        var decoDiff = findChangedDeco(prevDeco, deco, _update2.changes);
        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
        if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
          return false;
        } else {
          this.updateInner(changedRanges, _update2.startState.doc.length, composition);
          if (_update2.transactions.length) this.lastUpdate = Date.now();
          return true;
        }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
    }, {
      key: "updateInner",
      value: function updateInner(changes, oldLength, composition) {
        var _this14 = this;
        this.view.viewState.mustMeasureContent = true;
        this.updateChildren(changes, oldLength, composition);
        var observer = this.view.observer;
        observer.ignore(function () {
          // Lock the height during redrawing, since Chrome sometimes
          // messes with the scroll position during DOM mutation (though
          // no relayout is triggered and I cannot imagine how it can
          // recompute the scroll position without a layout)
          _this14.dom.style.height = _this14.view.viewState.contentHeight / _this14.view.scaleY + "px";
          _this14.dom.style.flexBasis = _this14.minWidth ? _this14.minWidth + "px" : "";
          // Chrome will sometimes, when DOM mutations occur directly
          // around the selection, get confused and report a different
          // selection from the one it displays (issue #218). This tries
          // to detect that situation.
          var track = browser.chrome || browser.ios ? {
            node: observer.selectionRange.focusNode,
            written: false
          } : undefined;
          _this14.sync(_this14.view, track);
          _this14.flags &= -8 /* ViewFlag.Dirty */;
          if (track && (track.written || observer.selectionRange.focusNode != track.node)) _this14.forceSelection = true;
          _this14.dom.style.height = "";
        });
        this.markedForComposition.forEach(function (cView) {
          return cView.flags &= -9;
        } /* ViewFlag.Composition */);
        var gaps = [];
        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
          var _iterator12 = _createForOfIteratorHelper$a(this.children),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var child = _step12.value;
              if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
        observer.updateGaps(gaps);
      }
    }, {
      key: "updateChildren",
      value: function updateChildren(changes, oldLength, composition) {
        var ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
        var cursor = this.childCursor(oldLength);
        for (var i = ranges.length - 1;; i--) {
          var next = i >= 0 ? ranges[i] : null;
          if (!next) break;
          var fromA = next.fromA,
            toA = next.toA,
            fromB = next.fromB,
            toB = next.toB,
            content = void 0,
            breakAtStart = void 0,
            openStart = void 0,
            openEnd = void 0;
          if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
            var before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
            var after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
            breakAtStart = before.breakAtStart;
            openStart = before.openStart;
            openEnd = after.openEnd;
            var compLine = this.compositionView(composition);
            if (after.breakAtStart) {
              compLine.breakAfter = 1;
            } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
              compLine.breakAfter = after.content[0].breakAfter;
              after.content.shift();
            }
            if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
              before.content.pop();
            }
            content = before.content.concat(compLine).concat(after.content);
          } else {
            var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
            content = _ContentBuilder$build.content;
            breakAtStart = _ContentBuilder$build.breakAtStart;
            openStart = _ContentBuilder$build.openStart;
            openEnd = _ContentBuilder$build.openEnd;
          }
          var _cursor$findPos = cursor.findPos(toA, 1),
            toI = _cursor$findPos.i,
            toOff = _cursor$findPos.off;
          var _cursor$findPos2 = cursor.findPos(fromA, -1),
            fromI = _cursor$findPos2.i,
            fromOff = _cursor$findPos2.off;
          replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
        }
        if (composition) this.fixCompositionDOM(composition);
      }
    }, {
      key: "updateEditContextFormatting",
      value: function updateEditContextFormatting(update) {
        this.editContextFormatting = this.editContextFormatting.map(update.changes);
        var _iterator13 = _createForOfIteratorHelper$a(update.transactions),
          _step13;
        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var tr = _step13.value;
            var _iterator14 = _createForOfIteratorHelper$a(tr.effects),
              _step14;
            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var effect = _step14.value;
                if (effect.is(setEditContextFormatting)) {
                  this.editContextFormatting = effect.value;
                }
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      }
    }, {
      key: "compositionView",
      value: function compositionView(composition) {
        var cur = new TextView(composition.text.nodeValue);
        cur.flags |= 8 /* ViewFlag.Composition */;
        var _iterator15 = _createForOfIteratorHelper$a(composition.marks),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var deco = _step15.value.deco;
            cur = new MarkView(deco, [cur], cur.length);
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
        var line = new LineView();
        line.append(cur, 0);
        return line;
      }
    }, {
      key: "fixCompositionDOM",
      value: function fixCompositionDOM(composition) {
        var _this15 = this;
        var fix = function fix(dom, cView) {
          cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(function (c) {
            return c.flags & 7;
          } /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
          _this15.markedForComposition.add(cView);
          var prev = ContentView.get(dom);
          if (prev && prev != cView) prev.dom = null;
          cView.setDOM(dom);
        };
        var pos = this.childPos(composition.range.fromB, 1);
        var cView = this.children[pos.i];
        fix(composition.line, cView);
        for (var i = composition.marks.length - 1; i >= -1; i--) {
          pos = cView.childPos(pos.off, 1);
          cView = cView.children[pos.i];
          fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
        }
      }
      // Sync the DOM selection to this.state.selection
    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var _this16 = this;
        var mustRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
        var activeElt = this.view.root.activeElement,
          focused = activeElt == this.dom;
        var selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
        if (!(focused || fromPointer || selectionNotFocus)) return;
        var force = this.forceSelection;
        this.forceSelection = false;
        var main = this.view.state.selection.main;
        var anchor = this.moveToLine(this.domAtPos(main.anchor));
        var head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
        // Always reset on Firefox when next to an uneditable node to
        // avoid invisible cursor bugs (#111)
        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
          var dummy = document.createTextNode("");
          this.view.observer.ignore(function () {
            return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
          });
          anchor = head = new DOMPos(dummy, 0);
          force = true;
        }
        var domSel = this.view.observer.selectionRange;
        // If the selection is already here, or in an equivalent position, don't touch it
        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
          this.view.observer.ignore(function () {
            // Chrome Android will hide the virtual keyboard when tapping
            // inside an uneditable node, and not bring it back when we
            // move the cursor to its proper position. This tries to
            // restore the keyboard by cycling focus.
            if (browser.android && browser.chrome && _this16.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, _this16.dom)) {
              _this16.dom.blur();
              _this16.dom.focus({
                preventScroll: true
              });
            }
            var rawSel = getSelection(_this16.view.root);
            if (!rawSel) ;else if (main.empty) {
              // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
              if (browser.gecko) {
                var nextTo = nextToUneditable(anchor.node, anchor.offset);
                if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                  var text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                  if (text) anchor = new DOMPos(text.node, text.offset);
                }
              }
              rawSel.collapse(anchor.node, anchor.offset);
              if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined) rawSel.caretBidiLevel = main.bidiLevel;
            } else if (rawSel.extend) {
              // Selection.extend can be used to create an 'inverted' selection
              // (one where the focus is before the anchor), but not all
              // browsers support it yet.
              rawSel.collapse(anchor.node, anchor.offset);
              // Safari will ignore the call above when the editor is
              // hidden, and then raise an error on the call to extend
              // (#940).
              try {
                rawSel.extend(head.node, head.offset);
              } catch (_) {}
            } else {
              // Primitive (IE) way
              var range = document.createRange();
              if (main.anchor > main.head) {
                var _ref3 = [head, anchor];
                anchor = _ref3[0];
                head = _ref3[1];
              }
              range.setEnd(head.node, head.offset);
              range.setStart(anchor.node, anchor.offset);
              rawSel.removeAllRanges();
              rawSel.addRange(range);
            }
            if (selectionNotFocus && _this16.view.root.activeElement == _this16.dom) {
              _this16.dom.blur();
              if (activeElt) activeElt.focus();
            }
          });
          this.view.observer.setSelectionRange(anchor, head);
        }
        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
    }, {
      key: "suppressWidgetCursorChange",
      value: function suppressWidgetCursorChange(sel, cursor) {
        return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
    }, {
      key: "enforceCursorAssoc",
      value: function enforceCursorAssoc() {
        if (this.hasComposition) return;
        var view = this.view,
          cursor = view.state.selection.main;
        var sel = getSelection(view.root);
        var _view$observer$select = view.observer.selectionRange,
          anchorNode = _view$observer$select.anchorNode,
          anchorOffset = _view$observer$select.anchorOffset;
        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
        var line = LineView.find(this, cursor.head);
        if (!line) return;
        var lineStart = line.posAtStart;
        if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
        var before = this.coordsAt(cursor.head, -1),
          after = this.coordsAt(cursor.head, 1);
        if (!before || !after || before.bottom > after.top) return;
        var dom = this.domAtPos(cursor.head + cursor.assoc);
        sel.collapse(dom.node, dom.offset);
        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        // This can go wrong in corner cases like single-character lines,
        // so check and reset if necessary.
        view.observer.readSelectionRange();
        var newRange = view.observer.selectionRange;
        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
    }, {
      key: "moveToLine",
      value: function moveToLine(pos) {
        // Block widgets will return positions before/after them, which
        // are thus directly in the document DOM element.
        var dom = this.dom,
          newPos;
        if (pos.node != dom) return pos;
        for (var i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
          var view = ContentView.get(dom.childNodes[i]);
          if (view instanceof LineView) newPos = view.domAtPos(0);
        }
        for (var _i5 = pos.offset - 1; !newPos && _i5 >= 0; _i5--) {
          var _view2 = ContentView.get(dom.childNodes[_i5]);
          if (_view2 instanceof LineView) newPos = _view2.domAtPos(_view2.length);
        }
        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
    }, {
      key: "nearest",
      value: function nearest(dom) {
        for (var cur = dom; cur;) {
          var domView = ContentView.get(cur);
          if (domView && domView.rootView == this) return domView;
          cur = cur.parentNode;
        }
        return null;
      }
    }, {
      key: "posFromDOM",
      value: function posFromDOM(node, offset) {
        var view = this.nearest(node);
        if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
        return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
          i = _this$childCursor$fin.i,
          off = _this$childCursor$fin.off;
        for (; i < this.children.length - 1;) {
          var child = this.children[i];
          if (off < child.length || child instanceof LineView) break;
          i++;
          off = 0;
        }
        return this.children[i].domAtPos(off);
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var best = null,
          bestPos = 0;
        for (var off = this.length, i = this.children.length - 1; i >= 0; i--) {
          var child = this.children[i],
            end = off - child.breakAfter,
            start = end - child.length;
          if (end < pos) break;
          if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
            best = child;
            bestPos = start;
          } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
            if (child.deco.startSide < 0) break;else if (i) best = null;
          }
          off = start;
        }
        return best ? best.coordsAt(pos - bestPos, side) : null;
      }
    }, {
      key: "coordsForChar",
      value: function coordsForChar(pos) {
        var _this$childPos2 = this.childPos(pos, 1),
          i = _this$childPos2.i,
          off = _this$childPos2.off,
          child = this.children[i];
        if (!(child instanceof LineView)) return null;
        while (child.children.length) {
          var _child$childPos = child.childPos(off, 1),
            _i6 = _child$childPos.i,
            childOff = _child$childPos.off;
          for (;; _i6++) {
            if (_i6 == child.children.length) return null;
            if ((child = child.children[_i6]).length) break;
          }
          off = childOff;
        }
        if (!(child instanceof TextView)) return null;
        var end = findClusterBreak(child.text, off);
        if (end == off) return null;
        var rects = textRange(child.dom, off, end).getClientRects();
        for (var _i7 = 0; _i7 < rects.length; _i7++) {
          var rect = rects[_i7];
          if (_i7 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right) return rect;
        }
        return null;
      }
    }, {
      key: "measureVisibleLineHeights",
      value: function measureVisibleLineHeights(viewport) {
        var result = [],
          from = viewport.from,
          to = viewport.to;
        var contentWidth = this.view.contentDOM.clientWidth;
        var isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
        var widest = -1,
          ltr = this.view.textDirection == Direction.LTR;
        for (var pos = 0, i = 0; i < this.children.length; i++) {
          var child = this.children[i],
            end = pos + child.length;
          if (end > to) break;
          if (pos >= from) {
            var childRect = child.dom.getBoundingClientRect();
            result.push(childRect.height);
            if (isWider) {
              var last = child.dom.lastChild;
              var rects = last ? clientRectsFor(last) : [];
              if (rects.length) {
                var rect = rects[rects.length - 1];
                var width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                if (width > widest) {
                  widest = width;
                  this.minWidth = contentWidth;
                  this.minWidthFrom = pos;
                  this.minWidthTo = end;
                }
              }
            }
          }
          pos = end + child.breakAfter;
        }
        return result;
      }
    }, {
      key: "textDirectionAt",
      value: function textDirectionAt(pos) {
        var _this$childPos3 = this.childPos(pos, 1),
          i = _this$childPos3.i;
        return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
    }, {
      key: "measureTextSize",
      value: function measureTextSize() {
        var _this17 = this;
        var _iterator16 = _createForOfIteratorHelper$a(this.children),
          _step16;
        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var child = _step16.value;
            if (child instanceof LineView) {
              var measure = child.measureTextSize();
              if (measure) return measure;
            }
          }
          // If no workable line exists, force a layout of a measurable element
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
        var dummy = document.createElement("div"),
          lineHeight,
          charWidth,
          textHeight;
        dummy.className = "cm-line";
        dummy.style.width = "99999px";
        dummy.style.position = "absolute";
        dummy.textContent = "abc def ghi jkl mno pqr stu";
        this.view.observer.ignore(function () {
          _this17.dom.appendChild(dummy);
          var rect = clientRectsFor(dummy.firstChild)[0];
          lineHeight = dummy.getBoundingClientRect().height;
          charWidth = rect ? rect.width / 27 : 7;
          textHeight = rect ? rect.height : lineHeight;
          dummy.remove();
        });
        return {
          lineHeight: lineHeight,
          charWidth: charWidth,
          textHeight: textHeight
        };
      }
    }, {
      key: "childCursor",
      value: function childCursor() {
        var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
        // Move back to start of last element when possible, so that
        // `ChildCursor.findPos` doesn't have to deal with the edge case
        // of being after the last element.
        var i = this.children.length;
        if (i) pos -= this.children[--i].length;
        return new ChildCursor(this.children, pos, i);
      }
    }, {
      key: "computeBlockGapDeco",
      value: function computeBlockGapDeco() {
        var deco = [],
          vs = this.view.viewState;
        for (var pos = 0, i = 0;; i++) {
          var next = i == vs.viewports.length ? null : vs.viewports[i];
          var end = next ? next.from - 1 : this.length;
          if (end > pos) {
            var height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
            deco.push(Decoration.replace({
              widget: new BlockGapWidget(height),
              block: true,
              inclusive: true,
              isBlockGap: true
            }).range(pos, end));
          }
          if (!next) break;
          pos = next.to + 1;
        }
        return Decoration.set(deco);
      }
    }, {
      key: "updateDeco",
      value: function updateDeco() {
        var _this18 = this;
        var i = 1;
        var allDeco = this.view.state.facet(decorations).map(function (d) {
          var dynamic = _this18.dynamicDecorationMap[i++] = typeof d == "function";
          return dynamic ? d(_this18.view) : d;
        });
        var dynamicOuter = false,
          outerDeco = this.view.state.facet(outerDecorations).map(function (d, i) {
            var dynamic = typeof d == "function";
            if (dynamic) dynamicOuter = true;
            return dynamic ? d(_this18.view) : d;
          });
        if (outerDeco.length) {
          this.dynamicDecorationMap[i++] = dynamicOuter;
          allDeco.push(RangeSet.join(outerDeco));
        }
        this.decorations = [this.editContextFormatting].concat(_toConsumableArray(allDeco), [this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
        while (i < this.decorations.length) this.dynamicDecorationMap[i++] = false;
        return this.decorations;
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView(target) {
        if (target.isSnapshot) {
          var ref = this.view.viewState.lineBlockAt(target.range.head);
          this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
          this.view.scrollDOM.scrollLeft = target.xMargin;
          return;
        }
        var _iterator17 = _createForOfIteratorHelper$a(this.view.state.facet(scrollHandler)),
          _step17;
        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var handler = _step17.value;
            try {
              if (handler(this.view, target.range, target)) return true;
            } catch (e) {
              logException(this.view.state, e, "scroll handler");
            }
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }
        var range = target.range;
        var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
          other;
        if (!rect) return;
        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
          left: Math.min(rect.left, other.left),
          top: Math.min(rect.top, other.top),
          right: Math.max(rect.right, other.right),
          bottom: Math.max(rect.bottom, other.bottom)
        };
        var margins = getScrollMargins(this.view);
        var targetRect = {
          left: rect.left - margins.left,
          top: rect.top - margins.top,
          right: rect.right + margins.right,
          bottom: rect.bottom + margins.bottom
        };
        var _this$view$scrollDOM = this.view.scrollDOM,
          offsetWidth = _this$view$scrollDOM.offsetWidth,
          offsetHeight = _this$view$scrollDOM.offsetHeight;
        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
    }]);
  }(ContentView);
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
    var sel = view.observer.selectionRange;
    if (!sel.focusNode) return null;
    var textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
    var textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
    var textNode = textBefore || textAfter;
    if (textAfter && textBefore && textAfter.node != textBefore.node) {
      var descAfter = ContentView.get(textAfter.node);
      if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
        textNode = textAfter;
      } else if (view.docView.lastCompositionAfterCursor) {
        var descBefore = ContentView.get(textBefore.node);
        if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue)) textNode = textAfter;
      }
    }
    view.docView.lastCompositionAfterCursor = textNode != textBefore;
    if (!textNode) return null;
    var from = headPos - textNode.offset;
    return {
      from: from,
      to: from + textNode.node.nodeValue.length,
      node: textNode.node
    };
  }
  function findCompositionRange(view, changes, headPos) {
    var found = findCompositionNode(view, headPos);
    if (!found) return null;
    var textNode = found.node,
      from = found.from,
      to = found.to,
      text = textNode.nodeValue;
    // Don't try to preserve multi-line compositions
    if (/[\n\r]/.test(text)) return null;
    if (view.state.doc.sliceString(found.from, found.to) != text) return null;
    var inv = changes.invertedDesc;
    var range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
    var marks = [];
    for (var parent = textNode.parentNode;; parent = parent.parentNode) {
      var parentView = ContentView.get(parent);
      if (parentView instanceof MarkView) marks.push({
        node: parent,
        deco: parentView.mark
      });else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM) return {
        range: range,
        text: textNode,
        marks: marks,
        line: parent
      };else if (parent != view.contentDOM) marks.push({
        node: parent,
        deco: new MarkDecoration({
          inclusive: true,
          attributes: getAttrs$1(parent),
          tagName: parent.tagName.toLowerCase()
        })
      });else return null;
    }
  }
  function nextToUneditable(node, offset) {
    if (node.nodeType != 1) return 0;
    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  var DecorationComparator$1 = /*#__PURE__*/function () {
    function DecorationComparator() {
      _classCallCheck(this, DecorationComparator);
      this.changes = [];
    }
    return _createClass(DecorationComparator, [{
      key: "compareRange",
      value: function compareRange(from, to) {
        addRange(from, to, this.changes);
      }
    }, {
      key: "comparePoint",
      value: function comparePoint(from, to) {
        addRange(from, to, this.changes);
      }
    }, {
      key: "boundChange",
      value: function boundChange(pos) {
        addRange(pos, pos, this.changes);
      }
    }]);
  }();
  function findChangedDeco(a, b, diff) {
    var comp = new DecorationComparator$1();
    RangeSet.compare(a, b, diff, comp);
    return comp.changes;
  }
  function inUneditable(node, inside) {
    for (var cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
      if (cur.nodeType == 1 && cur.contentEditable == 'false') {
        return true;
      }
    }
    return false;
  }
  function touchesComposition(changes, composition) {
    var touched = false;
    if (composition) changes.iterChangedRanges(function (from, to) {
      if (from < composition.to && to > composition.from) touched = true;
    });
    return touched;
  }
  function groupAt(state, pos) {
    var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var categorize = state.charCategorizer(pos);
    var line = state.doc.lineAt(pos),
      linePos = pos - line.from;
    if (line.length == 0) return EditorSelection.cursor(pos);
    if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
    var from = linePos,
      to = linePos;
    if (bias < 0) from = findClusterBreak(line.text, linePos, false);else to = findClusterBreak(line.text, linePos);
    var cat = categorize(line.text.slice(from, to));
    while (from > 0) {
      var prev = findClusterBreak(line.text, from, false);
      if (categorize(line.text.slice(prev, from)) != cat) break;
      from = prev;
    }
    while (to < line.length) {
      var next = findClusterBreak(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat) break;
      to = next;
    }
    return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
    return top < rect.top ? {
      top: top,
      left: rect.left,
      right: rect.right,
      bottom: rect.bottom
    } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? {
      top: rect.top,
      left: rect.left,
      right: rect.right,
      bottom: bottom
    } : rect;
  }
  function domPosAtCoords(parent, x, y) {
    var closest,
      closestRect,
      closestX,
      closestY,
      closestOverlap = false;
    var above, below, aboveRect, belowRect;
    for (var child = parent.firstChild; child; child = child.nextSibling) {
      var rects = clientRectsFor(child);
      for (var i = 0; i < rects.length; i++) {
        var rect = rects[i];
        if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        var dx = getdx(x, rect),
          dy = getdy(y, rect);
        if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          var side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
          closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
        }
        if (dx == 0) {
          if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest) return {
      node: parent,
      offset: 0
    };
    var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
    if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
    if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
    var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return {
      node: parent,
      offset: offset
    };
  }
  function domPosInText(node, x, y) {
    var len = node.nodeValue.length;
    var closestOffset = -1,
      closestDY = 1e9,
      generalSide = 0;
    for (var i = 0; i < len; i++) {
      var rects = textRange(node, i, i + 1).getClientRects();
      for (var j = 0; j < rects.length; j++) {
        var rect = rects[j];
        if (rect.top == rect.bottom) continue;
        if (!generalSide) generalSide = x - rect.left;
        var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
        if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
          var right = x >= (rect.left + rect.right) / 2,
            after = right;
          if (browser.chrome || browser.gecko) {
            // Check for RTL on browsers that support getting client
            // rects for empty ranges.
            var rectBefore = textRange(node, i).getBoundingClientRect();
            if (rectBefore.left == rect.right) after = !right;
          }
          if (dy <= 0) return {
            node: node,
            offset: i + (after ? 1 : 0)
          };
          closestOffset = i + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return {
      node: node,
      offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
    };
  }
  function _posAtCoords(view, coords, precise) {
    var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
    var _a, _b;
    var content = view.contentDOM.getBoundingClientRect(),
      docTop = content.top + view.viewState.paddingTop;
    var block,
      docHeight = view.viewState.docHeight;
    var x = coords.x,
      y = coords.y,
      yOffset = y - docTop;
    if (yOffset < 0) return 0;
    if (yOffset > docHeight) return view.state.doc.length;
    // Scan for a text block near the queried y position
    for (var halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
      block = view.elementAtHeight(yOffset);
      if (block.type == BlockType.Text) break;
      for (;;) {
        // Move the y position out of this block
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight) break;
        // If the document consists entirely of replaced widgets, we
        // won't find a text block, so return 0
        if (bounced) return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y = docTop + yOffset;
    var lineStart = block.from;
    // If this is outside of the rendered viewport, we can't determine a position
    if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
    var doc = view.dom.ownerDocument;
    var root = view.root.elementFromPoint ? view.root : doc;
    var element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
    // If the element is unexpected, clip x at the sides of the content area and try again
    if (!element) {
      x = Math.max(content.left + 1, Math.min(content.right - 1, x));
      element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element)) element = null;
    }
    // There's visible editor content under the point, so we can try
    // using caret(Position|Range)FromPoint as a shortcut
    var node,
      offset = -1;
    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
      if (doc.caretPositionFromPoint) {
        var pos = doc.caretPositionFromPoint(x, y);
        if (pos) {
          node = pos.offsetNode;
          offset = pos.offset;
        }
      } else if (doc.caretRangeFromPoint) {
        var range = doc.caretRangeFromPoint(x, y);
        if (range) {
          node = range.startContainer;
          offset = range.startOffset;
          if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
        }
      }
      // Chrome will return offsets into <input> elements without child
      // nodes, which will lead to a null deref below, so clip the
      // offset to the node size.
      if (node) offset = Math.min(maxOffset(node), offset);
    }
    // No luck, do our own (potentially expensive) search
    if (!node || !view.docView.dom.contains(node)) {
      var line = LineView.find(view.docView, lineStart);
      if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
      var _domPosAtCoords = domPosAtCoords(line.dom, x, y);
      node = _domPosAtCoords.node;
      offset = _domPosAtCoords.offset;
    }
    var nearest = view.docView.nearest(node);
    if (!nearest) return null;
    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
      var rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
    }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
    var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
      var textHeight = view.viewState.heightOracle.textHeight;
      var line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    var content = view.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
    var len;
    if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
    for (var next = node.nextSibling; next; next = next.nextSibling) if (next.nodeType != 1 || next.nodeName != "BR") return false;
    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
    if (offset != 0) return false;
    for (var cur = node;;) {
      var parent = cur.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;
      if (parent.classList.contains("cm-line")) break;
      cur = parent;
    }
    var rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x - rect.left > 5;
  }
  function blockAt(view, pos, side) {
    var line = view.lineBlockAt(pos);
    if (Array.isArray(line.type)) {
      var best;
      var _iterator18 = _createForOfIteratorHelper$a(line.type),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var _l = _step18.value;
          if (_l.from > pos) break;
          if (_l.to < pos) continue;
          if (_l.from < pos && _l.to > pos) return _l;
          if (!best || _l.type == BlockType.Text && (best.type != _l.type || (side < 0 ? _l.from < pos : _l.to > pos))) best = _l;
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
      return best || line;
    }
    return line;
  }
  function _moveToLineBoundary(view, start, forward, includeWrap) {
    var line = blockAt(view, start.head, start.assoc || -1);
    var coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      var editorRect = view.dom.getBoundingClientRect();
      var direction = view.textDirectionAt(line.from);
      var pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null) return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function _moveByChar(view, start, forward, by) {
    var line = view.state.doc.lineAt(start.head),
      spans = view.bidiSpans(line);
    var direction = view.textDirectionAt(line.from);
    for (var cur = start, check = null;;) {
      var next = moveVisually(line, spans, direction, cur, forward),
        _char = movedOver;
      if (!next) {
        if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
        _char = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next = view.visualLineSide(line, !forward);
      }
      if (!check) {
        if (!by) return next;
        check = by(_char);
      } else if (!check(_char)) {
        return cur;
      }
      cur = next;
    }
  }
  function byGroup(view, pos, start) {
    var categorize = view.state.charCategorizer(pos);
    var cat = categorize(start);
    return function (next) {
      var nextCat = categorize(next);
      if (cat == CharCategory.Space) cat = nextCat;
      return cat == nextCat;
    };
  }
  function _moveVertically(view, start, forward, distance) {
    var startPos = start.head,
      dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0)) return EditorSelection.cursor(startPos, start.assoc);
    var goal = start.goalColumn,
      startY;
    var rect = view.contentDOM.getBoundingClientRect();
    var startCoords = view.coordsAtPos(startPos, start.assoc || -1),
      docTop = view.documentTop;
    if (startCoords) {
      if (goal == null) goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      var line = view.viewState.lineBlockAt(startPos);
      if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    var resolvedGoal = rect.left + goal;
    var dist = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
    for (var extra = 0;; extra += 10) {
      var curY = startY + (dist + extra) * dir;
      var pos = _posAtCoords(view, {
        x: resolvedGoal,
        y: curY
      }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
        var charRect = view.docView.coordsForChar(pos);
        var assoc = !charRect || curY < charRect.top ? -1 : 1;
        return EditorSelection.cursor(pos, assoc, undefined, goal);
      }
    }
  }
  function skipAtomicRanges(atoms, pos, bias) {
    var _loop = function _loop() {
        var moved = 0;
        var _iterator19 = _createForOfIteratorHelper$a(atoms),
          _step19;
        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var set = _step19.value;
            set.between(pos - 1, pos + 1, function (from, to, value) {
              if (pos > from && pos < to) {
                var side = moved || bias || (pos - from < to - pos ? -1 : 1);
                pos = side < 0 ? from : to;
                moved = side;
              }
            });
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
        if (!moved) return {
          v: pos
        };
      },
      _ret;
    for (;;) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
  }
  function skipAtoms(view, oldPos, pos) {
    var newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(function (f) {
      return f(view);
    }), pos.from, oldPos.head > pos.from ? -1 : 1);
    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }
  var LineBreakPlaceholder = "\uFFFF";
  var DOMReader = /*#__PURE__*/function () {
    function DOMReader(points, state) {
      _classCallCheck(this, DOMReader);
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    return _createClass(DOMReader, [{
      key: "append",
      value: function append(text) {
        this.text += text;
      }
    }, {
      key: "lineBreak",
      value: function lineBreak() {
        this.text += LineBreakPlaceholder;
      }
    }, {
      key: "readRange",
      value: function readRange(start, end) {
        if (!start) return this;
        var parent = start.parentNode;
        for (var cur = start;;) {
          this.findPointBefore(parent, cur);
          var oldLen = this.text.length;
          this.readNode(cur);
          var next = cur.nextSibling;
          if (next == end) break;
          var view = ContentView.get(cur),
            nextView = ContentView.get(next);
          if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen) this.lineBreak();
          cur = next;
        }
        this.findPointBefore(parent, end);
        return this;
      }
    }, {
      key: "readTextNode",
      value: function readTextNode(node) {
        var text = node.nodeValue;
        var _iterator20 = _createForOfIteratorHelper$a(this.points),
          _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var _point = _step20.value;
            if (_point.node == node) _point.pos = this.text.length + Math.min(_point.offset, text.length);
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
        for (var off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
          var nextBreak = -1,
            breakSize = 1,
            m = void 0;
          if (this.lineSeparator) {
            nextBreak = text.indexOf(this.lineSeparator, off);
            breakSize = this.lineSeparator.length;
          } else if (m = re.exec(text)) {
            nextBreak = m.index;
            breakSize = m[0].length;
          }
          this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
          if (nextBreak < 0) break;
          this.lineBreak();
          if (breakSize > 1) {
            var _iterator21 = _createForOfIteratorHelper$a(this.points),
              _step21;
            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var point = _step21.value;
                if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }
          off = nextBreak + breakSize;
        }
      }
    }, {
      key: "readNode",
      value: function readNode(node) {
        if (node.cmIgnore) return;
        var view = ContentView.get(node);
        var fromView = view && view.overrideDOMText;
        if (fromView != null) {
          this.findPointInside(node, fromView.length);
          for (var i = fromView.iter(); !i.next().done;) {
            if (i.lineBreak) this.lineBreak();else this.append(i.value);
          }
        } else if (node.nodeType == 3) {
          this.readTextNode(node);
        } else if (node.nodeName == "BR") {
          if (node.nextSibling) this.lineBreak();
        } else if (node.nodeType == 1) {
          this.readRange(node.firstChild, null);
        }
      }
    }, {
      key: "findPointBefore",
      value: function findPointBefore(node, next) {
        var _iterator22 = _createForOfIteratorHelper$a(this.points),
          _step22;
        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var point = _step22.value;
            if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
      }
    }, {
      key: "findPointInside",
      value: function findPointInside(node, length) {
        var _iterator23 = _createForOfIteratorHelper$a(this.points),
          _step23;
        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var point = _step23.value;
            if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
      }
    }]);
  }();
  function isAtEnd(parent, node, offset) {
    for (;;) {
      if (!node || offset < maxOffset(node)) return false;
      if (node == parent) return true;
      offset = domIndex(node) + 1;
      node = node.parentNode;
    }
  }
  var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
    _classCallCheck(this, DOMPoint);
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  });
  var DOMChange = /*#__PURE__*/_createClass(function DOMChange(view, start, end, typeOver) {
    _classCallCheck(this, DOMChange);
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    this.domChanged = start > -1;
    var _view$docView = view.docView,
      iHead = _view$docView.impreciseHead,
      iAnchor = _view$docView.impreciseAnchor;
    if (view.state.readOnly && start > -1) {
      // Ignore changes when the editor is read-only
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      var selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      var reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      var domSel = view.observer.selectionRange;
      var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      // iOS will refuse to select the block gaps when doing
      // select-all.
      // Chrome will put the selection *inside* them, confusing
      // posFromDOM
      var vp = view.viewport;
      if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
        var from = Math.min(head, anchor),
          to = Math.max(head, anchor);
        var offFrom = vp.from - from,
          offTo = vp.to - to;
        if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
          head = 0;
          anchor = view.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  });
  function applyDOMChange(view, domChange) {
    var change;
    var newSel = domChange.newSel,
      sel = view.state.selection.main;
    var lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
    if (domChange.bounds) {
      var _domChange$bounds = domChange.bounds,
        from = _domChange$bounds.from,
        to = _domChange$bounds.to;
      var preferredPos = sel.from,
        preferredSide = null;
      // Prefer anchoring to end when Backspace is pressed (or, on
      // Android, when something was deleted)
      if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      var diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
      if (diff) {
        // Chrome inserts two newlines when pressing shift-enter at the
        // end of a line. DomChange drops one of those.
        if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
        change = {
          from: from + diff.from,
          to: from + diff.toA,
          insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel) return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      // Heuristic to notice typing over a selected character
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, sel.to)
      };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
      // Detect insert-period-on-double-space Mac and Android behavior,
      // and transform it into a regular space insert.
      if (newSel && change.insert.length == 2) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: change.from,
        to: change.to,
        insert: Text.of([change.insert.toString().replace(".", " ")])
      };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      // If the change is inside the selection and covers most of it,
      // assume it is a selection replace (with identical characters at
      // the start/end not included in the diff)
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      // In Chrome, if you insert a space at the start of a wrapped
      // line, it will actually insert a newline and a space, causing a
      // bogus new line to be created in CodeMirror (#968)
      if (newSel) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: sel.from,
        to: sel.to,
        insert: Text.of([" "])
      };
    }
    if (change) {
      return applyDOMChangeInner(view, change, newSel, lastKey);
    } else if (newSel && !newSel.main.eq(sel)) {
      var _scrollIntoView = false,
        userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select") _scrollIntoView = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({
        selection: newSel,
        scrollIntoView: _scrollIntoView,
        userEvent: userEvent
      });
      return true;
    } else {
      return false;
    }
  }
  function applyDOMChangeInner(view, change, newSel) {
    var lastKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
    if (browser.ios && view.inputState.flushIOSKey(change)) return true;
    var sel = view.state.selection.main;
    // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events. (Some of these keys are also handled by beforeinput
    // events and the pendingAndroidKey mechanism, but that's not
    // reliable in all situations.)
    if (browser.android && (change.to == sel.to && (
    // GBoard will sometimes remove a space it just inserted
    // after a completion when you press enter
    change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
    var text = change.insert.toString();
    if (view.inputState.composing >= 0) view.inputState.composing++;
    var defaultTr;
    var defaultInsert = function defaultInsert() {
      return defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
    };
    if (!view.state.facet(inputHandler$1).some(function (h) {
      return h(view, change.from, change.to, text, defaultInsert);
    })) view.dispatch(defaultInsert());
    return true;
  }
  function applyDefaultInsert(view, change, newSel) {
    var tr,
      startState = view.state,
      sel = startState.selection.main;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      var changes = startState.changes(change);
      var mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
      // Try to apply a composition change to all cursors
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        var replaced = view.state.sliceDoc(change.from, change.to);
        var compositionRange,
          composition = newSel && findCompositionNode(view, newSel.main.head);
        if (composition) {
          var dLen = change.insert.length - (change.to - change.from);
          compositionRange = {
            from: composition.from,
            to: composition.to - dLen
          };
        } else {
          compositionRange = view.state.doc.lineAt(sel.head);
        }
        var offset = sel.to - change.to,
          size = sel.to - sel.from;
        tr = startState.changeByRange(function (range) {
          if (range.from == sel.from && range.to == sel.to) return {
            changes: changes,
            range: mainSel || range.map(changes)
          };
          var to = range.to - offset,
            from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
          // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          range.to >= compositionRange.from && range.from <= compositionRange.to) return {
            range: range
          };
          var rangeChanges = startState.changes({
              from: from,
              to: to,
              insert: change.insert
            }),
            selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes: changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    var userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    return startState.update(tr, {
      userEvent: userEvent,
      scrollIntoView: true
    });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
    var minLen = Math.min(a.length, b.length);
    var from = 0;
    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;
    if (from == minLen && a.length == b.length) return null;
    var toA = a.length,
      toB = b.length;
    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      var adjust = Math.max(0, from - Math.min(toA, toB));
      preferredPos -= toA + adjust - from;
    }
    if (toA < from && a.length < b.length) {
      var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
      from -= move;
      toB = from + (toB - toA);
      toA = from;
    } else if (toB < from) {
      var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
      from -= _move;
      toA = from + (toA - toB);
      toB = from;
    }
    return {
      from: from,
      toA: toA,
      toB: toB
    };
  }
  function selectionPoints(view) {
    var result = [];
    if (view.root.activeElement != view.contentDOM) return result;
    var _view$observer$select2 = view.observer.selectionRange,
      anchorNode = _view$observer$select2.anchorNode,
      anchorOffset = _view$observer$select2.anchorOffset,
      focusNode = _view$observer$select2.focusNode,
      focusOffset = _view$observer$select2.focusOffset;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base) {
    if (points.length == 0) return null;
    var anchor = points[0].pos,
      head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }
  var InputState = /*#__PURE__*/function () {
    function InputState(view) {
      _classCallCheck(this, InputState);
      this.view = view;
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      // On iOS, some keys need to have their default behavior happen
      // (after which we retroactively handle them and reset the DOM) to
      // avoid messing up the virtual keyboard state.
      this.pendingIOSKey = undefined;
      /**
      When enabled (>-1), tab presses are not given to key handlers,
      leaving the browser's default behavior. If >0, the mode expires
      at that timestamp, and any other keypress clears it.
      Esc enables temporary tab focus mode for two seconds when not
      otherwise handled.
      */
      this.tabFocusMode = -1;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.handlers = Object.create(null);
      // -1 means not in a composition. Otherwise, this counts the number
      // of changes made during the composition. The count is used to
      // avoid treating the start state of the composition, before any
      // changes have been made, as part of the composition.
      this.composing = -1;
      // Tracks whether the next change should be marked as starting the
      // composition (null means no composition, true means next is the
      // first, false means first has already been marked for this
      // composition)
      this.compositionFirstChange = null;
      // End time of the previous composition
      this.compositionEndedAt = 0;
      // Used in a kludge to detect when an Enter keypress should be
      // considered part of the composition on Safari, which fires events
      // in the wrong order
      this.compositionPendingKey = false;
      // Used to categorize changes as part of a composition, even when
      // the mutation events fire shortly after the compositionend event
      this.compositionPendingChange = false;
      this.mouseSelection = null;
      // When a drag from the editor is active, this points at the range
      // being dragged.
      this.draggedContent = null;
      this.handleEvent = this.handleEvent.bind(this);
      this.notifiedFocused = view.hasFocus;
      // On Safari adding an input event handler somehow prevents an
      // issue where the composition vanishes when you press enter.
      if (browser.safari) view.contentDOM.addEventListener("input", function () {
        return null;
      });
      if (browser.gecko) firefoxCopyCutHack(view.contentDOM.ownerDocument);
    }
    return _createClass(InputState, [{
      key: "setSelectionOrigin",
      value: function setSelectionOrigin(origin) {
        this.lastSelectionOrigin = origin;
        this.lastSelectionTime = Date.now();
      }
    }, {
      key: "handleEvent",
      value: function handleEvent(event) {
        var _this19 = this;
        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event)) return;
        if (event.type == "keydown" && this.keydown(event)) return;
        if (this.view.updateState != 0 /* UpdateState.Idle */) Promise.resolve().then(function () {
          return _this19.runHandlers(event.type, event);
        });else this.runHandlers(event.type, event);
      }
    }, {
      key: "runHandlers",
      value: function runHandlers(type, event) {
        var handlers = this.handlers[type];
        if (handlers) {
          var _iterator24 = _createForOfIteratorHelper$a(handlers.observers),
            _step24;
          try {
            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
              var observer = _step24.value;
              observer(this.view, event);
            }
          } catch (err) {
            _iterator24.e(err);
          } finally {
            _iterator24.f();
          }
          var _iterator25 = _createForOfIteratorHelper$a(handlers.handlers),
            _step25;
          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var handler = _step25.value;
              if (event.defaultPrevented) break;
              if (handler(this.view, event)) {
                event.preventDefault();
                break;
              }
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }
      }
    }, {
      key: "ensureHandlers",
      value: function ensureHandlers(plugins) {
        var handlers = computeHandlers(plugins),
          prev = this.handlers,
          dom = this.view.contentDOM;
        for (var type in handlers) if (type != "scroll") {
          var passive = !handlers[type].handlers.length;
          var exists = prev[type];
          if (exists && passive != !exists.handlers.length) {
            dom.removeEventListener(type, this.handleEvent);
            exists = null;
          }
          if (!exists) dom.addEventListener(type, this.handleEvent, {
            passive: passive
          });
        }
        for (var _type4 in prev) if (_type4 != "scroll" && !handlers[_type4]) dom.removeEventListener(_type4, this.handleEvent);
        this.handlers = handlers;
      }
    }, {
      key: "keydown",
      value: function keydown(event) {
        var _this20 = this;
        // Must always run, even if a custom handler handled the event
        this.lastKeyCode = event.keyCode;
        this.lastKeyTime = Date.now();
        if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode)) return true;
        if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0) this.tabFocusMode = -1;
        // Chrome for Android usually doesn't fire proper key events, but
        // occasionally does, usually surrounded by a bunch of complicated
        // composition changes. When an enter or backspace key event is
        // seen, hold off on handling DOM events for a bit, and then
        // dispatch it.
        if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
          this.view.observer.delayAndroidKey(event.key, event.keyCode);
          return true;
        }
        // Preventing the default behavior of Enter on iOS makes the
        // virtual keyboard get stuck in the wrong (lowercase)
        // state. So we let it go through, and then, in
        // applyDOMChange, notify key handlers of it and reset to
        // the state they produce.
        var pending;
        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find(function (key) {
          return key.keyCode == event.keyCode;
        })) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
          this.pendingIOSKey = pending || event;
          setTimeout(function () {
            return _this20.flushIOSKey();
          }, 250);
          return true;
        }
        if (event.keyCode != 229) this.view.observer.forceFlush();
        return false;
      }
    }, {
      key: "flushIOSKey",
      value: function flushIOSKey(change) {
        var key = this.pendingIOSKey;
        if (!key) return false;
        // This looks like an autocorrection before Enter
        if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString())) return false;
        this.pendingIOSKey = undefined;
        return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
      }
    }, {
      key: "ignoreDuringComposition",
      value: function ignoreDuringComposition(event) {
        if (!/^key/.test(event.type)) return false;
        if (this.composing > 0) return true;
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On some input method editors (IMEs), the Enter key is used to
        // confirm character selection. On Safari, when Enter is pressed,
        // compositionend and keydown events are sometimes emitted in the
        // wrong order. The key event should still be ignored, even when
        // it happens after the compositionend event.
        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
          this.compositionPendingKey = false;
          return true;
        }
        return false;
      }
    }, {
      key: "startMouseSelection",
      value: function startMouseSelection(mouseSelection) {
        if (this.mouseSelection) this.mouseSelection.destroy();
        this.mouseSelection = mouseSelection;
      }
    }, {
      key: "update",
      value: function update(_update3) {
        this.view.observer.update(_update3);
        if (this.mouseSelection) this.mouseSelection.update(_update3);
        if (this.draggedContent && _update3.docChanged) this.draggedContent = this.draggedContent.map(_update3.changes);
        if (_update3.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.mouseSelection) this.mouseSelection.destroy();
      }
    }]);
  }();
  function bindHandler(plugin, handler) {
    return function (view, event) {
      try {
        return handler.call(plugin, event, view);
      } catch (e) {
        logException(view.state, e);
      }
    };
  }
  function computeHandlers(plugins) {
    var result = Object.create(null);
    function record(type) {
      return result[type] || (result[type] = {
        observers: [],
        handlers: []
      });
    }
    var _iterator26 = _createForOfIteratorHelper$a(plugins),
      _step26;
    try {
      for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
        var _plugin2 = _step26.value;
        var spec = _plugin2.spec;
        if (spec && spec.domEventHandlers) for (var _type6 in spec.domEventHandlers) {
          var f = spec.domEventHandlers[_type6];
          if (f) record(_type6).handlers.push(bindHandler(_plugin2.value, f));
        }
        if (spec && spec.domEventObservers) for (var _type7 in spec.domEventObservers) {
          var _f2 = spec.domEventObservers[_type7];
          if (_f2) record(_type7).observers.push(bindHandler(_plugin2.value, _f2));
        }
      }
    } catch (err) {
      _iterator26.e(err);
    } finally {
      _iterator26.f();
    }
    for (var type in handlers) record(type).handlers.push(handlers[type]);
    for (var _type5 in observers) record(_type5).observers.push(observers[_type5]);
    return result;
  }
  var PendingKeys = [{
    key: "Backspace",
    keyCode: 8,
    inputType: "deleteContentBackward"
  }, {
    key: "Enter",
    keyCode: 13,
    inputType: "insertParagraph"
  }, {
    key: "Enter",
    keyCode: 13,
    inputType: "insertLineBreak"
  }, {
    key: "Delete",
    keyCode: 46,
    inputType: "deleteContentForward"
  }];
  var EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  var dragScrollMargin = 6;
  function dragScrollSpeed(dist) {
    return Math.max(0, dist) * 0.7 + 8;
  }
  function dist(a, b) {
    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  var MouseSelection = /*#__PURE__*/function () {
    function MouseSelection(view, startEvent, style, mustSelect) {
      _classCallCheck(this, MouseSelection);
      this.view = view;
      this.startEvent = startEvent;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = {
        x: 0,
        y: 0
      };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParents = scrollableParents(view.contentDOM);
      this.atoms = view.state.facet(atomicRanges).map(function (f) {
        return f(view);
      });
      var doc = view.contentDOM.ownerDocument;
      doc.addEventListener("mousemove", this.move = this.move.bind(this));
      doc.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
      this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
    }
    return _createClass(MouseSelection, [{
      key: "start",
      value: function start(event) {
        // When clicking outside of the selection, immediately apply the
        // effect of starting the selection
        if (this.dragging === false) this.select(event);
      }
    }, {
      key: "move",
      value: function move(event) {
        if (event.buttons == 0) return this.destroy();
        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10) return;
        this.select(this.lastEvent = event);
        var sx = 0,
          sy = 0;
        var left = 0,
          top = 0,
          right = this.view.win.innerWidth,
          bottom = this.view.win.innerHeight;
        if (this.scrollParents.x) {
          var _this$scrollParents$x = this.scrollParents.x.getBoundingClientRect();
          left = _this$scrollParents$x.left;
          right = _this$scrollParents$x.right;
        }
        if (this.scrollParents.y) {
          var _this$scrollParents$y = this.scrollParents.y.getBoundingClientRect();
          top = _this$scrollParents$y.top;
          bottom = _this$scrollParents$y.bottom;
        }
        var margins = getScrollMargins(this.view);
        if (event.clientX - margins.left <= left + dragScrollMargin) sx = -dragScrollSpeed(left - event.clientX);else if (event.clientX + margins.right >= right - dragScrollMargin) sx = dragScrollSpeed(event.clientX - right);
        if (event.clientY - margins.top <= top + dragScrollMargin) sy = -dragScrollSpeed(top - event.clientY);else if (event.clientY + margins.bottom >= bottom - dragScrollMargin) sy = dragScrollSpeed(event.clientY - bottom);
        this.setScrollSpeed(sx, sy);
      }
    }, {
      key: "up",
      value: function up(event) {
        if (this.dragging == null) this.select(this.lastEvent);
        if (!this.dragging) event.preventDefault();
        this.destroy();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.setScrollSpeed(0, 0);
        var doc = this.view.contentDOM.ownerDocument;
        doc.removeEventListener("mousemove", this.move);
        doc.removeEventListener("mouseup", this.up);
        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
    }, {
      key: "setScrollSpeed",
      value: function setScrollSpeed(sx, sy) {
        var _this21 = this;
        this.scrollSpeed = {
          x: sx,
          y: sy
        };
        if (sx || sy) {
          if (this.scrolling < 0) this.scrolling = setInterval(function () {
            return _this21.scroll();
          }, 50);
        } else if (this.scrolling > -1) {
          clearInterval(this.scrolling);
          this.scrolling = -1;
        }
      }
    }, {
      key: "scroll",
      value: function scroll() {
        var _this$scrollSpeed = this.scrollSpeed,
          x = _this$scrollSpeed.x,
          y = _this$scrollSpeed.y;
        if (x && this.scrollParents.x) {
          this.scrollParents.x.scrollLeft += x;
          x = 0;
        }
        if (y && this.scrollParents.y) {
          this.scrollParents.y.scrollTop += y;
          y = 0;
        }
        if (x || y) this.view.win.scrollBy(x, y);
        if (this.dragging === false) this.select(this.lastEvent);
      }
    }, {
      key: "skipAtoms",
      value: function skipAtoms(sel) {
        var ranges = null;
        for (var i = 0; i < sel.ranges.length; i++) {
          var range = sel.ranges[i],
            updated = null;
          if (range.empty) {
            var pos = skipAtomicRanges(this.atoms, range.from, 0);
            if (pos != range.from) updated = EditorSelection.cursor(pos, -1);
          } else {
            var from = skipAtomicRanges(this.atoms, range.from, -1);
            var to = skipAtomicRanges(this.atoms, range.to, 1);
            if (from != range.from || to != range.to) updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
          }
          if (updated) {
            if (!ranges) ranges = sel.ranges.slice();
            ranges[i] = updated;
          }
        }
        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
    }, {
      key: "select",
      value: function select(event) {
        var view = this.view,
          selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
        if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false)) this.view.dispatch({
          selection: selection,
          userEvent: "select.pointer"
        });
        this.mustSelect = false;
      }
    }, {
      key: "update",
      value: function update(_update4) {
        var _this22 = this;
        if (_update4.transactions.some(function (tr) {
          return tr.isUserEvent("input.type");
        })) this.destroy();else if (this.style.update(_update4)) setTimeout(function () {
          return _this22.select(_this22.lastEvent);
        }, 20);
      }
    }]);
  }();
  function addsSelectionRange(view, event) {
    var facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    var facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    var main = view.state.selection.main;
    if (main.empty) return false;
    // On boundary clicks, check whether the coordinates are inside the
    // selection's client rectangles
    var sel = getSelection(view.root);
    if (!sel || sel.rangeCount == 0) return true;
    var rects = sel.getRangeAt(0).getClientRects();
    for (var i = 0; i < rects.length; i++) {
      var rect = rects[i];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles) return true;
    if (event.defaultPrevented) return false;
    for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
    return true;
  }
  var handlers = /*@__PURE__*/Object.create(null);
  var observers = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view) {
    var parent = view.dom.parentNode;
    if (!parent) return;
    var target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(function () {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function textFilter(state, facet, text) {
    var _iterator27 = _createForOfIteratorHelper$a(state.facet(facet)),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var filter = _step27.value;
        text = filter(text, state);
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    return text;
  }
  function doPaste(view, input) {
    input = textFilter(view.state, clipboardInputFilter, input);
    var state = view.state,
      changes,
      i = 1,
      text = state.toText(input);
    var byLine = text.lines == state.selection.ranges.length;
    var linewise = lastLinewiseCopy != null && state.selection.ranges.every(function (r) {
      return r.empty;
    }) && lastLinewiseCopy == text.toString();
    if (linewise) {
      var lastLine = -1;
      changes = state.changeByRange(function (range) {
        var line = state.doc.lineAt(range.from);
        if (line.from == lastLine) return {
          range: range
        };
        lastLine = line.from;
        var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
        return {
          changes: {
            from: line.from,
            insert: insert
          },
          range: EditorSelection.cursor(range.from + insert.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange(function (range) {
        var line = text.line(i++);
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: line.text
          },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  observers.scroll = function (view) {
    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = function (view, event) {
    view.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27 && view.inputState.tabFocusMode != 0) view.inputState.tabFocusMode = Date.now() + 2000;
    return false;
  };
  observers.touchstart = function (view, e) {
    view.inputState.lastTouchTime = Date.now();
    view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = function (view) {
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = function (view, event) {
    view.observer.flush();
    if (view.inputState.lastTouchTime > Date.now() - 2000) return false; // Ignore touch interaction
    var style = null;
    var _iterator28 = _createForOfIteratorHelper$a(view.state.facet(mouseSelectionStyle)),
      _step28;
    try {
      for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
        var makeStyle = _step28.value;
        style = makeStyle(view, event);
        if (style) break;
      }
    } catch (err) {
      _iterator28.e(err);
    } finally {
      _iterator28.f();
    }
    if (!style && event.button == 0) style = basicMouseSelection(view, event);
    if (style) {
      var mustFocus = !view.hasFocus;
      view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
      if (mustFocus) view.observer.ignore(function () {
        focusPreventScroll(view.contentDOM);
        var active = view.root.activeElement;
        if (active && !active.contains(view.contentDOM)) active.blur();
      });
      var mouseSel = view.inputState.mouseSelection;
      if (mouseSel) {
        mouseSel.start(event);
        return mouseSel.dragging === false;
      }
    }
    return false;
  };
  function rangeForClick(view, pos, bias, type) {
    if (type == 1) {
      // Single click
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      // Double click
      return groupAt(view.state, pos, bias);
    } else {
      // Triple click
      var visual = LineView.find(view.docView, pos),
        line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      var from = visual ? visual.posAtStart : line.from,
        to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to) to++;
      return EditorSelection.range(from, to);
    }
  }
  var inside = function inside(x, y, rect) {
    return y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  };
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
    var line = LineView.find(view.docView, pos);
    if (!line) return 1;
    var off = pos - line.posAtStart;
    // Line boundaries point into the line
    if (off == 0) return 1;
    if (off == line.length) return -1;
    // Positions on top of an element point at that element
    var before = line.coordsAt(off, -1);
    if (before && inside(x, y, before)) return -1;
    var after = line.coordsAt(off, 1);
    if (after && inside(x, y, after)) return 1;
    // This is probably a line wrap point. Pick before if the point is
    // above its bottom.
    return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
    var pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    return {
      pos: pos,
      bias: findPositionSide(view, pos, event.clientX, event.clientY)
    };
  }
  var BadMouseDetail = browser.ie && browser.ie_version <= 11;
  var lastMouseDown = null,
    lastMouseDownCount = 0,
    lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail) return event.detail;
    var last = lastMouseDown,
      lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    var start = queryPos(view, event),
      type = getClickType(event);
    var startSel = view.state.selection;
    return {
      update: function update(_update5) {
        if (_update5.docChanged) {
          start.pos = _update5.changes.mapPos(start.pos);
          startSel = startSel.map(_update5.changes);
        }
      },
      get: function get(event, extend, multiple) {
        var cur = queryPos(view, event),
          removed;
        var range = rangeForClick(view, cur.pos, cur.bias, type);
        if (start.pos != cur.pos && !extend) {
          var startRange = rangeForClick(view, start.pos, start.bias, type);
          var from = Math.min(startRange.from, range.from),
            to = Math.max(startRange.to, range.to);
          range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
        }
        if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos))) return removed;else if (multiple) return startSel.addRange(range);else return EditorSelection.create([range]);
      }
    };
  }
  function removeRangeAround(sel, pos) {
    for (var i = 0; i < sel.ranges.length; i++) {
      var _sel$ranges$i = sel.ranges[i],
        from = _sel$ranges$i.from,
        to = _sel$ranges$i.to;
      if (from <= pos && to >= pos) return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
    }
    return null;
  }
  handlers.dragstart = function (view, event) {
    var range = view.state.selection.main;
    if (event.target.draggable) {
      var cView = view.docView.nearest(event.target);
      if (cView && cView.isWidget) {
        var from = cView.posAtStart,
          to = from + cView.length;
        if (from >= range.to || to <= range.from) range = EditorSelection.range(from, to);
      }
    }
    var inputState = view.inputState;
    if (inputState.mouseSelection) inputState.mouseSelection.dragging = true;
    inputState.draggedContent = range;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
      event.dataTransfer.effectAllowed = "copyMove";
    }
    return false;
  };
  handlers.dragend = function (view) {
    view.inputState.draggedContent = null;
    return false;
  };
  function dropText(view, event, text, direct) {
    text = textFilter(view.state, clipboardInputFilter, text);
    if (!text) return;
    var dropPos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    var draggedContent = view.inputState.draggedContent;
    var del = direct && draggedContent && dragMovesSelection(view, event) ? {
      from: draggedContent.from,
      to: draggedContent.to
    } : null;
    var ins = {
      from: dropPos,
      insert: text
    };
    var changes = view.state.changes(del ? [del, ins] : ins);
    view.focus();
    view.dispatch({
      changes: changes,
      selection: {
        anchor: changes.mapPos(dropPos, -1),
        head: changes.mapPos(dropPos, 1)
      },
      userEvent: del ? "move.drop" : "input.drop"
    });
    view.inputState.draggedContent = null;
  }
  handlers.drop = function (view, event) {
    if (!event.dataTransfer) return false;
    if (view.state.readOnly) return true;
    var files = event.dataTransfer.files;
    if (files && files.length) {
      // For a file drop, read the file's text.
      var text = Array(files.length),
        read = 0;
      var finishFile = function finishFile() {
        if (++read == files.length) dropText(view, event, text.filter(function (s) {
          return s != null;
        }).join(view.state.lineBreak), false);
      };
      var _loop2 = function _loop2(i) {
        var reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = function () {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i]);
      };
      for (var i = 0; i < files.length; i++) {
        _loop2(i);
      }
      return true;
    } else {
      var _text = event.dataTransfer.getData("Text");
      if (_text) {
        dropText(view, event, _text, true);
        return true;
      }
    }
    return false;
  };
  handlers.paste = function (view, event) {
    if (view.state.readOnly) return true;
    view.observer.flush();
    var data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
      return true;
    } else {
      capturePaste(view);
      return false;
    }
  };
  function captureCopy(view, text) {
    // The extra wrapper is somehow necessary on IE/Edge to prevent the
    // content from being mangled when it is put onto the clipboard
    var parent = view.dom.parentNode;
    if (!parent) return;
    var target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(function () {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    var content = [],
      ranges = [],
      linewise = false;
    var _iterator29 = _createForOfIteratorHelper$a(state.selection.ranges),
      _step29;
    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
        var range = _step29.value;
        if (!range.empty) {
          content.push(state.sliceDoc(range.from, range.to));
          ranges.push(range);
        }
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
    if (!content.length) {
      // Nothing selected, do a line-wise copy
      var upto = -1;
      var _iterator30 = _createForOfIteratorHelper$a(state.selection.ranges),
        _step30;
      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var from = _step30.value.from;
          var line = state.doc.lineAt(from);
          if (line.number > upto) {
            content.push(line.text);
            ranges.push({
              from: line.from,
              to: Math.min(state.doc.length, line.to + 1)
            });
          }
          upto = line.number;
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }
      linewise = true;
    }
    return {
      text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)),
      ranges: ranges,
      linewise: linewise
    };
  }
  var lastLinewiseCopy = null;
  handlers.copy = handlers.cut = function (view, event) {
    var _copiedRange = copiedRange(view.state),
      text = _copiedRange.text,
      ranges = _copiedRange.ranges,
      linewise = _copiedRange.linewise;
    if (!text && !linewise) return false;
    lastLinewiseCopy = linewise ? text : null;
    if (event.type == "cut" && !view.state.readOnly) view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
    var data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      data.clearData();
      data.setData("text/plain", text);
      return true;
    } else {
      captureCopy(view, text);
      return false;
    }
  };
  var isFocusChange = /*@__PURE__*/Annotation.define();
  function focusChangeTransaction(state, focus) {
    var effects = [];
    var _iterator31 = _createForOfIteratorHelper$a(state.facet(focusChangeEffect)),
      _step31;
    try {
      for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
        var getEffect = _step31.value;
        var effect = getEffect(state, focus);
        if (effect) effects.push(effect);
      }
    } catch (err) {
      _iterator31.e(err);
    } finally {
      _iterator31.f();
    }
    return effects ? state.update({
      effects: effects,
      annotations: isFocusChange.of(true)
    }) : null;
  }
  function updateForFocusChange(view) {
    setTimeout(function () {
      var focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        var tr = focusChangeTransaction(view.state, focus);
        if (tr) view.dispatch(tr);else view.update([]);
      }
    }, 10);
  }
  observers.focus = function (view) {
    view.inputState.lastFocusTime = Date.now();
    // When focusing reset the scroll position, move it back to where it was
    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
      view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
      view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
    }
    updateForFocusChange(view);
  };
  observers.blur = function (view) {
    view.observer.clearSelectionRange();
    updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = function (view) {
    if (view.observer.editContext) return; // Composition handled by edit context
    if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;
    if (view.inputState.composing < 0) {
      // FIXME possibly set a timeout to clear it again on Android
      view.inputState.composing = 0;
    }
  };
  observers.compositionend = function (view) {
    if (view.observer.editContext) return; // Composition handled by edit context
    view.inputState.composing = -1;
    view.inputState.compositionEndedAt = Date.now();
    view.inputState.compositionPendingKey = true;
    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
    view.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) {
      // Delay flushing for a bit on Android because it'll often fire a
      // bunch of contradictory changes in a row at end of compositon
      view.observer.flushSoon();
    } else if (view.inputState.compositionPendingChange) {
      // If we found pending records, schedule a flush.
      Promise.resolve().then(function () {
        return view.observer.flush();
      });
    } else {
      // Otherwise, make sure that, if no changes come in soon, the
      // composition view is cleared.
      setTimeout(function () {
        if (view.inputState.composing < 0 && view.docView.hasComposition) view.update([]);
      }, 50);
    }
  };
  observers.contextmenu = function (view) {
    view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = function (view, event) {
    var _a, _b;
    // In EditContext mode, we must handle insertReplacementText events
    // directly, to make spell checking corrections work
    if (event.inputType == "insertReplacementText" && view.observer.editContext) {
      var text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"),
        ranges = event.getTargetRanges();
      if (text && ranges.length) {
        var _r = ranges[0];
        var from = view.posAtDOM(_r.startContainer, _r.startOffset),
          to = view.posAtDOM(_r.endContainer, _r.endOffset);
        applyDOMChangeInner(view, {
          from: from,
          to: to,
          insert: view.state.toText(text)
        }, null);
        return true;
      }
    }
    // Because Chrome Android doesn't fire useful key events, use
    // beforeinput to detect backspace (and possibly enter and delete,
    // but those usually don't even seem to fire beforeinput events at
    // the moment) and fake a key event for it.
    //
    // (preventDefault on beforeinput, though supported in the spec,
    // seems to do nothing at all on Chrome).
    var pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find(function (key) {
      return key.inputType == event.inputType;
    }))) {
      view.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        var startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
        setTimeout(function () {
          var _a;
          // Backspacing near uneditable nodes on Chrome Android sometimes
          // closes the virtual keyboard. This tries to crudely detect
          // that and refocus to get it back.
          if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
            view.contentDOM.blur();
            view.focus();
          }
        }, 100);
      }
    }
    if (browser.ios && event.inputType == "deleteContentForward") {
      // For some reason, DOM changes (and beforeinput) happen _before_
      // the key event for ctrl-d on iOS when using an external
      // keyboard.
      view.observer.flushSoon();
    }
    // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
    if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
      setTimeout(function () {
        return observers.compositionend(view, event);
      }, 20);
    }
    return false;
  };
  var appliedFirefoxHack = /*@__PURE__*/new Set();
  // In Firefox, when cut/copy handlers are added to the document, that
  // somehow avoids a bug where those events aren't fired when the
  // selection is empty. See https://github.com/codemirror/dev/issues/1082
  // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
  function firefoxCopyCutHack(doc) {
    if (!appliedFirefoxHack.has(doc)) {
      appliedFirefoxHack.add(doc);
      doc.addEventListener("copy", function () {});
      doc.addEventListener("cut", function () {});
    }
  }
  var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  // Used to track, during updateHeight, if any actual heights changed
  var heightChangeFlag = false;
  function clearHeightChangeFlag() {
    heightChangeFlag = false;
  }
  var HeightOracle = /*#__PURE__*/function () {
    function HeightOracle(lineWrapping) {
      _classCallCheck(this, HeightOracle);
      this.lineWrapping = lineWrapping;
      this.doc = Text.empty;
      this.heightSamples = {};
      this.lineHeight = 14; // The height of an entire line (line-height)
      this.charWidth = 7;
      this.textHeight = 14; // The height of the actual font (font-size)
      this.lineLength = 30;
    }
    return _createClass(HeightOracle, [{
      key: "heightForGap",
      value: function heightForGap(from, to) {
        var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
        if (this.lineWrapping) lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
        return this.lineHeight * lines;
      }
    }, {
      key: "heightForLine",
      value: function heightForLine(length) {
        if (!this.lineWrapping) return this.lineHeight;
        var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
        return lines * this.lineHeight;
      }
    }, {
      key: "setDoc",
      value: function setDoc(doc) {
        this.doc = doc;
        return this;
      }
    }, {
      key: "mustRefreshForWrapping",
      value: function mustRefreshForWrapping(whiteSpace) {
        return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
      }
    }, {
      key: "mustRefreshForHeights",
      value: function mustRefreshForHeights(lineHeights) {
        var newHeight = false;
        for (var i = 0; i < lineHeights.length; i++) {
          var h = lineHeights[i];
          if (h < 0) {
            i++;
          } else if (!this.heightSamples[Math.floor(h * 10)]) {
            // Round to .1 pixels
            newHeight = true;
            this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return newHeight;
      }
    }, {
      key: "refresh",
      value: function refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
        var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
        var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
        this.lineWrapping = lineWrapping;
        this.lineHeight = lineHeight;
        this.charWidth = charWidth;
        this.textHeight = textHeight;
        this.lineLength = lineLength;
        if (changed) {
          this.heightSamples = {};
          for (var i = 0; i < knownHeights.length; i++) {
            var h = knownHeights[i];
            if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return changed;
      }
    }]);
  }(); // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  var MeasuredHeights = /*#__PURE__*/function () {
    function MeasuredHeights(from, heights) {
      _classCallCheck(this, MeasuredHeights);
      this.from = from;
      this.heights = heights;
      this.index = 0;
    }
    return _createClass(MeasuredHeights, [{
      key: "more",
      get: function get() {
        return this.index < this.heights.length;
      }
    }]);
  }();
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  var BlockInfo = /*#__PURE__*/function () {
    /**
    @internal
    */
    function BlockInfo(
    /**
    The start of the element in the document.
    */
    from,
    /**
    The length of the element.
    */
    length,
    /**
    The top position of the element (relative to the top of the
    document).
    */
    top,
    /**
    Its height.
    */
    height,
    /**
    @internal Weird packed field that holds an array of children
    for composite blocks, a decoration for block widgets, and a
    number indicating the amount of widget-create line breaks for
    text blocks.
    */
    _content) {
      _classCallCheck(this, BlockInfo);
      this.from = from;
      this.length = length;
      this.top = top;
      this.height = height;
      this._content = _content;
    }
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    return _createClass(BlockInfo, [{
      key: "type",
      get: function get() {
        return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
    }, {
      key: "to",
      get: function get() {
        return this.from + this.length;
      }
      /**
      The bottom position of the element.
      */
    }, {
      key: "bottom",
      get: function get() {
        return this.top + this.height;
      }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
    }, {
      key: "widget",
      get: function get() {
        return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
    }, {
      key: "widgetLineBreaks",
      get: function get() {
        return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
    }, {
      key: "join",
      value: function join(other) {
        var content = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
      }
    }]);
  }();
  var QueryType$1 = /*@__PURE__*/function (QueryType) {
    QueryType[QueryType["ByPos"] = 0] = "ByPos";
    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType;
  }(QueryType$1 || (QueryType$1 = {}));
  var Epsilon = 1e-3;
  var HeightMap = /*#__PURE__*/function () {
    function HeightMap(length,
    // The number of characters covered
    height) {
      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
      _classCallCheck(this, HeightMap);
      this.length = length;
      this.height = height;
      this.flags = flags;
    }
    return _createClass(HeightMap, [{
      key: "outdated",
      get: function get() {
        return (this.flags & 2 /* Flag.Outdated */) > 0;
      },
      set: function set(value) {
        this.flags = (value ? 2 /* Flag.Outdated */ : 0) | this.flags & -3 /* Flag.Outdated */;
      }
    }, {
      key: "setHeight",
      value: function setHeight(height) {
        if (this.height != height) {
          if (Math.abs(this.height - height) > Epsilon) heightChangeFlag = true;
          this.height = height;
        }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
    }, {
      key: "replace",
      value: function replace(_from, _to, nodes) {
        return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(_to, result) {
        result.push(this);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(_from, result) {
        result.push(this);
      }
    }, {
      key: "applyChanges",
      value: function applyChanges(decorations, oldDoc, oracle, changes) {
        var me = this,
          doc = oracle.doc;
        for (var i = changes.length - 1; i >= 0; i--) {
          var _changes$i = changes[i],
            fromA = _changes$i.fromA,
            toA = _changes$i.toA,
            fromB = _changes$i.fromB,
            toB = _changes$i.toB;
          var start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
          var end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
          toB += end.to - toA;
          toA = end.to;
          while (i > 0 && start.from <= changes[i - 1].toA) {
            fromA = changes[i - 1].fromA;
            fromB = changes[i - 1].fromB;
            i--;
            if (fromA < start.from) start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
          }
          fromB += start.from - fromA;
          fromA = start.from;
          var nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
          me = replace(me, me.replace(fromA, toA, nodes));
        }
        return me.updateHeight(oracle, 0);
      }
    }], [{
      key: "empty",
      value: function empty() {
        return new HeightMapText(0, 0);
      }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
    }, {
      key: "of",
      value: function of(nodes) {
        if (nodes.length == 1) return nodes[0];
        var i = 0,
          j = nodes.length,
          before = 0,
          after = 0;
        for (;;) {
          if (i == j) {
            if (before > after * 2) {
              var split = nodes[i - 1];
              if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
              j += 1 + split["break"];
              before -= split.size;
            } else if (after > before * 2) {
              var _split = nodes[j];
              if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
              j += 2 + _split["break"];
              after -= _split.size;
            } else {
              break;
            }
          } else if (before < after) {
            var next = nodes[i++];
            if (next) before += next.size;
          } else {
            var _next2 = nodes[--j];
            if (_next2) after += _next2.size;
          }
        }
        var brk = 0;
        if (nodes[i - 1] == null) {
          brk = 1;
          i--;
        } else if (nodes[i] == null) {
          brk = 1;
          j++;
        }
        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
    }]);
  }();
  function replace(old, val) {
    if (old == val) return old;
    if (old.constructor != val.constructor) heightChangeFlag = true;
    return val;
  }
  HeightMap.prototype.size = 1;
  var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
    function HeightMapBlock(length, height, deco) {
      var _this23;
      _classCallCheck(this, HeightMapBlock);
      _this23 = _callSuper$5(this, HeightMapBlock, [length, height]);
      _this23.deco = deco;
      return _this23;
    }
    _inherits(HeightMapBlock, _HeightMap);
    return _createClass(HeightMapBlock, [{
      key: "blockAt",
      value: function blockAt(_height, _oracle, top, offset) {
        return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
      }
    }, {
      key: "lineAt",
      value: function lineAt(_value, _type, oracle, top, offset) {
        return this.blockAt(0, oracle, top, offset);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        if (from <= offset + this.length && to >= offset) f(this.blockAt(0, oracle, top, offset));
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        if (measured && measured.from <= offset && measured.more) this.setHeight(measured.heights[measured.index++]);
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "block(".concat(this.length, ")");
      }
    }]);
  }(HeightMap);
  var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
    function HeightMapText(length, height) {
      var _this24;
      _classCallCheck(this, HeightMapText);
      _this24 = _callSuper$5(this, HeightMapText, [length, height, null]);
      _this24.collapsed = 0; // Amount of collapsed content in the line
      _this24.widgetHeight = 0; // Maximum inline widget height
      _this24.breaks = 0; // Number of widget-introduced line breaks on the line
      return _this24;
    }
    _inherits(HeightMapText, _HeightMapBlock);
    return _createClass(HeightMapText, [{
      key: "blockAt",
      value: function blockAt(_height, _oracle, top, offset) {
        return new BlockInfo(offset, this.length, top, this.height, this.breaks);
      }
    }, {
      key: "replace",
      value: function replace(_from, _to, nodes) {
        var node = nodes[0];
        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* Flag.SingleLine */) && Math.abs(this.length - node.length) < 10) {
          if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
          if (!this.outdated) node.outdated = false;
          return node;
        } else {
          return HeightMap.of(nodes);
        }
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        if (measured && measured.from <= offset && measured.more) this.setHeight(measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
      }
    }]);
  }(HeightMapBlock);
  var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
    function HeightMapGap(length) {
      _classCallCheck(this, HeightMapGap);
      return _callSuper$5(this, HeightMapGap, [length, 0]);
    }
    _inherits(HeightMapGap, _HeightMap2);
    return _createClass(HeightMapGap, [{
      key: "heightMetrics",
      value: function heightMetrics(oracle, offset) {
        var firstLine = oracle.doc.lineAt(offset).number,
          lastLine = oracle.doc.lineAt(offset + this.length).number;
        var lines = lastLine - firstLine + 1;
        var perLine,
          perChar = 0;
        if (oracle.lineWrapping) {
          var totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
          perLine = totalPerLine / lines;
          if (this.length > lines + 1) perChar = (this.height - totalPerLine) / (this.length - lines - 1);
        } else {
          perLine = this.height / lines;
        }
        return {
          firstLine: firstLine,
          lastLine: lastLine,
          perLine: perLine,
          perChar: perChar
        };
      }
    }, {
      key: "blockAt",
      value: function blockAt(height, oracle, top, offset) {
        var _this$heightMetrics = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics.firstLine,
          lastLine = _this$heightMetrics.lastLine,
          perLine = _this$heightMetrics.perLine,
          perChar = _this$heightMetrics.perChar;
        if (oracle.lineWrapping) {
          var guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
          var line = oracle.doc.lineAt(guess),
            lineHeight = perLine + line.length * perChar;
          var lineTop = Math.max(top, height - lineHeight / 2);
          return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
        } else {
          var _line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
          var _oracle$doc$line = oracle.doc.line(firstLine + _line),
            from = _oracle$doc$line.from,
            length = _oracle$doc$line.length;
          return new BlockInfo(from, length, top + perLine * _line, perLine, 0);
        }
      }
    }, {
      key: "lineAt",
      value: function lineAt(value, type, oracle, top, offset) {
        if (type == QueryType$1.ByHeight) return this.blockAt(value, oracle, top, offset);
        if (type == QueryType$1.ByPosNoHeight) {
          var _oracle$doc$lineAt = oracle.doc.lineAt(value),
            from = _oracle$doc$lineAt.from,
            to = _oracle$doc$lineAt.to;
          return new BlockInfo(from, to - from, 0, 0, 0);
        }
        var _this$heightMetrics2 = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics2.firstLine,
          perLine = _this$heightMetrics2.perLine,
          perChar = _this$heightMetrics2.perChar;
        var line = oracle.doc.lineAt(value),
          lineHeight = perLine + line.length * perChar;
        var linesAbove = line.number - firstLine;
        var lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
        return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        from = Math.max(from, offset);
        to = Math.min(to, offset + this.length);
        var _this$heightMetrics3 = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics3.firstLine,
          perLine = _this$heightMetrics3.perLine,
          perChar = _this$heightMetrics3.perChar;
        for (var pos = from, lineTop = top; pos <= to;) {
          var line = oracle.doc.lineAt(pos);
          if (pos == from) {
            var linesAbove = line.number - firstLine;
            lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
          }
          var lineHeight = perLine + perChar * line.length;
          f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
          lineTop += lineHeight;
          pos = line.to + 1;
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, nodes) {
        var after = this.length - to;
        if (after > 0) {
          var last = nodes[nodes.length - 1];
          if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
        }
        if (from > 0) {
          var first = nodes[0];
          if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
        }
        return HeightMap.of(nodes);
      }
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(to, result) {
        result.push(new HeightMapGap(to - 1), null);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(from, result) {
        result.push(null, new HeightMapGap(this.length - from - 1));
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        var end = offset + this.length;
        if (measured && measured.from <= offset + this.length && measured.more) {
          // Fill in part of this gap with measured lines. We know there
          // can't be widgets or collapsed ranges in those lines, because
          // they would already have been added to the heightmap (gaps
          // only contain plain text).
          var nodes = [],
            pos = Math.max(offset, measured.from),
            singleHeight = -1;
          if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
          while (pos <= end && measured.more) {
            var len = oracle.doc.lineAt(pos).length;
            if (nodes.length) nodes.push(null);
            var height = measured.heights[measured.index++];
            if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
            var line = new HeightMapText(len, height);
            line.outdated = false;
            nodes.push(line);
            pos += len + 1;
          }
          if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
          var result = HeightMap.of(nodes);
          if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon) heightChangeFlag = true;
          return replace(this, result);
        } else if (force || this.outdated) {
          this.setHeight(oracle.heightForGap(offset, offset + this.length));
          this.outdated = false;
        }
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "gap(".concat(this.length, ")");
      }
    }]);
  }(HeightMap);
  var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
    function HeightMapBranch(left, brk, right) {
      var _this25;
      _classCallCheck(this, HeightMapBranch);
      _this25 = _callSuper$5(this, HeightMapBranch, [left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0)]);
      _this25.left = left;
      _this25.right = right;
      _this25.size = left.size + right.size;
      return _this25;
    }
    _inherits(HeightMapBranch, _HeightMap3);
    return _createClass(HeightMapBranch, [{
      key: "break",
      get: function get() {
        return this.flags & 1 /* Flag.Break */;
      }
    }, {
      key: "blockAt",
      value: function blockAt(height, oracle, top, offset) {
        var mid = top + this.left.height;
        return height < mid ? this.left.blockAt(height, oracle, top, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this["break"]);
      }
    }, {
      key: "lineAt",
      value: function lineAt(value, type, oracle, top, offset) {
        var rightTop = top + this.left.height,
          rightOffset = offset + this.left.length + this["break"];
        var left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
        var base = left ? this.left.lineAt(value, type, oracle, top, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
        if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
        var subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
        if (left) return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        var rightTop = top + this.left.height,
          rightOffset = offset + this.left.length + this["break"];
        if (this["break"]) {
          if (from < rightOffset) this.left.forEachLine(from, to, oracle, top, offset, f);
          if (to >= rightOffset) this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
        } else {
          var mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
          if (from < mid.from) this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
          if (mid.to >= from && mid.from <= to) f(mid);
          if (to > mid.to) this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, nodes) {
        var rightStart = this.left.length + this["break"];
        if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
        if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
        var result = [];
        if (from > 0) this.decomposeLeft(from, result);
        var left = result.length;
        var _iterator32 = _createForOfIteratorHelper$a(nodes),
          _step32;
        try {
          for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
            var node = _step32.value;
            result.push(node);
          }
        } catch (err) {
          _iterator32.e(err);
        } finally {
          _iterator32.f();
        }
        if (from > 0) mergeGaps(result, left - 1);
        if (to < this.length) {
          var right = result.length;
          this.decomposeRight(to, result);
          mergeGaps(result, right);
        }
        return HeightMap.of(result);
      }
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(to, result) {
        var left = this.left.length;
        if (to <= left) return this.left.decomposeLeft(to, result);
        result.push(this.left);
        if (this["break"]) {
          left++;
          if (to >= left) result.push(null);
        }
        if (to > left) this.right.decomposeLeft(to - left, result);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(from, result) {
        var left = this.left.length,
          right = left + this["break"];
        if (from >= right) return this.right.decomposeRight(from - right, result);
        if (from < left) this.left.decomposeRight(from, result);
        if (this["break"] && from < right) result.push(null);
        result.push(this.right);
      }
    }, {
      key: "balanced",
      value: function balanced(left, right) {
        if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
        this.left = replace(this.left, left);
        this.right = replace(this.right, right);
        this.setHeight(left.height + right.height);
        this.outdated = left.outdated || right.outdated;
        this.size = left.size + right.size;
        this.length = left.length + this["break"] + right.length;
        return this;
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        var left = this.left,
          right = this.right,
          rightStart = offset + left.length + this["break"],
          rebalance = null;
        if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
        if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
        if (rebalance) return this.balanced(left, right);
        this.height = this.left.height + this.right.height;
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.left + (this["break"] ? " " : "-") + this.right;
      }
    }]);
  }(HeightMap);
  function mergeGaps(nodes, around) {
    var before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  var relevantWidgetHeight = 5;
  var NodeBuilder = /*#__PURE__*/function () {
    function NodeBuilder(pos, oracle) {
      _classCallCheck(this, NodeBuilder);
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    return _createClass(NodeBuilder, [{
      key: "isCovered",
      get: function get() {
        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
    }, {
      key: "span",
      value: function span(_from, to) {
        if (this.lineStart > -1) {
          var end = Math.min(to, this.lineEnd),
            last = this.nodes[this.nodes.length - 1];
          if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
          this.writtenTo = end;
          if (to > end) {
            this.nodes.push(null);
            this.writtenTo++;
            this.lineStart = -1;
          }
        }
        this.pos = to;
      }
    }, {
      key: "point",
      value: function point(from, to, deco) {
        if (from < to || deco.heightRelevant) {
          var height = deco.widget ? deco.widget.estimatedHeight : 0;
          var breaks = deco.widget ? deco.widget.lineBreaks : 0;
          if (height < 0) height = this.oracle.lineHeight;
          var len = to - from;
          if (deco.block) {
            this.addBlock(new HeightMapBlock(len, height, deco));
          } else if (len || breaks || height >= relevantWidgetHeight) {
            this.addLineDeco(height, breaks, len);
          }
        } else if (to > from) {
          this.span(from, to);
        }
        if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
    }, {
      key: "enterLine",
      value: function enterLine() {
        if (this.lineStart > -1) return;
        var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
          from = _this$oracle$doc$line.from,
          to = _this$oracle$doc$line.to;
        this.lineStart = from;
        this.lineEnd = to;
        if (this.writtenTo < from) {
          if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
          this.nodes.push(null);
        }
        if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
        this.writtenTo = this.pos;
      }
    }, {
      key: "blankContent",
      value: function blankContent(from, to) {
        var gap = new HeightMapGap(to - from);
        if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* Flag.SingleLine */;
        return gap;
      }
    }, {
      key: "ensureLine",
      value: function ensureLine() {
        this.enterLine();
        var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
        if (last instanceof HeightMapText) return last;
        var line = new HeightMapText(0, -1);
        this.nodes.push(line);
        return line;
      }
    }, {
      key: "addBlock",
      value: function addBlock(block) {
        this.enterLine();
        var deco = block.deco;
        if (deco && deco.startSide > 0 && !this.isCovered) this.ensureLine();
        this.nodes.push(block);
        this.writtenTo = this.pos = this.pos + block.length;
        if (deco && deco.endSide > 0) this.covering = block;
      }
    }, {
      key: "addLineDeco",
      value: function addLineDeco(height, breaks, length) {
        var line = this.ensureLine();
        line.length += length;
        line.collapsed += length;
        line.widgetHeight = Math.max(line.widgetHeight, height);
        line.breaks += breaks;
        this.writtenTo = this.pos = this.pos + length;
      }
    }, {
      key: "finish",
      value: function finish(from) {
        var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
        var pos = from;
        var _iterator33 = _createForOfIteratorHelper$a(this.nodes),
          _step33;
        try {
          for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
            var node = _step33.value;
            if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
            pos += node ? node.length : 1;
          }
        } catch (err) {
          _iterator33.e(err);
        } finally {
          _iterator33.f();
        }
        return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
    }], [{
      key: "build",
      value: function build(oracle, decorations, from, to) {
        var builder = new NodeBuilder(from, oracle);
        RangeSet.spans(decorations, from, to, builder, 0);
        return builder.finish(from);
      }
    }]);
  }();
  function heightRelevantDecoChanges(a, b, diff) {
    var comp = new DecorationComparator();
    RangeSet.compare(a, b, diff, comp, 0);
    return comp.changes;
  }
  var DecorationComparator = /*#__PURE__*/function () {
    function DecorationComparator() {
      _classCallCheck(this, DecorationComparator);
      this.changes = [];
    }
    return _createClass(DecorationComparator, [{
      key: "compareRange",
      value: function compareRange() {}
    }, {
      key: "comparePoint",
      value: function comparePoint(from, to, a, b) {
        if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
      }
    }]);
  }();
  function visiblePixelRange(dom, paddingTop) {
    var rect = dom.getBoundingClientRect();
    var doc = dom.ownerDocument,
      win = doc.defaultView || window;
    var left = Math.max(0, rect.left),
      right = Math.min(win.innerWidth, rect.right);
    var top = Math.max(0, rect.top),
      bottom = Math.min(win.innerHeight, rect.bottom);
    for (var parent = dom.parentNode; parent && parent != doc.body;) {
      if (parent.nodeType == 1) {
        var elt = parent;
        var style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          var parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top = Math.max(top, parentRect.top);
          bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        // Shadow root
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top - (rect.top + paddingTop),
      bottom: Math.max(top, bottom) - (rect.top + paddingTop)
    };
  }
  function inWindow(elt) {
    var rect = elt.getBoundingClientRect(),
      win = elt.ownerDocument.defaultView || window;
    return rect.left < win.innerWidth && rect.right > 0 && rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
    var rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  var LineGap = /*#__PURE__*/function () {
    function LineGap(from, to, size, displaySize) {
      _classCallCheck(this, LineGap);
      this.from = from;
      this.to = to;
      this.size = size;
      this.displaySize = displaySize;
    }
    return _createClass(LineGap, [{
      key: "draw",
      value: function draw(viewState, wrapping) {
        return Decoration.replace({
          widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
        }).range(this.from, this.to);
      }
    }], [{
      key: "same",
      value: function same(a, b) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) {
          var gA = a[i],
            gB = b[i];
          if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
        }
        return true;
      }
    }]);
  }();
  var LineGapWidget = /*#__PURE__*/function (_WidgetType3) {
    function LineGapWidget(size, vertical) {
      var _this26;
      _classCallCheck(this, LineGapWidget);
      _this26 = _callSuper$5(this, LineGapWidget);
      _this26.size = size;
      _this26.vertical = vertical;
      return _this26;
    }
    _inherits(LineGapWidget, _WidgetType3);
    return _createClass(LineGapWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.size == this.size && other.vertical == this.vertical;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        var elt = document.createElement("div");
        if (this.vertical) {
          elt.style.height = this.size + "px";
        } else {
          elt.style.width = this.size + "px";
          elt.style.height = "2px";
          elt.style.display = "inline-block";
        }
        return elt;
      }
    }, {
      key: "estimatedHeight",
      get: function get() {
        return this.vertical ? this.size : -1;
      }
    }]);
  }(WidgetType);
  var ViewState = /*#__PURE__*/function () {
    function ViewState(state) {
      var _this27 = this;
      _classCallCheck(this, ViewState);
      this.state = state;
      // These are contentDOM-local coordinates
      this.pixelViewport = {
        left: 0,
        right: window.innerWidth,
        top: 0,
        bottom: 0
      };
      this.inView = true;
      this.paddingTop = 0; // Padding above the document, scaled
      this.paddingBottom = 0; // Padding below the document, scaled
      this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
      this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
      this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
      this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
      this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
      this.scrolledToBottom = false;
      // The CSS-transformation scale of the editor (transformed size /
      // concrete size)
      this.scaleX = 1;
      this.scaleY = 1;
      // The vertical position (document-relative) to which to anchor the
      // scroll position. -1 means anchor to the end of the document.
      this.scrollAnchorPos = 0;
      // The height at the anchor position. Set by the DOM update phase.
      // -1 means no height available.
      this.scrollAnchorHeight = -1;
      // See VP.MaxDOMHeight
      this.scaler = IdScaler;
      this.scrollTarget = null;
      // Briefly set to true when printing, to disable viewport limiting
      this.printing = false;
      // Flag set when editor content was redrawn, so that the next
      // measure stage knows it must read DOM layout
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      // Cursor 'assoc' is only significant when the cursor is on a line
      // wrap point, where it must stick to the character that it is
      // associated with. Since browsers don't provide a reasonable
      // interface to set or query this, when a selection is set that
      // might cause this to be significant, this flag is set. The next
      // measure phase will check whether the cursor is on a line-wrapping
      // boundary and, if so, reset it to make sure it is positioned in
      // the right place.
      this.mustEnforceCursorAssoc = false;
      var guessWrapping = state.facet(contentAttributes).some(function (v) {
        return typeof v != "function" && v["class"] == "cm-lineWrapping";
      });
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter(function (d) {
        return typeof d != "function";
      });
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      for (var i = 0; i < 2; i++) {
        this.viewport = this.getViewport(0, null);
        if (!this.updateForViewport()) break;
      }
      this.updateViewportLines();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
        return gap.draw(_this27, false);
      }));
      this.computeVisibleRanges();
    }
    return _createClass(ViewState, [{
      key: "updateForViewport",
      value: function updateForViewport() {
        var _this28 = this;
        var viewports = [this.viewport],
          main = this.state.selection.main;
        var _loop3 = function _loop3() {
          var pos = i ? main.head : main.anchor;
          if (!viewports.some(function (_ref4) {
            var from = _ref4.from,
              to = _ref4.to;
            return pos >= from && pos <= to;
          })) {
            var _this28$lineBlockAt = _this28.lineBlockAt(pos),
              from = _this28$lineBlockAt.from,
              to = _this28$lineBlockAt.to;
            viewports.push(new Viewport(from, to));
          }
        };
        for (var i = 0; i <= 1; i++) {
          _loop3();
        }
        this.viewports = viewports.sort(function (a, b) {
          return a.from - b.from;
        });
        return this.updateScaler();
      }
    }, {
      key: "updateScaler",
      value: function updateScaler() {
        var scaler = this.scaler;
        this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
      }
    }, {
      key: "updateViewportLines",
      value: function updateViewportLines() {
        var _this29 = this;
        this.viewportLines = [];
        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, function (block) {
          _this29.viewportLines.push(scaleBlock(block, _this29.scaler));
        });
      }
    }, {
      key: "update",
      value: function update(_update6) {
        var scrollTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        this.state = _update6.state;
        var prevDeco = this.stateDeco;
        this.stateDeco = this.state.facet(decorations).filter(function (d) {
          return typeof d != "function";
        });
        var contentChanges = _update6.changedRanges;
        var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, _update6 ? _update6.changes : ChangeSet.empty(this.state.doc.length)));
        var prevHeight = this.heightMap.height;
        var scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
        clearHeightChangeFlag();
        this.heightMap = this.heightMap.applyChanges(this.stateDeco, _update6.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
        if (this.heightMap.height != prevHeight || heightChangeFlag) _update6.flags |= 2 /* UpdateFlag.Height */;
        if (scrollAnchor) {
          this.scrollAnchorPos = _update6.changes.mapPos(scrollAnchor.from, -1);
          this.scrollAnchorHeight = scrollAnchor.top;
        } else {
          this.scrollAnchorPos = -1;
          this.scrollAnchorHeight = this.heightMap.height;
        }
        var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update6.changes) : this.viewport;
        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
        var viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
        this.viewport = viewport;
        _update6.flags |= this.updateForViewport();
        if (viewportChange || !_update6.changes.empty || _update6.flags & 2 /* UpdateFlag.Height */) this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update6.changes)));
        _update6.flags |= this.computeVisibleRanges(_update6.changes);
        if (scrollTarget) this.scrollTarget = scrollTarget;
        if (!this.mustEnforceCursorAssoc && _update6.selectionSet && _update6.view.lineWrapping && _update6.state.selection.main.empty && _update6.state.selection.main.assoc && !_update6.state.facet(nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;
      }
    }, {
      key: "measure",
      value: function measure(view) {
        var dom = view.contentDOM,
          style = window.getComputedStyle(dom);
        var oracle = this.heightOracle;
        var whiteSpace = style.whiteSpace;
        this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
        var refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
        var domRect = dom.getBoundingClientRect();
        var measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
        this.contentDOMHeight = domRect.height;
        this.mustMeasureContent = false;
        var result = 0,
          bias = 0;
        if (domRect.width && domRect.height) {
          var _getScale2 = getScale(dom, domRect),
            scaleX = _getScale2.scaleX,
            scaleY = _getScale2.scaleY;
          if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 || scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
            this.scaleX = scaleX;
            this.scaleY = scaleY;
            result |= 16 /* UpdateFlag.Geometry */;
            refresh = measureContent = true;
          }
        }
        // Vertical padding
        var paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
        var paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
          this.paddingTop = paddingTop;
          this.paddingBottom = paddingBottom;
          result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
        }
        if (this.editorWidth != view.scrollDOM.clientWidth) {
          if (oracle.lineWrapping) measureContent = true;
          this.editorWidth = view.scrollDOM.clientWidth;
          result |= 16 /* UpdateFlag.Geometry */;
        }
        var scrollTop = view.scrollDOM.scrollTop * this.scaleY;
        if (this.scrollTop != scrollTop) {
          this.scrollAnchorHeight = -1;
          this.scrollTop = scrollTop;
        }
        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
        // Pixel viewport
        var pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
        var dTop = pixelViewport.top - this.pixelViewport.top,
          dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
        this.pixelViewport = pixelViewport;
        var inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
        if (inView != this.inView) {
          this.inView = inView;
          if (inView) measureContent = true;
        }
        if (!this.inView && !this.scrollTarget && !inWindow(view.dom)) return 0;
        var contentWidth = domRect.width;
        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
          this.contentDOMWidth = domRect.width;
          this.editorHeight = view.scrollDOM.clientHeight;
          result |= 16 /* UpdateFlag.Geometry */;
        }
        if (measureContent) {
          var lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
          if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
          if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
            var _view$docView$measure = view.docView.measureTextSize(),
              lineHeight = _view$docView$measure.lineHeight,
              charWidth = _view$docView$measure.charWidth,
              textHeight = _view$docView$measure.textHeight;
            refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
            if (refresh) {
              view.docView.minWidth = 0;
              result |= 16 /* UpdateFlag.Geometry */;
            }
          }
          if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
          clearHeightChangeFlag();
          var _iterator34 = _createForOfIteratorHelper$a(this.viewports),
            _step34;
          try {
            for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
              var vp = _step34.value;
              var heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
              this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
            }
          } catch (err) {
            _iterator34.e(err);
          } finally {
            _iterator34.f();
          }
          if (heightChangeFlag) result |= 2 /* UpdateFlag.Height */;
        }
        var viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
        if (viewportChange) {
          if (result & 2 /* UpdateFlag.Height */) result |= this.updateScaler();
          this.viewport = this.getViewport(bias, this.scrollTarget);
          result |= this.updateForViewport();
        }
        if (result & 2 /* UpdateFlag.Height */ || viewportChange) this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
        result |= this.computeVisibleRanges();
        if (this.mustEnforceCursorAssoc) {
          this.mustEnforceCursorAssoc = false;
          // This is done in the read stage, because moving the selection
          // to a line end is going to trigger a layout anyway, so it
          // can't be a pure write. It should be rare that it does any
          // writing.
          view.docView.enforceCursorAssoc();
        }
        return result;
      }
    }, {
      key: "visibleTop",
      get: function get() {
        return this.scaler.fromDOM(this.pixelViewport.top);
      }
    }, {
      key: "visibleBottom",
      get: function get() {
        return this.scaler.fromDOM(this.pixelViewport.bottom);
      }
    }, {
      key: "getViewport",
      value: function getViewport(bias, scrollTarget) {
        // This will divide VP.Margin between the top and the
        // bottom, depending on the bias (the change in viewport position
        // since the last update). It'll hold a number between 0 and 1
        var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
        var map = this.heightMap,
          oracle = this.heightOracle;
        var visibleTop = this.visibleTop,
          visibleBottom = this.visibleBottom;
        var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
        // If scrollTarget is given, make sure the viewport includes that position
        if (scrollTarget) {
          var head = scrollTarget.range.head;
          if (head < viewport.from || head > viewport.to) {
            var viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
            var block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0),
              topPos;
            if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
            viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
          }
        }
        return viewport;
      }
    }, {
      key: "mapViewport",
      value: function mapViewport(viewport, changes) {
        var from = changes.mapPos(viewport.from, -1),
          to = changes.mapPos(viewport.to, 1);
        return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
    }, {
      key: "viewportIsAppropriate",
      value: function viewportIsAppropriate(_ref5) {
        var from = _ref5.from,
          to = _ref5.to;
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (!this.inView) return true;
        var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0),
          top = _this$heightMap$lineA.top;
        var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0),
          bottom = _this$heightMap$lineA2.bottom;
        var visibleTop = this.visibleTop,
          visibleBottom = this.visibleBottom;
        return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */;
      }
    }, {
      key: "mapLineGaps",
      value: function mapLineGaps(gaps, changes) {
        if (!gaps.length || changes.empty) return gaps;
        var mapped = [];
        var _iterator35 = _createForOfIteratorHelper$a(gaps),
          _step35;
        try {
          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
            var gap = _step35.value;
            if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
          }
        } catch (err) {
          _iterator35.e(err);
        } finally {
          _iterator35.f();
        }
        return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
    }, {
      key: "ensureLineGaps",
      value: function ensureLineGaps(current, mayMeasure) {
        var _this30 = this;
        var wrapping = this.heightOracle.lineWrapping;
        var margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */,
          halfMargin = margin >> 1,
          doubleMargin = margin << 1;
        // The non-wrapping logic won't work at all in predominantly right-to-left text.
        if (this.defaultTextDirection != Direction.LTR && !wrapping) return [];
        var gaps = [];
        var _addGap = function addGap(from, to, line, structure) {
          if (to - from < halfMargin) return;
          var sel = _this30.state.selection.main,
            avoid = [sel.from];
          if (!sel.empty) avoid.push(sel.to);
          for (var _i8 = 0, _avoid = avoid; _i8 < _avoid.length; _i8++) {
            var pos = _avoid[_i8];
            if (pos > from && pos < to) {
              _addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
              _addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
              return;
            }
          }
          var gap = find(current, function (gap) {
            return gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some(function (pos) {
              return gap.from < pos && gap.to > pos;
            });
          });
          if (!gap) {
            // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
            if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some(function (r) {
              return r.from <= to && r.to >= to;
            })) {
              var lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
              if (lineStart > from) to = lineStart;
            }
            var size = _this30.gapSize(line, from, to, structure);
            var displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
            gap = new LineGap(from, to, size, displaySize);
          }
          gaps.push(gap);
        };
        var checkLine = function checkLine(line) {
          if (line.length < doubleMargin || line.type != BlockType.Text) return;
          var structure = lineStructure(line.from, line.to, _this30.stateDeco);
          if (structure.total < doubleMargin) return;
          var target = _this30.scrollTarget ? _this30.scrollTarget.range.head : null;
          var viewFrom, viewTo;
          if (wrapping) {
            var marginHeight = margin / _this30.heightOracle.lineLength * _this30.heightOracle.lineHeight;
            var top, bot;
            if (target != null) {
              var targetFrac = findFraction(structure, target);
              var spaceFrac = ((_this30.visibleBottom - _this30.visibleTop) / 2 + marginHeight) / line.height;
              top = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              top = (_this30.visibleTop - line.top - marginHeight) / line.height;
              bot = (_this30.visibleBottom - line.top + marginHeight) / line.height;
            }
            viewFrom = findPosition(structure, top);
            viewTo = findPosition(structure, bot);
          } else {
            var totalWidth = structure.total * _this30.heightOracle.charWidth;
            var marginWidth = margin * _this30.heightOracle.charWidth;
            var horizOffset = 0;
            if (totalWidth > 2000000 /* VP.MaxHorizGap */) {
              var _iterator36 = _createForOfIteratorHelper$a(current),
                _step36;
              try {
                for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                  var old = _step36.value;
                  if (old.from >= line.from && old.from < line.to && old.size != old.displaySize && old.from * _this30.heightOracle.charWidth + horizOffset < _this30.pixelViewport.left) horizOffset = old.size - old.displaySize;
                }
              } catch (err) {
                _iterator36.e(err);
              } finally {
                _iterator36.f();
              }
            }
            var pxLeft = _this30.pixelViewport.left + horizOffset,
              pxRight = _this30.pixelViewport.right + horizOffset;
            var left, right;
            if (target != null) {
              var _targetFrac = findFraction(structure, target);
              var _spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
              left = _targetFrac - _spaceFrac;
              right = _targetFrac + _spaceFrac;
            } else {
              left = (pxLeft - marginWidth) / totalWidth;
              right = (pxRight + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left);
            viewTo = findPosition(structure, right);
          }
          if (viewFrom > line.from) _addGap(line.from, viewFrom, line, structure);
          if (viewTo < line.to) _addGap(viewTo, line.to, line, structure);
        };
        var _iterator37 = _createForOfIteratorHelper$a(this.viewportLines),
          _step37;
        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
            var line = _step37.value;
            if (Array.isArray(line.type)) line.type.forEach(checkLine);else checkLine(line);
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }
        return gaps;
      }
    }, {
      key: "gapSize",
      value: function gapSize(line, from, to, structure) {
        var fraction = findFraction(structure, to) - findFraction(structure, from);
        if (this.heightOracle.lineWrapping) {
          return line.height * fraction;
        } else {
          return structure.total * this.heightOracle.charWidth * fraction;
        }
      }
    }, {
      key: "updateLineGaps",
      value: function updateLineGaps(gaps) {
        var _this31 = this;
        if (!LineGap.same(gaps, this.lineGaps)) {
          this.lineGaps = gaps;
          this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
            return gap.draw(_this31, _this31.heightOracle.lineWrapping);
          }));
        }
      }
    }, {
      key: "computeVisibleRanges",
      value: function computeVisibleRanges(changes) {
        var deco = this.stateDeco;
        if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
        var ranges = [];
        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
          span: function span(from, to) {
            ranges.push({
              from: from,
              to: to
            });
          },
          point: function point() {}
        }, 20);
        var changed = 0;
        if (ranges.length != this.visibleRanges.length) {
          changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
        } else {
          for (var i = 0; i < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); i++) {
            var old = this.visibleRanges[i],
              nw = ranges[i];
            if (old.from != nw.from || old.to != nw.to) {
              changed |= 4 /* UpdateFlag.Viewport */;
              if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to)) changed |= 8 /* UpdateFlag.ViewportMoved */;
            }
          }
        }
        this.visibleRanges = ranges;
        return changed;
      }
    }, {
      key: "lineBlockAt",
      value: function lineBlockAt(pos) {
        return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(function (b) {
          return b.from <= pos && b.to >= pos;
        }) || scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "lineBlockAtHeight",
      value: function lineBlockAtHeight(height) {
        return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find(function (l) {
          return l.top <= height && l.bottom >= height;
        }) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "scrollAnchorAt",
      value: function scrollAnchorAt(scrollTop) {
        var block = this.lineBlockAtHeight(scrollTop + 8);
        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
      }
    }, {
      key: "elementAtHeight",
      value: function elementAtHeight(height) {
        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "docHeight",
      get: function get() {
        return this.scaler.toDOM(this.heightMap.height);
      }
    }, {
      key: "contentHeight",
      get: function get() {
        return this.docHeight + this.paddingTop + this.paddingBottom;
      }
    }]);
  }();
  var Viewport = /*#__PURE__*/_createClass(function Viewport(from, to) {
    _classCallCheck(this, Viewport);
    this.from = from;
    this.to = to;
  });
  function lineStructure(from, to, stateDeco) {
    var ranges = [],
      pos = from,
      total = 0;
    RangeSet.spans(stateDeco, from, to, {
      span: function span() {},
      point: function point(from, to) {
        if (from > pos) {
          ranges.push({
            from: pos,
            to: from
          });
          total += from - pos;
        }
        pos = to;
      }
    }, 20); // We're only interested in collapsed ranges of a significant size
    if (pos < to) {
      ranges.push({
        from: pos,
        to: to
      });
      total += to - pos;
    }
    return {
      total: total,
      ranges: ranges
    };
  }
  function findPosition(_ref6, ratio) {
    var total = _ref6.total,
      ranges = _ref6.ranges;
    if (ratio <= 0) return ranges[0].from;
    if (ratio >= 1) return ranges[ranges.length - 1].to;
    var dist = Math.floor(total * ratio);
    for (var i = 0;; i++) {
      var _ranges$i = ranges[i],
        from = _ranges$i.from,
        to = _ranges$i.to,
        size = to - from;
      if (dist <= size) return from + dist;
      dist -= size;
    }
  }
  function findFraction(structure, pos) {
    var counted = 0;
    var _iterator38 = _createForOfIteratorHelper$a(structure.ranges),
      _step38;
    try {
      for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
        var _step38$value = _step38.value,
          from = _step38$value.from,
          to = _step38$value.to;
        if (pos <= to) {
          counted += pos - from;
          break;
        }
        counted += to - from;
      }
    } catch (err) {
      _iterator38.e(err);
    } finally {
      _iterator38.f();
    }
    return counted / structure.total;
  }
  function find(array, f) {
    var _iterator39 = _createForOfIteratorHelper$a(array),
      _step39;
    try {
      for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
        var val = _step39.value;
        if (f(val)) return val;
      }
    } catch (err) {
      _iterator39.e(err);
    } finally {
      _iterator39.f();
    }
    return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  var IdScaler = {
    toDOM: function toDOM(n) {
      return n;
    },
    fromDOM: function fromDOM(n) {
      return n;
    },
    scale: 1,
    eq: function eq(other) {
      return other == this;
    }
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  var BigScaler = /*#__PURE__*/function () {
    function BigScaler(oracle, heightMap, viewports) {
      _classCallCheck(this, BigScaler);
      var vpHeight = 0,
        base = 0,
        domBase = 0;
      this.viewports = viewports.map(function (_ref7) {
        var from = _ref7.from,
          to = _ref7.to;
        var top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
        var bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
        vpHeight += bottom - top;
        return {
          from: from,
          to: to,
          top: top,
          bottom: bottom,
          domTop: 0,
          domBottom: 0
        };
      });
      this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
      var _iterator40 = _createForOfIteratorHelper$a(this.viewports),
        _step40;
      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var obj = _step40.value;
          obj.domTop = domBase + (obj.top - base) * this.scale;
          domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
          base = obj.bottom;
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }
    }
    return _createClass(BigScaler, [{
      key: "toDOM",
      value: function toDOM(n) {
        for (var i = 0, _base = 0, domBase = 0;; i++) {
          var vp = i < this.viewports.length ? this.viewports[i] : null;
          if (!vp || n < vp.top) return domBase + (n - _base) * this.scale;
          if (n <= vp.bottom) return vp.domTop + (n - vp.top);
          _base = vp.bottom;
          domBase = vp.domBottom;
        }
      }
    }, {
      key: "fromDOM",
      value: function fromDOM(n) {
        for (var i = 0, _base2 = 0, domBase = 0;; i++) {
          var vp = i < this.viewports.length ? this.viewports[i] : null;
          if (!vp || n < vp.domTop) return _base2 + (n - domBase) / this.scale;
          if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
          _base2 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
    }, {
      key: "eq",
      value: function eq(other) {
        if (!(other instanceof BigScaler)) return false;
        return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every(function (vp, i) {
          return vp.from == other.viewports[i].from && vp.to == other.viewports[i].to;
        });
      }
    }]);
  }();
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1) return block;
    var bTop = scaler.toDOM(block.top),
      bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(function (b) {
      return scaleBlock(b, scaler);
    }) : block._content);
  }
  var _theme = /*@__PURE__*/Facet.define({
    combine: function combine(strs) {
      return strs.join(" ");
    }
  });
  var darkTheme = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.indexOf(true) > -1;
    }
  });
  var baseThemeID = /*@__PURE__*/StyleModule.newName(),
    baseLightID = /*@__PURE__*/StyleModule.newName(),
    baseDarkID = /*@__PURE__*/StyleModule.newName();
  var lightDarkIDs = {
    "&light": "." + baseLightID,
    "&dark": "." + baseDarkID
  };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish: function finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
          if (m == "&") return main;
          if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
          return scopes[m];
        }) : main + " " + sel;
      }
    });
  }
  var baseTheme$1$2 = /*@__PURE__*/buildTheme("." + baseThemeID, {
    "&": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0,
      overflowAnchor: "none"
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      // https://github.com/codemirror/dev/issues/456
      boxSizing: "border-box",
      minHeight: "100%",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      // For IE
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      // For Safari, which doesn't support overflow-wrap: anywhere
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": {
      caretColor: "black"
    },
    "&dark .cm-content": {
      caretColor: "white"
    },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      position: "absolute",
      left: 0,
      top: 0,
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    "@keyframes cm-blink2": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#ddd"
    },
    ".cm-dropCursor": {
      position: "absolute"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
      display: "block"
    },
    ".cm-iso": {
      unicodeBidi: "isolate"
    },
    ".cm-announced": {
      position: "fixed",
      top: "-10000px"
    },
    "@media print": {
      ".cm-announced": {
        display: "none"
      }
    },
    "&light .cm-activeLine": {
      backgroundColor: "#cceeff44"
    },
    "&dark .cm-activeLine": {
      backgroundColor: "#99eeff33"
    },
    "&light .cm-specialChar": {
      color: "red"
    },
    "&dark .cm-specialChar": {
      color: "#f78"
    },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      insetInlineStart: 0,
      zIndex: 200
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      // Necessary -- prevents margin collapsing
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0,
      zIndex: 300
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top",
      userSelect: "none"
    },
    ".cm-highlightSpace": {
      backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
      backgroundPosition: "center"
    },
    ".cm-highlightTab": {
      backgroundImage: "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')",
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  var observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  var useCharData = browser.ie && browser.ie_version <= 11;
  var DOMObserver = /*#__PURE__*/function () {
    function DOMObserver(view) {
      var _this32 = this;
      _classCallCheck(this, DOMObserver);
      this.view = view;
      this.active = false;
      this.editContext = null;
      // The known selection. Kept in our own object, as opposed to just
      // directly accessing the selection because:
      //  - Safari doesn't report the right selection in shadow DOM
      //  - Reading from the selection forces a DOM layout
      //  - This way, we can ignore selectionchange events if we have
      //    already seen the 'new' selection
      this.selectionRange = new DOMSelectionState();
      // Set when a selection change is detected, cleared on flush
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      this.printQuery = null;
      // Timeout for scheduling check of the parents that need scroll handlers
      this.parentCheck = -1;
      this.dom = view.contentDOM;
      this.observer = new MutationObserver(function (mutations) {
        var _iterator41 = _createForOfIteratorHelper$a(mutations),
          _step41;
        try {
          for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
            var mut = _step41.value;
            _this32.queue.push(mut);
          }
          // IE11 will sometimes (on typing over a selection or
          // backspacing out a single character text node) call the
          // observer callback before actually updating the DOM.
          //
          // Unrelatedly, iOS Safari will, when ending a composition,
          // sometimes first clear it, deliver the mutations, and then
          // reinsert the finished text. CodeMirror's handling of the
          // deletion will prevent the reinsertion from happening,
          // breaking composition.
        } catch (err) {
          _iterator41.e(err);
        } finally {
          _iterator41.f();
        }
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
          return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
        })) _this32.flushSoon();else _this32.flush();
      });
      if (window.EditContext && view.constructor.EDIT_CONTEXT !== false &&
      // Chrome <126 doesn't support inverted selections in edit context (#1392)
      !(browser.chrome && browser.chrome_version < 126)) {
        this.editContext = new EditContextManager(view);
        if (view.state.facet(editable)) view.contentDOM.editContext = this.editContext.editContext;
      }
      if (useCharData) this.onCharData = function (event) {
        _this32.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        _this32.flushSoon();
      };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (window.matchMedia) this.printQuery = window.matchMedia("print");
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(function () {
          var _a;
          if (((_a = _this32.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) _this32.onResize();
        });
        this.resizeScroll.observe(view.scrollDOM);
      }
      this.addWindowListeners(this.win = view.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver(function (entries) {
          if (_this32.parentCheck < 0) _this32.parentCheck = setTimeout(_this32.listenForScroll.bind(_this32), 1000);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != _this32.intersecting) {
            _this32.intersecting = !_this32.intersecting;
            if (_this32.intersecting != _this32.view.inView) _this32.onScrollChanged(document.createEvent("Event"));
          }
        }, {
          threshold: [0, .001]
        });
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver(function (entries) {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) _this32.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    return _createClass(DOMObserver, [{
      key: "onScrollChanged",
      value: function onScrollChanged(e) {
        this.view.inputState.runHandlers("scroll", e);
        if (this.intersecting) this.view.measure();
      }
    }, {
      key: "onScroll",
      value: function onScroll(e) {
        if (this.intersecting) this.flush(false);
        if (this.editContext) this.view.requestMeasure(this.editContext.measureReq);
        this.onScrollChanged(e);
      }
    }, {
      key: "onResize",
      value: function onResize() {
        var _this33 = this;
        if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(function () {
          _this33.resizeTimeout = -1;
          _this33.view.requestMeasure();
        }, 50);
      }
    }, {
      key: "onPrint",
      value: function onPrint(event) {
        var _this34 = this;
        if ((event.type == "change" || !event.type) && !event.matches) return;
        this.view.viewState.printing = true;
        this.view.measure();
        setTimeout(function () {
          _this34.view.viewState.printing = false;
          _this34.view.requestMeasure();
        }, 500);
      }
    }, {
      key: "updateGaps",
      value: function updateGaps(gaps) {
        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some(function (g, i) {
          return g != gaps[i];
        }))) {
          this.gapIntersection.disconnect();
          var _iterator42 = _createForOfIteratorHelper$a(gaps),
            _step42;
          try {
            for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
              var gap = _step42.value;
              this.gapIntersection.observe(gap);
            }
          } catch (err) {
            _iterator42.e(err);
          } finally {
            _iterator42.f();
          }
          this.gaps = gaps;
        }
      }
    }, {
      key: "onSelectionChange",
      value: function onSelectionChange(event) {
        var wasChanged = this.selectionChanged;
        if (!this.readSelectionRange() || this.delayedAndroidKey) return;
        var view = this.view,
          sel = this.selectionRange;
        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel)) return;
        var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
        if (context && context.ignoreEvent(event)) {
          if (!wasChanged) this.selectionChanged = false;
          return;
        }
        // Deletions on IE11 fire their events in the wrong order, giving
        // us a selection change event before the DOM changes are
        // reported.
        // Chrome Android has a similar issue when backspacing out a
        // selection (#645).
        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
        // (Selection.isCollapsed isn't reliable on IE)
        sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
      }
    }, {
      key: "readSelectionRange",
      value: function readSelectionRange() {
        var view = this.view;
        // The Selection object is broken in shadow roots in Safari. See
        // https://github.com/codemirror/dev/issues/414
        var selection = getSelection(view.root);
        if (!selection) return false;
        var range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
        if (!range || this.selectionRange.eq(range)) return false;
        var local = hasSelection(this.dom, range);
        // Detect the situation where the browser has, on focus, moved the
        // selection to the start of the content element. Reset it to the
        // position from the editor state.
        if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
          this.view.inputState.lastFocusTime = 0;
          view.docView.updateSelection();
          return false;
        }
        this.selectionRange.setRange(range);
        if (local) this.selectionChanged = true;
        return true;
      }
    }, {
      key: "setSelectionRange",
      value: function setSelectionRange(anchor, head) {
        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
        this.selectionChanged = false;
      }
    }, {
      key: "clearSelectionRange",
      value: function clearSelectionRange() {
        this.selectionRange.set(null, 0, null, 0);
      }
    }, {
      key: "listenForScroll",
      value: function listenForScroll() {
        this.parentCheck = -1;
        var i = 0,
          changed = null;
        for (var dom = this.dom; dom;) {
          if (dom.nodeType == 1) {
            if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
            if (changed) changed.push(dom);
            dom = dom.assignedSlot || dom.parentNode;
          } else if (dom.nodeType == 11) {
            // Shadow root
            dom = dom.host;
          } else {
            break;
          }
        }
        if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
        if (changed) {
          var _iterator43 = _createForOfIteratorHelper$a(this.scrollTargets),
            _step43;
          try {
            for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
              var _dom2 = _step43.value;
              _dom2.removeEventListener("scroll", this.onScroll);
            }
          } catch (err) {
            _iterator43.e(err);
          } finally {
            _iterator43.f();
          }
          var _iterator44 = _createForOfIteratorHelper$a(this.scrollTargets = changed),
            _step44;
          try {
            for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
              var _dom3 = _step44.value;
              _dom3.addEventListener("scroll", this.onScroll);
            }
          } catch (err) {
            _iterator44.e(err);
          } finally {
            _iterator44.f();
          }
        }
      }
    }, {
      key: "ignore",
      value: function ignore(f) {
        if (!this.active) return f();
        try {
          this.stop();
          return f();
        } finally {
          this.start();
          this.clear();
        }
      }
    }, {
      key: "start",
      value: function start() {
        if (this.active) return;
        this.observer.observe(this.dom, observeOptions);
        if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        this.active = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (!this.active) return;
        this.active = false;
        this.observer.disconnect();
        if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
    }, {
      key: "clear",
      value: function clear() {
        this.processRecords();
        this.queue.length = 0;
        this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
    }, {
      key: "delayAndroidKey",
      value: function delayAndroidKey(key, keyCode) {
        var _this35 = this;
        var _a;
        if (!this.delayedAndroidKey) {
          var flush = function flush() {
            var key = _this35.delayedAndroidKey;
            if (key) {
              _this35.clearDelayedAndroidKey();
              _this35.view.inputState.lastKeyCode = key.keyCode;
              _this35.view.inputState.lastKeyTime = Date.now();
              var flushed = _this35.flush();
              if (!flushed && key.force) dispatchKey(_this35.dom, key.key, key.keyCode);
            }
          };
          this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
        }
        // Since backspace beforeinput is sometimes signalled spuriously,
        // Enter always takes precedence.
        if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
          key: key,
          keyCode: keyCode,
          // Only run the key handler when no changes are detected if
          // this isn't coming right after another change, in which case
          // it is probably part of a weird chain of updates, and should
          // be ignored if it returns the DOM to its previous state.
          force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
        };
      }
    }, {
      key: "clearDelayedAndroidKey",
      value: function clearDelayedAndroidKey() {
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
      }
    }, {
      key: "flushSoon",
      value: function flushSoon() {
        var _this36 = this;
        if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(function () {
          _this36.delayedFlush = -1;
          _this36.flush();
        });
      }
    }, {
      key: "forceFlush",
      value: function forceFlush() {
        if (this.delayedFlush >= 0) {
          this.view.win.cancelAnimationFrame(this.delayedFlush);
          this.delayedFlush = -1;
        }
        this.flush();
      }
    }, {
      key: "pendingRecords",
      value: function pendingRecords() {
        var _iterator45 = _createForOfIteratorHelper$a(this.observer.takeRecords()),
          _step45;
        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var mut = _step45.value;
            this.queue.push(mut);
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }
        return this.queue;
      }
    }, {
      key: "processRecords",
      value: function processRecords() {
        var records = this.pendingRecords();
        if (records.length) this.queue = [];
        var from = -1,
          to = -1,
          typeOver = false;
        var _iterator46 = _createForOfIteratorHelper$a(records),
          _step46;
        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var record = _step46.value;
            var range = this.readMutation(record);
            if (!range) continue;
            if (range.typeOver) typeOver = true;
            if (from == -1) {
              from = range.from;
              to = range.to;
            } else {
              from = Math.min(range.from, from);
              to = Math.max(range.to, to);
            }
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }
        return {
          from: from,
          to: to,
          typeOver: typeOver
        };
      }
    }, {
      key: "readChange",
      value: function readChange() {
        var _this$processRecords = this.processRecords(),
          from = _this$processRecords.from,
          to = _this$processRecords.to,
          typeOver = _this$processRecords.typeOver;
        var newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
        if (from < 0 && !newSel) return null;
        if (from > -1) this.lastChange = Date.now();
        this.view.inputState.lastFocusTime = 0;
        this.selectionChanged = false;
        var change = new DOMChange(this.view, from, to, typeOver);
        this.view.docView.domChanged = {
          newSel: change.newSel ? change.newSel.main : null
        };
        return change;
      }
      // Apply pending changes, if any
    }, {
      key: "flush",
      value: function flush() {
        var readSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        // Completely hold off flushing when pending keys are set—the code
        // managing those will make sure processRecords is called and the
        // view is resynchronized after
        if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
        if (readSelection) this.readSelectionRange();
        var domChange = this.readChange();
        if (!domChange) {
          this.view.requestMeasure();
          return false;
        }
        var startState = this.view.state;
        var handled = applyDOMChange(this.view, domChange);
        // The view wasn't updated but DOM/selection changes were seen. Reset the view.
        if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main))) this.view.update([]);
        return handled;
      }
    }, {
      key: "readMutation",
      value: function readMutation(rec) {
        var cView = this.view.docView.nearest(rec.target);
        if (!cView || cView.ignoreMutation(rec)) return null;
        cView.markDirty(rec.type == "attributes");
        if (rec.type == "attributes") cView.flags |= 4 /* ViewFlag.AttrsDirty */;
        if (rec.type == "childList") {
          var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
          var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
          return {
            from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
            to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
            typeOver: false
          };
        } else if (rec.type == "characterData") {
          return {
            from: cView.posAtStart,
            to: cView.posAtEnd,
            typeOver: rec.target.nodeValue == rec.oldValue
          };
        } else {
          return null;
        }
      }
    }, {
      key: "setWindow",
      value: function setWindow(win) {
        if (win != this.win) {
          this.removeWindowListeners(this.win);
          this.win = win;
          this.addWindowListeners(this.win);
        }
      }
    }, {
      key: "addWindowListeners",
      value: function addWindowListeners(win) {
        win.addEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.addEventListener) this.printQuery.addEventListener("change", this.onPrint);else this.printQuery.addListener(this.onPrint);
        } else win.addEventListener("beforeprint", this.onPrint);
        win.addEventListener("scroll", this.onScroll);
        win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
    }, {
      key: "removeWindowListeners",
      value: function removeWindowListeners(win) {
        win.removeEventListener("scroll", this.onScroll);
        win.removeEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.removeEventListener) this.printQuery.removeEventListener("change", this.onPrint);else this.printQuery.removeListener(this.onPrint);
        } else win.removeEventListener("beforeprint", this.onPrint);
        win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
    }, {
      key: "update",
      value: function update(_update7) {
        if (this.editContext) {
          this.editContext.update(_update7);
          if (_update7.startState.facet(editable) != _update7.state.facet(editable)) _update7.view.contentDOM.editContext = _update7.state.facet(editable) ? this.editContext.editContext : null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _a, _b, _c;
        this.stop();
        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
        var _iterator47 = _createForOfIteratorHelper$a(this.scrollTargets),
          _step47;
        try {
          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
            var dom = _step47.value;
            dom.removeEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator47.e(err);
        } finally {
          _iterator47.f();
        }
        this.removeWindowListeners(this.win);
        clearTimeout(this.parentCheck);
        clearTimeout(this.resizeTimeout);
        this.win.cancelAnimationFrame(this.delayedFlush);
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        if (this.editContext) {
          this.view.contentDOM.editContext = null;
          this.editContext.destroy();
        }
      }
    }]);
  }();
  function findChild(cView, dom, dir) {
    while (dom) {
      var curView = ContentView.get(dom);
      if (curView && curView.parent == cView) return curView;
      var parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  function buildSelectionRangeFromRange(view, range) {
    var anchorNode = range.startContainer,
      anchorOffset = range.startOffset;
    var focusNode = range.endContainer,
      focusOffset = range.endOffset;
    var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    // Since such a range doesn't distinguish between anchor and head,
    // use a heuristic that flips it around if its end matches the
    // current anchor.
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
      var _ref8 = [focusNode, focusOffset, anchorNode, anchorOffset];
      anchorNode = _ref8[0];
      anchorOffset = _ref8[1];
      focusNode = _ref8[2];
      focusOffset = _ref8[3];
    }
    return {
      anchorNode: anchorNode,
      anchorOffset: anchorOffset,
      focusNode: focusNode,
      focusOffset: focusOffset
    };
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view, selection) {
    if (selection.getComposedRanges) {
      var range = selection.getComposedRanges(view.root)[0];
      if (range) return buildSelectionRangeFromRange(view, range);
    }
    var found = null;
    // Because Safari (at least in 2018-2021) doesn't provide regular
    // access to the selection inside a shadowroot, we have to perform a
    // ridiculous hack to get at it—using `execCommand` to trigger a
    // `beforeInput` event so that we can read the target range from the
    // event.
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  var EditContextManager = /*#__PURE__*/function () {
    function EditContextManager(view) {
      var _this37 = this;
      _classCallCheck(this, EditContextManager);
      // The document window for which the text in the context is
      // maintained. For large documents, this may be smaller than the
      // editor document. This window always includes the selection head.
      this.from = 0;
      this.to = 0;
      // When applying a transaction, this is used to compare the change
      // made to the context content to the change in the transaction in
      // order to make the minimal changes to the context (since touching
      // that sometimes breaks series of multiple edits made for a single
      // user action on some Android keyboards)
      this.pendingContextChange = null;
      this.handlers = Object.create(null);
      // Kludge to work around the fact that EditContext does not respond
      // well to having its content updated during a composition (see #1472)
      this.composing = null;
      this.resetRange(view.state);
      var context = this.editContext = new window.EditContext({
        text: view.state.doc.sliceString(this.from, this.to),
        selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
        selectionEnd: this.toContextPos(view.state.selection.main.head)
      });
      this.handlers.textupdate = function (e) {
        var main = view.state.selection.main,
          anchor = main.anchor,
          head = main.head;
        var from = _this37.toEditorPos(e.updateRangeStart),
          to = _this37.toEditorPos(e.updateRangeEnd);
        if (view.inputState.composing >= 0 && !_this37.composing) _this37.composing = {
          contextBase: e.updateRangeStart,
          editorBase: from,
          drifted: false
        };
        var change = {
          from: from,
          to: to,
          insert: Text.of(e.text.split("\n"))
        };
        // If the window doesn't include the anchor, assume changes
        // adjacent to a side go up to the anchor.
        if (change.from == _this37.from && anchor < _this37.from) change.from = anchor;else if (change.to == _this37.to && anchor > _this37.to) change.to = anchor;
        // Edit contexts sometimes fire empty changes
        if (change.from == change.to && !change.insert.length) {
          var newSel = EditorSelection.single(_this37.toEditorPos(e.selectionStart), _this37.toEditorPos(e.selectionEnd));
          if (!newSel.main.eq(main)) view.dispatch({
            selection: newSel,
            userEvent: "select"
          });
          return;
        }
        if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off") change = {
          from: from,
          to: to,
          insert: Text.of([e.text.replace(".", " ")])
        };
        _this37.pendingContextChange = change;
        if (!view.state.readOnly) {
          var newLen = _this37.to - _this37.from + (change.to - change.from + change.insert.length);
          applyDOMChangeInner(view, change, EditorSelection.single(_this37.toEditorPos(e.selectionStart, newLen), _this37.toEditorPos(e.selectionEnd, newLen)));
        }
        // If the transaction didn't flush our change, revert it so
        // that the context is in sync with the editor state again.
        if (_this37.pendingContextChange) {
          _this37.revertPending(view.state);
          _this37.setSelection(view.state);
        }
      };
      this.handlers.characterboundsupdate = function (e) {
        var rects = [],
          prev = null;
        for (var i = _this37.toEditorPos(e.rangeStart), end = _this37.toEditorPos(e.rangeEnd); i < end; i++) {
          var rect = view.coordsForChar(i);
          prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
          rects.push(prev);
        }
        context.updateCharacterBounds(e.rangeStart, rects);
      };
      this.handlers.textformatupdate = function (e) {
        var deco = [];
        var _iterator48 = _createForOfIteratorHelper$a(e.getTextFormats()),
          _step48;
        try {
          for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
            var format = _step48.value;
            var lineStyle = format.underlineStyle,
              thickness = format.underlineThickness;
            if (lineStyle != "None" && thickness != "None") {
              var from = _this37.toEditorPos(format.rangeStart),
                to = _this37.toEditorPos(format.rangeEnd);
              if (from < to) {
                var style = "text-decoration: underline ".concat(lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : "").concat(thickness == "Thin" ? 1 : 2, "px");
                deco.push(Decoration.mark({
                  attributes: {
                    style: style
                  }
                }).range(from, to));
              }
            }
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }
        view.dispatch({
          effects: setEditContextFormatting.of(Decoration.set(deco))
        });
      };
      this.handlers.compositionstart = function () {
        if (view.inputState.composing < 0) {
          view.inputState.composing = 0;
          view.inputState.compositionFirstChange = true;
        }
      };
      this.handlers.compositionend = function () {
        view.inputState.composing = -1;
        view.inputState.compositionFirstChange = null;
        if (_this37.composing) {
          var drifted = _this37.composing.drifted;
          _this37.composing = null;
          if (drifted) _this37.reset(view.state);
        }
      };
      for (var event in this.handlers) context.addEventListener(event, this.handlers[event]);
      this.measureReq = {
        read: function read(view) {
          _this37.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
          var sel = getSelection(view.root);
          if (sel && sel.rangeCount) _this37.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
        }
      };
    }
    return _createClass(EditContextManager, [{
      key: "applyEdits",
      value: function applyEdits(update) {
        var _this38 = this;
        var off = 0,
          abort = false,
          pending = this.pendingContextChange;
        update.changes.iterChanges(function (fromA, toA, _fromB, _toB, insert) {
          if (abort) return;
          var dLen = insert.length - (toA - fromA);
          if (pending && toA >= pending.to) {
            if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
              pending = _this38.pendingContextChange = null; // Match
              off += dLen;
              _this38.to += dLen;
              return;
            } else {
              // Mismatch, revert
              pending = null;
              _this38.revertPending(update.state);
            }
          }
          fromA += off;
          toA += off;
          if (toA <= _this38.from) {
            // Before the window
            _this38.from += dLen;
            _this38.to += dLen;
          } else if (fromA < _this38.to) {
            // Overlaps with window
            if (fromA < _this38.from || toA > _this38.to || _this38.to - _this38.from + insert.length > 30000 /* CxVp.MaxSize */) {
              abort = true;
              return;
            }
            _this38.editContext.updateText(_this38.toContextPos(fromA), _this38.toContextPos(toA), insert.toString());
            _this38.to += dLen;
          }
          off += dLen;
        });
        if (pending && !abort) this.revertPending(update.state);
        return !abort;
      }
    }, {
      key: "update",
      value: function update(_update8) {
        var _this39 = this;
        var reverted = this.pendingContextChange,
          startSel = _update8.startState.selection.main;
        if (this.composing && (this.composing.drifted || !_update8.changes.touchesRange(startSel.from, startSel.to) && _update8.transactions.some(function (tr) {
          return !tr.isUserEvent("input.type") && tr.changes.touchesRange(_this39.from, _this39.to);
        }))) {
          this.composing.drifted = true;
          this.composing.editorBase = _update8.changes.mapPos(this.composing.editorBase);
        } else if (!this.applyEdits(_update8) || !this.rangeIsValid(_update8.state)) {
          this.pendingContextChange = null;
          this.reset(_update8.state);
        } else if (_update8.docChanged || _update8.selectionSet || reverted) {
          this.setSelection(_update8.state);
        }
        if (_update8.geometryChanged || _update8.docChanged || _update8.selectionSet) _update8.view.requestMeasure(this.measureReq);
      }
    }, {
      key: "resetRange",
      value: function resetRange(state) {
        var head = state.selection.main.head;
        this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
        this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
      }
    }, {
      key: "reset",
      value: function reset(state) {
        this.resetRange(state);
        this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
        this.setSelection(state);
      }
    }, {
      key: "revertPending",
      value: function revertPending(state) {
        var pending = this.pendingContextChange;
        this.pendingContextChange = null;
        this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
    }, {
      key: "setSelection",
      value: function setSelection(state) {
        var main = state.selection.main;
        var start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
        var end = this.toContextPos(main.head);
        if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end) this.editContext.updateSelection(start, end);
      }
    }, {
      key: "rangeIsValid",
      value: function rangeIsValid(state) {
        var head = state.selection.main.head;
        return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ || this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ || this.to - this.from > 10000 /* CxVp.Margin */ * 3);
      }
    }, {
      key: "toEditorPos",
      value: function toEditorPos(contextPos) {
        var clipLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.to - this.from;
        contextPos = Math.min(contextPos, clipLen);
        var c = this.composing;
        return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
      }
    }, {
      key: "toContextPos",
      value: function toContextPos(editorPos) {
        var c = this.composing;
        return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        for (var event in this.handlers) this.editContext.removeEventListener(event, this.handlers[event]);
      }
    }]);
  }(); // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  var EditorView = /*#__PURE__*/function () {
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    function EditorView() {
      var _this40 = this;
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, EditorView);
      var _a;
      this.plugins = [];
      this.pluginMap = new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      /**
      @internal
      */
      this.updateState = 2 /* UpdateState.Updating */;
      /**
      @internal
      */
      this.measureScheduled = -1;
      /**
      @internal
      */
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.className = "cm-announced";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      if (config.parent) config.parent.appendChild(this.dom);
      var dispatch = config.dispatch;
      this.dispatchTransactions = config.dispatchTransactions || dispatch && function (trs) {
        return trs.forEach(function (tr) {
          return dispatch(tr, _this40);
        });
      } || function (trs) {
        return _this40.update(trs);
      };
      this.dispatch = this.dispatch.bind(this);
      this._root = config.root || getRoot(config.parent) || document;
      this.viewState = new ViewState(config.state || EditorState.create(config));
      if (config.scrollTo && config.scrollTo.is(_scrollIntoView2)) this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
      this.plugins = this.state.facet(viewPlugin).map(function (spec) {
        return new PluginInstance(spec);
      });
      var _iterator49 = _createForOfIteratorHelper$a(this.plugins),
        _step49;
      try {
        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
          var _plugin4 = _step49.value;
          _plugin4.update(this);
        }
      } catch (err) {
        _iterator49.e(err);
      } finally {
        _iterator49.f();
      }
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0 /* UpdateState.Idle */;
      this.requestMeasure();
      if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready) document.fonts.ready.then(function () {
        return _this40.requestMeasure();
      });
    }
    return _createClass(EditorView, [{
      key: "state",
      get:
      /**
      The current editor state.
      */
      function get() {
        return this.viewState.state;
      }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
    }, {
      key: "viewport",
      get: function get() {
        return this.viewState.viewport;
      }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
    }, {
      key: "visibleRanges",
      get: function get() {
        return this.viewState.visibleRanges;
      }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
    }, {
      key: "inView",
      get: function get() {
        return this.viewState.inView;
      }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
    }, {
      key: "composing",
      get: function get() {
        return this.inputState.composing > 0;
      }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
    }, {
      key: "compositionStarted",
      get: function get() {
        return this.inputState.composing >= 0;
      }
      /**
      The document or shadow root that the view lives in.
      */
    }, {
      key: "root",
      get: function get() {
        return this._root;
      }
      /**
      @internal
      */
    }, {
      key: "win",
      get: function get() {
        return this.dom.ownerDocument.defaultView || window;
      }
    }, {
      key: "dispatch",
      value: function dispatch() {
        var _this$state;
        for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
          input[_key] = arguments[_key];
        }
        var trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [(_this$state = this.state).update.apply(_this$state, input)];
        this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
    }, {
      key: "update",
      value: function update(transactions) {
        var _this41 = this;
        if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
        var redrawn = false,
          attrsChanged = false,
          update;
        var state = this.state;
        var _iterator50 = _createForOfIteratorHelper$a(transactions),
          _step50;
        try {
          for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
            var _tr = _step50.value;
            if (_tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
            state = _tr.state;
          }
        } catch (err) {
          _iterator50.e(err);
        } finally {
          _iterator50.f();
        }
        if (this.destroyed) {
          this.viewState.state = state;
          return;
        }
        var focus = this.hasFocus,
          focusFlag = 0,
          dispatchFocus = null;
        if (transactions.some(function (tr) {
          return tr.annotation(isFocusChange);
        })) {
          this.inputState.notifiedFocused = focus;
          // If a focus-change transaction is being dispatched, set this update flag.
          focusFlag = 1 /* UpdateFlag.Focus */;
        } else if (focus != this.inputState.notifiedFocused) {
          this.inputState.notifiedFocused = focus;
          // Schedule a separate focus transaction if necessary, otherwise
          // add a flag to this update
          dispatchFocus = focusChangeTransaction(state, focus);
          if (!dispatchFocus) focusFlag = 1 /* UpdateFlag.Focus */;
        }
        // If there was a pending DOM change, eagerly read it and try to
        // apply it after the given transactions.
        var pendingKey = this.observer.delayedAndroidKey,
          domChange = null;
        if (pendingKey) {
          this.observer.clearDelayedAndroidKey();
          domChange = this.observer.readChange();
          // Only try to apply DOM changes if the transactions didn't
          // change the doc or selection.
          if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;
        } else {
          this.observer.clear();
        }
        // When the phrases change, redraw the editor
        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases)) return this.setState(state);
        update = ViewUpdate.create(this, state, transactions);
        update.flags |= focusFlag;
        var scrollTarget = this.viewState.scrollTarget;
        try {
          this.updateState = 2 /* UpdateState.Updating */;
          var _iterator51 = _createForOfIteratorHelper$a(transactions),
            _step51;
          try {
            for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
              var tr = _step51.value;
              if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);
              if (tr.scrollIntoView) {
                var main = tr.state.selection.main;
                scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
              }
              var _iterator52 = _createForOfIteratorHelper$a(tr.effects),
                _step52;
              try {
                for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
                  var e = _step52.value;
                  if (e.is(_scrollIntoView2)) scrollTarget = e.value.clip(this.state);
                }
              } catch (err) {
                _iterator52.e(err);
              } finally {
                _iterator52.f();
              }
            }
          } catch (err) {
            _iterator51.e(err);
          } finally {
            _iterator51.f();
          }
          this.viewState.update(update, scrollTarget);
          this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
          }
          redrawn = this.docView.update(update);
          if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
          attrsChanged = this.updateAttrs();
          this.showAnnouncements(transactions);
          this.docView.updateSelection(redrawn, transactions.some(function (tr) {
            return tr.isUserEvent("select.pointer");
          }));
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
        }
        if (update.startState.facet(_theme) != update.state.facet(_theme)) this.viewState.mustMeasureContent = true;
        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
        if (redrawn) this.docViewUpdate();
        if (!update.empty) {
          var _iterator53 = _createForOfIteratorHelper$a(this.state.facet(updateListener)),
            _step53;
          try {
            for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
              var listener = _step53.value;
              try {
                listener(update);
              } catch (e) {
                logException(this.state, e, "update listener");
              }
            }
          } catch (err) {
            _iterator53.e(err);
          } finally {
            _iterator53.f();
          }
        }
        if (dispatchFocus || domChange) Promise.resolve().then(function () {
          if (dispatchFocus && _this41.state == dispatchFocus.startState) _this41.dispatch(dispatchFocus);
          if (domChange) {
            if (!applyDOMChange(_this41, domChange) && pendingKey.force) dispatchKey(_this41.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
        });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
    }, {
      key: "setState",
      value: function setState(newState) {
        if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
        if (this.destroyed) {
          this.viewState.state = newState;
          return;
        }
        this.updateState = 2 /* UpdateState.Updating */;
        var hadFocus = this.hasFocus;
        try {
          var _iterator54 = _createForOfIteratorHelper$a(this.plugins),
            _step54;
          try {
            for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
              var _plugin5 = _step54.value;
              _plugin5.destroy(this);
            }
          } catch (err) {
            _iterator54.e(err);
          } finally {
            _iterator54.f();
          }
          this.viewState = new ViewState(newState);
          this.plugins = newState.facet(viewPlugin).map(function (spec) {
            return new PluginInstance(spec);
          });
          this.pluginMap.clear();
          var _iterator55 = _createForOfIteratorHelper$a(this.plugins),
            _step55;
          try {
            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
              var _plugin6 = _step55.value;
              _plugin6.update(this);
            }
          } catch (err) {
            _iterator55.e(err);
          } finally {
            _iterator55.f();
          }
          this.docView.destroy();
          this.docView = new DocView(this);
          this.inputState.ensureHandlers(this.plugins);
          this.mountStyles();
          this.updateAttrs();
          this.bidiCache = [];
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
        }
        if (hadFocus) this.focus();
        this.requestMeasure();
      }
    }, {
      key: "updatePlugins",
      value: function updatePlugins(update) {
        var prevSpecs = update.startState.facet(viewPlugin),
          specs = update.state.facet(viewPlugin);
        if (prevSpecs != specs) {
          var newPlugins = [];
          var _iterator56 = _createForOfIteratorHelper$a(specs),
            _step56;
          try {
            for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
              var spec = _step56.value;
              var found = prevSpecs.indexOf(spec);
              if (found < 0) {
                newPlugins.push(new PluginInstance(spec));
              } else {
                var _plugin7 = this.plugins[found];
                _plugin7.mustUpdate = update;
                newPlugins.push(_plugin7);
              }
            }
          } catch (err) {
            _iterator56.e(err);
          } finally {
            _iterator56.f();
          }
          var _iterator57 = _createForOfIteratorHelper$a(this.plugins),
            _step57;
          try {
            for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
              var _plugin8 = _step57.value;
              if (_plugin8.mustUpdate != update) _plugin8.destroy(this);
            }
          } catch (err) {
            _iterator57.e(err);
          } finally {
            _iterator57.f();
          }
          this.plugins = newPlugins;
          this.pluginMap.clear();
        } else {
          var _iterator58 = _createForOfIteratorHelper$a(this.plugins),
            _step58;
          try {
            for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
              var _p = _step58.value;
              _p.mustUpdate = update;
            }
          } catch (err) {
            _iterator58.e(err);
          } finally {
            _iterator58.f();
          }
        }
        for (var i = 0; i < this.plugins.length; i++) this.plugins[i].update(this);
        if (prevSpecs != specs) this.inputState.ensureHandlers(this.plugins);
      }
    }, {
      key: "docViewUpdate",
      value: function docViewUpdate() {
        var _iterator59 = _createForOfIteratorHelper$a(this.plugins),
          _step59;
        try {
          for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
            var _plugin9 = _step59.value;
            var val = _plugin9.value;
            if (val && val.docViewUpdate) {
              try {
                val.docViewUpdate(this);
              } catch (e) {
                logException(this.state, e, "doc view update listener");
              }
            }
          }
        } catch (err) {
          _iterator59.e(err);
        } finally {
          _iterator59.f();
        }
      }
      /**
      @internal
      */
    }, {
      key: "measure",
      value: function measure() {
        var _this42 = this;
        var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (this.destroyed) return;
        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
        if (this.observer.delayedAndroidKey) {
          this.measureScheduled = -1;
          this.requestMeasure();
          return;
        }
        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
        if (flush) this.observer.forceFlush();
        var updated = null;
        var sDOM = this.scrollDOM,
          scrollTop = sDOM.scrollTop * this.scaleY;
        var _this$viewState = this.viewState,
          scrollAnchorPos = _this$viewState.scrollAnchorPos,
          scrollAnchorHeight = _this$viewState.scrollAnchorHeight;
        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1) scrollAnchorHeight = -1;
        this.viewState.scrollAnchorHeight = -1;
        try {
          for (var i = 0;; i++) {
            if (scrollAnchorHeight < 0) {
              if (isScrolledToBottom(sDOM)) {
                scrollAnchorPos = -1;
                scrollAnchorHeight = this.viewState.heightMap.height;
              } else {
                var block = this.viewState.scrollAnchorAt(scrollTop);
                scrollAnchorPos = block.from;
                scrollAnchorHeight = block.top;
              }
            }
            this.updateState = 1 /* UpdateState.Measuring */;
            var changed = this.viewState.measure(this);
            if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
            if (i > 5) {
              console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
              break;
            }
            var measuring = [];
            // Only run measure requests in this cycle when the viewport didn't change
            if (!(changed & 4 /* UpdateFlag.Viewport */)) {
              var _ref9 = [measuring, this.measureRequests];
              this.measureRequests = _ref9[0];
              measuring = _ref9[1];
            }
            var measured = measuring.map(function (m) {
              try {
                return m.read(_this42);
              } catch (e) {
                logException(_this42.state, e);
                return BadMeasure;
              }
            });
            var update = ViewUpdate.create(this, this.state, []),
              redrawn = false;
            update.flags |= changed;
            if (!updated) updated = update;else updated.flags |= changed;
            this.updateState = 2 /* UpdateState.Updating */;
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
              this.updateAttrs();
              redrawn = this.docView.update(update);
              if (redrawn) this.docViewUpdate();
            }
            for (var _i9 = 0; _i9 < measuring.length; _i9++) if (measured[_i9] != BadMeasure) {
              try {
                var m = measuring[_i9];
                if (m.write) m.write(measured[_i9], this);
              } catch (e) {
                logException(this.state, e);
              }
            }
            if (redrawn) this.docView.updateSelection(true);
            if (!update.viewportChanged && this.measureRequests.length == 0) {
              if (this.viewState.editorHeight) {
                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                  scrollAnchorHeight = -1;
                  continue;
                } else {
                  var newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                  var diff = newAnchorHeight - scrollAnchorHeight;
                  if (diff > 1 || diff < -1) {
                    scrollTop = scrollTop + diff;
                    sDOM.scrollTop = scrollTop / this.scaleY;
                    scrollAnchorHeight = -1;
                    continue;
                  }
                }
              }
              break;
            }
          }
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
          this.measureScheduled = -1;
        }
        if (updated && !updated.empty) {
          var _iterator60 = _createForOfIteratorHelper$a(this.state.facet(updateListener)),
            _step60;
          try {
            for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
              var listener = _step60.value;
              listener(updated);
            }
          } catch (err) {
            _iterator60.e(err);
          } finally {
            _iterator60.f();
          }
        }
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
    }, {
      key: "themeClasses",
      get: function get() {
        return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
      }
    }, {
      key: "updateAttrs",
      value: function updateAttrs() {
        var _this43 = this;
        var editorAttrs = attrsFromFacet(this, editorAttributes, {
          "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
        });
        var contentAttrs = {
          spellcheck: "false",
          autocorrect: "off",
          autocapitalize: "off",
          writingsuggestions: "false",
          translate: "no",
          contenteditable: !this.state.facet(editable) ? "false" : "true",
          "class": "cm-content",
          style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
          role: "textbox",
          "aria-multiline": "true"
        };
        if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
        attrsFromFacet(this, contentAttributes, contentAttrs);
        var changed = this.observer.ignore(function () {
          var changedContent = _updateAttrs(_this43.contentDOM, _this43.contentAttrs, contentAttrs);
          var changedEditor = _updateAttrs(_this43.dom, _this43.editorAttrs, editorAttrs);
          return changedContent || changedEditor;
        });
        this.editorAttrs = editorAttrs;
        this.contentAttrs = contentAttrs;
        return changed;
      }
    }, {
      key: "showAnnouncements",
      value: function showAnnouncements(trs) {
        var first = true;
        var _iterator61 = _createForOfIteratorHelper$a(trs),
          _step61;
        try {
          for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
            var tr = _step61.value;
            var _iterator62 = _createForOfIteratorHelper$a(tr.effects),
              _step62;
            try {
              for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
                var effect = _step62.value;
                if (effect.is(EditorView.announce)) {
                  if (first) this.announceDOM.textContent = "";
                  first = false;
                  var div = this.announceDOM.appendChild(document.createElement("div"));
                  div.textContent = effect.value;
                }
              }
            } catch (err) {
              _iterator62.e(err);
            } finally {
              _iterator62.f();
            }
          }
        } catch (err) {
          _iterator61.e(err);
        } finally {
          _iterator61.f();
        }
      }
    }, {
      key: "mountStyles",
      value: function mountStyles() {
        this.styleModules = this.state.facet(styleModule);
        var nonce = this.state.facet(EditorView.cspNonce);
        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$2).reverse(), nonce ? {
          nonce: nonce
        } : undefined);
      }
    }, {
      key: "readMeasured",
      value: function readMeasured() {
        if (this.updateState == 2 /* UpdateState.Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
        if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1) this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
    }, {
      key: "requestMeasure",
      value: function requestMeasure(request) {
        var _this44 = this;
        if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(function () {
          return _this44.measure();
        });
        if (request) {
          if (this.measureRequests.indexOf(request) > -1) return;
          if (request.key != null) for (var i = 0; i < this.measureRequests.length; i++) {
            if (this.measureRequests[i].key === request.key) {
              this.measureRequests[i] = request;
              return;
            }
          }
          this.measureRequests.push(request);
        }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
    }, {
      key: "plugin",
      value: function plugin(_plugin3) {
        var known = this.pluginMap.get(_plugin3);
        if (known === undefined || known && known.spec != _plugin3) this.pluginMap.set(_plugin3, known = this.plugins.find(function (p) {
          return p.spec == _plugin3;
        }) || null);
        return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
    }, {
      key: "documentTop",
      get: function get() {
        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
    }, {
      key: "documentPadding",
      get: function get() {
        return {
          top: this.viewState.paddingTop,
          bottom: this.viewState.paddingBottom
        };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
    }, {
      key: "scaleX",
      get: function get() {
        return this.viewState.scaleX;
      }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
    }, {
      key: "scaleY",
      get: function get() {
        return this.viewState.scaleY;
      }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
    }, {
      key: "elementAtHeight",
      value: function elementAtHeight(height) {
        this.readMeasured();
        return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
    }, {
      key: "lineBlockAtHeight",
      value: function lineBlockAtHeight(height) {
        this.readMeasured();
        return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
    }, {
      key: "viewportLineBlocks",
      get: function get() {
        return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
    }, {
      key: "lineBlockAt",
      value: function lineBlockAt(pos) {
        return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
    }, {
      key: "contentHeight",
      get: function get() {
        return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
    }, {
      key: "moveByChar",
      value: function moveByChar(start, forward, by) {
        return skipAtoms(this, start, _moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
    }, {
      key: "moveByGroup",
      value: function moveByGroup(start, forward) {
        var _this45 = this;
        return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
          return byGroup(_this45, start.head, initial);
        }));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
    }, {
      key: "visualLineSide",
      value: function visualLineSide(line, end) {
        var order = this.bidiSpans(line),
          dir = this.textDirectionAt(line.from);
        var span = order[end ? order.length - 1 : 0];
        return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
    }, {
      key: "moveToLineBoundary",
      value: function moveToLineBoundary(start, forward) {
        var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return _moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
    }, {
      key: "moveVertically",
      value: function moveVertically(start, forward, distance) {
        return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
    }, {
      key: "posAtDOM",
      value: function posAtDOM(node) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.docView.posFromDOM(node, offset);
      }
    }, {
      key: "posAtCoords",
      value: function posAtCoords(coords) {
        var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.readMeasured();
        return _posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
    }, {
      key: "coordsAtPos",
      value: function coordsAtPos(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        this.readMeasured();
        var rect = this.docView.coordsAt(pos, side);
        if (!rect || rect.left == rect.right) return rect;
        var line = this.state.doc.lineAt(pos),
          order = this.bidiSpans(line);
        var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
        return flattenRect(rect, span.dir == Direction.LTR == side > 0);
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
    }, {
      key: "coordsForChar",
      value: function coordsForChar(pos) {
        this.readMeasured();
        return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
    }, {
      key: "defaultCharacterWidth",
      get: function get() {
        return this.viewState.heightOracle.charWidth;
      }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
    }, {
      key: "defaultLineHeight",
      get: function get() {
        return this.viewState.heightOracle.lineHeight;
      }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
    }, {
      key: "textDirection",
      get: function get() {
        return this.viewState.defaultTextDirection;
      }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
    }, {
      key: "textDirectionAt",
      value: function textDirectionAt(pos) {
        var perLine = this.state.facet(perLineTextDirection);
        if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
        this.readMeasured();
        return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
    }, {
      key: "lineWrapping",
      get: function get() {
        return this.viewState.heightOracle.lineWrapping;
      }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
    }, {
      key: "bidiSpans",
      value: function bidiSpans(line) {
        if (line.length > MaxBidiLine) return trivialOrder(line.length);
        var dir = this.textDirectionAt(line.from),
          isolates;
        var _iterator63 = _createForOfIteratorHelper$a(this.bidiCache),
          _step63;
        try {
          for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
            var entry = _step63.value;
            if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line)))) return entry.order;
          }
        } catch (err) {
          _iterator63.e(err);
        } finally {
          _iterator63.f();
        }
        if (!isolates) isolates = getIsolatedRanges(this, line);
        var order = computeOrder(line.text, dir, isolates);
        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
        return order;
      }
      /**
      Check whether the editor has focus.
      */
    }, {
      key: "hasFocus",
      get: function get() {
        var _a;
        // Safari return false for hasFocus when the context menu is open
        // or closing, which leads us to ignore selection changes from the
        // context menu because it looks like the editor isn't focused.
        // This kludges around that.
        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
    }, {
      key: "focus",
      value: function focus() {
        var _this46 = this;
        this.observer.ignore(function () {
          focusPreventScroll(_this46.contentDOM);
          _this46.docView.updateSelection();
        });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
    }, {
      key: "setRoot",
      value: function setRoot(root) {
        if (this._root != root) {
          this._root = root;
          this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
          this.mountStyles();
        }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.root.activeElement == this.contentDOM) this.contentDOM.blur();
        var _iterator64 = _createForOfIteratorHelper$a(this.plugins),
          _step64;
        try {
          for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
            var _plugin10 = _step64.value;
            _plugin10.destroy(this);
          }
        } catch (err) {
          _iterator64.e(err);
        } finally {
          _iterator64.f();
        }
        this.plugins = [];
        this.inputState.destroy();
        this.docView.destroy();
        this.dom.remove();
        this.observer.destroy();
        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
        this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
    }, {
      key: "scrollSnapshot",
      value:
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      function scrollSnapshot() {
        var _this$scrollDOM = this.scrollDOM,
          scrollTop = _this$scrollDOM.scrollTop,
          scrollLeft = _this$scrollDOM.scrollLeft;
        var ref = this.viewState.scrollAnchorAt(scrollTop);
        return _scrollIntoView2.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
    }, {
      key: "setTabFocusMode",
      value: function setTabFocusMode(to) {
        if (to == null) this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;else if (typeof to == "boolean") this.inputState.tabFocusMode = to ? 0 : -1;else if (this.inputState.tabFocusMode != 0) this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
    }], [{
      key: "scrollIntoView",
      value: function scrollIntoView(pos) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _scrollIntoView2.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
    }, {
      key: "domEventHandlers",
      value: function domEventHandlers(handlers) {
        return ViewPlugin.define(function () {
          return {};
        }, {
          eventHandlers: handlers
        });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
    }, {
      key: "domEventObservers",
      value: function domEventObservers(observers) {
        return ViewPlugin.define(function () {
          return {};
        }, {
          eventObservers: observers
        });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
    }, {
      key: "theme",
      value: function theme(spec, options) {
        var prefix = StyleModule.newName();
        var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
        if (options && options.dark) result.push(darkTheme.of(true));
        return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
    }, {
      key: "baseTheme",
      value: function baseTheme(spec) {
        return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
    }, {
      key: "findFromDOM",
      value: function findFromDOM(dom) {
        var _a;
        var content = dom.querySelector(".cm-content");
        var cView = content && ContentView.get(content) || ContentView.get(dom);
        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
    }]);
  }();
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.

  The `insert` argument can be used to get the default transaction
  that would be applied for this input. This can be useful when
  dispatching the custom behavior as a separate transaction.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  Functions provided in this facet will be used to transform text
  pasted or dropped into the editor.
  */
  EditorView.clipboardInputFilter = clipboardInputFilter;
  /**
  Transform text copied or dragged from the editor.
  */
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  /**
  Scroll handlers can override how things are scrolled into view.
  If they return `true`, no further handling happens for the
  scrolling. If they return false, the default scroll behavior is
  applied. Scroll handlers should never initiate editor updates.
  */
  EditorView.scrollHandler = scrollHandler;
  /**
  This facet can be used to provide functions that create effects
  to be dispatched when the editor's focus state changes.
  */
  EditorView.focusChangeEffect = focusChangeEffect;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Facet that works much like
  [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
  inputs at the very bottom of the precedence stack, meaning mark
  decorations provided here will only be split by other, partially
  overlapping \`outerDecorations\` ranges, and wrap around all
  regular decorations. Use this for mark elements that should, as
  much as possible, remain in one piece.
  */
  EditorView.outerDecorations = outerDecorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  When range decorations add a `unicode-bidi: isolate` style, they
  should also include a
  [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
  in their decoration spec, and be exposed through this facet, so
  that the editor can compute the proper text order. (Other values
  for `unicode-bidi`, except of course `normal`, are not
  supported.)
  */
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Provides a Content Security Policy nonce to use when creating
  the style sheets for the editor. Holds the empty string when no
  nonce has been provided.
  */
  EditorView.cspNonce = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : "";
    }
  });
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
    "class": "cm-lineWrapping"
  });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  var MaxBidiLine = 4096;
  var BadMeasure = {};
  var CachedOrder = /*#__PURE__*/function () {
    function CachedOrder(from, to, dir, isolates, fresh, order) {
      _classCallCheck(this, CachedOrder);
      this.from = from;
      this.to = to;
      this.dir = dir;
      this.isolates = isolates;
      this.fresh = fresh;
      this.order = order;
    }
    return _createClass(CachedOrder, null, [{
      key: "update",
      value: function update(cache, changes) {
        if (changes.empty && !cache.some(function (c) {
          return c.fresh;
        })) return cache;
        var result = [],
          lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
        for (var i = Math.max(0, cache.length - 10); i < cache.length; i++) {
          var entry = cache[i];
          if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
        }
        return result;
      }
    }]);
  }();
  function attrsFromFacet(view, facet, base) {
    for (var sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
      var source = sources[i],
        value = typeof source == "function" ? source(view) : source;
      if (value) combineAttrs(value, base);
    }
    return base;
  }
  var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
    var parts = name.split(/-(?!$)/);
    var result = parts[parts.length - 1];
    if (result == "Space") result = " ";
    var alt, ctrl, shift, meta;
    for (var i = 0; i < parts.length - 1; ++i) {
      var mod = parts[i];
      if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
        if (platform == "mac") meta = true;else ctrl = true;
      } else throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt) result = "Alt-" + result;
    if (ctrl) result = "Ctrl-" + result;
    if (meta) result = "Meta-" + result;
    if (shift) result = "Shift-" + result;
    return result;
  }
  function modifiers(name, event, shift) {
    if (event.altKey) name = "Alt-" + name;
    if (event.ctrlKey) name = "Ctrl-" + name;
    if (event.metaKey) name = "Meta-" + name;
    if (shift !== false && event.shiftKey) name = "Shift-" + name;
    return name;
  }
  var handleKeyEvents = /*@__PURE__*/Prec["default"](/*@__PURE__*/EditorView.domEventHandlers({
    keydown: function keydown(event, view) {
      return runHandlers(getKeymap(view.state), event, view, "editor");
    }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  var keymap = /*@__PURE__*/Facet.define({
    enables: handleKeyEvents
  });
  var Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
    var bindings = state.facet(keymap);
    var map = Keymaps.get(bindings);
    if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
      return a.concat(b);
    }, [])));
    return map;
  }
  /**
  Run the key handlers registered for a given scope. The event
  object should be a `"keydown"` event. Returns true if any of the
  handlers handled it.
  */
  function runScopeHandlers(view, event, scope) {
    return runHandlers(getKeymap(view.state), event, view, scope);
  }
  var storedPrefix = null;
  var PrefixTimeout = 4000;
  function buildKeymap(bindings) {
    var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
    var bound = Object.create(null);
    var isPrefix = Object.create(null);
    var checkPrefix = function checkPrefix(name, is) {
      var current = isPrefix[name];
      if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
    };
    var add = function add(scope, key, command, preventDefault, stopPropagation) {
      var _a, _b;
      var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
      var parts = key.split(/ (?!$)/).map(function (k) {
        return normalizeKeyName(k, platform);
      });
      var _loop4 = function _loop4() {
        var prefix = parts.slice(0, i).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix]) scopeObj[prefix] = {
          preventDefault: true,
          stopPropagation: false,
          run: [function (view) {
            var ourObj = storedPrefix = {
              view: view,
              prefix: prefix,
              scope: scope
            };
            setTimeout(function () {
              if (storedPrefix == ourObj) storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
      };
      for (var i = 1; i < parts.length; i++) {
        _loop4();
      }
      var full = parts.join(" ");
      checkPrefix(full, false);
      var binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        stopPropagation: false,
        run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command) binding.run.push(command);
      if (preventDefault) binding.preventDefault = true;
      if (stopPropagation) binding.stopPropagation = true;
    };
    var _iterator65 = _createForOfIteratorHelper$a(bindings),
      _step65;
    try {
      for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
        var b = _step65.value;
        var scopes = b.scope ? b.scope.split(" ") : ["editor"];
        if (b.any) {
          var _iterator66 = _createForOfIteratorHelper$a(scopes),
            _step66;
          try {
            var _loop5 = function _loop5() {
              var scope = _step66.value;
              var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
              if (!scopeObj._any) scopeObj._any = {
                preventDefault: false,
                stopPropagation: false,
                run: []
              };
              var any = b.any;
              for (var key in scopeObj) scopeObj[key].run.push(function (view) {
                return any(view, currentKeyEvent);
              });
            };
            for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
              _loop5();
            }
          } catch (err) {
            _iterator66.e(err);
          } finally {
            _iterator66.f();
          }
        }
        var name = b[platform] || b.key;
        if (!name) continue;
        var _iterator67 = _createForOfIteratorHelper$a(scopes),
          _step67;
        try {
          for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
            var scope = _step67.value;
            add(scope, name, b.run, b.preventDefault, b.stopPropagation);
            if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
          }
        } catch (err) {
          _iterator67.e(err);
        } finally {
          _iterator67.f();
        }
      }
    } catch (err) {
      _iterator65.e(err);
    } finally {
      _iterator65.f();
    }
    return bound;
  }
  var currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
    currentKeyEvent = event;
    var name = keyName(event);
    var charCode = codePointAt(name, 0),
      isChar = codePointSize(charCode) == name.length && name != " ";
    var prefix = "",
      handled = false,
      prevented = false,
      stopPropagation = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (modifierCodes.indexOf(event.keyCode) < 0) {
        prevented = true;
        storedPrefix = null;
      }
    }
    var ran = new Set();
    var runFor = function runFor(binding) {
      if (binding) {
        var _iterator68 = _createForOfIteratorHelper$a(binding.run),
          _step68;
        try {
          for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
            var cmd = _step68.value;
            if (!ran.has(cmd)) {
              ran.add(cmd);
              if (cmd(view)) {
                if (binding.stopPropagation) stopPropagation = true;
                return true;
              }
            }
          }
        } catch (err) {
          _iterator68.e(err);
        } finally {
          _iterator68.f();
        }
        if (binding.preventDefault) {
          if (binding.stopPropagation) stopPropagation = true;
          prevented = true;
        }
      }
      return false;
    };
    var scopeObj = map[scope],
      baseName,
      shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
        handled = true;
      } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
      // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
          handled = true;
        } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
          handled = true;
        }
      } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name, event, true)])) {
        handled = true;
      }
      if (!handled && runFor(scopeObj._any)) handled = true;
    }
    if (prevented) handled = true;
    if (handled && stopPropagation) event.stopPropagation();
    currentKeyEvent = null;
    return handled;
  }

  /**
  Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
  a rectangle at a given set of coordinates.
  */
  var RectangleMarker = /*#__PURE__*/function () {
    /**
    Create a marker with the given class and dimensions. If `width`
    is null, the DOM element will get no width style.
    */
    function RectangleMarker(className,
    /**
    The left position of the marker (in pixels, document-relative).
    */
    left,
    /**
    The top position of the marker.
    */
    top,
    /**
    The width of the marker, or null if it shouldn't get a width assigned.
    */
    width,
    /**
    The height of the marker.
    */
    height) {
      _classCallCheck(this, RectangleMarker);
      this.className = className;
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
    }
    return _createClass(RectangleMarker, [{
      key: "draw",
      value: function draw() {
        var elt = document.createElement("div");
        elt.className = this.className;
        this.adjust(elt);
        return elt;
      }
    }, {
      key: "update",
      value: function update(elt, prev) {
        if (prev.className != this.className) return false;
        this.adjust(elt);
        return true;
      }
    }, {
      key: "adjust",
      value: function adjust(elt) {
        elt.style.left = this.left + "px";
        elt.style.top = this.top + "px";
        if (this.width != null) elt.style.width = this.width + "px";
        elt.style.height = this.height + "px";
      }
    }, {
      key: "eq",
      value: function eq(p) {
        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
    }], [{
      key: "forRange",
      value: function forRange(view, className, range) {
        if (range.empty) {
          var pos = view.coordsAtPos(range.head, range.assoc || 1);
          if (!pos) return [];
          var _base3 = getBase(view);
          return [new RectangleMarker(className, pos.left - _base3.left, pos.top - _base3.top, null, pos.bottom - pos.top)];
        } else {
          return rectanglesForRange(view, className, range);
        }
      }
    }]);
  }();
  function getBase(view) {
    var rect = view.scrollDOM.getBoundingClientRect();
    var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
    return {
      left: left - view.scrollDOM.scrollLeft * view.scaleX,
      top: rect.top - view.scrollDOM.scrollTop * view.scaleY
    };
  }
  function wrappedLine(view, pos, side, inside) {
    var coords = view.coordsAtPos(pos, side * 2);
    if (!coords) return inside;
    var editorRect = view.dom.getBoundingClientRect();
    var y = (coords.top + coords.bottom) / 2;
    var left = view.posAtCoords({
      x: editorRect.left + 1,
      y: y
    });
    var right = view.posAtCoords({
      x: editorRect.right - 1,
      y: y
    });
    if (left == null || right == null) return inside;
    return {
      from: Math.max(inside.from, Math.min(left, right)),
      to: Math.min(inside.to, Math.max(left, right))
    };
  }
  function rectanglesForRange(view, className, range) {
    if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
    var from = Math.max(range.from, view.viewport.from),
      to = Math.min(range.to, view.viewport.to);
    var ltr = view.textDirection == Direction.LTR;
    var content = view.contentDOM,
      contentRect = content.getBoundingClientRect(),
      base = getBase(view);
    var lineElt = content.querySelector(".cm-line"),
      lineStyle = lineElt && window.getComputedStyle(lineElt);
    var leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
    var rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
    var startBlock = blockAt(view, from, 1),
      endBlock = blockAt(view, to, -1);
    var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
    var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks)) visualStart = wrappedLine(view, from, 1, visualStart);
    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks)) visualEnd = wrappedLine(view, to, -1, visualEnd);
    if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
      return pieces(drawForLine(range.from, range.to, visualStart));
    } else {
      var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
      var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
      var between = [];
      if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
      return pieces(top).concat(between).concat(pieces(bottom));
    }
    function piece(left, top, right, bottom) {
      return new RectangleMarker(className, left - base.left, top - base.top, right - left, bottom - top);
    }
    function pieces(_ref10) {
      var top = _ref10.top,
        bottom = _ref10.bottom,
        horizontal = _ref10.horizontal;
      var pieces = [];
      for (var i = 0; i < horizontal.length; i += 2) pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
      return pieces;
    }
    // Gets passed from/to in line-local positions
    function drawForLine(from, to, line) {
      var top = 1e9,
        bottom = -1e9,
        horizontal = [];
      function addSpan(from, fromOpen, to, toOpen, dir) {
        // Passing 2/-2 is a kludge to force the view to return
        // coordinates on the proper side of block widgets, since
        // normalizing the side there, though appropriate for most
        // coordsAtPos queries, would break selection drawing.
        var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
        var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
        if (!fromCoords || !toCoords) return;
        top = Math.min(fromCoords.top, toCoords.top, top);
        bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
        if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
      }
      var start = from !== null && from !== void 0 ? from : line.from,
        end = to !== null && to !== void 0 ? to : line.to;
      // Split the range by visible range and document line
      var _iterator69 = _createForOfIteratorHelper$a(view.visibleRanges),
        _step69;
      try {
        for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
          var _r2 = _step69.value;
          if (_r2.to > start && _r2.from < end) {
            for (var pos = Math.max(_r2.from, start), endPos = Math.min(_r2.to, end);;) {
              var docLine = view.state.doc.lineAt(pos);
              var _iterator70 = _createForOfIteratorHelper$a(view.bidiSpans(docLine)),
                _step70;
              try {
                for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                  var span = _step70.value;
                  var spanFrom = span.from + docLine.from,
                    spanTo = span.to + docLine.from;
                  if (spanFrom >= endPos) break;
                  if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                }
              } catch (err) {
                _iterator70.e(err);
              } finally {
                _iterator70.f();
              }
              pos = docLine.to + 1;
              if (pos >= endPos) break;
            }
          }
        }
      } catch (err) {
        _iterator69.e(err);
      } finally {
        _iterator69.f();
      }
      if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
      return {
        top: top,
        bottom: bottom,
        horizontal: horizontal
      };
    }
    function drawForWidget(block, top) {
      var y = contentRect.top + (top ? block.top : block.bottom);
      return {
        top: y,
        bottom: y,
        horizontal: []
      };
    }
  }
  function sameMarker(a, b) {
    return a.constructor == b.constructor && a.eq(b);
  }
  var LayerView = /*#__PURE__*/function () {
    function LayerView(view, layer) {
      _classCallCheck(this, LayerView);
      this.view = view;
      this.layer = layer;
      this.drawn = [];
      this.scaleX = 1;
      this.scaleY = 1;
      this.measureReq = {
        read: this.measure.bind(this),
        write: this.draw.bind(this)
      };
      this.dom = view.scrollDOM.appendChild(document.createElement("div"));
      this.dom.classList.add("cm-layer");
      if (layer.above) this.dom.classList.add("cm-layer-above");
      if (layer["class"]) this.dom.classList.add(layer["class"]);
      this.scale();
      this.dom.setAttribute("aria-hidden", "true");
      this.setOrder(view.state);
      view.requestMeasure(this.measureReq);
      if (layer.mount) layer.mount(this.dom, view);
    }
    return _createClass(LayerView, [{
      key: "update",
      value: function update(_update9) {
        if (_update9.startState.facet(layerOrder) != _update9.state.facet(layerOrder)) this.setOrder(_update9.state);
        if (this.layer.update(_update9, this.dom) || _update9.geometryChanged) {
          this.scale();
          _update9.view.requestMeasure(this.measureReq);
        }
      }
    }, {
      key: "docViewUpdate",
      value: function docViewUpdate(view) {
        if (this.layer.updateOnDocViewUpdate !== false) view.requestMeasure(this.measureReq);
      }
    }, {
      key: "setOrder",
      value: function setOrder(state) {
        var pos = 0,
          order = state.facet(layerOrder);
        while (pos < order.length && order[pos] != this.layer) pos++;
        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
    }, {
      key: "measure",
      value: function measure() {
        return this.layer.markers(this.view);
      }
    }, {
      key: "scale",
      value: function scale() {
        var _this$view = this.view,
          scaleX = _this$view.scaleX,
          scaleY = _this$view.scaleY;
        if (scaleX != this.scaleX || scaleY != this.scaleY) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          this.dom.style.transform = "scale(".concat(1 / scaleX, ", ").concat(1 / scaleY, ")");
        }
      }
    }, {
      key: "draw",
      value: function draw(markers) {
        var _this47 = this;
        if (markers.length != this.drawn.length || markers.some(function (p, i) {
          return !sameMarker(p, _this47.drawn[i]);
        })) {
          var old = this.dom.firstChild,
            oldI = 0;
          var _iterator71 = _createForOfIteratorHelper$a(markers),
            _step71;
          try {
            for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
              var marker = _step71.value;
              if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
                old = old.nextSibling;
                oldI++;
              } else {
                this.dom.insertBefore(marker.draw(), old);
              }
            }
          } catch (err) {
            _iterator71.e(err);
          } finally {
            _iterator71.f();
          }
          while (old) {
            var next = old.nextSibling;
            old.remove();
            old = next;
          }
          this.drawn = markers;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.layer.destroy) this.layer.destroy(this.dom, this.view);
        this.dom.remove();
      }
    }]);
  }();
  var layerOrder = /*@__PURE__*/Facet.define();
  /**
  Define a layer.
  */
  function layer(config) {
    return [ViewPlugin.define(function (v) {
      return new LayerView(v, config);
    }), layerOrder.of(config)];
  }
  var selectionConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        cursorBlinkRate: 1200,
        drawRangeCursor: true
      }, {
        cursorBlinkRate: function cursorBlinkRate(a, b) {
          return Math.min(a, b);
        },
        drawRangeCursor: function drawRangeCursor(a, b) {
          return a || b;
        }
      });
    }
  });
  /**
  Returns an extension that hides the browser's native selection and
  cursor, replacing the selection with a background behind the text
  (with the `cm-selectionBackground` class), and the
  cursors with elements overlaid over the code (using
  `cm-cursor-primary` and `cm-cursor-secondary`).

  This allows the editor to display secondary selection ranges, and
  tends to produce a type of selection more in line with that users
  expect in a text editor (the native selection styling will often
  leave gaps between lines and won't fill the horizontal space after
  a line when the selection continues past it).

  It does have a performance cost, in that it requires an extra DOM
  layout cycle for many updates (the selection is drawn based on DOM
  layout information that's only available after laying out the
  content).
  */
  function drawSelection() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [selectionConfig.of(config), cursorLayer, selectionLayer, hideNativeSelection, nativeSelectionHidden.of(true)];
  }
  function configChanged(update) {
    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  var cursorLayer = /*@__PURE__*/layer({
    above: true,
    markers: function markers(view) {
      var state = view.state,
        conf = state.facet(selectionConfig);
      var cursors = [];
      var _iterator72 = _createForOfIteratorHelper$a(state.selection.ranges),
        _step72;
      try {
        for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
          var _r3 = _step72.value;
          var prim = _r3 == state.selection.main;
          if (_r3.empty || conf.drawRangeCursor) {
            var className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
            var cursor = _r3.empty ? _r3 : EditorSelection.cursor(_r3.head, _r3.head > _r3.anchor ? -1 : 1);
            var _iterator73 = _createForOfIteratorHelper$a(RectangleMarker.forRange(view, className, cursor)),
              _step73;
            try {
              for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
                var piece = _step73.value;
                cursors.push(piece);
              }
            } catch (err) {
              _iterator73.e(err);
            } finally {
              _iterator73.f();
            }
          }
        }
      } catch (err) {
        _iterator72.e(err);
      } finally {
        _iterator72.f();
      }
      return cursors;
    },
    update: function update(_update10, dom) {
      if (_update10.transactions.some(function (tr) {
        return tr.selection;
      })) dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      var confChange = configChanged(_update10);
      if (confChange) setBlinkRate(_update10.state, dom);
      return _update10.docChanged || _update10.selectionSet || confChange;
    },
    mount: function mount(dom, view) {
      setBlinkRate(view.state, dom);
    },
    "class": "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  var selectionLayer = /*@__PURE__*/layer({
    above: false,
    markers: function markers(view) {
      return view.state.selection.ranges.map(function (r) {
        return r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r);
      }).reduce(function (a, b) {
        return a.concat(b);
      });
    },
    update: function update(_update11, dom) {
      return _update11.docChanged || _update11.selectionSet || _update11.viewportChanged || configChanged(_update11);
    },
    "class": "cm-selectionLayer"
  });
  var hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme({
    ".cm-line": {
      "& ::selection, &::selection": {
        backgroundColor: "transparent !important"
      },
      caretColor: "transparent !important"
    },
    ".cm-content": {
      caretColor: "transparent !important",
      "& :focus": {
        caretColor: "initial !important",
        "&::selection, & ::selection": {
          backgroundColor: "Highlight !important"
        }
      }
    }
  }));
  var setDropCursorPos = /*@__PURE__*/StateEffect.define({
    map: function map(pos, mapping) {
      return pos == null ? null : mapping.mapPos(pos);
    }
  });
  var dropCursorPos = /*@__PURE__*/StateField.define({
    create: function create() {
      return null;
    },
    update: function update(pos, tr) {
      if (pos != null) pos = tr.changes.mapPos(pos);
      return tr.effects.reduce(function (pos, e) {
        return e.is(setDropCursorPos) ? e.value : pos;
      }, pos);
    }
  });
  var drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class(view) {
      _classCallCheck(this, _class);
      this.view = view;
      this.cursor = null;
      this.measureReq = {
        read: this.readPos.bind(this),
        write: this.drawCursor.bind(this)
      };
    }
    return _createClass(_class, [{
      key: "update",
      value: function update(_update12) {
        var _a;
        var cursorPos = _update12.state.field(dropCursorPos);
        if (cursorPos == null) {
          if (this.cursor != null) {
            (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
            this.cursor = null;
          }
        } else {
          if (!this.cursor) {
            this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
            this.cursor.className = "cm-dropCursor";
          }
          if (_update12.startState.field(dropCursorPos) != cursorPos || _update12.docChanged || _update12.geometryChanged) this.view.requestMeasure(this.measureReq);
        }
      }
    }, {
      key: "readPos",
      value: function readPos() {
        var view = this.view;
        var pos = view.state.field(dropCursorPos);
        var rect = pos != null && view.coordsAtPos(pos);
        if (!rect) return null;
        var outer = view.scrollDOM.getBoundingClientRect();
        return {
          left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
          top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
          height: rect.bottom - rect.top
        };
      }
    }, {
      key: "drawCursor",
      value: function drawCursor(pos) {
        if (this.cursor) {
          var _this$view2 = this.view,
            scaleX = _this$view2.scaleX,
            scaleY = _this$view2.scaleY;
          if (pos) {
            this.cursor.style.left = pos.left / scaleX + "px";
            this.cursor.style.top = pos.top / scaleY + "px";
            this.cursor.style.height = pos.height / scaleY + "px";
          } else {
            this.cursor.style.left = "-100000px";
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.cursor) this.cursor.remove();
      }
    }, {
      key: "setDropPos",
      value: function setDropPos(pos) {
        if (this.view.state.field(dropCursorPos) != pos) this.view.dispatch({
          effects: setDropCursorPos.of(pos)
        });
      }
    }]);
  }(), {
    eventObservers: {
      dragover: function dragover(event) {
        this.setDropPos(this.view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }));
      },
      dragleave: function dragleave(event) {
        if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);
      },
      dragend: function dragend() {
        this.setDropPos(null);
      },
      drop: function drop() {
        this.setDropPos(null);
      }
    }
  });
  /**
  Draws a cursor at the current drop position when something is
  dragged over the editor.
  */
  function dropCursor() {
    return [dropCursorPos, drawDropCursor];
  }
  function iterMatches(doc, re, from, to, f) {
    re.lastIndex = 0;
    for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
      if (!cursor.lineBreak) while (m = re.exec(cursor.value)) f(pos + m.index, m);
    }
  }
  function matchRanges(view, maxLength) {
    var visible = view.visibleRanges;
    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
    var result = [];
    var _iterator74 = _createForOfIteratorHelper$a(visible),
      _step74;
    try {
      for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
        var _step74$value = _step74.value,
          from = _step74$value.from,
          to = _step74$value.to;
        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
        if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
          from: from,
          to: to
        });
      }
    } catch (err) {
      _iterator74.e(err);
    } finally {
      _iterator74.f();
    }
    return result;
  }
  /**
  Helper class used to make it easier to maintain decorations on
  visible code that matches a given regular expression. To be used
  in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
  represent a matching configuration.
  */
  var MatchDecorator = /*#__PURE__*/function () {
    /**
    Create a decorator.
    */
    function MatchDecorator(config) {
      _classCallCheck(this, MatchDecorator);
      var regexp = config.regexp,
        decoration = config.decoration,
        decorate = config.decorate,
        boundary = config.boundary,
        _config$maxLength = config.maxLength,
        maxLength = _config$maxLength === void 0 ? 1000 : _config$maxLength;
      if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
      this.regexp = regexp;
      if (decorate) {
        this.addMatch = function (match, view, from, add) {
          return decorate(add, from, from + match[0].length, match, view);
        };
      } else if (typeof decoration == "function") {
        this.addMatch = function (match, view, from, add) {
          var deco = decoration(match, view, from);
          if (deco) add(from, from + match[0].length, deco);
        };
      } else if (decoration) {
        this.addMatch = function (match, _view, from, add) {
          return add(from, from + match[0].length, decoration);
        };
      } else {
        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
      }
      this.boundary = boundary;
      this.maxLength = maxLength;
    }
    /**
    Compute the full set of decorations for matches in the given
    view's viewport. You'll want to call this when initializing your
    plugin.
    */
    return _createClass(MatchDecorator, [{
      key: "createDeco",
      value: function createDeco(view) {
        var _this48 = this;
        var build = new RangeSetBuilder(),
          add = build.add.bind(build);
        var _iterator75 = _createForOfIteratorHelper$a(matchRanges(view, this.maxLength)),
          _step75;
        try {
          for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
            var _step75$value = _step75.value,
              from = _step75$value.from,
              to = _step75$value.to;
            iterMatches(view.state.doc, this.regexp, from, to, function (from, m) {
              return _this48.addMatch(m, view, from, add);
            });
          }
        } catch (err) {
          _iterator75.e(err);
        } finally {
          _iterator75.f();
        }
        return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
    }, {
      key: "updateDeco",
      value: function updateDeco(update, deco) {
        var changeFrom = 1e9,
          changeTo = -1;
        if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
          if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
            changeFrom = Math.min(from, changeFrom);
            changeTo = Math.max(to, changeTo);
          }
        });
        if (update.viewportMoved || changeTo - changeFrom > 1000) return this.createDeco(update.view);
        if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
        return deco;
      }
    }, {
      key: "updateRange",
      value: function updateRange(view, deco, updateFrom, updateTo) {
        var _this49 = this;
        var _iterator76 = _createForOfIteratorHelper$a(view.visibleRanges),
          _step76;
        try {
          var _loop6 = function _loop6() {
            var r = _step76.value;
            var from = Math.max(r.from, updateFrom),
              to = Math.min(r.to, updateTo);
            if (to > from) {
              var fromLine = view.state.doc.lineAt(from),
                toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
              var start = Math.max(r.from, fromLine.from),
                end = Math.min(r.to, toLine.to);
              if (_this49.boundary) {
                for (; from > fromLine.from; from--) if (_this49.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                  start = from;
                  break;
                }
                for (; to < toLine.to; to++) if (_this49.boundary.test(toLine.text[to - toLine.from])) {
                  end = to;
                  break;
                }
              }
              var ranges = [],
                m;
              var add = function add(from, to, deco) {
                return ranges.push(deco.range(from, to));
              };
              if (fromLine == toLine) {
                _this49.regexp.lastIndex = start - fromLine.from;
                while ((m = _this49.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) _this49.addMatch(m, view, m.index + fromLine.from, add);
              } else {
                iterMatches(view.state.doc, _this49.regexp, start, end, function (from, m) {
                  return _this49.addMatch(m, view, from, add);
                });
              }
              deco = deco.update({
                filterFrom: start,
                filterTo: end,
                filter: function filter(from, to) {
                  return from < start || to > end;
                },
                add: ranges
              });
            }
          };
          for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
            _loop6();
          }
        } catch (err) {
          _iterator76.e(err);
        } finally {
          _iterator76.f();
        }
        return deco;
      }
    }]);
  }();
  var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
  var Names = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8294: "left-to-right isolate",
    8295: "right-to-left isolate",
    8297: "pop directional isolate",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
  };
  var _supportsTabSize = null;
  function supportsTabSize() {
    var _a;
    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
      var styles = document.body.style;
      _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
    }
    return _supportsTabSize || false;
  }
  var specialCharConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      var config = combineConfig(configs, {
        render: null,
        specialChars: Specials,
        addSpecialChars: null
      });
      if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
      if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
      return config;
    }
  });
  /**
  Returns an extension that installs highlighting of special
  characters.
  */
  function highlightSpecialChars() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [specialCharConfig.of(config), specialCharPlugin()];
  }
  var _plugin = null;
  function specialCharPlugin() {
    return _plugin || (_plugin = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class2(view) {
        _classCallCheck(this, _class2);
        this.view = view;
        this.decorations = Decoration.none;
        this.decorationCache = Object.create(null);
        this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
        this.decorations = this.decorator.createDeco(view);
      }
      return _createClass(_class2, [{
        key: "makeDecorator",
        value: function makeDecorator(conf) {
          var _this50 = this;
          return new MatchDecorator({
            regexp: conf.specialChars,
            decoration: function decoration(m, view, pos) {
              var doc = view.state.doc;
              var code = codePointAt(m[0], 0);
              if (code == 9) {
                var line = doc.lineAt(pos);
                var size = view.state.tabSize,
                  col = countColumn(line.text, size, pos - line.from);
                return Decoration.replace({
                  widget: new TabWidget((size - col % size) * _this50.view.defaultCharacterWidth / _this50.view.scaleX)
                });
              }
              return _this50.decorationCache[code] || (_this50.decorationCache[code] = Decoration.replace({
                widget: new SpecialCharWidget(conf, code)
              }));
            },
            boundary: conf.replaceTabs ? undefined : /[^]/
          });
        }
      }, {
        key: "update",
        value: function update(_update13) {
          var conf = _update13.state.facet(specialCharConfig);
          if (_update13.startState.facet(specialCharConfig) != conf) {
            this.decorator = this.makeDecorator(conf);
            this.decorations = this.decorator.createDeco(_update13.view);
          } else {
            this.decorations = this.decorator.updateDeco(_update13, this.decorations);
          }
        }
      }]);
    }(), {
      decorations: function decorations(v) {
        return v.decorations;
      }
    }));
  }
  var DefaultPlaceholder = "\u2022";
  // Assigns placeholder characters from the Control Pictures block to
  // ASCII control characters
  function placeholder$1(code) {
    if (code >= 32) return DefaultPlaceholder;
    if (code == 10) return "\u2424";
    return String.fromCharCode(9216 + code);
  }
  var SpecialCharWidget = /*#__PURE__*/function (_WidgetType4) {
    function SpecialCharWidget(options, code) {
      var _this51;
      _classCallCheck(this, SpecialCharWidget);
      _this51 = _callSuper$5(this, SpecialCharWidget);
      _this51.options = options;
      _this51.code = code;
      return _this51;
    }
    _inherits(SpecialCharWidget, _WidgetType4);
    return _createClass(SpecialCharWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.code == this.code;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        var ph = placeholder$1(this.code);
        var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
        var custom = this.options.render && this.options.render(this.code, desc, ph);
        if (custom) return custom;
        var span = document.createElement("span");
        span.textContent = ph;
        span.title = desc;
        span.setAttribute("aria-label", desc);
        span.className = "cm-specialChar";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  var TabWidget = /*#__PURE__*/function (_WidgetType5) {
    function TabWidget(width) {
      var _this52;
      _classCallCheck(this, TabWidget);
      _this52 = _callSuper$5(this, TabWidget);
      _this52.width = width;
      return _this52;
    }
    _inherits(TabWidget, _WidgetType5);
    return _createClass(TabWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.width == this.width;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        var span = document.createElement("span");
        span.textContent = "\t";
        span.className = "cm-tab";
        span.style.width = this.width + "px";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);

  /**
  Mark lines that have a cursor on them with the `"cm-activeLine"`
  DOM class.
  */
  function highlightActiveLine() {
    return activeLineHighlighter;
  }
  var lineDeco = /*@__PURE__*/Decoration.line({
    "class": "cm-activeLine"
  });
  var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class4(view) {
      _classCallCheck(this, _class4);
      this.decorations = this.getDeco(view);
    }
    return _createClass(_class4, [{
      key: "update",
      value: function update(_update15) {
        if (_update15.docChanged || _update15.selectionSet) this.decorations = this.getDeco(_update15.view);
      }
    }, {
      key: "getDeco",
      value: function getDeco(view) {
        var lastLineStart = -1,
          deco = [];
        var _iterator77 = _createForOfIteratorHelper$a(view.state.selection.ranges),
          _step77;
        try {
          for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
            var _r4 = _step77.value;
            var line = view.lineBlockAt(_r4.head);
            if (line.from > lastLineStart) {
              deco.push(lineDeco.range(line.from));
              lastLineStart = line.from;
            }
          }
        } catch (err) {
          _iterator77.e(err);
        } finally {
          _iterator77.f();
        }
        return Decoration.set(deco);
      }
    }]);
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });

  // Don't compute precise column positions for line offsets above this
  // (since it could get expensive). Assume offset==column for them.
  var MaxOff = 2000;
  function rectangleFor(state, a, b) {
    var startLine = Math.min(a.line, b.line),
      endLine = Math.max(a.line, b.line);
    var ranges = [];
    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
      var startOff = Math.min(a.off, b.off),
        endOff = Math.max(a.off, b.off);
      for (var i = startLine; i <= endLine; i++) {
        var line = state.doc.line(i);
        if (line.length <= endOff) ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
      }
    } else {
      var startCol = Math.min(a.col, b.col),
        endCol = Math.max(a.col, b.col);
      for (var _i10 = startLine; _i10 <= endLine; _i10++) {
        var _line2 = state.doc.line(_i10);
        var start = findColumn(_line2.text, startCol, state.tabSize, true);
        if (start < 0) {
          ranges.push(EditorSelection.cursor(_line2.to));
        } else {
          var end = findColumn(_line2.text, endCol, state.tabSize);
          ranges.push(EditorSelection.range(_line2.from + start, _line2.from + end));
        }
      }
    }
    return ranges;
  }
  function absoluteColumn(view, x) {
    var ref = view.coordsAtPos(view.viewport.from);
    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
    var offset = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    var line = view.state.doc.lineAt(offset),
      off = offset - line.from;
    var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
    return {
      line: line.number,
      col: col,
      off: off
    };
  }
  function rectangleSelectionStyle(view, event) {
    var start = getPos(view, event),
      startSel = view.state.selection;
    if (!start) return null;
    return {
      update: function update(_update16) {
        if (_update16.docChanged) {
          var newStart = _update16.changes.mapPos(_update16.startState.doc.line(start.line).from);
          var newLine = _update16.state.doc.lineAt(newStart);
          start = {
            line: newLine.number,
            col: start.col,
            off: Math.min(start.off, newLine.length)
          };
          startSel = startSel.map(_update16.changes);
        }
      },
      get: function get(event, _extend, multiple) {
        var cur = getPos(view, event);
        if (!cur) return startSel;
        var ranges = rectangleFor(view.state, start, cur);
        if (!ranges.length) return startSel;
        if (multiple) return EditorSelection.create(ranges.concat(startSel.ranges));else return EditorSelection.create(ranges);
      }
    };
  }
  /**
  Create an extension that enables rectangular selections. By
  default, it will react to left mouse drag with the Alt key held
  down. When such a selection occurs, the text within the rectangle
  that was dragged over will be selected, as one selection
  [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
  */
  function rectangularSelection(options) {
    var filter = function (e) {
      return e.altKey && e.button == 0;
    };
    return EditorView.mouseSelectionStyle.of(function (view, event) {
      return filter(event) ? rectangleSelectionStyle(view, event) : null;
    });
  }
  var keys = {
    Alt: [18, function (e) {
      return !!e.altKey;
    }],
    Control: [17, function (e) {
      return !!e.ctrlKey;
    }],
    Shift: [16, function (e) {
      return !!e.shiftKey;
    }],
    Meta: [91, function (e) {
      return !!e.metaKey;
    }]
  };
  var showCrosshair = {
    style: "cursor: crosshair"
  };
  /**
  Returns an extension that turns the pointer cursor into a
  crosshair when a given modifier key, defaulting to Alt, is held
  down. Can serve as a visual hint that rectangular selection is
  going to happen when paired with
  [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
  */
  function crosshairCursor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _keys = _slicedToArray(keys[options.key || "Alt"], 2),
      code = _keys[0],
      getter = _keys[1];
    var plugin = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class6(view) {
        _classCallCheck(this, _class6);
        this.view = view;
        this.isDown = false;
      }
      return _createClass(_class6, [{
        key: "set",
        value: function set(isDown) {
          if (this.isDown != isDown) {
            this.isDown = isDown;
            this.view.update([]);
          }
        }
      }]);
    }(), {
      eventObservers: {
        keydown: function keydown(e) {
          this.set(e.keyCode == code || getter(e));
        },
        keyup: function keyup(e) {
          if (e.keyCode == code || !getter(e)) this.set(false);
        },
        mousemove: function mousemove(e) {
          this.set(getter(e));
        }
      }
    });
    return [plugin, EditorView.contentAttributes.of(function (view) {
      var _a;
      return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null;
    })];
  }
  var Outside = "-10000px";
  var TooltipViewManager = /*#__PURE__*/function () {
    function TooltipViewManager(view, facet, createTooltipView, removeTooltipView) {
      _classCallCheck(this, TooltipViewManager);
      this.facet = facet;
      this.createTooltipView = createTooltipView;
      this.removeTooltipView = removeTooltipView;
      this.input = view.state.facet(facet);
      this.tooltips = this.input.filter(function (t) {
        return t;
      });
      var prev = null;
      this.tooltipViews = this.tooltips.map(function (t) {
        return prev = createTooltipView(t, prev);
      });
    }
    return _createClass(TooltipViewManager, [{
      key: "update",
      value: function update(_update17, above) {
        var _a;
        var input = _update17.state.facet(this.facet);
        var tooltips = input.filter(function (x) {
          return x;
        });
        if (input === this.input) {
          var _iterator78 = _createForOfIteratorHelper$a(this.tooltipViews),
            _step78;
          try {
            for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
              var t = _step78.value;
              if (t.update) t.update(_update17);
            }
          } catch (err) {
            _iterator78.e(err);
          } finally {
            _iterator78.f();
          }
          return false;
        }
        var tooltipViews = [],
          newAbove = above ? [] : null;
        for (var i = 0; i < tooltips.length; i++) {
          var tip = tooltips[i],
            known = -1;
          if (!tip) continue;
          for (var _i11 = 0; _i11 < this.tooltips.length; _i11++) {
            var other = this.tooltips[_i11];
            if (other && other.create == tip.create) known = _i11;
          }
          if (known < 0) {
            tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
            if (newAbove) newAbove[i] = !!tip.above;
          } else {
            var tooltipView = tooltipViews[i] = this.tooltipViews[known];
            if (newAbove) newAbove[i] = above[known];
            if (tooltipView.update) tooltipView.update(_update17);
          }
        }
        var _iterator79 = _createForOfIteratorHelper$a(this.tooltipViews),
          _step79;
        try {
          for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
            var _t2 = _step79.value;
            if (tooltipViews.indexOf(_t2) < 0) {
              this.removeTooltipView(_t2);
              (_a = _t2.destroy) === null || _a === void 0 ? void 0 : _a.call(_t2);
            }
          }
        } catch (err) {
          _iterator79.e(err);
        } finally {
          _iterator79.f();
        }
        if (above) {
          newAbove.forEach(function (val, i) {
            return above[i] = val;
          });
          above.length = newAbove.length;
        }
        this.input = input;
        this.tooltips = tooltips;
        this.tooltipViews = tooltipViews;
        return true;
      }
    }]);
  }();
  function windowSpace(view) {
    var docElt = view.dom.ownerDocument.documentElement;
    return {
      top: 0,
      left: 0,
      bottom: docElt.clientHeight,
      right: docElt.clientWidth
    };
  }
  var tooltipConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      var _a, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a = values.find(function (conf) {
          return conf.position;
        })) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
        parent: ((_b = values.find(function (conf) {
          return conf.parent;
        })) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find(function (conf) {
          return conf.tooltipSpace;
        })) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }
  });
  var knownHeight = /*@__PURE__*/new WeakMap();
  var tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class7(view) {
      var _this54 = this;
      _classCallCheck(this, _class7);
      this.view = view;
      this.above = [];
      this.inView = true;
      this.madeAbsolute = false;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      var config = view.state.facet(tooltipConfig);
      this.position = config.position;
      this.parent = config.parent;
      this.classes = view.themeClasses;
      this.createContainer();
      this.measureReq = {
        read: this.readMeasure.bind(this),
        write: this.writeMeasure.bind(this),
        key: this
      };
      this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(function () {
        return _this54.measureSoon();
      }) : null;
      this.manager = new TooltipViewManager(view, showTooltip, function (t, p) {
        return _this54.createTooltip(t, p);
      }, function (t) {
        if (_this54.resizeObserver) _this54.resizeObserver.unobserve(t.dom);
        t.dom.remove();
      });
      this.above = this.manager.tooltips.map(function (t) {
        return !!t.above;
      });
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(function (entries) {
        if (Date.now() > _this54.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) _this54.measureSoon();
      }, {
        threshold: [1]
      }) : null;
      this.observeIntersection();
      view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    return _createClass(_class7, [{
      key: "createContainer",
      value: function createContainer() {
        if (this.parent) {
          this.container = document.createElement("div");
          this.container.style.position = "relative";
          this.container.className = this.view.themeClasses;
          this.parent.appendChild(this.container);
        } else {
          this.container = this.view.dom;
        }
      }
    }, {
      key: "observeIntersection",
      value: function observeIntersection() {
        if (this.intersectionObserver) {
          this.intersectionObserver.disconnect();
          var _iterator80 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
            _step80;
          try {
            for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
              var tooltip = _step80.value;
              this.intersectionObserver.observe(tooltip.dom);
            }
          } catch (err) {
            _iterator80.e(err);
          } finally {
            _iterator80.f();
          }
        }
      }
    }, {
      key: "measureSoon",
      value: function measureSoon() {
        var _this55 = this;
        if (this.measureTimeout < 0) this.measureTimeout = setTimeout(function () {
          _this55.measureTimeout = -1;
          _this55.maybeMeasure();
        }, 50);
      }
    }, {
      key: "update",
      value: function update(_update18) {
        if (_update18.transactions.length) this.lastTransaction = Date.now();
        var updated = this.manager.update(_update18, this.above);
        if (updated) this.observeIntersection();
        var shouldMeasure = updated || _update18.geometryChanged;
        var newConfig = _update18.state.facet(tooltipConfig);
        if (newConfig.position != this.position && !this.madeAbsolute) {
          this.position = newConfig.position;
          var _iterator81 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
            _step81;
          try {
            for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
              var t = _step81.value;
              t.dom.style.position = this.position;
            }
          } catch (err) {
            _iterator81.e(err);
          } finally {
            _iterator81.f();
          }
          shouldMeasure = true;
        }
        if (newConfig.parent != this.parent) {
          if (this.parent) this.container.remove();
          this.parent = newConfig.parent;
          this.createContainer();
          var _iterator82 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
            _step82;
          try {
            for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
              var _t3 = _step82.value;
              this.container.appendChild(_t3.dom);
            }
          } catch (err) {
            _iterator82.e(err);
          } finally {
            _iterator82.f();
          }
          shouldMeasure = true;
        } else if (this.parent && this.view.themeClasses != this.classes) {
          this.classes = this.container.className = this.view.themeClasses;
        }
        if (shouldMeasure) this.maybeMeasure();
      }
    }, {
      key: "createTooltip",
      value: function createTooltip(tooltip, prev) {
        var tooltipView = tooltip.create(this.view);
        var before = prev ? prev.dom : null;
        tooltipView.dom.classList.add("cm-tooltip");
        if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
          var arrow = document.createElement("div");
          arrow.className = "cm-tooltip-arrow";
          tooltipView.dom.appendChild(arrow);
        }
        tooltipView.dom.style.position = this.position;
        tooltipView.dom.style.top = Outside;
        tooltipView.dom.style.left = "0px";
        this.container.insertBefore(tooltipView.dom, before);
        if (tooltipView.mount) tooltipView.mount(this.view);
        if (this.resizeObserver) this.resizeObserver.observe(tooltipView.dom);
        return tooltipView;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _a, _b, _c;
        this.view.win.removeEventListener("resize", this.measureSoon);
        var _iterator83 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
          _step83;
        try {
          for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
            var tooltipView = _step83.value;
            tooltipView.dom.remove();
            (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
          }
        } catch (err) {
          _iterator83.e(err);
        } finally {
          _iterator83.f();
        }
        if (this.parent) this.container.remove();
        (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
        (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
        clearTimeout(this.measureTimeout);
      }
    }, {
      key: "readMeasure",
      value: function readMeasure() {
        var _this56 = this;
        var scaleX = 1,
          scaleY = 1,
          makeAbsolute = false;
        if (this.position == "fixed" && this.manager.tooltipViews.length) {
          var dom = this.manager.tooltipViews[0].dom;
          if (browser.gecko) {
            // Firefox sets the element's `offsetParent` to the
            // transformed element when a transform interferes with fixed
            // positioning.
            makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
          } else if (dom.style.top == Outside && dom.style.left == "0px") {
            // On other browsers, we have to awkwardly try and use other
            // information to detect a transform.
            var rect = dom.getBoundingClientRect();
            makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
          }
        }
        if (makeAbsolute || this.position == "absolute") {
          if (this.parent) {
            var _rect2 = this.parent.getBoundingClientRect();
            if (_rect2.width && _rect2.height) {
              scaleX = _rect2.width / this.parent.offsetWidth;
              scaleY = _rect2.height / this.parent.offsetHeight;
            }
          } else {
            var _this$view$viewState = this.view.viewState;
            scaleX = _this$view$viewState.scaleX;
            scaleY = _this$view$viewState.scaleY;
          }
        }
        var visible = this.view.scrollDOM.getBoundingClientRect(),
          margins = getScrollMargins(this.view);
        return {
          visible: {
            left: visible.left + margins.left,
            top: visible.top + margins.top,
            right: visible.right - margins.right,
            bottom: visible.bottom - margins.bottom
          },
          parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
          pos: this.manager.tooltips.map(function (t, i) {
            var tv = _this56.manager.tooltipViews[i];
            return tv.getCoords ? tv.getCoords(t.pos) : _this56.view.coordsAtPos(t.pos);
          }),
          size: this.manager.tooltipViews.map(function (_ref11) {
            var dom = _ref11.dom;
            return dom.getBoundingClientRect();
          }),
          space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
          scaleX: scaleX,
          scaleY: scaleY,
          makeAbsolute: makeAbsolute
        };
      }
    }, {
      key: "writeMeasure",
      value: function writeMeasure(measured) {
        var _a;
        if (measured.makeAbsolute) {
          this.madeAbsolute = true;
          this.position = "absolute";
          var _iterator84 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
            _step84;
          try {
            for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
              var t = _step84.value;
              t.dom.style.position = "absolute";
            }
          } catch (err) {
            _iterator84.e(err);
          } finally {
            _iterator84.f();
          }
        }
        var visible = measured.visible,
          space = measured.space,
          scaleX = measured.scaleX,
          scaleY = measured.scaleY;
        var others = [];
        for (var i = 0; i < this.manager.tooltips.length; i++) {
          var tooltip = this.manager.tooltips[i],
            tView = this.manager.tooltipViews[i],
            dom = tView.dom;
          var pos = measured.pos[i],
            size = measured.size[i];
          // Hide tooltips that are outside of the editor.
          if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) || pos.top >= Math.min(visible.bottom, space.bottom) || pos.right < Math.max(visible.left, space.left) - .1 || pos.left > Math.min(visible.right, space.right) + .1)) {
            dom.style.top = Outside;
            continue;
          }
          var arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
          var arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
          var width = size.right - size.left,
            height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
          var offset = tView.offset || noOffset,
            ltr = this.view.textDirection == Direction.LTR;
          var left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)) : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
          var above = this.above[i];
          if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space.top : pos.bottom + height + arrowHeight + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = this.above[i] = !above;
          var spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
          if (spaceVert < height && tView.resize !== false) {
            if (spaceVert < this.view.defaultLineHeight) {
              dom.style.top = Outside;
              continue;
            }
            knownHeight.set(tView, height);
            dom.style.height = (height = spaceVert) / scaleY + "px";
          } else if (dom.style.height) {
            dom.style.height = "";
          }
          var top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
          var right = left + width;
          if (tView.overlap !== true) {
            var _iterator85 = _createForOfIteratorHelper$a(others),
              _step85;
            try {
              for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                var _r5 = _step85.value;
                if (_r5.left < right && _r5.right > left && _r5.top < top + height && _r5.bottom > top) top = above ? _r5.top - height - 2 - arrowHeight : _r5.bottom + arrowHeight + 2;
              }
            } catch (err) {
              _iterator85.e(err);
            } finally {
              _iterator85.f();
            }
          }
          if (this.position == "absolute") {
            dom.style.top = (top - measured.parent.top) / scaleY + "px";
            setLeftStyle(dom, (left - measured.parent.left) / scaleX);
          } else {
            dom.style.top = top / scaleY + "px";
            setLeftStyle(dom, left / scaleX);
          }
          if (arrow) {
            var arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
            arrow.style.left = arrowLeft / scaleX + "px";
          }
          if (tView.overlap !== true) others.push({
            left: left,
            top: top,
            right: right,
            bottom: top + height
          });
          dom.classList.toggle("cm-tooltip-above", above);
          dom.classList.toggle("cm-tooltip-below", !above);
          if (tView.positioned) tView.positioned(measured.space);
        }
      }
    }, {
      key: "maybeMeasure",
      value: function maybeMeasure() {
        if (this.manager.tooltips.length) {
          if (this.view.inView) this.view.requestMeasure(this.measureReq);
          if (this.inView != this.view.inView) {
            this.inView = this.view.inView;
            if (!this.inView) {
              var _iterator86 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
                _step86;
              try {
                for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                  var tv = _step86.value;
                  tv.dom.style.top = Outside;
                }
              } catch (err) {
                _iterator86.e(err);
              } finally {
                _iterator86.f();
              }
            }
          }
        }
      }
    }]);
  }(), {
    eventObservers: {
      scroll: function scroll() {
        this.maybeMeasure();
      }
    }
  });
  function setLeftStyle(elt, value) {
    var current = parseInt(elt.style.left, 10);
    if (isNaN(current) || Math.abs(value - current) > 1) elt.style.left = value + "px";
  }
  var baseTheme$5 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 500,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: "".concat(7 /* Arrow.Size */, "px"),
      width: "".concat(7 /* Arrow.Size */ * 2, "px"),
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: "".concat(7 /* Arrow.Size */, "px solid transparent"),
        borderRight: "".concat(7 /* Arrow.Size */, "px solid transparent")
      },
      ".cm-tooltip-above &": {
        bottom: "-".concat(7 /* Arrow.Size */, "px"),
        "&:before": {
          borderTop: "".concat(7 /* Arrow.Size */, "px solid #bbb")
        },
        "&:after": {
          borderTop: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: "-".concat(7 /* Arrow.Size */, "px"),
        "&:before": {
          borderBottom: "".concat(7 /* Arrow.Size */, "px solid #bbb")
        },
        "&:after": {
          borderBottom: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  var noOffset = {
    x: 0,
    y: 0
  };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  var showTooltip = /*@__PURE__*/Facet.define({
    enables: [tooltipPlugin, baseTheme$5]
  });
  var showHoverTooltip = /*@__PURE__*/Facet.define({
    combine: function combine(inputs) {
      return inputs.reduce(function (a, i) {
        return a.concat(i);
      }, []);
    }
  });
  var HoverTooltipHost = /*#__PURE__*/function () {
    function HoverTooltipHost(view) {
      var _this57 = this;
      _classCallCheck(this, HoverTooltipHost);
      this.view = view;
      this.mounted = false;
      this.dom = document.createElement("div");
      this.dom.classList.add("cm-tooltip-hover");
      this.manager = new TooltipViewManager(view, showHoverTooltip, function (t, p) {
        return _this57.createHostedView(t, p);
      }, function (t) {
        return t.dom.remove();
      });
    }
    return _createClass(HoverTooltipHost, [{
      key: "createHostedView",
      value: function createHostedView(tooltip, prev) {
        var hostedView = tooltip.create(this.view);
        hostedView.dom.classList.add("cm-tooltip-section");
        this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
        if (this.mounted && hostedView.mount) hostedView.mount(this.view);
        return hostedView;
      }
    }, {
      key: "mount",
      value: function mount(view) {
        var _iterator87 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
          _step87;
        try {
          for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
            var hostedView = _step87.value;
            if (hostedView.mount) hostedView.mount(view);
          }
        } catch (err) {
          _iterator87.e(err);
        } finally {
          _iterator87.f();
        }
        this.mounted = true;
      }
    }, {
      key: "positioned",
      value: function positioned(space) {
        var _iterator88 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
          _step88;
        try {
          for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
            var hostedView = _step88.value;
            if (hostedView.positioned) hostedView.positioned(space);
          }
        } catch (err) {
          _iterator88.e(err);
        } finally {
          _iterator88.f();
        }
      }
    }, {
      key: "update",
      value: function update(_update19) {
        this.manager.update(_update19);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _a;
        var _iterator89 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
          _step89;
        try {
          for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
            var t = _step89.value;
            (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
          }
        } catch (err) {
          _iterator89.e(err);
        } finally {
          _iterator89.f();
        }
      }
    }, {
      key: "passProp",
      value: function passProp(name) {
        var value = undefined;
        var _iterator90 = _createForOfIteratorHelper$a(this.manager.tooltipViews),
          _step90;
        try {
          for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
            var view = _step90.value;
            var given = view[name];
            if (given !== undefined) {
              if (value === undefined) value = given;else if (value !== given) return undefined;
            }
          }
        } catch (err) {
          _iterator90.e(err);
        } finally {
          _iterator90.f();
        }
        return value;
      }
    }, {
      key: "offset",
      get: function get() {
        return this.passProp("offset");
      }
    }, {
      key: "getCoords",
      get: function get() {
        return this.passProp("getCoords");
      }
    }, {
      key: "overlap",
      get: function get() {
        return this.passProp("overlap");
      }
    }, {
      key: "resize",
      get: function get() {
        return this.passProp("resize");
      }
    }], [{
      key: "create",
      value:
      // Needs to be static so that host tooltip instances always match
      function create(view) {
        return new HoverTooltipHost(view);
      }
    }]);
  }();
  var showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], function (state) {
    var tooltips = state.facet(showHoverTooltip);
    if (tooltips.length === 0) return null;
    return {
      pos: Math.min.apply(Math, _toConsumableArray(tooltips.map(function (t) {
        return t.pos;
      }))),
      end: Math.max.apply(Math, _toConsumableArray(tooltips.map(function (t) {
        var _a;
        return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos;
      }))),
      create: HoverTooltipHost.create,
      above: tooltips[0].above,
      arrow: tooltips.some(function (t) {
        return t.arrow;
      })
    };
  });
  var HoverPlugin = /*#__PURE__*/function () {
    function HoverPlugin(view, source, field, setHover, hoverTime) {
      _classCallCheck(this, HoverPlugin);
      this.view = view;
      this.source = source;
      this.field = field;
      this.setHover = setHover;
      this.hoverTime = hoverTime;
      this.hoverTimeout = -1;
      this.restartTimeout = -1;
      this.pending = null;
      this.lastMove = {
        x: 0,
        y: 0,
        target: view.dom,
        time: 0
      };
      this.checkHover = this.checkHover.bind(this);
      view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
      view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    return _createClass(HoverPlugin, [{
      key: "update",
      value: function update() {
        var _this58 = this;
        if (this.pending) {
          this.pending = null;
          clearTimeout(this.restartTimeout);
          this.restartTimeout = setTimeout(function () {
            return _this58.startHover();
          }, 20);
        }
      }
    }, {
      key: "active",
      get: function get() {
        return this.view.state.field(this.field);
      }
    }, {
      key: "checkHover",
      value: function checkHover() {
        this.hoverTimeout = -1;
        if (this.active.length) return;
        var hovered = Date.now() - this.lastMove.time;
        if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
      }
    }, {
      key: "startHover",
      value: function startHover() {
        var _this59 = this;
        clearTimeout(this.restartTimeout);
        var view = this.view,
          lastMove = this.lastMove;
        var desc = view.docView.nearest(lastMove.target);
        if (!desc) return;
        var pos,
          side = 1;
        if (desc instanceof WidgetView) {
          pos = desc.posAtStart;
        } else {
          pos = view.posAtCoords(lastMove);
          if (pos == null) return;
          var posCoords = view.coordsAtPos(pos);
          if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth) return;
          var bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(function (s) {
            return s.from <= pos && s.to >= pos;
          });
          var rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
          side = lastMove.x < posCoords.left ? -rtl : rtl;
        }
        var open = this.source(view, pos, side);
        if (open === null || open === void 0 ? void 0 : open.then) {
          var pending = this.pending = {
            pos: pos
          };
          open.then(function (result) {
            if (_this59.pending == pending) {
              _this59.pending = null;
              if (result && !(Array.isArray(result) && !result.length)) view.dispatch({
                effects: _this59.setHover.of(Array.isArray(result) ? result : [result])
              });
            }
          }, function (e) {
            return logException(view.state, e, "hover tooltip");
          });
        } else if (open && !(Array.isArray(open) && !open.length)) {
          view.dispatch({
            effects: this.setHover.of(Array.isArray(open) ? open : [open])
          });
        }
      }
    }, {
      key: "tooltip",
      get: function get() {
        var plugin = this.view.plugin(tooltipPlugin);
        var index = plugin ? plugin.manager.tooltips.findIndex(function (t) {
          return t.create == HoverTooltipHost.create;
        }) : -1;
        return index > -1 ? plugin.manager.tooltipViews[index] : null;
      }
    }, {
      key: "mousemove",
      value: function mousemove(event) {
        var _a, _b;
        this.lastMove = {
          x: event.clientX,
          y: event.clientY,
          target: event.target,
          time: Date.now()
        };
        if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
        var active = this.active,
          tooltip = this.tooltip;
        if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
          var _ref12 = active[0] || this.pending,
            pos = _ref12.pos,
            end = (_b = (_a = active[0]) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : pos;
          if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
            this.view.dispatch({
              effects: this.setHover.of([])
            });
            this.pending = null;
          }
        }
      }
    }, {
      key: "mouseleave",
      value: function mouseleave(event) {
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = -1;
        var active = this.active;
        if (active.length) {
          var tooltip = this.tooltip;
          var inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
          if (!inTooltip) this.view.dispatch({
            effects: this.setHover.of([])
          });else this.watchTooltipLeave(tooltip.dom);
        }
      }
    }, {
      key: "watchTooltipLeave",
      value: function watchTooltipLeave(tooltip) {
        var _this60 = this;
        var _watch = function watch(event) {
          tooltip.removeEventListener("mouseleave", _watch);
          if (_this60.active.length && !_this60.view.dom.contains(event.relatedTarget)) _this60.view.dispatch({
            effects: _this60.setHover.of([])
          });
        };
        tooltip.addEventListener("mouseleave", _watch);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        clearTimeout(this.hoverTimeout);
        this.view.dom.removeEventListener("mouseleave", this.mouseleave);
        this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
    }]);
  }();
  var tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
    var _tooltip$getBoundingC = tooltip.getBoundingClientRect(),
      left = _tooltip$getBoundingC.left,
      right = _tooltip$getBoundingC.right,
      top = _tooltip$getBoundingC.top,
      bottom = _tooltip$getBoundingC.bottom,
      arrow;
    if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
      var arrowRect = arrow.getBoundingClientRect();
      top = Math.min(arrowRect.top, top);
      bottom = Math.max(arrowRect.bottom, bottom);
    }
    return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin && event.clientY >= top - tooltipMargin && event.clientY <= bottom + tooltipMargin;
  }
  function isOverRange(view, from, to, x, y, margin) {
    var rect = view.scrollDOM.getBoundingClientRect();
    var docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
    if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y) return false;
    var pos = view.posAtCoords({
      x: x,
      y: y
    }, false);
    return pos >= from && pos <= to;
  }
  /**
  Set up a hover tooltip, which shows up when the pointer hovers
  over ranges of text. The callback is called when the mouse hovers
  over the document text. It should, if there is a tooltip
  associated with position `pos`, return the tooltip description
  (either directly or in a promise). The `side` argument indicates
  on which side of the position the pointer is—it will be -1 if the
  pointer is before the position, 1 if after the position.

  Note that all hover tooltips are hosted within a single tooltip
  container element. This allows multiple tooltips over the same
  range to be "merged" together without overlapping.

  The return value is a valid [editor extension](https://codemirror.net/6/docs/ref/#state.Extension)
  but also provides an `active` property holding a state field that
  can be used to read the currently active tooltips produced by this
  extension.
  */
  function hoverTooltip(source) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var setHover = StateEffect.define();
    var hoverState = StateField.define({
      create: function create() {
        return [];
      },
      update: function update(value, tr) {
        if (value.length) {
          if (options.hideOnChange && (tr.docChanged || tr.selection)) value = [];else if (options.hideOn) value = value.filter(function (v) {
            return !options.hideOn(tr, v);
          });
          if (tr.docChanged) {
            var mapped = [];
            var _iterator91 = _createForOfIteratorHelper$a(value),
              _step91;
            try {
              for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                var tooltip = _step91.value;
                var newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
                if (newPos != null) {
                  var copy = Object.assign(Object.create(null), tooltip);
                  copy.pos = newPos;
                  if (copy.end != null) copy.end = tr.changes.mapPos(copy.end);
                  mapped.push(copy);
                }
              }
            } catch (err) {
              _iterator91.e(err);
            } finally {
              _iterator91.f();
            }
            value = mapped;
          }
        }
        var _iterator92 = _createForOfIteratorHelper$a(tr.effects),
          _step92;
        try {
          for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
            var effect = _step92.value;
            if (effect.is(setHover)) value = effect.value;
            if (effect.is(closeHoverTooltipEffect)) value = [];
          }
        } catch (err) {
          _iterator92.e(err);
        } finally {
          _iterator92.f();
        }
        return value;
      },
      provide: function provide(f) {
        return showHoverTooltip.from(f);
      }
    });
    return {
      active: hoverState,
      extension: [hoverState, ViewPlugin.define(function (view) {
        return new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */);
      }), showHoverTooltipHost]
    };
  }
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
    var plugin = view.plugin(tooltipPlugin);
    if (!plugin) return null;
    var found = plugin.manager.tooltips.indexOf(tooltip);
    return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  var closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();
  var panelConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      var topContainer, bottomContainer;
      var _iterator93 = _createForOfIteratorHelper$a(configs),
        _step93;
      try {
        for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
          var c = _step93.value;
          topContainer = topContainer || c.topContainer;
          bottomContainer = bottomContainer || c.bottomContainer;
        }
      } catch (err) {
        _iterator93.e(err);
      } finally {
        _iterator93.f();
      }
      return {
        topContainer: topContainer,
        bottomContainer: bottomContainer
      };
    }
  });
  /**
  Get the active panel created by the given constructor, if any.
  This can be useful when you need access to your panels' DOM
  structure.
  */
  function getPanel(view, panel) {
    var plugin = view.plugin(panelPlugin);
    var index = plugin ? plugin.specs.indexOf(panel) : -1;
    return index > -1 ? plugin.panels[index] : null;
  }
  var panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class8(view) {
      _classCallCheck(this, _class8);
      this.input = view.state.facet(showPanel);
      this.specs = this.input.filter(function (s) {
        return s;
      });
      this.panels = this.specs.map(function (spec) {
        return spec(view);
      });
      var conf = view.state.facet(panelConfig);
      this.top = new PanelGroup(view, true, conf.topContainer);
      this.bottom = new PanelGroup(view, false, conf.bottomContainer);
      this.top.sync(this.panels.filter(function (p) {
        return p.top;
      }));
      this.bottom.sync(this.panels.filter(function (p) {
        return !p.top;
      }));
      var _iterator94 = _createForOfIteratorHelper$a(this.panels),
        _step94;
      try {
        for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
          var _p2 = _step94.value;
          _p2.dom.classList.add("cm-panel");
          if (_p2.mount) _p2.mount();
        }
      } catch (err) {
        _iterator94.e(err);
      } finally {
        _iterator94.f();
      }
    }
    return _createClass(_class8, [{
      key: "update",
      value: function update(_update20) {
        var conf = _update20.state.facet(panelConfig);
        if (this.top.container != conf.topContainer) {
          this.top.sync([]);
          this.top = new PanelGroup(_update20.view, true, conf.topContainer);
        }
        if (this.bottom.container != conf.bottomContainer) {
          this.bottom.sync([]);
          this.bottom = new PanelGroup(_update20.view, false, conf.bottomContainer);
        }
        this.top.syncClasses();
        this.bottom.syncClasses();
        var input = _update20.state.facet(showPanel);
        if (input != this.input) {
          var specs = input.filter(function (x) {
            return x;
          });
          var _panels = [],
            top = [],
            bottom = [],
            mount = [];
          var _iterator95 = _createForOfIteratorHelper$a(specs),
            _step95;
          try {
            for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
              var spec = _step95.value;
              var known = this.specs.indexOf(spec),
                panel = void 0;
              if (known < 0) {
                panel = spec(_update20.view);
                mount.push(panel);
              } else {
                panel = this.panels[known];
                if (panel.update) panel.update(_update20);
              }
              _panels.push(panel);
              (panel.top ? top : bottom).push(panel);
            }
          } catch (err) {
            _iterator95.e(err);
          } finally {
            _iterator95.f();
          }
          this.specs = specs;
          this.panels = _panels;
          this.top.sync(top);
          this.bottom.sync(bottom);
          for (var _i12 = 0, _mount = mount; _i12 < _mount.length; _i12++) {
            var _p3 = _mount[_i12];
            _p3.dom.classList.add("cm-panel");
            if (_p3.mount) _p3.mount();
          }
        } else {
          var _iterator96 = _createForOfIteratorHelper$a(this.panels),
            _step96;
          try {
            for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
              var _p4 = _step96.value;
              if (_p4.update) _p4.update(_update20);
            }
          } catch (err) {
            _iterator96.e(err);
          } finally {
            _iterator96.f();
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.top.sync([]);
        this.bottom.sync([]);
      }
    }]);
  }(), {
    provide: function provide(plugin) {
      return EditorView.scrollMargins.of(function (view) {
        var value = view.plugin(plugin);
        return value && {
          top: value.top.scrollMargin(),
          bottom: value.bottom.scrollMargin()
        };
      });
    }
  });
  var PanelGroup = /*#__PURE__*/function () {
    function PanelGroup(view, top, container) {
      _classCallCheck(this, PanelGroup);
      this.view = view;
      this.top = top;
      this.container = container;
      this.dom = undefined;
      this.classes = "";
      this.panels = [];
      this.syncClasses();
    }
    return _createClass(PanelGroup, [{
      key: "sync",
      value: function sync(panels) {
        var _iterator97 = _createForOfIteratorHelper$a(this.panels),
          _step97;
        try {
          for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
            var _p5 = _step97.value;
            if (_p5.destroy && panels.indexOf(_p5) < 0) _p5.destroy();
          }
        } catch (err) {
          _iterator97.e(err);
        } finally {
          _iterator97.f();
        }
        this.panels = panels;
        this.syncDOM();
      }
    }, {
      key: "syncDOM",
      value: function syncDOM() {
        if (this.panels.length == 0) {
          if (this.dom) {
            this.dom.remove();
            this.dom = undefined;
          }
          return;
        }
        if (!this.dom) {
          this.dom = document.createElement("div");
          this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
          this.dom.style[this.top ? "top" : "bottom"] = "0";
          var parent = this.container || this.view.dom;
          parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
        }
        var curDOM = this.dom.firstChild;
        var _iterator98 = _createForOfIteratorHelper$a(this.panels),
          _step98;
        try {
          for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
            var panel = _step98.value;
            if (panel.dom.parentNode == this.dom) {
              while (curDOM != panel.dom) curDOM = rm(curDOM);
              curDOM = curDOM.nextSibling;
            } else {
              this.dom.insertBefore(panel.dom, curDOM);
            }
          }
        } catch (err) {
          _iterator98.e(err);
        } finally {
          _iterator98.f();
        }
        while (curDOM) curDOM = rm(curDOM);
      }
    }, {
      key: "scrollMargin",
      value: function scrollMargin() {
        return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
    }, {
      key: "syncClasses",
      value: function syncClasses() {
        if (!this.container || this.classes == this.view.themeClasses) return;
        var _iterator99 = _createForOfIteratorHelper$a(this.classes.split(" ")),
          _step99;
        try {
          for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
            var cls = _step99.value;
            if (cls) this.container.classList.remove(cls);
          }
        } catch (err) {
          _iterator99.e(err);
        } finally {
          _iterator99.f();
        }
        var _iterator100 = _createForOfIteratorHelper$a((this.classes = this.view.themeClasses).split(" ")),
          _step100;
        try {
          for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
            var _cls = _step100.value;
            if (_cls) this.container.classList.add(_cls);
          }
        } catch (err) {
          _iterator100.e(err);
        } finally {
          _iterator100.f();
        }
      }
    }]);
  }();
  function rm(node) {
    var next = node.nextSibling;
    node.remove();
    return next;
  }
  /**
  Opening a panel is done by providing a constructor function for
  the panel through this facet. (The panel is closed again when its
  constructor is no longer provided.) Values of `null` are ignored.
  */
  var showPanel = /*@__PURE__*/Facet.define({
    enables: panelPlugin
  });

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  var GutterMarker = /*#__PURE__*/function (_RangeValue2) {
    function GutterMarker() {
      _classCallCheck(this, GutterMarker);
      return _callSuper$5(this, GutterMarker, arguments);
    }
    _inherits(GutterMarker, _RangeValue2);
    return _createClass(GutterMarker, [{
      key: "compare",
      value:
      /**
      @internal
      */
      function compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        return false;
      }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
    }, {
      key: "destroy",
      value: function destroy(dom) {}
    }]);
  }(RangeValue);
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  var gutterLineClass = /*@__PURE__*/Facet.define();
  /**
  Facet used to add a class to all gutter elements next to a widget.
  Should not provide widgets with a `toDOM` method.
  */
  var gutterWidgetClass = /*@__PURE__*/Facet.define();
  var defaults$1 = {
    "class": "",
    renderEmptyElements: false,
    elementStyle: "",
    markers: function markers() {
      return RangeSet.empty;
    },
    lineMarker: function lineMarker() {
      return null;
    },
    widgetMarker: function widgetMarker() {
      return null;
    },
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
  };
  var activeGutters = /*@__PURE__*/Facet.define();
  /**
  Define an editor gutter. The order in which the gutters appear is
  determined by their extension priority.
  */
  function gutter(config) {
    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
  }
  var unfixGutters = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.

  Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
    var result = [gutterView];
    return result;
  }
  var gutterView = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class9(view) {
      _classCallCheck(this, _class9);
      this.view = view;
      this.prevViewport = view.viewport;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutters";
      this.dom.setAttribute("aria-hidden", "true");
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.gutters = view.state.facet(activeGutters).map(function (conf) {
        return new SingleGutterView(view, conf);
      });
      var _iterator101 = _createForOfIteratorHelper$a(this.gutters),
        _step101;
      try {
        for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
          var _gutter = _step101.value;
          this.dom.appendChild(_gutter.dom);
        }
      } catch (err) {
        _iterator101.e(err);
      } finally {
        _iterator101.f();
      }
      this.fixed = !view.state.facet(unfixGutters);
      if (this.fixed) {
        // FIXME IE11 fallback, which doesn't support position: sticky,
        // by using position: relative + event handlers that realign the
        // gutter (or just force fixed=false on IE11?)
        this.dom.style.position = "sticky";
      }
      this.syncGutters(false);
      view.scrollDOM.insertBefore(this.dom, view.contentDOM);
    }
    return _createClass(_class9, [{
      key: "update",
      value: function update(_update21) {
        if (this.updateGutters(_update21)) {
          // Detach during sync when the viewport changed significantly
          // (such as during scrolling), since for large updates that is
          // faster.
          var vpA = this.prevViewport,
            vpB = _update21.view.viewport;
          var vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
          this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
        }
        if (_update21.geometryChanged) {
          this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
        }
        if (this.view.state.facet(unfixGutters) != !this.fixed) {
          this.fixed = !this.fixed;
          this.dom.style.position = this.fixed ? "sticky" : "";
        }
        this.prevViewport = _update21.view.viewport;
      }
    }, {
      key: "syncGutters",
      value: function syncGutters(detach) {
        var _this61 = this;
        var after = this.dom.nextSibling;
        if (detach) this.dom.remove();
        var lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
        var classSet = [];
        var contexts = this.gutters.map(function (gutter) {
          return new UpdateContext(gutter, _this61.view.viewport, -_this61.view.documentPadding.top);
        });
        var _iterator102 = _createForOfIteratorHelper$a(this.view.viewportLineBlocks),
          _step102;
        try {
          for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
            var line = _step102.value;
            if (classSet.length) classSet = [];
            if (Array.isArray(line.type)) {
              var first = true;
              var _iterator104 = _createForOfIteratorHelper$a(line.type),
                _step104;
              try {
                for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
                  var b = _step104.value;
                  if (b.type == BlockType.Text && first) {
                    advanceCursor(lineClasses, classSet, b.from);
                    var _iterator105 = _createForOfIteratorHelper$a(contexts),
                      _step105;
                    try {
                      for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                        var cx = _step105.value;
                        cx.line(this.view, b, classSet);
                      }
                    } catch (err) {
                      _iterator105.e(err);
                    } finally {
                      _iterator105.f();
                    }
                    first = false;
                  } else if (b.widget) {
                    var _iterator106 = _createForOfIteratorHelper$a(contexts),
                      _step106;
                    try {
                      for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
                        var _cx = _step106.value;
                        _cx.widget(this.view, b);
                      }
                    } catch (err) {
                      _iterator106.e(err);
                    } finally {
                      _iterator106.f();
                    }
                  }
                }
              } catch (err) {
                _iterator104.e(err);
              } finally {
                _iterator104.f();
              }
            } else if (line.type == BlockType.Text) {
              advanceCursor(lineClasses, classSet, line.from);
              var _iterator107 = _createForOfIteratorHelper$a(contexts),
                _step107;
              try {
                for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
                  var _cx2 = _step107.value;
                  _cx2.line(this.view, line, classSet);
                }
              } catch (err) {
                _iterator107.e(err);
              } finally {
                _iterator107.f();
              }
            } else if (line.widget) {
              var _iterator108 = _createForOfIteratorHelper$a(contexts),
                _step108;
              try {
                for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
                  var _cx3 = _step108.value;
                  _cx3.widget(this.view, line);
                }
              } catch (err) {
                _iterator108.e(err);
              } finally {
                _iterator108.f();
              }
            }
          }
        } catch (err) {
          _iterator102.e(err);
        } finally {
          _iterator102.f();
        }
        var _iterator103 = _createForOfIteratorHelper$a(contexts),
          _step103;
        try {
          for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
            var _cx4 = _step103.value;
            _cx4.finish();
          }
        } catch (err) {
          _iterator103.e(err);
        } finally {
          _iterator103.f();
        }
        if (detach) this.view.scrollDOM.insertBefore(this.dom, after);
      }
    }, {
      key: "updateGutters",
      value: function updateGutters(update) {
        var prev = update.startState.facet(activeGutters),
          cur = update.state.facet(activeGutters);
        var change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
        if (prev == cur) {
          var _iterator109 = _createForOfIteratorHelper$a(this.gutters),
            _step109;
          try {
            for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
              var _gutter2 = _step109.value;
              if (_gutter2.update(update)) change = true;
            }
          } catch (err) {
            _iterator109.e(err);
          } finally {
            _iterator109.f();
          }
        } else {
          change = true;
          var _gutters = [];
          var _iterator110 = _createForOfIteratorHelper$a(cur),
            _step110;
          try {
            for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
              var conf = _step110.value;
              var known = prev.indexOf(conf);
              if (known < 0) {
                _gutters.push(new SingleGutterView(this.view, conf));
              } else {
                this.gutters[known].update(update);
                _gutters.push(this.gutters[known]);
              }
            }
          } catch (err) {
            _iterator110.e(err);
          } finally {
            _iterator110.f();
          }
          var _iterator111 = _createForOfIteratorHelper$a(this.gutters),
            _step111;
          try {
            for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
              var _g = _step111.value;
              _g.dom.remove();
              if (_gutters.indexOf(_g) < 0) _g.destroy();
            }
          } catch (err) {
            _iterator111.e(err);
          } finally {
            _iterator111.f();
          }
          for (var _i13 = 0, _gutters2 = _gutters; _i13 < _gutters2.length; _i13++) {
            var g = _gutters2[_i13];
            this.dom.appendChild(g.dom);
          }
          this.gutters = _gutters;
        }
        return change;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator112 = _createForOfIteratorHelper$a(this.gutters),
          _step112;
        try {
          for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
            var view = _step112.value;
            view.destroy();
          }
        } catch (err) {
          _iterator112.e(err);
        } finally {
          _iterator112.f();
        }
        this.dom.remove();
      }
    }]);
  }(), {
    provide: function provide(plugin) {
      return EditorView.scrollMargins.of(function (view) {
        var value = view.plugin(plugin);
        if (!value || value.gutters.length == 0 || !value.fixed) return null;
        return view.textDirection == Direction.LTR ? {
          left: value.dom.offsetWidth * view.scaleX
        } : {
          right: value.dom.offsetWidth * view.scaleX
        };
      });
    }
  });
  function asArray(val) {
    return Array.isArray(val) ? val : [val];
  }
  function advanceCursor(cursor, collect, pos) {
    while (cursor.value && cursor.from <= pos) {
      if (cursor.from == pos) collect.push(cursor.value);
      cursor.next();
    }
  }
  var UpdateContext = /*#__PURE__*/function () {
    function UpdateContext(gutter, viewport, height) {
      _classCallCheck(this, UpdateContext);
      this.gutter = gutter;
      this.height = height;
      this.i = 0;
      this.cursor = RangeSet.iter(gutter.markers, viewport.from);
    }
    return _createClass(UpdateContext, [{
      key: "addElement",
      value: function addElement(view, block, markers) {
        var gutter = this.gutter,
          above = (block.top - this.height) / view.scaleY,
          height = block.height / view.scaleY;
        if (this.i == gutter.elements.length) {
          var newElt = new GutterElement(view, height, above, markers);
          gutter.elements.push(newElt);
          gutter.dom.appendChild(newElt.dom);
        } else {
          gutter.elements[this.i].update(view, height, above, markers);
        }
        this.height = block.bottom;
        this.i++;
      }
    }, {
      key: "line",
      value: function line(view, _line3, extraMarkers) {
        var localMarkers = [];
        advanceCursor(this.cursor, localMarkers, _line3.from);
        if (extraMarkers.length) localMarkers = localMarkers.concat(extraMarkers);
        var forLine = this.gutter.config.lineMarker(view, _line3, localMarkers);
        if (forLine) localMarkers.unshift(forLine);
        var gutter = this.gutter;
        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
        this.addElement(view, _line3, localMarkers);
      }
    }, {
      key: "widget",
      value: function widget(view, block) {
        var marker = this.gutter.config.widgetMarker(view, block.widget, block),
          markers = marker ? [marker] : null;
        var _iterator113 = _createForOfIteratorHelper$a(view.state.facet(gutterWidgetClass)),
          _step113;
        try {
          for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
            var cls = _step113.value;
            var _marker = cls(view, block.widget, block);
            if (_marker) (markers || (markers = [])).push(_marker);
          }
        } catch (err) {
          _iterator113.e(err);
        } finally {
          _iterator113.f();
        }
        if (markers) this.addElement(view, block, markers);
      }
    }, {
      key: "finish",
      value: function finish() {
        var gutter = this.gutter;
        while (gutter.elements.length > this.i) {
          var last = gutter.elements.pop();
          gutter.dom.removeChild(last.dom);
          last.destroy();
        }
      }
    }]);
  }();
  var SingleGutterView = /*#__PURE__*/function () {
    function SingleGutterView(view, config) {
      var _this62 = this;
      _classCallCheck(this, SingleGutterView);
      this.view = view;
      this.config = config;
      this.elements = [];
      this.spacer = null;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");
      var _loop7 = function _loop7(prop) {
        _this62.dom.addEventListener(prop, function (event) {
          var target = event.target,
            y;
          if (target != _this62.dom && _this62.dom.contains(target)) {
            while (target.parentNode != _this62.dom) target = target.parentNode;
            var rect = target.getBoundingClientRect();
            y = (rect.top + rect.bottom) / 2;
          } else {
            y = event.clientY;
          }
          var line = view.lineBlockAtHeight(y - view.documentTop);
          if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
        });
      };
      for (var prop in config.domEventHandlers) {
        _loop7(prop);
      }
      this.markers = asArray(config.markers(view));
      if (config.initialSpacer) {
        this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
        this.dom.appendChild(this.spacer.dom);
        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
      }
    }
    return _createClass(SingleGutterView, [{
      key: "update",
      value: function update(_update22) {
        var prevMarkers = this.markers;
        this.markers = asArray(this.config.markers(_update22.view));
        if (this.spacer && this.config.updateSpacer) {
          var updated = this.config.updateSpacer(this.spacer.markers[0], _update22);
          if (updated != this.spacer.markers[0]) this.spacer.update(_update22.view, 0, 0, [updated]);
        }
        var vp = _update22.view.viewport;
        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(_update22) : false);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator114 = _createForOfIteratorHelper$a(this.elements),
          _step114;
        try {
          for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
            var elt = _step114.value;
            elt.destroy();
          }
        } catch (err) {
          _iterator114.e(err);
        } finally {
          _iterator114.f();
        }
      }
    }]);
  }();
  var GutterElement = /*#__PURE__*/function () {
    function GutterElement(view, height, above, markers) {
      _classCallCheck(this, GutterElement);
      this.height = -1;
      this.above = 0;
      this.markers = [];
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutterElement";
      this.update(view, height, above, markers);
    }
    return _createClass(GutterElement, [{
      key: "update",
      value: function update(view, height, above, markers) {
        if (this.height != height) {
          this.height = height;
          this.dom.style.height = height + "px";
        }
        if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
        if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
      }
    }, {
      key: "setMarkers",
      value: function setMarkers(view, markers) {
        var cls = "cm-gutterElement",
          domPos = this.dom.firstChild;
        for (var iNew = 0, iOld = 0;;) {
          var skipTo = iOld,
            marker = iNew < markers.length ? markers[iNew++] : null,
            matched = false;
          if (marker) {
            var c = marker.elementClass;
            if (c) cls += " " + c;
            for (var i = iOld; i < this.markers.length; i++) if (this.markers[i].compare(marker)) {
              skipTo = i;
              matched = true;
              break;
            }
          } else {
            skipTo = this.markers.length;
          }
          while (iOld < skipTo) {
            var next = this.markers[iOld++];
            if (next.toDOM) {
              next.destroy(domPos);
              var after = domPos.nextSibling;
              domPos.remove();
              domPos = after;
            }
          }
          if (!marker) break;
          if (marker.toDOM) {
            if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
          }
          if (matched) iOld++;
        }
        this.dom.className = cls;
        this.markers = markers;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.setMarkers(null, []); // First argument not used unless creating markers
      }
    }]);
  }();
  function sameMarkers(a, b) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) if (!a[i].compare(b[i])) return false;
    return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  var lineNumberMarkers = /*@__PURE__*/Facet.define();
  /**
  Facet used to create markers in the line number gutter next to widgets.
  */
  var lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
  var lineNumberConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return combineConfig(values, {
        formatNumber: String,
        domEventHandlers: {}
      }, {
        domEventHandlers: function domEventHandlers(a, b) {
          var result = Object.assign({}, a);
          var _loop8 = function _loop8() {
            var exists = result[event],
              add = b[event];
            result[event] = exists ? function (view, line, event) {
              return exists(view, line, event) || add(view, line, event);
            } : add;
          };
          for (var event in b) {
            _loop8();
          }
          return result;
        }
      });
    }
  });
  var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
    function NumberMarker(number) {
      var _this63;
      _classCallCheck(this, NumberMarker);
      _this63 = _callSuper$5(this, NumberMarker);
      _this63.number = number;
      return _this63;
    }
    _inherits(NumberMarker, _GutterMarker);
    return _createClass(NumberMarker, [{
      key: "eq",
      value: function eq(other) {
        return this.number == other.number;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        return document.createTextNode(this.number);
      }
    }]);
  }(GutterMarker);
  function formatNumber(view, number) {
    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  var lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], function (state) {
    return {
      "class": "cm-lineNumbers",
      renderEmptyElements: false,
      markers: function markers(view) {
        return view.state.facet(lineNumberMarkers);
      },
      lineMarker: function lineMarker(view, line, others) {
        if (others.some(function (m) {
          return m.toDOM;
        })) return null;
        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: function widgetMarker(view, widget, block) {
        var _iterator115 = _createForOfIteratorHelper$a(view.state.facet(lineNumberWidgetMarker)),
          _step115;
        try {
          for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
            var m = _step115.value;
            var result = m(view, widget, block);
            if (result) return result;
          }
        } catch (err) {
          _iterator115.e(err);
        } finally {
          _iterator115.f();
        }
        return null;
      },
      lineMarkerChange: function lineMarkerChange(update) {
        return update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig);
      },
      initialSpacer: function initialSpacer(view) {
        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer: function updateSpacer(spacer, update) {
        var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
        return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    };
  });
  /**
  Create a line number gutter extension.
  */
  function lineNumbers() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
  }
  function maxLineNumber(lines) {
    var last = 9;
    while (last < lines) last = last * 10 + 9;
    return last;
  }
  var activeLineGutterMarker = /*@__PURE__*/new (/*#__PURE__*/function (_GutterMarker2) {
    function _class10() {
      var _this64;
      _classCallCheck(this, _class10);
      _this64 = _callSuper$5(this, _class10, arguments);
      _this64.elementClass = "cm-activeLineGutter";
      return _this64;
    }
    _inherits(_class10, _GutterMarker2);
    return _createClass(_class10);
  }(GutterMarker))();
  var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
    var marks = [],
      last = -1;
    var _iterator116 = _createForOfIteratorHelper$a(state.selection.ranges),
      _step116;
    try {
      for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
        var range = _step116.value;
        var linePos = state.doc.lineAt(range.head).from;
        if (linePos > last) {
          last = linePos;
          marks.push(activeLineGutterMarker.range(linePos));
        }
      }
    } catch (err) {
      _iterator116.e(err);
    } finally {
      _iterator116.f();
    }
    return RangeSet.of(marks);
  });
  /**
  Returns an extension that adds a `cm-activeLineGutter` class to
  all gutter elements on the [active
  line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
  */
  function highlightActiveLineGutter() {
    return activeLineGutterHighlighter;
  }

  function _defineProperty(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  /**
  The default maximum length of a `TreeBuffer` node.
  */
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  class Range {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  /**
  Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  can have metadata associated with it in props. Instances of this
  class represent prop names.
  */
  class NodeProp {
      /**
      Create a new node prop type.
      */
      constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
              throw new Error("This node type doesn't define a deserialize function");
          });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match) {
          if (this.perNode)
              throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
              match = NodeType.match(match);
          return (type) => {
              let result = match(type);
              return result === undefined ? null : [this, result];
          };
      }
  }
  /**
  Prop that is used to describe matching delimiters. For opening
  delimiters, this holds an array of node names (written as a
  space-separated string when declaring this prop in a grammar)
  for the node types of closing delimiters that match it.
  */
  NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  attached to closing delimiters, holding an array of node names
  of types of matching opening delimiters.
  */
  NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Used to assign node types to groups (for example, all node
  types that represent an expression could be tagged with an
  `"Expression"` group).
  */
  NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Attached to nodes to indicate these should be
  [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
  in a bidirectional text isolate, so that direction-neutral
  characters on their sides don't incorrectly get associated with
  surrounding text. You'll generally want to set this for nodes
  that contain arbitrary text, like strings and comments, and for
  nodes that appear _inside_ arbitrary text, like HTML tags. When
  not given a value, in a grammar declaration, defaults to
  `"auto"`.
  */
  NodeProp.isolate = new NodeProp({ deserialize: value => {
          if (value && value != "rtl" && value != "ltr" && value != "auto")
              throw new RangeError("Invalid value for isolate: " + value);
          return value || "auto";
      } });
  /**
  The hash of the [context](#lr.ContextTracker.constructor)
  that the node was parsed in, if any. Used to limit reuse of
  contextual nodes.
  */
  NodeProp.contextHash = new NodeProp({ perNode: true });
  /**
  The distance beyond the end of the node that the tokenizer
  looked ahead for any of the tokens inside the node. (The LR
  parser only stores this when it is larger than 25, for
  efficiency reasons.)
  */
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  /**
  This per-node prop is used to replace a given node, or part of a
  node, with another tree. This is useful to include trees from
  different languages in mixed-language parsers.
  */
  NodeProp.mounted = new NodeProp({ perNode: true });
  /**
  A mounted tree, which can be [stored](#common.NodeProp^mounted) on
  a tree node to indicate that parts of its content are
  represented by another tree.
  */
  class MountedTree {
      constructor(
      /**
      The inner tree.
      */
      tree, 
      /**
      If this is null, this tree replaces the entire node (it will
      be included in the regular iteration instead of its host
      node). If not, only the given ranges are considered to be
      covered by this tree. This is used for trees that are mixed in
      a way that isn't strictly hierarchical. Such mounted trees are
      only entered by [`resolveInner`](#common.Tree.resolveInner)
      and [`enter`](#common.SyntaxNode.enter).
      */
      overlay, 
      /**
      The parser used to create this subtree.
      */
      parser) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser;
      }
      /**
      @internal
      */
      static get(tree) {
          return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
  }
  const noProps = Object.create(null);
  /**
  Each node in a syntax tree has a node type associated with it.
  */
  class NodeType {
      /**
      @internal
      */
      constructor(
      /**
      The name of the node type. Not necessarily unique, but if the
      grammar was written properly, different node types with the
      same name within a node set should play the same semantic
      role.
      */
      name, 
      /**
      @internal
      */
      props, 
      /**
      The id of this node in its set. Corresponds to the term ids
      used in the parser.
      */
      id, 
      /**
      @internal
      */
      flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
              (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
              for (let src of spec.props) {
                  if (!Array.isArray(src))
                      src = src(type);
                  if (src) {
                      if (src[0].perNode)
                          throw new RangeError("Can't store a per-node prop on a node type");
                      props[src[0].id] = src[1];
                  }
              }
          return type;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) { return this.props[prop.id]; }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
      /**
      Indicates whether this is an error node.
      */
      get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name) {
          if (typeof name == 'string') {
              if (this.name == name)
                  return true;
              let group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
              for (let name of prop.split(" "))
                  direct[name] = map[prop];
          return (node) => {
              for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                  let found = direct[i < 0 ? node.name : groups[i]];
                  if (found)
                      return found;
              }
          };
      }
  }
  /**
  An empty dummy node type to use when no actual type is available.
  */
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /**
  A node set holds a collection of node types. It is used to
  compactly represent trees by storing their type ids, rather than a
  full pointer to the type object, in a numeric array. Each parser
  [has](#lr.LRParser.nodeSet) a node set, and [tree
  buffers](#common.TreeBuffer) can only store collections of nodes
  from the same set. A set can have a maximum of 2**16 (65536) node
  types in it, so that the ids fit into 16-bit typed array slots.
  */
  class NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(
      /**
      The node types in this set, by id.
      */
      types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
              if (types[i].id != i)
                  throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
              let newProps = null;
              for (let source of props) {
                  let add = source(type);
                  if (add) {
                      if (!newProps)
                          newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                  }
              }
              newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
      }
  }
  const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
  /**
  Options that control iteration. Can be combined with the `|`
  operator to enable multiple ones.
  */
  var IterMode;
  (function (IterMode) {
      /**
      When enabled, iteration will only visit [`Tree`](#common.Tree)
      objects, not nodes packed into
      [`TreeBuffer`](#common.TreeBuffer)s.
      */
      IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      /**
      Enable this to make iteration include anonymous nodes (such as
      the nodes that wrap repeated grammar constructs into a balanced
      tree).
      */
      IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      /**
      By default, regular [mounted](#common.NodeProp^mounted) nodes
      replace their base node in iteration. Enable this to ignore them
      instead.
      */
      IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
      /**
      This option only applies in
      [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
      library to not enter mounted overlays if one covers the given
      position.
      */
      IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /**
  A piece of syntax tree. There are two ways to approach these
  trees: the way they are actually stored in memory, and the
  convenient way.

  Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  objects. By packing detail information into `TreeBuffer` leaf
  nodes, the representation is made a lot more memory-efficient.

  However, when you want to actually work with tree nodes, this
  representation is very awkward, so most client code will want to
  use the [`TreeCursor`](#common.TreeCursor) or
  [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  a view on some part of this data structure, and can be used to
  move around to adjacent nodes.
  */
  class Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(
      /**
      The type of the top node.
      */
      type, 
      /**
      This node's child nodes.
      */
      children, 
      /**
      The positions (offsets relative to the start of this tree) of
      the children.
      */
      positions, 
      /**
      The total length of this tree
      */
      length, 
      /**
      Per-node [node props](#common.NodeProp) to associate with this node.
      */
      props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          /**
          @internal
          */
          this.props = null;
          if (props && props.length) {
              this.props = Object.create(null);
              for (let [prop, value] of props)
                  this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
      }
      /**
      @internal
      */
      toString() {
          let mounted = MountedTree.get(this);
          if (mounted && !mounted.overlay)
              return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
              let str = ch.toString();
              if (str) {
                  if (children)
                      children += ",";
                  children += str;
              }
          }
          return !this.type.name ? children :
              (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                  (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
          return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos, side = 0) {
          return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
          for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
              let entered = false;
              if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                  if (c.firstChild())
                      continue;
                  entered = true;
              }
              for (;;) {
                  if (entered && leave && (anon || !c.type.isAnonymous))
                      leave(c);
                  if (c.nextSibling())
                      break;
                  if (!c.parent())
                      return;
                  entered = true;
              }
          }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
          let result = [];
          if (this.props)
              for (let id in this.props)
                  result.push([+id, this.props[id]]);
          return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config = {}) {
          return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
              balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data) { return buildTree(data); }
  }
  /**
  The empty tree
  */
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
      constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      get pos() { return this.index; }
      next() { this.index -= 4; }
      fork() { return new FlatBufferCursor(this.buffer, this.index); }
  }
  /**
  Tree buffers contain (type, start, end, endIndex) quads for each
  node. In such a buffer, nodes are stored in prefix order (parents
  before children, with the endIndex of the parent indicating which
  children belong to it).
  */
  class TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(
      /**
      The buffer's content.
      */
      buffer, 
      /**
      The total length of the group of nodes in the buffer.
      */
      length, 
      /**
      The node set used in this buffer.
      */
      set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
      }
      /**
      @internal
      */
      get type() { return NodeType.none; }
      /**
      @internal
      */
      toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
              result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
              return result;
          let children = [];
          while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
              if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                  pick = i;
                  if (dir > 0)
                      break;
              }
          }
          return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI), len = 0;
          for (let i = startI, j = 0; i < endI;) {
              copy[j++] = b[i++];
              copy[j++] = b[i++] - from;
              let to = copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - startI;
              len = Math.max(len, to);
          }
          return new TreeBuffer(copy, len, this.set);
      }
  }
  function checkSide(side, pos, from, to) {
      switch (side) {
          case -2 /* Side.Before */: return from < pos;
          case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
          case 0 /* Side.Around */: return from < pos && to > pos;
          case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
          case 2 /* Side.After */: return to > pos;
          case 4 /* Side.DontCare */: return true;
      }
  }
  function resolveNode(node, pos, side, overlays) {
      var _a;
      // Move up to a node that actually holds the position, if possible
      while (node.from == node.to ||
          (side < 1 ? node.from >= pos : node.from > pos) ||
          (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
              return node;
          node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      // Must go up out of overlays when those do not overlap with pos
      if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
              if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                  node = parent;
          }
      for (;;) {
          let inner = node.enter(pos, side, mode);
          if (!inner)
              return node;
          node = inner;
      }
  }
  class BaseNode {
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      matchContext(context) {
          return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos) {
          let scan = this.childBefore(pos), node = this;
          while (scan) {
              let last = scan.lastChild;
              if (!last || last.to != scan.to)
                  break;
              if (last.type.isError && last.from == last.to) {
                  node = scan;
                  scan = last.prevSibling;
              }
              else {
                  scan = last;
              }
          }
          return node;
      }
      get node() { return this; }
      get next() { return this.parent; }
  }
  class TreeNode extends BaseNode {
      constructor(_tree, from, 
      // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
      index, _parent) {
          super();
          this._tree = _tree;
          this.from = from;
          this.index = index;
          this._parent = _parent;
      }
      get type() { return this._tree.type; }
      get name() { return this._tree.type.name; }
      get to() { return this.from + this._tree.length; }
      nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this;;) {
              for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                  let next = children[i], start = positions[i] + parent.from;
                  if (!checkSide(side, pos, start, start + next.length))
                      continue;
                  if (next instanceof TreeBuffer) {
                      if (mode & IterMode.ExcludeBuffers)
                          continue;
                      let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                      if (index > -1)
                          return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                  }
                  else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                      let mounted;
                      if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                          return new TreeNode(mounted.tree, start, i, parent);
                      let inner = new TreeNode(next, start, i, parent);
                      return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                          : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                  }
              }
              if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                  return null;
              if (parent.index >= 0)
                  i = parent.index + dir;
              else
                  i = dir < 0 ? -1 : parent._parent._tree.children.length;
              parent = parent._parent;
              if (!parent)
                  return null;
          }
      }
      get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
              let rPos = pos - this.from;
              for (let { from, to } of mounted.overlay) {
                  if ((side > 0 ? from <= rPos : from < rPos) &&
                      (side < 0 ? to >= rPos : to > rPos))
                      return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
              }
          }
          return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
              val = val._parent;
          return val;
      }
      get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
      }
      get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
      }
      get tree() { return this._tree; }
      toTree() { return this._tree; }
      /**
      @internal
      */
      toString() { return this._tree.toString(); }
  }
  function getChildren(node, type, before, after) {
      let cur = node.cursor(), result = [];
      if (!cur.firstChild())
          return result;
      if (before != null)
          for (let found = false; !found;) {
              found = cur.type.is(before);
              if (!cur.nextSibling())
                  return result;
          }
      for (;;) {
          if (after != null && cur.type.is(after))
              return result;
          if (cur.type.is(type))
              result.push(cur.node);
          if (!cur.nextSibling())
              return after == null ? result : [];
      }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
      for (let p = node; i >= 0; p = p.parent) {
          if (!p)
              return false;
          if (!p.type.isAnonymous) {
              if (context[i] && context[i] != p.name)
                  return false;
              i--;
          }
      }
      return true;
  }
  class BufferContext {
      constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
      }
  }
  class BufferNode extends BaseNode {
      get name() { return this.type.name; }
      get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
      get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
      constructor(context, _parent, index) {
          super();
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
              return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
      }
      get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
              return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
      }
      get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
              return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      }
      get tree() { return null; }
      toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
              let from = buffer.buffer[this.index + 1];
              children.push(buffer.slice(startI, endI, from));
              positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() { return this.context.buffer.childString(this.index); }
  }
  function iterStack(heads) {
      if (!heads.length)
          return null;
      let pick = 0, picked = heads[0];
      for (let i = 1; i < heads.length; i++) {
          let node = heads[i];
          if (node.from > picked.from || node.to < picked.to) {
              picked = node;
              pick = i;
          }
      }
      let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
      let newHeads = heads.slice();
      if (next)
          newHeads[pick] = next;
      else
          newHeads.splice(pick, 1);
      return new StackIterator(newHeads, picked);
  }
  class StackIterator {
      constructor(heads, node) {
          this.heads = heads;
          this.node = node;
      }
      get next() { return iterStack(this.heads); }
  }
  function stackIterator(tree, pos, side) {
      let inner = tree.resolveInner(pos, side), layers = null;
      for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
          if (scan.index < 0) { // This is an overlay root
              let parent = scan.parent;
              (layers || (layers = [inner])).push(parent.resolve(pos, side));
              scan = parent;
          }
          else {
              let mount = MountedTree.get(scan.tree);
              // Relevant overlay branching off
              if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                  let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                  (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
              }
          }
      }
      return layers ? iterStack(layers) : inner;
  }
  /**
  A tree cursor object focuses on a given node in a syntax tree, and
  allows you to move to adjacent nodes.
  */
  class TreeCursor {
      /**
      Shorthand for `.type.name`.
      */
      get name() { return this.type.name; }
      /**
      @internal
      */
      constructor(node, 
      /**
      @internal
      */
      mode = 0) {
          this.mode = mode;
          /**
          @internal
          */
          this.buffer = null;
          this.stack = [];
          /**
          @internal
          */
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
              this.yieldNode(node);
          }
          else {
              this._tree = node.context.parent;
              this.buffer = node.context;
              for (let n = node._parent; n; n = n._parent)
                  this.stack.unshift(n.index);
              this.bufferNode = node;
              this.yieldBuf(node.index);
          }
      }
      yieldNode(node) {
          if (!node)
              return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
      }
      yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
      }
      /**
      @internal
      */
      yield(node) {
          if (!node)
              return false;
          if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos, side) {
          if (!this.buffer)
              return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
              return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos, side, mode = this.mode) {
          if (!this.buffer)
              return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
          if (!this.buffer)
              return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
              return this.yieldBuf(this.stack.pop());
          let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
          if (!this.buffer)
              return !this._tree._parent ? false
                  : this.yield(this._tree.index < 0 ? null
                      : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
              let parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart)
                  return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
          }
          else {
              let after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                  return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() { return this.sibling(1); }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() { return this.sibling(-1); }
      atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
              if (dir > 0) {
                  if (this.index < buffer.buffer.buffer.length)
                      return false;
              }
              else {
                  for (let i = 0; i < this.index; i++)
                      if (buffer.buffer.buffer[i + 3] < this.index)
                          return false;
              }
              ({ index, parent } = buffer);
          }
          else {
              ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
              if (index > -1)
                  for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                      let child = parent._tree.children[i];
                      if ((this.mode & IterMode.IncludeAnonymous) ||
                          child instanceof TreeBuffer ||
                          !child.type.isAnonymous ||
                          hasChild(child))
                          return false;
                  }
          }
          return true;
      }
      move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
              return true;
          for (;;) {
              if (this.sibling(dir))
                  return true;
              if (this.atLastNode(dir) || !this.parent())
                  return false;
          }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) { return this.move(1, enter); }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) { return this.move(-1, enter); }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos, side = 0) {
          // Move up to a node that actually holds the position, if possible
          while (this.from == this.to ||
              (side < 1 ? this.from >= pos : this.from > pos) ||
              (side > -1 ? this.to <= pos : this.to < pos))
              if (!this.parent())
                  break;
          // Then scan down into child nodes as far as possible
          while (this.enterChild(1, pos, side)) { }
          return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
          if (!this.buffer)
              return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
              scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                  for (let c = cache; c; c = c._parent)
                      if (c.index == index) {
                          if (index == this.index)
                              return c;
                          result = c;
                          depth = d + 1;
                          break scan;
                      }
                  index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
              result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
          return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
          for (let depth = 0;;) {
              let mustLeave = false;
              if (this.type.isAnonymous || enter(this) !== false) {
                  if (this.firstChild()) {
                      depth++;
                      continue;
                  }
                  if (!this.type.isAnonymous)
                      mustLeave = true;
              }
              for (;;) {
                  if (mustLeave && leave)
                      leave(this);
                  mustLeave = this.type.isAnonymous;
                  if (!depth)
                      return;
                  if (this.nextSibling())
                      break;
                  this.parent();
                  depth--;
                  mustLeave = true;
              }
          }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
          if (!this.buffer)
              return matchNodeContext(this.node.parent, context);
          let { buffer } = this.buffer, { types } = buffer.set;
          for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
              if (d < 0)
                  return matchNodeContext(this._tree, context, i);
              let type = types[buffer.buffer[this.stack[d]]];
              if (!type.isAnonymous) {
                  if (context[i] && context[i] != type.name)
                      return false;
                  i--;
              }
          }
          return true;
      }
  }
  function hasChild(tree) {
      return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
      var _a;
      let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
      let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
      let types = nodeSet.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
          while (size < 0) {
              cursor.next();
              if (size == -1 /* SpecialRecord.Reuse */) {
                  let node = reused[id];
                  children.push(node);
                  positions.push(start - parentStart);
                  return;
              }
              else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                  contextHash = id;
                  return;
              }
              else if (size == -4 /* SpecialRecord.LookAhead */) {
                  lookAhead = id;
                  return;
              }
              else {
                  throw new RangeError(`Unrecognized record size: ${size}`);
              }
          }
          let type = types[id], node, buffer;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
              // Small enough for a buffer, and no reused nodes inside
              let data = new Uint16Array(buffer.size - buffer.skip);
              let endPos = cursor.pos - buffer.size, index = data.length;
              while (cursor.pos > endPos)
                  index = copyToBuffer(buffer.start, data, index);
              node = new TreeBuffer(data, end - buffer.start, nodeSet);
              startPos = buffer.start - parentStart;
          }
          else { // Make it a node
              let endPos = cursor.pos - size;
              cursor.next();
              let localChildren = [], localPositions = [];
              let localInRepeat = id >= minRepeatType ? id : -1;
              let lastGroup = 0, lastEnd = end;
              while (cursor.pos > endPos) {
                  if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                      if (cursor.end <= lastEnd - maxBufferLength) {
                          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                          lastGroup = localChildren.length;
                          lastEnd = cursor.end;
                      }
                      cursor.next();
                  }
                  else if (depth > 2500 /* CutOff.Depth */) {
                      takeFlatNode(start, endPos, localChildren, localPositions);
                  }
                  else {
                      takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                  }
              }
              if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              localChildren.reverse();
              localPositions.reverse();
              if (localInRepeat > -1 && lastGroup > 0) {
                  let make = makeBalanced(type, contextAtStart);
                  node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
              }
              else {
                  node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
              }
          }
          children.push(node);
          positions.push(startPos);
      }
      function takeFlatNode(parentStart, minPos, children, positions) {
          let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
          let nodeCount = 0, stopAt = -1;
          while (cursor.pos > minPos) {
              let { id, start, end, size } = cursor;
              if (size > 4) { // Not a leaf
                  cursor.next();
              }
              else if (stopAt > -1 && start < stopAt) {
                  break;
              }
              else {
                  if (stopAt < 0)
                      stopAt = end - maxBufferLength;
                  nodes.push(id, start, end);
                  nodeCount++;
                  cursor.next();
              }
          }
          if (nodeCount) {
              let buffer = new Uint16Array(nodeCount * 4);
              let start = nodes[nodes.length - 2];
              for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                  buffer[j++] = nodes[i];
                  buffer[j++] = nodes[i + 1] - start;
                  buffer[j++] = nodes[i + 2] - start;
                  buffer[j++] = j;
              }
              children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
              positions.push(start - parentStart);
          }
      }
      function makeBalanced(type, contextHash) {
          return (children, positions, length) => {
              let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
              if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                  if (!lastI && last.type == type && last.length == length)
                      return last;
                  if (lookAheadProp = last.prop(NodeProp.lookAhead))
                      lookAhead = positions[lastI] + last.length + lookAheadProp;
              }
              return makeTree(type, children, positions, length, lookAhead, contextHash);
          };
      }
      function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
          let localChildren = [], localPositions = [];
          while (children.length > i) {
              localChildren.push(children.pop());
              localPositions.push(positions.pop() + base - from);
          }
          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
          positions.push(from - base);
      }
      function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
          if (contextHash) {
              let pair = [NodeProp.contextHash, contextHash];
              props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead > 25) {
              let pair = [NodeProp.lookAhead, lookAhead];
              props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children, positions, length, props);
      }
      function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
              let nodeSize = fork.size;
              // Pretend nested repeat nodes of the same type don't exist
              if (fork.id == inRepeat && nodeSize >= 0) {
                  // Except that we store the current state as a valid return
                  // value.
                  result.size = size;
                  result.start = start;
                  result.skip = skip;
                  skip += 4;
                  size += 4;
                  fork.next();
                  continue;
              }
              let startPos = fork.pos - nodeSize;
              if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                  break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                  if (fork.size < 0) {
                      if (fork.size == -3 /* SpecialRecord.ContextChange */)
                          localSkipped += 4;
                      else
                          break scan;
                  }
                  else if (fork.id >= minRepeatType) {
                      localSkipped += 4;
                  }
                  fork.next();
              }
              start = nodeStart;
              size += nodeSize;
              skip += localSkipped;
          }
          if (inRepeat < 0 || size == maxSize) {
              result.size = size;
              result.start = start;
              result.skip = skip;
          }
          return result.size > 4 ? result : undefined;
      }
      function copyToBuffer(bufferStart, buffer, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
              let startIndex = index;
              if (size > 4) {
                  let endPos = cursor.pos - (size - 4);
                  while (cursor.pos > endPos)
                      index = copyToBuffer(bufferStart, buffer, index);
              }
              buffer[--index] = startIndex;
              buffer[--index] = end - bufferStart;
              buffer[--index] = start - bufferStart;
              buffer[--index] = id;
          }
          else if (size == -3 /* SpecialRecord.ContextChange */) {
              contextHash = id;
          }
          else if (size == -4 /* SpecialRecord.LookAhead */) {
              lookAhead = id;
          }
          return index;
      }
      let children = [], positions = [];
      while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
      let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
      return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap;
  function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
          size = 1;
          for (let child of node.children) {
              if (child.type != balanceType || !(child instanceof Tree)) {
                  size = 1;
                  break;
              }
              size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
      }
      return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType, 
  // The direct children and their positions
  children, positions, 
  // The index range in children/positions to use
  from, to, 
  // The start position of the nodes, relative to their parent.
  start, 
  // Length of the outer node
  length, 
  // Function to build the top node of the balanced tree
  mkTop, 
  // Function to build internal nodes for the balanced tree
  mkTree) {
      let total = 0;
      for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
      let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
      let localChildren = [], localPositions = [];
      function divide(children, positions, from, to, offset) {
          for (let i = from; i < to;) {
              let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
              i++;
              for (; i < to; i++) {
                  let nextSize = nodeSize(balanceType, children[i]);
                  if (groupSize + nextSize >= maxChild)
                      break;
                  groupSize += nextSize;
              }
              if (i == groupFrom + 1) {
                  if (groupSize > maxChild) {
                      let only = children[groupFrom]; // Only trees can have a size > 1
                      divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                      continue;
                  }
                  localChildren.push(children[groupFrom]);
              }
              else {
                  let length = positions[i - 1] + children[i - 1].length - groupStart;
                  localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
              }
              localPositions.push(groupStart + offset - start);
          }
      }
      divide(children, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
  }
  /**
  Provides a way to associate values with pieces of trees. As long
  as that part of the tree is reused, the associated values can be
  retrieved from an updated tree.
  */
  class NodeWeakMap {
      constructor() {
          this.map = new WeakMap();
      }
      setBuffer(buffer, index, value) {
          let inner = this.map.get(buffer);
          if (!inner)
              this.map.set(buffer, inner = new Map);
          inner.set(index, value);
      }
      getBuffer(buffer, index) {
          let inner = this.map.get(buffer);
          return inner && inner.get(index);
      }
      /**
      Set the value for this syntax node.
      */
      set(node, value) {
          if (node instanceof BufferNode)
              this.setBuffer(node.context.buffer, node.index, value);
          else if (node instanceof TreeNode)
              this.map.set(node.tree, value);
      }
      /**
      Retrieve value for this syntax node, if it exists in the map.
      */
      get(node) {
          return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
              : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
      }
      /**
      Set the value for the node that a cursor currently points to.
      */
      cursorSet(cursor, value) {
          if (cursor.buffer)
              this.setBuffer(cursor.buffer.buffer, cursor.index, value);
          else
              this.map.set(cursor.tree, value);
      }
      /**
      Retrieve the value for the node that a cursor currently points
      to.
      */
      cursorGet(cursor) {
          return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
      }
  }

  /**
  Tree fragments are used during [incremental
  parsing](#common.Parser.startParse) to track parts of old trees
  that can be reused in a new parse. An array of fragments is used
  to track regions of an old tree whose nodes might be reused in new
  parses. Use the static
  [`applyChanges`](#common.TreeFragment^applyChanges) method to
  update fragments for document changes.
  */
  class TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(
      /**
      The start of the unchanged range pointed to by this fragment.
      This refers to an offset in the _updated_ document (as opposed
      to the original tree).
      */
      from, 
      /**
      The end of the unchanged range.
      */
      to, 
      /**
      The tree that this fragment is based on.
      */
      tree, 
      /**
      The offset between the fragment's tree and the document that
      this fragment can be used against. Add this when going from
      document to tree positions, subtract it to go from tree to
      document positions.
      */
      offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
              if (f.to > tree.length)
                  result.push(f);
          return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
              return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0;; cI++) {
              let nextC = cI < changes.length ? changes[cI] : null;
              let nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap)
                  while (nextF && nextF.from < nextPos) {
                      let cut = nextF;
                      if (pos >= cut.from || nextPos <= cut.to || off) {
                          let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                      }
                      if (cut)
                          result.push(cut);
                      if (nextF.to > nextPos)
                          break;
                      nextF = fI < fragments.length ? fragments[fI++] : null;
                  }
              if (!nextC)
                  break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
          }
          return result;
      }
  }
  /**
  A superclass that parsers should extend.
  */
  class Parser {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
          if (typeof input == "string")
              input = new StringInput(input);
          ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
          return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (;;) {
              let done = parse.advance();
              if (done)
                  return done;
          }
      }
  }
  class StringInput {
      constructor(string) {
          this.string = string;
      }
      get length() { return this.string.length; }
      chunk(from) { return this.string.slice(from); }
      get lineChunks() { return false; }
      read(from, to) { return this.string.slice(from, to); }
  }

  /**
  Create a parse wrapper that, after the inner parse completes,
  scans its tree for mixed language regions with the `nest`
  function, runs the resulting [inner parses](#common.NestedParse),
  and then [mounts](#common.NodeProp^mounted) their results onto the
  tree.
  */
  function parseMixed(nest) {
      return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
  }
  class InnerParse {
      constructor(parser, parse, overlay, target, from) {
          this.parser = parser;
          this.parse = parse;
          this.overlay = overlay;
          this.target = target;
          this.from = from;
      }
  }
  function checkRanges(ranges) {
      if (!ranges.length || ranges.some(r => r.from >= r.to))
          throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
  }
  class ActiveOverlay {
      constructor(parser, predicate, mounts, index, start, target, prev) {
          this.parser = parser;
          this.predicate = predicate;
          this.mounts = mounts;
          this.index = index;
          this.start = start;
          this.target = target;
          this.prev = prev;
          this.depth = 0;
          this.ranges = [];
      }
  }
  const stoppedInner = new NodeProp({ perNode: true });
  class MixedParse {
      constructor(base, nest, input, fragments, ranges) {
          this.nest = nest;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.inner = [];
          this.innerDone = 0;
          this.baseTree = null;
          this.stoppedAt = null;
          this.baseParse = base;
      }
      advance() {
          if (this.baseParse) {
              let done = this.baseParse.advance();
              if (!done)
                  return null;
              this.baseParse = null;
              this.baseTree = done;
              this.startInner();
              if (this.stoppedAt != null)
                  for (let inner of this.inner)
                      inner.parse.stopAt(this.stoppedAt);
          }
          if (this.innerDone == this.inner.length) {
              let result = this.baseTree;
              if (this.stoppedAt != null)
                  result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
              return result;
          }
          let inner = this.inner[this.innerDone], done = inner.parse.advance();
          if (done) {
              this.innerDone++;
              // This is a somewhat dodgy but super helpful hack where we
              // patch up nodes created by the inner parse (and thus
              // presumably not aliased anywhere else) to hold the information
              // about the inner parse.
              let props = Object.assign(Object.create(null), inner.target.props);
              props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
              inner.target.props = props;
          }
          return null;
      }
      get parsedPos() {
          if (this.baseParse)
              return 0;
          let pos = this.input.length;
          for (let i = this.innerDone; i < this.inner.length; i++) {
              if (this.inner[i].from < pos)
                  pos = Math.min(pos, this.inner[i].parse.parsedPos);
          }
          return pos;
      }
      stopAt(pos) {
          this.stoppedAt = pos;
          if (this.baseParse)
              this.baseParse.stopAt(pos);
          else
              for (let i = this.innerDone; i < this.inner.length; i++)
                  this.inner[i].parse.stopAt(pos);
      }
      startInner() {
          let fragmentCursor = new FragmentCursor$2(this.fragments);
          let overlay = null;
          let covered = null;
          let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
          scan: for (let nest, isCovered;;) {
              let enter = true, range;
              if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {
                  enter = false;
              }
              else if (fragmentCursor.hasNode(cursor)) {
                  if (overlay) {
                      let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                      if (match)
                          for (let r of match.mount.overlay) {
                              let from = r.from + match.pos, to = r.to + match.pos;
                              if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                  overlay.ranges.push({ from, to });
                          }
                  }
                  enter = false;
              }
              else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                  enter = isCovered != 2 /* Cover.Full */;
              }
              else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&
                  (cursor.from < cursor.to || !nest.overlay)) {
                  if (!cursor.tree)
                      materialize(cursor);
                  let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                  if (typeof nest.overlay == "function") {
                      overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                  }
                  else {
                      let ranges = punchRanges(this.ranges, nest.overlay ||
                          (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));
                      if (ranges.length)
                          checkRanges(ranges);
                      if (ranges.length || !nest.overlay)
                          this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)
                              : nest.parser.startParse(""), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));
                      if (!nest.overlay)
                          enter = false;
                      else if (ranges.length)
                          covered = { ranges, depth: 0, prev: covered };
                  }
              }
              else if (overlay && (range = overlay.predicate(cursor))) {
                  if (range === true)
                      range = new Range(cursor.from, cursor.to);
                  if (range.from < range.to) {
                      let last = overlay.ranges.length - 1;
                      if (last >= 0 && overlay.ranges[last].to == range.from)
                          overlay.ranges[last] = { from: overlay.ranges[last].from, to: range.to };
                      else
                          overlay.ranges.push(range);
                  }
              }
              if (enter && cursor.firstChild()) {
                  if (overlay)
                      overlay.depth++;
                  if (covered)
                      covered.depth++;
              }
              else {
                  for (;;) {
                      if (cursor.nextSibling())
                          break;
                      if (!cursor.parent())
                          break scan;
                      if (overlay && !--overlay.depth) {
                          let ranges = punchRanges(this.ranges, overlay.ranges);
                          if (ranges.length) {
                              checkRanges(ranges);
                              this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));
                          }
                          overlay = overlay.prev;
                      }
                      if (covered && !--covered.depth)
                          covered = covered.prev;
                  }
              }
          }
      }
  }
  function checkCover(covered, from, to) {
      for (let range of covered) {
          if (range.from >= to)
              break;
          if (range.to > from)
              return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
      }
      return 0 /* Cover.None */;
  }
  // Take a piece of buffer and convert it into a stand-alone
  // TreeBuffer.
  function sliceBuf(buf, startI, endI, nodes, positions, off) {
      if (startI < endI) {
          let from = buf.buffer[startI + 1];
          nodes.push(buf.slice(startI, endI, from));
          positions.push(from - off);
      }
  }
  // This function takes a node that's in a buffer, and converts it, and
  // its parent buffer nodes, into a Tree. This is again acting on the
  // assumption that the trees and buffers have been constructed by the
  // parse that was ran via the mix parser, and thus aren't shared with
  // any other code, making violations of the immutability safe.
  function materialize(cursor) {
      let { node } = cursor, stack = [];
      let buffer = node.context.buffer;
      // Scan up to the nearest tree
      do {
          stack.push(cursor.index);
          cursor.parent();
      } while (!cursor.tree);
      // Find the index of the buffer in that tree
      let base = cursor.tree, i = base.children.indexOf(buffer);
      let buf = base.children[i], b = buf.buffer, newStack = [i];
      // Split a level in the buffer, putting the nodes before and after
      // the child that contains `node` into new buffers.
      function split(startI, endI, type, innerOffset, length, stackPos) {
          let targetI = stack[stackPos];
          let children = [], positions = [];
          sliceBuf(buf, startI, targetI, children, positions, innerOffset);
          let from = b[targetI + 1], to = b[targetI + 2];
          newStack.push(children.length);
          let child = stackPos
              ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)
              : node.toTree();
          children.push(child);
          positions.push(from - innerOffset);
          sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);
          return new Tree(type, children, positions, length);
      }
      base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);
      // Move the cursor back to the target node
      for (let index of newStack) {
          let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];
          cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));
      }
  }
  class StructureCursor {
      constructor(root, offset) {
          this.offset = offset;
          this.done = false;
          this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
      }
      // Move to the first node (in pre-order) that starts at or after `pos`.
      moveTo(pos) {
          let { cursor } = this, p = pos - this.offset;
          while (!this.done && cursor.from < p) {
              if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
              else if (!cursor.next(false))
                  this.done = true;
          }
      }
      hasNode(cursor) {
          this.moveTo(cursor.from);
          if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
              for (let tree = this.cursor.tree;;) {
                  if (tree == cursor.tree)
                      return true;
                  if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                      tree = tree.children[0];
                  else
                      break;
              }
          }
          return false;
      }
  }
  let FragmentCursor$2 = class FragmentCursor {
      constructor(fragments) {
          var _a;
          this.fragments = fragments;
          this.curTo = 0;
          this.fragI = 0;
          if (fragments.length) {
              let first = this.curFrag = fragments[0];
              this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
              this.inner = new StructureCursor(first.tree, -first.offset);
          }
          else {
              this.curFrag = this.inner = null;
          }
      }
      hasNode(node) {
          while (this.curFrag && node.from >= this.curTo)
              this.nextFrag();
          return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
      }
      nextFrag() {
          var _a;
          this.fragI++;
          if (this.fragI == this.fragments.length) {
              this.curFrag = this.inner = null;
          }
          else {
              let frag = this.curFrag = this.fragments[this.fragI];
              this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
              this.inner = new StructureCursor(frag.tree, -frag.offset);
          }
      }
      findMounts(pos, parser) {
          var _a;
          let result = [];
          if (this.inner) {
              this.inner.cursor.moveTo(pos, 1);
              for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                  let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                  if (mount && mount.parser == parser) {
                      for (let i = this.fragI; i < this.fragments.length; i++) {
                          let frag = this.fragments[i];
                          if (frag.from >= pos.to)
                              break;
                          if (frag.tree == this.curFrag.tree)
                              result.push({
                                  frag,
                                  pos: pos.from - frag.offset,
                                  mount
                              });
                      }
                  }
              }
          }
          return result;
      }
  };
  function punchRanges(outer, ranges) {
      let copy = null, current = ranges;
      for (let i = 1, j = 0; i < outer.length; i++) {
          let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
          for (; j < current.length; j++) {
              let r = current[j];
              if (r.from >= gapTo)
                  break;
              if (r.to <= gapFrom)
                  continue;
              if (!copy)
                  current = copy = ranges.slice();
              if (r.from < gapFrom) {
                  copy[j] = new Range(r.from, gapFrom);
                  if (r.to > gapTo)
                      copy.splice(j + 1, 0, new Range(gapTo, r.to));
              }
              else if (r.to > gapTo) {
                  copy[j--] = new Range(gapTo, r.to);
              }
              else {
                  copy.splice(j--, 1);
              }
          }
      }
      return current;
  }
  function findCoverChanges(a, b, from, to) {
      let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
      let result = [];
      for (;;) {
          let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
          let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
          if (inA != inB) {
              let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
              if (start < end)
                  result.push(new Range(start, end));
          }
          pos = Math.min(nextA, nextB);
          if (pos == 1e9)
              break;
          if (nextA == pos) {
              if (!inA)
                  inA = true;
              else {
                  inA = false;
                  iA++;
              }
          }
          if (nextB == pos) {
              if (!inB)
                  inB = true;
              else {
                  inB = false;
                  iB++;
              }
          }
      }
      return result;
  }
  // Given a number of fragments for the outer tree, and a set of ranges
  // to parse, find fragments for inner trees mounted around those
  // ranges, if any.
  function enterFragments(mounts, ranges) {
      let result = [];
      for (let { pos, mount, frag } of mounts) {
          let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
          let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
          if (mount.overlay) {
              let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
              let changes = findCoverChanges(ranges, overlay, from, to);
              for (let i = 0, pos = from;; i++) {
                  let last = i == changes.length, end = last ? to : changes[i].from;
                  if (end > pos)
                      result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));
                  if (last)
                      break;
                  pos = changes[i].to;
              }
          }
          else {
              result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
          }
      }
      return result;
  }

  let nextTagID = 0;
  /**
  Highlighting tags are markers that denote a highlighting category.
  They are [associated](#highlight.styleTags) with parts of a syntax
  tree by a language mode, and then mapped to an actual CSS style by
  a [highlighter](#highlight.Highlighter).

  Because syntax tree node types and highlight styles have to be
  able to talk the same language, CodeMirror uses a mostly _closed_
  [vocabulary](#highlight.tags) of syntax tags (as opposed to
  traditional open string-based systems, which make it hard for
  highlighting themes to cover all the tokens produced by the
  various languages).

  It _is_ possible to [define](#highlight.Tag^define) your own
  highlighting tags for system-internal use (where you control both
  the language package and the highlighter), but such tags will not
  be picked up by regular highlighters (though you can derive them
  from standard tags to allow highlighters to fall back to those).
  */
  let Tag$1 = class Tag {
      /**
      @internal
      */
      constructor(
      /**
      The optional name of the base tag @internal
      */
      name, 
      /**
      The set of this tag and all its parent tags, starting with
      this one itself and sorted in order of decreasing specificity.
      */
      set, 
      /**
      The base unmodified tag that this one is based on, if it's
      modified @internal
      */
      base, 
      /**
      The modifiers applied to this.base @internal
      */
      modified) {
          this.name = name;
          this.set = set;
          this.base = base;
          this.modified = modified;
          /**
          @internal
          */
          this.id = nextTagID++;
      }
      toString() {
          let { name } = this;
          for (let mod of this.modified)
              if (mod.name)
                  name = `${mod.name}(${name})`;
          return name;
      }
      static define(nameOrParent, parent) {
          let name = typeof nameOrParent == "string" ? nameOrParent : "?";
          if (nameOrParent instanceof Tag)
              parent = nameOrParent;
          if (parent === null || parent === void 0 ? void 0 : parent.base)
              throw new Error("Can not derive from a modified tag");
          let tag = new Tag(name, [], null, []);
          tag.set.push(tag);
          if (parent)
              for (let t of parent.set)
                  tag.set.push(t);
          return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name) {
          let mod = new Modifier(name);
          return (tag) => {
              if (tag.modified.indexOf(mod) > -1)
                  return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
      }
  };
  let nextModifierID = 0;
  class Modifier {
      constructor(name) {
          this.name = name;
          this.instances = [];
          this.id = nextModifierID++;
      }
      static get(base, mods) {
          if (!mods.length)
              return base;
          let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
          if (exists)
              return exists;
          let set = [], tag = new Tag$1(base.name, set, base, mods);
          for (let m of mods)
              m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base.set)
              if (!parent.modified.length)
                  for (let config of configs)
                      set.push(Modifier.get(parent, config));
          return tag;
      }
  }
  function sameArray(a, b) {
      return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
      let sets = [[]];
      for (let i = 0; i < array.length; i++) {
          for (let j = 0, e = sets.length; j < e; j++) {
              sets.push(sets[j].concat(array[i]));
          }
      }
      return sets.sort((a, b) => b.length - a.length);
  }
  /**
  This function is used to add a set of tags to a language syntax
  via [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.LRParser.configure).

  The argument object maps node selectors to [highlighting
  tags](#highlight.Tag) or arrays of tags.

  Node selectors may hold one or more (space-separated) node paths.
  Such a path can be a [node name](#common.NodeType.name), or
  multiple node names (or `*` wildcards) separated by slash
  characters, as in `"Block/Declaration/VariableName"`. Such a path
  matches the final node but only if its direct parent nodes are the
  other nodes mentioned. A `*` in such a path matches any parent,
  but only a single level—wildcards that match multiple parents
  aren't supported, both for efficiency reasons and because Lezer
  trees make it rather hard to reason about what they would match.)

  A path can be ended with `/...` to indicate that the tag assigned
  to the node should also apply to all child nodes, even if they
  match their own style (by default, only the innermost style is
  used).

  When a path ends in `!`, as in `Attribute!`, no further matching
  happens for the node's child nodes, and the entire node gets the
  given style.

  In this notation, node names that contain `/`, `!`, `*`, or `...`
  must be quoted as JSON strings.

  For example:

  ```javascript
  parser.withProps(
    styleTags({
      // Style Number and BigNumber nodes
      "Number BigNumber": tags.number,
      // Style Escape nodes whose parent is String
      "String/Escape": tags.escape,
      // Style anything inside Attributes nodes
      "Attributes!": tags.meta,
      // Add a style to all content inside Italic nodes
      "Italic/...": tags.emphasis,
      // Style InvalidString nodes as both `string` and `invalid`
      "InvalidString": [tags.string, tags.invalid],
      // Style the node named "/" as punctuation
      '"/"': tags.punctuation
    })
  )
  ```
  */
  function styleTags(spec) {
      let byName = Object.create(null);
      for (let prop in spec) {
          let tags = spec[prop];
          if (!Array.isArray(tags))
              tags = [tags];
          for (let part of prop.split(" "))
              if (part) {
                  let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                  for (let pos = 0;;) {
                      if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                          mode = 1 /* Mode.Inherit */;
                          break;
                      }
                      let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                      if (!m)
                          throw new RangeError("Invalid path: " + part);
                      pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                      pos += m[0].length;
                      if (pos == part.length)
                          break;
                      let next = part[pos++];
                      if (pos == part.length && next == "!") {
                          mode = 0 /* Mode.Opaque */;
                          break;
                      }
                      if (next != "/")
                          throw new RangeError("Invalid path: " + part);
                      rest = part.slice(pos);
                  }
                  let last = pieces.length - 1, inner = pieces[last];
                  if (!inner)
                      throw new RangeError("Invalid path: " + part);
                  let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                  byName[inner] = rule.sort(byName[inner]);
              }
      }
      return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  class Rule {
      constructor(tags, mode, context, next) {
          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
      }
      get opaque() { return this.mode == 0 /* Mode.Opaque */; }
      get inherit() { return this.mode == 1 /* Mode.Inherit */; }
      sort(other) {
          if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
          }
          other.next = this.sort(other.next);
          return other;
      }
      get depth() { return this.context ? this.context.length : 0; }
  }
  Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
  /**
  Define a [highlighter](#highlight.Highlighter) from an array of
  tag/class pairs. Classes associated with more specific tags will
  take precedence.
  */
  function tagHighlighter(tags, options) {
      let map = Object.create(null);
      for (let style of tags) {
          if (!Array.isArray(style.tag))
              map[style.tag.id] = style.class;
          else
              for (let tag of style.tag)
                  map[tag.id] = style.class;
      }
      let { scope, all = null } = options || {};
      return {
          style: (tags) => {
              let cls = all;
              for (let tag of tags) {
                  for (let sub of tag.set) {
                      let tagClass = map[sub.id];
                      if (tagClass) {
                          cls = cls ? cls + " " + tagClass : tagClass;
                          break;
                      }
                  }
              }
              return cls;
          },
          scope
      };
  }
  function highlightTags(highlighters, tags) {
      let result = null;
      for (let highlighter of highlighters) {
          let value = highlighter.style(tags);
          if (value)
              result = result ? result + " " + value : value;
      }
      return result;
  }
  /**
  Highlight the given [tree](#common.Tree) with the given
  [highlighter](#highlight.Highlighter). Often, the higher-level
  [`highlightCode`](#highlight.highlightCode) function is easier to
  use.
  */
  function highlightTree(tree, highlighter, 
  /**
  Assign styling to a region of the text. Will be called, in order
  of position, for any ranges where more than zero classes apply.
  `classes` is a space separated string of CSS classes.
  */
  putStyle, 
  /**
  The start of the range to highlight.
  */
  from = 0, 
  /**
  The end of the range.
  */
  to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
  }
  class HighlightBuilder {
      constructor(at, highlighters, span) {
          this.at = at;
          this.highlighters = highlighters;
          this.span = span;
          this.class = "";
      }
      startSpan(at, cls) {
          if (cls != this.class) {
              this.flush(at);
              if (at > this.at)
                  this.at = at;
              this.class = cls;
          }
      }
      flush(to) {
          if (to > this.at && this.class)
              this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
              return;
          if (type.isTop)
              highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
          let cls = inheritedClass;
          let rule = getStyleTags(cursor) || Rule.empty;
          let tagCls = highlightTags(highlighters, rule.tags);
          if (tagCls) {
              if (cls)
                  cls += " ";
              cls += tagCls;
              if (rule.mode == 1 /* Mode.Inherit */)
                  inheritedClass += (inheritedClass ? " " : "") + tagCls;
          }
          this.startSpan(Math.max(from, start), cls);
          if (rule.opaque)
              return;
          let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
          if (mounted && mounted.overlay) {
              let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
              let hasChild = cursor.firstChild();
              for (let i = 0, pos = start;; i++) {
                  let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                  let nextPos = next ? next.from + start : end;
                  let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                  if (rangeFrom < rangeTo && hasChild) {
                      while (cursor.from < rangeTo) {
                          this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                          this.startSpan(Math.min(rangeTo, cursor.to), cls);
                          if (cursor.to >= nextPos || !cursor.nextSibling())
                              break;
                      }
                  }
                  if (!next || nextPos > to)
                      break;
                  pos = next.to + start;
                  if (pos > from) {
                      this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                      this.startSpan(Math.min(to, pos), cls);
                  }
              }
              if (hasChild)
                  cursor.parent();
          }
          else if (cursor.firstChild()) {
              if (mounted)
                  inheritedClass = "";
              do {
                  if (cursor.to <= from)
                      continue;
                  if (cursor.from >= to)
                      break;
                  this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                  this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());
              cursor.parent();
          }
      }
  }
  /**
  Match a syntax node's [highlight rules](#highlight.styleTags). If
  there's a match, return its set of tags, and whether it is
  opaque (uses a `!`) or applies to all child nodes (`/...`).
  */
  function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
          rule = rule.next;
      return rule || null;
  }
  const t = Tag$1.define;
  const comment = t(), name$1 = t(), typeName = t(name$1), propertyName = t(name$1), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
  /**
  The default set of highlighting [tags](#highlight.Tag).

  This collection is heavily biased towards programming languages,
  and necessarily incomplete. A full ontology of syntactic
  constructs would fill a stack of books, and be impractical to
  write themes for. So try to make do with this set. If all else
  fails, [open an
  issue](https://github.com/codemirror/codemirror.next) to propose a
  new tag, or [define](#highlight.Tag^define) a local custom tag for
  your use case.

  Note that it is not obligatory to always attach the most specific
  tag possible to an element—if your grammar can't easily
  distinguish a certain type of element (such as a local variable),
  it is okay to style it as its more general variant (a variable).

  For tags that extend some parent tag, the documentation links to
  the parent.
  */
  const tags$1 = {
      /**
      A comment.
      */
      comment,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment),
      /**
      Any kind of identifier.
      */
      name: name$1,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name$1),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName: typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName: propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name$1),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name$1),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name$1),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name$1),
      /**
      A literal value.
      */
      literal,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag$1.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag$1.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag$1.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag$1.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag$1.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag$1.defineModifier("special")
  };
  for (let name in tags$1) {
      let val = tags$1[name];
      if (val instanceof Tag$1)
          val.name = name;
  }
  /**
  This is a highlighter that adds stable, predictable classes to
  tokens, for styling with external CSS.

  The following tags are mapped to their name prefixed with `"tok-"`
  (for example `"tok-comment"`):

  * [`link`](#highlight.tags.link)
  * [`heading`](#highlight.tags.heading)
  * [`emphasis`](#highlight.tags.emphasis)
  * [`strong`](#highlight.tags.strong)
  * [`keyword`](#highlight.tags.keyword)
  * [`atom`](#highlight.tags.atom)
  * [`bool`](#highlight.tags.bool)
  * [`url`](#highlight.tags.url)
  * [`labelName`](#highlight.tags.labelName)
  * [`inserted`](#highlight.tags.inserted)
  * [`deleted`](#highlight.tags.deleted)
  * [`literal`](#highlight.tags.literal)
  * [`string`](#highlight.tags.string)
  * [`number`](#highlight.tags.number)
  * [`variableName`](#highlight.tags.variableName)
  * [`typeName`](#highlight.tags.typeName)
  * [`namespace`](#highlight.tags.namespace)
  * [`className`](#highlight.tags.className)
  * [`macroName`](#highlight.tags.macroName)
  * [`propertyName`](#highlight.tags.propertyName)
  * [`operator`](#highlight.tags.operator)
  * [`comment`](#highlight.tags.comment)
  * [`meta`](#highlight.tags.meta)
  * [`punctuation`](#highlight.tags.punctuation)
  * [`invalid`](#highlight.tags.invalid)

  In addition, these mappings are provided:

  * [`regexp`](#highlight.tags.regexp),
    [`escape`](#highlight.tags.escape), and
    [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    are mapped to `"tok-string2"`
  * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName2"`
  * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-local"`
  * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-definition"`
  * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    to `"tok-propertyName tok-definition"`
  */
  tagHighlighter([
      { tag: tags$1.link, class: "tok-link" },
      { tag: tags$1.heading, class: "tok-heading" },
      { tag: tags$1.emphasis, class: "tok-emphasis" },
      { tag: tags$1.strong, class: "tok-strong" },
      { tag: tags$1.keyword, class: "tok-keyword" },
      { tag: tags$1.atom, class: "tok-atom" },
      { tag: tags$1.bool, class: "tok-bool" },
      { tag: tags$1.url, class: "tok-url" },
      { tag: tags$1.labelName, class: "tok-labelName" },
      { tag: tags$1.inserted, class: "tok-inserted" },
      { tag: tags$1.deleted, class: "tok-deleted" },
      { tag: tags$1.literal, class: "tok-literal" },
      { tag: tags$1.string, class: "tok-string" },
      { tag: tags$1.number, class: "tok-number" },
      { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
      { tag: tags$1.variableName, class: "tok-variableName" },
      { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
      { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
      { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
      { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags$1.typeName, class: "tok-typeName" },
      { tag: tags$1.namespace, class: "tok-namespace" },
      { tag: tags$1.className, class: "tok-className" },
      { tag: tags$1.macroName, class: "tok-macroName" },
      { tag: tags$1.propertyName, class: "tok-propertyName" },
      { tag: tags$1.operator, class: "tok-operator" },
      { tag: tags$1.comment, class: "tok-comment" },
      { tag: tags$1.meta, class: "tok-meta" },
      { tag: tags$1.invalid, class: "tok-invalid" },
      { tag: tags$1.punctuation, class: "tok-punctuation" }
  ]);

  function _callSuper$4(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$5() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$5() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _createForOfIteratorHelper$9(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$9(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$9(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$9(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$9(r, a) : void 0; } }
  function _arrayLikeToArray$9(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  var languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? function (values) {
        return values.concat(baseData);
      } : undefined
    });
  }
  /**
  Syntax node prop used to register sublanguages. Should be added to
  the top level node type for the language.
  */
  var sublanguageProp = /*@__PURE__*/new NodeProp();
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  var Language = /*#__PURE__*/function () {
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    function Language(
    /**
    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
    used for this language.
    */
    data, parser) {
      var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      _classCallCheck(this, Language);
      this.data = data;
      this.name = name;
      // Kludge to define EditorState.tree as a debugging helper,
      // without the EditorState package actually knowing about
      // languages and lezer trees.
      if (!EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(EditorState.prototype, "tree", {
        get: function get() {
          return syntaxTree(this);
        }
      });
      this.parser = parser;
      this.extension = [language.of(this), EditorState.languageData.of(function (state, pos, side) {
        var top = topNodeAt(state, pos, side),
          data = top.type.prop(languageDataProp);
        if (!data) return [];
        var base = state.facet(data),
          sub = top.type.prop(sublanguageProp);
        if (sub) {
          var innerNode = top.resolve(pos - top.from, side);
          var _iterator = _createForOfIteratorHelper$9(sub),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var sublang = _step.value;
              if (sublang.test(innerNode, state)) {
                var _data = state.facet(sublang.facet);
                return sublang.type == "replace" ? _data : _data.concat(base);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        return base;
      })].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    return _createClass(Language, [{
      key: "isActiveAt",
      value: function isActiveAt(state, pos) {
        var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
    }, {
      key: "findRegions",
      value: function findRegions(state) {
        var _this = this;
        var lang = state.facet(language);
        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
          from: 0,
          to: state.doc.length
        }];
        if (!lang || !lang.allowsNesting) return [];
        var result = [];
        var _explore = function explore(tree, from) {
          if (tree.prop(languageDataProp) == _this.data) {
            result.push({
              from: from,
              to: from + tree.length
            });
            return;
          }
          var mount = tree.prop(NodeProp.mounted);
          if (mount) {
            if (mount.tree.prop(languageDataProp) == _this.data) {
              if (mount.overlay) {
                var _iterator2 = _createForOfIteratorHelper$9(mount.overlay),
                  _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var r = _step2.value;
                    result.push({
                      from: r.from + from,
                      to: r.to + from
                    });
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
              } else result.push({
                from: from,
                to: from + tree.length
              });
              return;
            } else if (mount.overlay) {
              var size = result.length;
              _explore(mount.tree, mount.overlay[0].from + from);
              if (result.length > size) return;
            }
          }
          for (var i = 0; i < tree.children.length; i++) {
            var ch = tree.children[i];
            if (ch instanceof Tree) _explore(ch, tree.positions[i] + from);
          }
        };
        _explore(syntaxTree(state), 0);
        return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
    }, {
      key: "allowsNesting",
      get: function get() {
        return true;
      }
    }]);
  }();
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function topNodeAt(state, pos, side) {
    var topLang = state.facet(language),
      tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (var node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;
    }
    return tree;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  var LRLanguage = /*#__PURE__*/function (_Language) {
    function LRLanguage(data, parser, name) {
      var _this2;
      _classCallCheck(this, LRLanguage);
      _this2 = _callSuper$4(this, LRLanguage, [data, parser, [], name]);
      _this2.parser = parser;
      return _this2;
    }
    /**
    Define a language from a parser.
    */
    _inherits(LRLanguage, _Language);
    return _createClass(LRLanguage, [{
      key: "configure",
      value:
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      function configure(options, name) {
        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
    }, {
      key: "allowsNesting",
      get: function get() {
        return this.parser.hasWrappers();
      }
    }], [{
      key: "define",
      value: function define(spec) {
        var data = defineLanguageFacet(spec.languageData);
        return new LRLanguage(data, spec.parser.configure({
          props: [languageDataProp.add(function (type) {
            return type.isTop ? data : undefined;
          })]
        }), spec.name);
      }
    }]);
  }(Language);
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
    var field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  /**
  Lezer-style
  [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
  object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
  */
  var DocInput = /*#__PURE__*/function () {
    /**
    Create an input object for the given document.
    */
    function DocInput(doc) {
      _classCallCheck(this, DocInput);
      this.doc = doc;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc.iter();
    }
    return _createClass(DocInput, [{
      key: "length",
      get: function get() {
        return this.doc.length;
      }
    }, {
      key: "syncTo",
      value: function syncTo(pos) {
        this.string = this.cursor.next(pos - this.cursorPos).value;
        this.cursorPos = pos + this.string.length;
        return this.cursorPos - this.string.length;
      }
    }, {
      key: "chunk",
      value: function chunk(pos) {
        this.syncTo(pos);
        return this.string;
      }
    }, {
      key: "lineChunks",
      get: function get() {
        return true;
      }
    }, {
      key: "read",
      value: function read(from, to) {
        var stringStart = this.cursorPos - this.string.length;
        if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
      }
    }]);
  }();
  var currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  var ParseContext = /*#__PURE__*/function () {
    function ParseContext(parser,
    /**
    The current editor state.
    */
    state) {
      var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var
      /**
      @internal
      */
      tree = arguments.length > 3 ? arguments[3] : undefined;
      var
      /**
      @internal
      */
      treeLen = arguments.length > 4 ? arguments[4] : undefined;
      var
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport = arguments.length > 5 ? arguments[5] : undefined;
      var
      /**
      @internal
      */
      skipped = arguments.length > 6 ? arguments[6] : undefined;
      var
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn = arguments.length > 7 ? arguments[7] : undefined;
      _classCallCheck(this, ParseContext);
      this.parser = parser;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      /**
      @internal
      */
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    return _createClass(ParseContext, [{
      key: "startParse",
      value: function startParse() {
        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
    }, {
      key: "work",
      value: function work(until, upto) {
        var _this3 = this;
        if (upto != null && upto >= this.state.doc.length) upto = undefined;
        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
          this.takeTree();
          return true;
        }
        return this.withContext(function () {
          var _a;
          if (typeof until == "number") {
            var endTime = Date.now() + until;
            until = function until() {
              return Date.now() > endTime;
            };
          }
          if (!_this3.parse) _this3.parse = _this3.startParse();
          if (upto != null && (_this3.parse.stoppedAt == null || _this3.parse.stoppedAt > upto) && upto < _this3.state.doc.length) _this3.parse.stopAt(upto);
          for (;;) {
            var done = _this3.parse.advance();
            if (done) {
              _this3.fragments = _this3.withoutTempSkipped(TreeFragment.addTree(done, _this3.fragments, _this3.parse.stoppedAt != null));
              _this3.treeLen = (_a = _this3.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this3.state.doc.length;
              _this3.tree = done;
              _this3.parse = null;
              if (_this3.treeLen < (upto !== null && upto !== void 0 ? upto : _this3.state.doc.length)) _this3.parse = _this3.startParse();else return true;
            }
            if (until()) return false;
          }
        });
      }
      /**
      @internal
      */
    }, {
      key: "takeTree",
      value: function takeTree() {
        var _this4 = this;
        var pos, tree;
        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
          if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
          this.withContext(function () {
            while (!(tree = _this4.parse.advance())) {}
          });
          this.treeLen = pos;
          this.tree = tree;
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
          this.parse = null;
        }
      }
    }, {
      key: "withContext",
      value: function withContext(f) {
        var prev = currentContext;
        currentContext = this;
        try {
          return f();
        } finally {
          currentContext = prev;
        }
      }
    }, {
      key: "withoutTempSkipped",
      value: function withoutTempSkipped(fragments) {
        for (var r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);
        return fragments;
      }
      /**
      @internal
      */
    }, {
      key: "changes",
      value: function changes(_changes, newState) {
        var fragments = this.fragments,
          tree = this.tree,
          treeLen = this.treeLen,
          viewport = this.viewport,
          skipped = this.skipped;
        this.takeTree();
        if (!_changes.empty) {
          var ranges = [];
          _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
            return ranges.push({
              fromA: fromA,
              toA: toA,
              fromB: fromB,
              toB: toB
            });
          });
          fragments = TreeFragment.applyChanges(fragments, ranges);
          tree = Tree.empty;
          treeLen = 0;
          viewport = {
            from: _changes.mapPos(viewport.from, -1),
            to: _changes.mapPos(viewport.to, 1)
          };
          if (this.skipped.length) {
            skipped = [];
            var _iterator3 = _createForOfIteratorHelper$9(this.skipped),
              _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var r = _step3.value;
                var from = _changes.mapPos(r.from, 1),
                  to = _changes.mapPos(r.to, -1);
                if (from < to) skipped.push({
                  from: from,
                  to: to
                });
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }
        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
    }, {
      key: "updateViewport",
      value: function updateViewport(viewport) {
        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
        this.viewport = viewport;
        var startLen = this.skipped.length;
        for (var i = 0; i < this.skipped.length; i++) {
          var _this$skipped$i = this.skipped[i],
            from = _this$skipped$i.from,
            to = _this$skipped$i.to;
          if (from < viewport.to && to > viewport.from) {
            this.fragments = cutFragments(this.fragments, from, to);
            this.skipped.splice(i--, 1);
          }
        }
        if (this.skipped.length >= startLen) return false;
        this.reset();
        return true;
      }
      /**
      @internal
      */
    }, {
      key: "reset",
      value: function reset() {
        if (this.parse) {
          this.takeTree();
          this.parse = null;
        }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
    }, {
      key: "skipUntilInView",
      value: function skipUntilInView(from, to) {
        this.skipped.push({
          from: from,
          to: to
        });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
    }, {
      key: "isDone",
      value:
      /**
      @internal
      */
      function isDone(upto) {
        upto = Math.min(upto, this.state.doc.length);
        var frags = this.fragments;
        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
    }], [{
      key: "create",
      value: function create(parser, state, viewport) {
        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
    }, {
      key: "getSkippingParser",
      value: function getSkippingParser(until) {
        return new (/*#__PURE__*/function (_Parser) {
          function _class() {
            _classCallCheck(this, _class);
            return _callSuper$4(this, _class, arguments);
          }
          _inherits(_class, _Parser);
          return _createClass(_class, [{
            key: "createParse",
            value: function createParse(input, fragments, ranges) {
              var from = ranges[0].from,
                to = ranges[ranges.length - 1].to;
              var parser = {
                parsedPos: from,
                advance: function advance() {
                  var cx = currentContext;
                  if (cx) {
                    var _iterator4 = _createForOfIteratorHelper$9(ranges),
                      _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                        var r = _step4.value;
                        cx.tempSkipped.push(r);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                  }
                  this.parsedPos = to;
                  return new Tree(NodeType.none, [], [], to - from);
                },
                stoppedAt: null,
                stopAt: function stopAt() {}
              };
              return parser;
            }
          }]);
        }(Parser))();
      }
    }, {
      key: "get",
      value: function get() {
        return currentContext;
      }
    }]);
  }();
  function cutFragments(fragments, from, to) {
    return TreeFragment.applyChanges(fragments, [{
      fromA: from,
      toA: to,
      fromB: from,
      toB: to
    }]);
  }
  var LanguageState = /*#__PURE__*/function () {
    function LanguageState(
    // A mutable parse state that is used to preserve work done during
    // the lifetime of a state when moving to the next state.
    context) {
      _classCallCheck(this, LanguageState);
      this.context = context;
      this.tree = context.tree;
    }
    return _createClass(LanguageState, [{
      key: "apply",
      value: function apply(tr) {
        if (!tr.docChanged && this.tree == this.context.tree) return this;
        var newCx = this.context.changes(tr.changes, tr.state);
        // If the previous parse wasn't done, go forward only up to its
        // end position or the end of the viewport, to avoid slowing down
        // state updates with parse work beyond the viewport.
        var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
        if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();
        return new LanguageState(newCx);
      }
    }], [{
      key: "init",
      value: function init(state) {
        var vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
        var parseState = ParseContext.create(state.facet(language).parser, state, {
          from: 0,
          to: vpTo
        });
        if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();
        return new LanguageState(parseState);
      }
    }]);
  }();
  Language.state = /*@__PURE__*/StateField.define({
    create: LanguageState.init,
    update: function update(value, tr) {
      var _iterator5 = _createForOfIteratorHelper$9(tr.effects),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var e = _step5.value;
          if (e.is(Language.setState)) return e.value;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  var requestIdle = function requestIdle(callback) {
    var timeout = setTimeout(function () {
      return callback();
    }, 500 /* Work.MaxPause */);
    return function () {
      return clearTimeout(timeout);
    };
  };
  if (typeof requestIdleCallback != "undefined") requestIdle = function requestIdle(callback) {
    var idle = -1,
      timeout = setTimeout(function () {
        idle = requestIdleCallback(callback, {
          timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */
        });
      }, 100 /* Work.MinPause */);
    return function () {
      return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
    };
  };
  var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {
    return navigator.scheduling.isInputPending();
  } : null;
  var parseWorker = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function ParseWorker(view) {
      _classCallCheck(this, ParseWorker);
      this.view = view;
      this.working = null;
      this.workScheduled = 0;
      // End of the current time chunk
      this.chunkEnd = -1;
      // Milliseconds of budget left for this chunk
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    return _createClass(ParseWorker, [{
      key: "update",
      value: function update(_update) {
        var cx = this.view.state.field(Language.state).context;
        if (cx.updateViewport(_update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();
        if (_update.docChanged || _update.selectionSet) {
          if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;
          this.scheduleWork();
        }
        this.checkAsyncSchedule(cx);
      }
    }, {
      key: "scheduleWork",
      value: function scheduleWork() {
        if (this.working) return;
        var state = this.view.state,
          field = state.field(Language.state);
        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
      }
    }, {
      key: "work",
      value: function work(deadline) {
        this.working = null;
        var now = Date.now();
        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
          // Start a new chunk
          this.chunkEnd = now + 30000 /* Work.ChunkTime */;
          this.chunkBudget = 3000 /* Work.ChunkBudget */;
        }
        if (this.chunkBudget <= 0) return; // No more budget
        var _this$view = this.view,
          state = _this$view.state,
          vpTo = _this$view.viewport.to,
          field = state.field(Language.state);
        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;
        var endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
        var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
        var done = field.context.work(function () {
          return isInputPending && isInputPending() || Date.now() > endTime;
        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
        this.chunkBudget -= Date.now() - now;
        if (done || this.chunkBudget <= 0) {
          field.context.takeTree();
          this.view.dispatch({
            effects: Language.setState.of(new LanguageState(field.context))
          });
        }
        if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
        this.checkAsyncSchedule(field.context);
      }
    }, {
      key: "checkAsyncSchedule",
      value: function checkAsyncSchedule(cx) {
        var _this5 = this;
        if (cx.scheduleOn) {
          this.workScheduled++;
          cx.scheduleOn.then(function () {
            return _this5.scheduleWork();
          })["catch"](function (err) {
            return logException(_this5.view.state, err);
          }).then(function () {
            return _this5.workScheduled--;
          });
          cx.scheduleOn = null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.working) this.working();
      }
    }, {
      key: "isWorking",
      value: function isWorking() {
        return !!(this.working || this.workScheduled > 0);
      }
    }]);
  }(), {
    eventHandlers: {
      focus: function focus() {
        this.scheduleWork();
      }
    }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  var language = /*@__PURE__*/Facet.define({
    combine: function combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: function enables(language) {
      return [Language.state, parseWorker, EditorView.contentAttributes.compute([language], function (state) {
        var lang = state.facet(language);
        return lang && lang.name ? {
          "data-language": lang.name
        } : {};
      })];
    }
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  var LanguageSupport = /*#__PURE__*/_createClass(
  /**
  Create a language support object.
  */
  function LanguageSupport(
  /**
  The language object.
  */
  language) {
    var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _classCallCheck(this, LanguageSupport);
    this.language = language;
    this.support = support;
    this.extension = [language, support];
  });
  /**
  Language descriptions are used to store metadata about languages
  and to dynamically load them. Their main role is finding the
  appropriate language for a filename or dynamically loading nested
  parsers.
  */
  var LanguageDescription = /*#__PURE__*/function () {
    function LanguageDescription(
    /**
    The name of this language.
    */
    name,
    /**
    Alternative names for the mode (lowercased, includes `this.name`).
    */
    alias,
    /**
    File extensions associated with this language.
    */
    extensions,
    /**
    Optional filename pattern that should be associated with this
    language.
    */
    filename, loadFunc) {
      var support = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
      _classCallCheck(this, LanguageDescription);
      this.name = name;
      this.alias = alias;
      this.extensions = extensions;
      this.filename = filename;
      this.loadFunc = loadFunc;
      this.support = support;
      this.loading = null;
    }
    /**
    Start loading the the language. Will return a promise that
    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
    object when the language successfully loads.
    */
    return _createClass(LanguageDescription, [{
      key: "load",
      value: function load() {
        var _this6 = this;
        return this.loading || (this.loading = this.loadFunc().then(function (support) {
          return _this6.support = support;
        }, function (err) {
          _this6.loading = null;
          throw err;
        }));
      }
      /**
      Create a language description.
      */
    }], [{
      key: "of",
      value: function of(spec) {
        var load = spec.load,
          support = spec.support;
        if (!load) {
          if (!support) throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
          load = function load() {
            return Promise.resolve(support);
          };
        }
        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {
          return s.toLowerCase();
        }), spec.extensions || [], spec.filename, load, support);
      }
      /**
      Look for a language in the given array of descriptions that
      matches the filename. Will first match
      [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
      and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
      and return the first language that matches.
      */
    }, {
      key: "matchFilename",
      value: function matchFilename(descs, filename) {
        var _iterator6 = _createForOfIteratorHelper$9(descs),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _d = _step6.value;
            if (_d.filename && _d.filename.test(filename)) return _d;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        var ext = /\.([^.]+)$/.exec(filename);
        if (ext) {
          var _iterator7 = _createForOfIteratorHelper$9(descs),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var d = _step7.value;
              if (d.extensions.indexOf(ext[1]) > -1) return d;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }
        return null;
      }
      /**
      Look for a language whose name or alias matches the the given
      name (case-insensitively). If `fuzzy` is true, and no direct
      matchs is found, this'll also search for a language whose name
      or alias occurs in the string (for names shorter than three
      characters, only when surrounded by non-word characters).
      */
    }, {
      key: "matchLanguageName",
      value: function matchLanguageName(descs, name) {
        var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        name = name.toLowerCase();
        var _iterator8 = _createForOfIteratorHelper$9(descs),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _d2 = _step8.value;
            if (_d2.alias.some(function (a) {
              return a == name;
            })) return _d2;
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        if (fuzzy) {
          var _iterator9 = _createForOfIteratorHelper$9(descs),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var d = _step9.value;
              var _iterator10 = _createForOfIteratorHelper$9(d.alias),
                _step10;
              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var a = _step10.value;
                  var found = name.indexOf(a);
                  if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length]))) return d;
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        }
        return null;
      }
    }]);
  }();
  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  var indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens. Should
  be a string consisting either entirely of the same whitespace
  character. When not set, this defaults to 2 spaces.
  */
  var indentUnit = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      if (!values.length) return "  ";
      var unit = values[0];
      if (!unit || /\S/.test(unit) || Array.from(unit).some(function (e) {
        return e != unit[0];
      })) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return unit;
    }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
    var unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
    var result = "",
      ts = state.tabSize,
      ch = state.facet(indentUnit)[0];
    if (ch == "\t") {
      while (cols >= ts) {
        result += "\t";
        cols -= ts;
      }
      ch = " ";
    }
    for (var i = 0; i < cols; i++) result += ch;
    return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
    if (context instanceof EditorState) context = new IndentContext(context);
    var _iterator11 = _createForOfIteratorHelper$9(context.state.facet(indentService)),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var service = _step11.value;
        var result = service(context, pos);
        if (result !== undefined) return result;
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
    var tree = syntaxTree(context.state);
    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  var IndentContext = /*#__PURE__*/function () {
    /**
    Create an indent context.
    */
    function IndentContext(
    /**
    The editor state.
    */
    state) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, IndentContext);
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    return _createClass(IndentContext, [{
      key: "lineAt",
      value: function lineAt(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var line = this.state.doc.lineAt(pos);
        var _this$options = this.options,
          simulateBreak = _this$options.simulateBreak,
          simulateDoubleBreak = _this$options.simulateDoubleBreak;
        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
          if (simulateDoubleBreak && simulateBreak == pos) return {
            text: "",
            from: pos
          };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
            text: line.text.slice(simulateBreak - line.from),
            from: simulateBreak
          };else return {
            text: line.text.slice(0, simulateBreak - line.from),
            from: line.from
          };
        }
        return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
    }, {
      key: "textAfterPos",
      value: function textAfterPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
        var _this$lineAt = this.lineAt(pos, bias),
          text = _this$lineAt.text,
          from = _this$lineAt.from;
        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
    }, {
      key: "column",
      value: function column(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var _this$lineAt2 = this.lineAt(pos, bias),
          text = _this$lineAt2.text,
          from = _this$lineAt2.from;
        var result = this.countColumn(text, pos - from);
        var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
        if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
        return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
    }, {
      key: "countColumn",
      value: function countColumn$1(line) {
        var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;
        return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
    }, {
      key: "lineIndent",
      value: function lineIndent(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var _this$lineAt3 = this.lineAt(pos, bias),
          text = _this$lineAt3.text,
          from = _this$lineAt3.from;
        var override = this.options.overrideIndentation;
        if (override) {
          var overriden = override(from);
          if (overriden > -1) return overriden;
        }
        return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
    }, {
      key: "simulatedBreak",
      get: function get() {
        return this.options.simulateBreak || null;
      }
    }]);
  }();
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  var indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
    var stack = ast.resolveStack(pos);
    var inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
    if (inner != stack.node) {
      var add = [];
      for (var cur = inner; cur && !(cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent) add.push(cur);
      for (var i = add.length - 1; i >= 0; i--) stack = {
        node: add[i],
        next: stack
      };
    }
    return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
    for (var cur = stack; cur; cur = cur.next) {
      var strategy = indentStrategy(cur.node);
      if (strategy) return strategy(TreeIndentContext.create(cx, pos, cur));
    }
    return 0;
  }
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
    var strategy = tree.type.prop(indentNodeProp);
    if (strategy) return strategy;
    var first = tree.firstChild,
      close;
    if (first && (close = first.type.prop(NodeProp.closedBy))) {
      var last = tree.lastChild,
        closed = last && close.indexOf(last.name) > -1;
      return function (cx) {
        return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      };
    }
    return tree.parent == null ? topIndent : null;
  }
  function topIndent() {
    return 0;
  }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
    function TreeIndentContext(base,
    /**
    The position at which indentation is being computed.
    */
    pos,
    /**
    @internal
    */
    context) {
      var _this7;
      _classCallCheck(this, TreeIndentContext);
      _this7 = _callSuper$4(this, TreeIndentContext, [base.state, base.options]);
      _this7.base = base;
      _this7.pos = pos;
      _this7.context = context;
      return _this7;
    }
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    _inherits(TreeIndentContext, _IndentContext);
    return _createClass(TreeIndentContext, [{
      key: "node",
      get: function get() {
        return this.context.node;
      }
      /**
      @internal
      */
    }, {
      key: "textAfter",
      get:
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      function get() {
        return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
    }, {
      key: "baseIndent",
      get: function get() {
        return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
    }, {
      key: "baseIndentFor",
      value: function baseIndentFor(node) {
        var line = this.state.doc.lineAt(node.from);
        // Skip line starts that are covered by a sibling (or cousin, etc)
        for (;;) {
          var atBreak = node.resolve(line.from);
          while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;
          if (isParent(atBreak, node)) break;
          line = this.state.doc.lineAt(atBreak.from);
        }
        return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
    }, {
      key: "continue",
      value: function _continue() {
        return indentFor(this.context.next, this.base, this.pos);
      }
    }], [{
      key: "create",
      value: function create(base, pos, context) {
        return new TreeIndentContext(base, pos, context);
      }
    }]);
  }(IndentContext);
  function isParent(parent, of) {
    for (var cur = of; cur; cur = cur.parent) if (parent == cur) return true;
    return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
    var tree = context.node;
    var openToken = tree.childAfter(tree.from),
      last = tree.lastChild;
    if (!openToken) return null;
    var sim = context.options.simulateBreak;
    var openLine = context.state.doc.lineAt(openToken.from);
    var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (var pos = openToken.to;;) {
      var next = tree.childAfter(pos);
      if (!next || next == last) return null;
      if (!next.type.isSkipped) {
        if (next.from >= lineEnd) return null;
        var space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
        return {
          from: openToken.from,
          to: openToken.to + space
        };
      }
      pos = next.to;
    }
  }
  /**
  An indentation strategy for delimited (usually bracketed) nodes.
  Will, by default, indent one unit more than the parent's base
  indent unless the line starts with a closing token. When `align`
  is true and there are non-skipped nodes on the node's opening
  line, the content of the node will be aligned with the end of the
  opening node, like this:

      foo(bar,
          baz)
  */
  function delimitedIndent(_ref) {
    var closing = _ref.closing,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? true : _ref$align,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? 1 : _ref$units;
    return function (context) {
      return delimitedStrategy(context, align, units, closing);
    };
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
    var after = context.textAfter,
      space = after.match(/^\s*/)[0].length;
    var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
    var aligned = align ? bracketedAligned(context) : null;
    if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  An indentation strategy that aligns a node's content to its base
  indentation.
  */
  var flatIndent = function flatIndent(context) {
    return context.baseIndent;
  };
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      except = _ref2.except,
      _ref2$units = _ref2.units,
      units = _ref2$units === void 0 ? 1 : _ref2$units;
    return function (context) {
      var matchExcept = except && except.test(context.textAfter);
      return context.baseIndent + (matchExcept ? 0 : units * context.unit);
    };
  }
  var DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.

  To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
    return EditorState.transactionFilter.of(function (tr) {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
      var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length) return tr;
      var doc = tr.newDoc,
        head = tr.newSelection.main.head,
        line = doc.lineAt(head);
      if (head > line.from + DontIndentBeyond) return tr;
      var lineStart = doc.sliceString(line.from, head);
      if (!rules.some(function (r) {
        return r.test(lineStart);
      })) return tr;
      var state = tr.state,
        last = -1,
        changes = [];
      var _iterator12 = _createForOfIteratorHelper$9(state.selection.ranges),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var _head = _step12.value.head;
          var _line = state.doc.lineAt(_head);
          if (_line.from == last) continue;
          last = _line.from;
          var indent = getIndentation(state, _line.from);
          if (indent == null) continue;
          var cur = /^\s*/.exec(_line.text)[0];
          var norm = indentString(state, indent);
          if (cur != norm) changes.push({
            from: _line.from,
            to: _line.from + cur.length,
            insert: norm
          });
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return changes.length ? [tr, {
        changes: changes,
        sequential: true
      }] : tr;
    });
  }

  /**
  A facet that registers a code folding service. When called with
  the extent of a line, such a function should return a foldable
  range that starts on that line (but continues beyond it), if one
  can be found.
  */
  var foldService = /*@__PURE__*/Facet.define();
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  var foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
    var first = node.firstChild,
      last = node.lastChild;
    return first && first.to < last.from ? {
      from: first.to,
      to: last.type.isError ? node.to : last.from
    } : null;
  }
  function syntaxFolding(state, start, end) {
    var tree = syntaxTree(state);
    if (tree.length < end) return null;
    var stack = tree.resolveStack(end, 1);
    var found = null;
    for (var iter = stack; iter; iter = iter.next) {
      var cur = iter.node;
      if (cur.to <= end || cur.from > end) continue;
      if (found && cur.from < start) break;
      var prop = cur.type.prop(foldNodeProp);
      if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
        var value = prop(cur, state);
        if (value && value.from <= end && value.from >= start && value.to > end) found = value;
      }
    }
    return found;
  }
  function isUnfinished(node) {
    var ch = node.lastChild;
    return ch && ch.to == node.to && ch.type.isError;
  }
  /**
  Check whether the given line is foldable. First asks any fold
  services registered through
  [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
  a result, tries to query the [fold node
  prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
  of the line.
  */
  function foldable(state, lineStart, lineEnd) {
    var _iterator13 = _createForOfIteratorHelper$9(state.facet(foldService)),
      _step13;
    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var service = _step13.value;
        var result = service(state, lineStart, lineEnd);
        if (result) return result;
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }
    return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
    var from = mapping.mapPos(range.from, 1),
      to = mapping.mapPos(range.to, -1);
    return from >= to ? undefined : {
      from: from,
      to: to
    };
  }
  /**
  State effect that can be attached to a transaction to fold the
  given range. (You probably only need this in exceptional
  circumstances—usually you'll just want to let
  [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
  gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
  */
  var foldEffect = /*@__PURE__*/StateEffect.define({
    map: mapRange
  });
  /**
  State effect that unfolds the given range (if it was folded).
  */
  var unfoldEffect = /*@__PURE__*/StateEffect.define({
    map: mapRange
  });
  function selectedLines(view) {
    var lines = [];
    var _iterator14 = _createForOfIteratorHelper$9(view.state.selection.ranges),
      _step14;
    try {
      var _loop = function _loop() {
        var head = _step14.value.head;
        if (lines.some(function (l) {
          return l.from <= head && l.to >= head;
        })) return 1; // continue
        lines.push(view.lineBlockAt(head));
      };
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        if (_loop()) continue;
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
    return lines;
  }
  /**
  The state field that stores the folded ranges (as a [decoration
  set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
  [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
  [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
  state.
  */
  var foldState = /*@__PURE__*/StateField.define({
    create: function create() {
      return Decoration.none;
    },
    update: function update(folded, tr) {
      folded = folded.map(tr.changes);
      var _iterator15 = _createForOfIteratorHelper$9(tr.effects),
        _step15;
      try {
        var _loop2 = function _loop2() {
          var e = _step15.value;
          if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
            var _tr$state$facet = tr.state.facet(foldConfig),
              preparePlaceholder = _tr$state$facet.preparePlaceholder;
            var widget = !preparePlaceholder ? foldWidget : Decoration.replace({
              widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value))
            });
            folded = folded.update({
              add: [widget.range(e.value.from, e.value.to)]
            });
          } else if (e.is(unfoldEffect)) {
            folded = folded.update({
              filter: function filter(from, to) {
                return e.value.from != from || e.value.to != to;
              },
              filterFrom: e.value.from,
              filterTo: e.value.to
            });
          }
        };
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          _loop2();
        }
        // Clear folded ranges that cover the selection head
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      if (tr.selection) {
        var onSelection = false,
          head = tr.selection.main.head;
        folded.between(head, head, function (a, b) {
          if (a < head && b > head) onSelection = true;
        });
        if (onSelection) folded = folded.update({
          filterFrom: head,
          filterTo: head,
          filter: function filter(a, b) {
            return b <= head || a >= head;
          }
        });
      }
      return folded;
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f);
    },
    toJSON: function toJSON(folded, state) {
      var ranges = [];
      folded.between(0, state.doc.length, function (from, to) {
        ranges.push(from, to);
      });
      return ranges;
    },
    fromJSON: function fromJSON(value) {
      if (!Array.isArray(value) || value.length % 2) throw new RangeError("Invalid JSON for fold state");
      var ranges = [];
      for (var i = 0; i < value.length;) {
        var from = value[i++],
          to = value[i++];
        if (typeof from != "number" || typeof to != "number") throw new RangeError("Invalid JSON for fold state");
        ranges.push(foldWidget.range(from, to));
      }
      return Decoration.set(ranges, true);
    }
  });
  function findFold(state, from, to) {
    var _a;
    var found = null;
    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
      if (!found || found.from > from) found = {
        from: from,
        to: to
      };
    });
    return found;
  }
  function foldExists(folded, from, to) {
    var found = false;
    folded.between(from, from, function (a, b) {
      if (a == from && b == to) found = true;
    });
    return found;
  }
  function maybeEnable(state, other) {
    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  /**
  Fold the lines that are selected, if possible.
  */
  var foldCode = function foldCode(view) {
    var _iterator16 = _createForOfIteratorHelper$9(selectedLines(view)),
      _step16;
    try {
      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
        var line = _step16.value;
        var range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({
            effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
          });
          return true;
        }
      }
    } catch (err) {
      _iterator16.e(err);
    } finally {
      _iterator16.f();
    }
    return false;
  };
  /**
  Unfold folded ranges on selected lines.
  */
  var unfoldCode = function unfoldCode(view) {
    if (!view.state.field(foldState, false)) return false;
    var effects = [];
    var _iterator17 = _createForOfIteratorHelper$9(selectedLines(view)),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var line = _step17.value;
        var folded = findFold(view.state, line.from, line.to);
        if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
    if (effects.length) view.dispatch({
      effects: effects
    });
    return effects.length > 0;
  };
  function announceFold(view, range) {
    var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var lineFrom = view.state.doc.lineAt(range.from).number,
      lineTo = view.state.doc.lineAt(range.to).number;
    return EditorView.announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
  }
  /**
  Fold all top-level foldable ranges. Note that, in most cases,
  folding information will depend on the [syntax
  tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
  reliably when the document hasn't been fully parsed (either
  because the editor state was only just initialized, or because the
  document is so big that the parser decided not to parse it
  entirely).
  */
  var foldAll = function foldAll(view) {
    var state = view.state,
      effects = [];
    for (var pos = 0; pos < state.doc.length;) {
      var line = view.lineBlockAt(pos),
        range = foldable(state, line.from, line.to);
      if (range) effects.push(foldEffect.of(range));
      pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
    }
    if (effects.length) view.dispatch({
      effects: maybeEnable(view.state, effects)
    });
    return !!effects.length;
  };
  /**
  Unfold all folded code.
  */
  var unfoldAll = function unfoldAll(view) {
    var field = view.state.field(foldState, false);
    if (!field || !field.size) return false;
    var effects = [];
    field.between(0, view.state.doc.length, function (from, to) {
      effects.push(unfoldEffect.of({
        from: from,
        to: to
      }));
    });
    view.dispatch({
      effects: effects
    });
    return true;
  };
  /**
  Default fold-related key bindings.

   - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
   - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
   - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
   - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
  */
  var foldKeymap = [{
    key: "Ctrl-Shift-[",
    mac: "Cmd-Alt-[",
    run: foldCode
  }, {
    key: "Ctrl-Shift-]",
    mac: "Cmd-Alt-]",
    run: unfoldCode
  }, {
    key: "Ctrl-Alt-[",
    run: foldAll
  }, {
    key: "Ctrl-Alt-]",
    run: unfoldAll
  }];
  var defaultConfig = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: "…"
  };
  var foldConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return combineConfig(values, defaultConfig);
    }
  });
  /**
  Create an extension that configures code folding.
  */
  function codeFolding(config) {
    var result = [foldState, baseTheme$1$1];
    return result;
  }
  function widgetToDOM(view, prepared) {
    var state = view.state,
      conf = state.facet(foldConfig);
    var onclick = function onclick(event) {
      var line = view.lineBlockAt(view.posAtDOM(event.target));
      var folded = findFold(view.state, line.from, line.to);
      if (folded) view.dispatch({
        effects: unfoldEffect.of(folded)
      });
      event.preventDefault();
    };
    if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick, prepared);
    var element = document.createElement("span");
    element.textContent = conf.placeholderText;
    element.setAttribute("aria-label", state.phrase("folded code"));
    element.title = state.phrase("unfold");
    element.className = "cm-foldPlaceholder";
    element.onclick = onclick;
    return element;
  }
  var foldWidget = /*@__PURE__*/Decoration.replace({
    widget: /*@__PURE__*/new (/*#__PURE__*/function (_WidgetType) {
      function _class2() {
        _classCallCheck(this, _class2);
        return _callSuper$4(this, _class2, arguments);
      }
      _inherits(_class2, _WidgetType);
      return _createClass(_class2, [{
        key: "toDOM",
        value: function toDOM(view) {
          return widgetToDOM(view, null);
        }
      }]);
    }(WidgetType))()
  });
  var PreparedFoldWidget = /*#__PURE__*/function (_WidgetType2) {
    function PreparedFoldWidget(value) {
      var _this8;
      _classCallCheck(this, PreparedFoldWidget);
      _this8 = _callSuper$4(this, PreparedFoldWidget);
      _this8.value = value;
      return _this8;
    }
    _inherits(PreparedFoldWidget, _WidgetType2);
    return _createClass(PreparedFoldWidget, [{
      key: "eq",
      value: function eq(other) {
        return this.value == other.value;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        return widgetToDOM(view, this.value);
      }
    }]);
  }(WidgetType);
  var foldGutterDefaults = {
    openText: "⌄",
    closedText: "›",
    markerDOM: null,
    domEventHandlers: {},
    foldingChanged: function foldingChanged() {
      return false;
    }
  };
  var FoldMarker = /*#__PURE__*/function (_GutterMarker) {
    function FoldMarker(config, open) {
      var _this9;
      _classCallCheck(this, FoldMarker);
      _this9 = _callSuper$4(this, FoldMarker);
      _this9.config = config;
      _this9.open = open;
      return _this9;
    }
    _inherits(FoldMarker, _GutterMarker);
    return _createClass(FoldMarker, [{
      key: "eq",
      value: function eq(other) {
        return this.config == other.config && this.open == other.open;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        if (this.config.markerDOM) return this.config.markerDOM(this.open);
        var span = document.createElement("span");
        span.textContent = this.open ? this.config.openText : this.config.closedText;
        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
        return span;
      }
    }]);
  }(GutterMarker);
  /**
  Create an extension that registers a fold gutter, which shows a
  fold status indicator before foldable lines (which can be clicked
  to fold or unfold the line).
  */
  function foldGutter() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
    var canFold = new FoldMarker(fullConfig, true),
      canUnfold = new FoldMarker(fullConfig, false);
    var _markers = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class3(view) {
        _classCallCheck(this, _class3);
        this.from = view.viewport.from;
        this.markers = this.buildMarkers(view);
      }
      return _createClass(_class3, [{
        key: "update",
        value: function update(_update2) {
          if (_update2.docChanged || _update2.viewportChanged || _update2.startState.facet(language) != _update2.state.facet(language) || _update2.startState.field(foldState, false) != _update2.state.field(foldState, false) || syntaxTree(_update2.startState) != syntaxTree(_update2.state) || fullConfig.foldingChanged(_update2)) this.markers = this.buildMarkers(_update2.view);
        }
      }, {
        key: "buildMarkers",
        value: function buildMarkers(view) {
          var builder = new RangeSetBuilder();
          var _iterator19 = _createForOfIteratorHelper$9(view.viewportLineBlocks),
            _step19;
          try {
            for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
              var line = _step19.value;
              var mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
              if (mark) builder.add(line.from, line.from, mark);
            }
          } catch (err) {
            _iterator19.e(err);
          } finally {
            _iterator19.f();
          }
          return builder.finish();
        }
      }]);
    }());
    var domEventHandlers = fullConfig.domEventHandlers;
    return [_markers, gutter({
      "class": "cm-foldGutter",
      markers: function markers(view) {
        var _a;
        return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;
      },
      initialSpacer: function initialSpacer() {
        return new FoldMarker(fullConfig, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {
        click: function click(view, line, event) {
          if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;
          var folded = findFold(view.state, line.from, line.to);
          if (folded) {
            view.dispatch({
              effects: unfoldEffect.of(folded)
            });
            return true;
          }
          var range = foldable(view.state, line.from, line.to);
          if (range) {
            view.dispatch({
              effects: foldEffect.of(range)
            });
            return true;
          }
          return false;
        }
      })
    }), codeFolding()];
  }
  var baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-foldPlaceholder": {
      backgroundColor: "#eee",
      border: "1px solid #ddd",
      color: "#888",
      borderRadius: ".2em",
      margin: "0 1px",
      padding: "0 1px",
      cursor: "pointer"
    },
    ".cm-foldGutter span": {
      padding: "0 1px",
      cursor: "pointer"
    }
  });

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  var HighlightStyle = /*#__PURE__*/function () {
    function HighlightStyle(
    /**
    The tag styles used to create this highlight style.
    */
    specs, options) {
      _classCallCheck(this, HighlightStyle);
      this.specs = specs;
      var modSpec;
      function def(spec) {
        var cls = StyleModule.newName();
        (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
        return cls;
      }
      var all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
      var scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? function (type) {
        return type.prop(languageDataProp) == scopeOpt.data;
      } : scopeOpt ? function (type) {
        return type == scopeOpt;
      } : undefined;
      this.style = tagHighlighter(specs.map(function (style) {
        return {
          tag: style.tag,
          "class": style["class"] || def(Object.assign({}, style, {
            tag: null
          }))
        };
      }), {
        all: all
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    return _createClass(HighlightStyle, null, [{
      key: "define",
      value: function define(specs, options) {
        return new HighlightStyle(specs, options || {});
      }
    }]);
  }();
  var highlighterFacet = /*@__PURE__*/Facet.define();
  var fallbackHighlighter = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    var main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
    var ext = [treeHighlighter],
      themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], function (state) {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));else ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  var TreeHighlighter = /*#__PURE__*/function () {
    function TreeHighlighter(view) {
      _classCallCheck(this, TreeHighlighter);
      this.markCache = Object.create(null);
      this.tree = syntaxTree(view.state);
      this.decorations = this.buildDeco(view, getHighlighters(view.state));
      this.decoratedTo = view.viewport.to;
    }
    return _createClass(TreeHighlighter, [{
      key: "update",
      value: function update(_update3) {
        var tree = syntaxTree(_update3.state),
          highlighters = getHighlighters(_update3.state);
        var styleChange = highlighters != getHighlighters(_update3.startState);
        var viewport = _update3.view.viewport,
          decoratedToMapped = _update3.changes.mapPos(this.decoratedTo, 1);
        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
          this.decorations = this.decorations.map(_update3.changes);
          this.decoratedTo = decoratedToMapped;
        } else if (tree != this.tree || _update3.viewportChanged || styleChange) {
          this.tree = tree;
          this.decorations = this.buildDeco(_update3.view, highlighters);
          this.decoratedTo = viewport.to;
        }
      }
    }, {
      key: "buildDeco",
      value: function buildDeco(view, highlighters) {
        var _this10 = this;
        if (!highlighters || !this.tree.length) return Decoration.none;
        var builder = new RangeSetBuilder();
        var _iterator21 = _createForOfIteratorHelper$9(view.visibleRanges),
          _step21;
        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var _step21$value = _step21.value,
              from = _step21$value.from,
              to = _step21$value.to;
            highlightTree(this.tree, highlighters, function (from, to, style) {
              builder.add(from, to, _this10.markCache[style] || (_this10.markCache[style] = Decoration.mark({
                "class": style
              })));
            }, from, to);
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }
        return builder.finish();
      }
    }]);
  }();
  var treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
    decorations: function decorations(v) {
      return v.decorations;
    }
  }));
  /**
  A default highlight style (works well with light themes).
  */
  var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
    tag: tags$1.meta,
    color: "#404740"
  }, {
    tag: tags$1.link,
    textDecoration: "underline"
  }, {
    tag: tags$1.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  }, {
    tag: tags$1.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags$1.strong,
    fontWeight: "bold"
  }, {
    tag: tags$1.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags$1.keyword,
    color: "#708"
  }, {
    tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
    color: "#219"
  }, {
    tag: [tags$1.literal, tags$1.inserted],
    color: "#164"
  }, {
    tag: [tags$1.string, tags$1.deleted],
    color: "#a11"
  }, {
    tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
    color: "#e40"
  }, {
    tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
    color: "#00f"
  }, {
    tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
    color: "#30a"
  }, {
    tag: [tags$1.typeName, tags$1.namespace],
    color: "#085"
  }, {
    tag: tags$1.className,
    color: "#167"
  }, {
    tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
    color: "#256"
  }, {
    tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
    color: "#00c"
  }, {
    tag: tags$1.comment,
    color: "#940"
  }, {
    tag: tags$1.invalid,
    color: "#f00"
  }]);
  var baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": {
      backgroundColor: "#328c8252"
    },
    "&.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bb555544"
    }
  });
  var DefaultScanDist = 10000,
    DefaultBrackets = "()[]{}";
  var bracketMatchingConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  var matchingMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-matchingBracket"
    }),
    nonmatchingMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-nonmatchingBracket"
    });
  function defaultRenderMatch(match) {
    var decorations = [];
    var mark = match.matched ? matchingMark : nonmatchingMark;
    decorations.push(mark.range(match.start.from, match.start.to));
    if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
    return decorations;
  }
  var bracketMatchingState = /*@__PURE__*/StateField.define({
    create: function create() {
      return Decoration.none;
    },
    update: function update(deco, tr) {
      if (!tr.docChanged && !tr.selection) return deco;
      var decorations = [];
      var config = tr.state.facet(bracketMatchingConfig);
      var _iterator22 = _createForOfIteratorHelper$9(tr.state.selection.ranges),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var range = _step22.value;
          if (!range.empty) continue;
          var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
          if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      return Decoration.set(decorations, true);
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f);
    }
  });
  var bracketMatchingUnique = [bracketMatchingState, baseTheme$4];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  /**
  When larger syntax nodes, such as HTML tags, are marked as
  opening/closing, it can be a bit messy to treat the whole node as
  a matchable bracket. This node prop allows you to define, for such
  a node, a ‘handle’—the part of the node that is highlighted, and
  that the cursor must be on to activate highlighting in the first
  place.
  */
  var bracketMatchingHandle = /*@__PURE__*/new NodeProp();
  function matchingNodes(node, dir, brackets) {
    var byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp) return byProp;
    if (node.name.length == 1) {
      var index = brackets.indexOf(node.name);
      if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
    }
    return null;
  }
  function findHandle(node) {
    var hasHandle = node.type.prop(bracketMatchingHandle);
    return hasHandle ? hasHandle(node.node) : node;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir) {
    var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var maxScanDistance = config.maxScanDistance || DefaultScanDist,
      brackets = config.brackets || DefaultBrackets;
    var tree = syntaxTree(state),
      node = tree.resolveInner(pos, dir);
    for (var cur = node; cur; cur = cur.parent) {
      var matches = matchingNodes(cur.type, dir, brackets);
      if (matches && cur.from < cur.to) {
        var handle = findHandle(cur);
        if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
      }
    }
    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
    var parent = token.parent,
      firstToken = {
        from: handle.from,
        to: handle.to
      };
    var depth = 0,
      cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          var endHandle = findHandle(cursor);
          return {
            start: firstToken,
            end: endHandle ? {
              from: endHandle.from,
              to: endHandle.to
            } : undefined,
            matched: true
          };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) {
            var _endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: _endHandle && _endHandle.from < _endHandle.to ? {
                from: _endHandle.from,
                to: _endHandle.to
              } : undefined,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return {
      start: firstToken,
      matched: false
    };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    var bracket = brackets.indexOf(startCh);
    if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
    var startToken = {
      from: dir < 0 ? pos - 1 : pos,
      to: dir > 0 ? pos + 1 : pos
    };
    var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
      depth = 0;
    for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
      var text = iter.value;
      if (dir < 0) distance += text.length;
      var basePos = pos + distance * dir;
      for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
        var found = brackets.indexOf(text[_pos2]);
        if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;
        if (found % 2 == 0 == dir > 0) {
          depth++;
        } else if (depth == 1) {
          // Closing
          return {
            start: startToken,
            end: {
              from: basePos + _pos2,
              to: basePos + _pos2 + 1
            },
            matched: found >> 1 == bracket >> 1
          };
        } else {
          depth--;
        }
      }
      if (dir > 0) distance += text.length;
    }
    return iter.done ? {
      start: startToken,
      matched: false
    } : null;
  }
  var noTokens = /*@__PURE__*/Object.create(null);
  var typeArray = [NodeType.none];
  var warned = [];
  // Cache of node types by name and tags
  var byTag = /*@__PURE__*/Object.create(null);
  var defaultTable = /*@__PURE__*/Object.create(null);
  for (var _i = 0, _arr = [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]; _i < _arr.length; _i++) {
    var _arr$_i = _slicedToArray(_arr[_i], 2),
      legacyName = _arr$_i[0],
      name = _arr$_i[1];
    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  }
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1) return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    var tags$1$1 = [];
    var _iterator24 = _createForOfIteratorHelper$9(tagStr.split(" ")),
      _step24;
    try {
      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
        var _name = _step24.value;
        var found = [];
        var _iterator25 = _createForOfIteratorHelper$9(_name.split(".")),
          _step25;
        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var part = _step25.value;
            var value = extra[part] || tags$1[part];
            if (!value) {
              warnForPart(part, "Unknown highlighting tag ".concat(part));
            } else if (typeof value == "function") {
              if (!found.length) warnForPart(part, "Modifier ".concat(part, " used at start of tag"));else found = found.map(value);
            } else {
              if (found.length) warnForPart(part, "Tag ".concat(part, " used as modifier"));else found = Array.isArray(value) ? value : [value];
            }
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
        var _iterator26 = _createForOfIteratorHelper$9(found),
          _step26;
        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var tag = _step26.value;
            tags$1$1.push(tag);
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
      }
    } catch (err) {
      _iterator24.e(err);
    } finally {
      _iterator24.f();
    }
    if (!tags$1$1.length) return 0;
    var name = tagStr.replace(/ /g, "_"),
      key = name + " " + tags$1$1.map(function (t) {
        return t.id;
      });
    var known = byTag[key];
    if (known) return known.id;
    var type = byTag[key] = NodeType.define({
      id: typeArray.length,
      name: name,
      props: [styleTags(_defineProperty({}, name, tags$1$1))]
    });
    typeArray.push(type);
    return type.id;
  }
  ({
    rtl: /*@__PURE__*/Decoration.mark({
      "class": "cm-iso",
      inclusive: true,
      attributes: {
        dir: "rtl"
      },
      bidiIsolate: Direction.RTL
    }),
    ltr: /*@__PURE__*/Decoration.mark({
      "class": "cm-iso",
      inclusive: true,
      attributes: {
        dir: "ltr"
      },
      bidiIsolate: Direction.LTR
    })});

  function _createForOfIteratorHelper$8(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$8(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$8(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$8(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$8(r, a) : void 0; } }
  function _arrayLikeToArray$8(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  var toggleComment = function toggleComment(target) {
    var state = target.state,
      line = state.doc.lineAt(state.selection.main.from),
      config = getConfig(target.state, line.from);
    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
    return function (_ref) {
      var state = _ref.state,
        dispatch = _ref.dispatch;
      if (state.readOnly) return false;
      var tr = f(option, state);
      if (!tr) return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  var toggleBlockCommentByLine = /*@__PURE__*/command(function (o, s) {
    return changeBlockComment(o, s, selectedLineRanges(s));
  }, 0 /* CommentOption.Toggle */);
  function getConfig(state, pos) {
    var data = state.languageDataAt("commentTokens", pos, 1);
    return data.length ? data[0] : {};
  }
  var SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, _ref2, from, to) {
    var open = _ref2.open,
      close = _ref2.close;
    var textBefore = state.sliceDoc(from - SearchMargin, from);
    var textAfter = state.sliceDoc(to, to + SearchMargin);
    var spaceBefore = /\s*$/.exec(textBefore)[0].length,
      spaceAfter = /^\s*/.exec(textAfter)[0].length;
    var beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
      return {
        open: {
          pos: from - spaceBefore,
          margin: spaceBefore && 1
        },
        close: {
          pos: to + spaceAfter,
          margin: spaceAfter && 1
        }
      };
    }
    var startText, endText;
    if (to - from <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from, to);
    } else {
      startText = state.sliceDoc(from, from + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    var startSpace = /^\s*/.exec(startText)[0].length,
      endSpace = /\s*$/.exec(endText)[0].length;
    var endOff = endText.length - endSpace - close.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
      return {
        open: {
          pos: from + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  function selectedLineRanges(state) {
    var ranges = [];
    var _iterator = _createForOfIteratorHelper$8(state.selection.ranges),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var r = _step.value;
        var fromLine = state.doc.lineAt(r.from);
        var toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
        if (toLine.from > fromLine.from && toLine.from == r.to) toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
        var last = ranges.length - 1;
        if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
          from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length,
          to: toLine.to
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state) {
    var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
    var tokens = ranges.map(function (r) {
      return getConfig(state, r.from).block;
    });
    if (!tokens.every(function (c) {
      return c;
    })) return null;
    var comments = ranges.map(function (r, i) {
      return findBlockComment(state, tokens[i], r.from, r.to);
    });
    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(function (c) {
      return c;
    })) {
      return {
        changes: state.changes(ranges.map(function (range, i) {
          if (comments[i]) return [];
          return [{
            from: range.from,
            insert: tokens[i].open + " "
          }, {
            from: range.to,
            insert: " " + tokens[i].close
          }];
        }))
      };
    } else if (option != 1 /* CommentOption.Comment */ && comments.some(function (c) {
      return c;
    })) {
      var changes = [];
      for (var i = 0, comment; i < comments.length; i++) if (comment = comments[i]) {
        var token = tokens[i],
          _comment = comment,
          open = _comment.open,
          close = _comment.close;
        changes.push({
          from: open.pos - token.open.length,
          to: open.pos + open.margin
        }, {
          from: close.pos - close.margin,
          to: close.pos + token.close.length
        });
      }
      return {
        changes: changes
      };
    }
    return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state) {
    var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
    var lines = [];
    var prevLine = -1;
    var _iterator2 = _createForOfIteratorHelper$8(ranges),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _step2.value,
          _from = _step2$value.from,
          _to = _step2$value.to;
        var startI = lines.length,
          minIndent = 1e9;
        var _token2 = getConfig(state, _from).line;
        if (!_token2) continue;
        for (var pos = _from; pos <= _to;) {
          var _line2 = state.doc.lineAt(pos);
          if (_line2.from > prevLine && (_from == _to || _to > _line2.from)) {
            prevLine = _line2.from;
            var _indent = /^\s*/.exec(_line2.text)[0].length;
            var _empty = _indent == _line2.length;
            var _comment2 = _line2.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;
            if (_indent < _line2.text.length && _indent < minIndent) minIndent = _indent;
            lines.push({
              line: _line2,
              comment: _comment2,
              token: _token2,
              indent: _indent,
              empty: _empty,
              single: false
            });
          }
          pos = _line2.to + 1;
        }
        if (minIndent < 1e9) for (var i = startI; i < lines.length; i++) if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
        if (lines.length == startI + 1) lines[startI].single = true;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (option != 2 /* CommentOption.Uncomment */ && lines.some(function (l) {
      return l.comment < 0 && (!l.empty || l.single);
    })) {
      var changes = [];
      var _iterator3 = _createForOfIteratorHelper$8(lines),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _step3.value,
            line = _step3$value.line,
            token = _step3$value.token,
            indent = _step3$value.indent,
            empty = _step3$value.empty,
            single = _step3$value.single;
          if (single || !empty) changes.push({
            from: line.from + indent,
            insert: token + " "
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var changeSet = state.changes(changes);
      return {
        changes: changeSet,
        selection: state.selection.map(changeSet, 1)
      };
    } else if (option != 1 /* CommentOption.Comment */ && lines.some(function (l) {
      return l.comment >= 0;
    })) {
      var _changes = [];
      var _iterator4 = _createForOfIteratorHelper$8(lines),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _step4.value,
            _line = _step4$value.line,
            comment = _step4$value.comment,
            _token = _step4$value.token;
          if (comment >= 0) {
            var from = _line.from + comment,
              to = from + _token.length;
            if (_line.text[to - _line.from] == " ") to++;
            _changes.push({
              from: from,
              to: to
            });
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return {
        changes: _changes
      };
    }
    return null;
  }
  var fromHistory = /*@__PURE__*/Annotation.define();
  /**
  Transaction annotation that will prevent that transaction from
  being combined with other transactions in the undo history. Given
  `"before"`, it'll prevent merging with previous transactions. With
  `"after"`, subsequent transactions won't be combined with this
  one. With `"full"`, the transaction is isolated on both sides.
  */
  var isolateHistory = /*@__PURE__*/Annotation.define();
  /**
  This facet provides a way to register functions that, given a
  transaction, provide a set of effects that the history should
  store when inverting the transaction. This can be used to
  integrate some kinds of effects in the history, so that they can
  be undone (and redone again).
  */
  var invertedEffects = /*@__PURE__*/Facet.define();
  var historyConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: function joinToEvent(_t, isAdjacent) {
          return isAdjacent;
        }
      }, {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: function joinToEvent(a, b) {
          return function (tr, adj) {
            return a(tr, adj) || b(tr, adj);
          };
        }
      });
    }
  });
  var historyField_ = /*@__PURE__*/StateField.define({
    create: function create() {
      return HistoryState.empty;
    },
    update: function update(state, tr) {
      var config = tr.state.facet(historyConfig);
      var fromHist = tr.annotation(fromHistory);
      if (fromHist) {
        var item = HistEvent.fromTransaction(tr, fromHist.selection),
          from = fromHist.side;
        var other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
        if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
        return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
      }
      var isolate = tr.annotation(isolateHistory);
      if (isolate == "full" || isolate == "before") state = state.isolate();
      if (tr.annotation(Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
      var event = HistEvent.fromTransaction(tr);
      var time = tr.annotation(Transaction.time),
        userEvent = tr.annotation(Transaction.userEvent);
      if (event) state = state.addChanges(event, time, userEvent, config, tr);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
      if (isolate == "full" || isolate == "after") state = state.isolate();
      return state;
    },
    toJSON: function toJSON(value) {
      return {
        done: value.done.map(function (e) {
          return e.toJSON();
        }),
        undone: value.undone.map(function (e) {
          return e.toJSON();
        })
      };
    },
    fromJSON: function fromJSON(json) {
      return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
    }
  });
  /**
  Create a history extension with the given configuration.
  */
  function history() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [historyField_, historyConfig.of(config), EditorView.domEventHandlers({
      beforeinput: function beforeinput(e, view) {
        var command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command) return false;
        e.preventDefault();
        return command(view);
      }
    })];
  }
  function cmd(side, selection) {
    return function (_ref3) {
      var state = _ref3.state,
        dispatch = _ref3.dispatch;
      if (!selection && state.readOnly) return false;
      var historyState = state.field(historyField_, false);
      if (!historyState) return false;
      var tr = historyState.pop(side, state, selection);
      if (!tr) return false;
      dispatch(tr);
      return true;
    };
  }
  /**
  Undo a single group of history events. Returns false if no group
  was available.
  */
  var undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
  /**
  Redo a group of history events. Returns false if no group was
  available.
  */
  var redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
  /**
  Undo a change or selection change.
  */
  var undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
  /**
  Redo a change or selection change.
  */
  var redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
  // History events store groups of changes or effects that need to be
  // undone/redone together.
  var HistEvent = /*#__PURE__*/function () {
    function HistEvent(
    // The changes in this event. Normal events hold at least one
    // change or effect. But it may be necessary to store selection
    // events before the first change, in which case a special type of
    // instance is created which doesn't hold any changes, with
    // changes == startSelection == undefined
    changes,
    // The effects associated with this event
    effects,
    // Accumulated mapping (from addToHistory==false) that should be
    // applied to events below this one.
    mapped,
    // The selection before this event
    startSelection,
    // Stores selection changes after this event, to be used for
    // selection undo/redo.
    selectionsAfter) {
      _classCallCheck(this, HistEvent);
      this.changes = changes;
      this.effects = effects;
      this.mapped = mapped;
      this.startSelection = startSelection;
      this.selectionsAfter = selectionsAfter;
    }
    return _createClass(HistEvent, [{
      key: "setSelAfter",
      value: function setSelAfter(after) {
        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var _a, _b, _c;
        return {
          changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
          mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
          startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
          selectionsAfter: this.selectionsAfter.map(function (s) {
            return s.toJSON();
          })
        };
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
    }, {
      key: "fromTransaction",
      value: function fromTransaction(tr, selection) {
        var effects = none$2;
        var _iterator5 = _createForOfIteratorHelper$8(tr.startState.facet(invertedEffects)),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var invert = _step5.value;
            var result = invert(tr);
            if (result.length) effects = effects.concat(result);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        if (!effects.length && tr.changes.empty) return null;
        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$2);
      }
    }, {
      key: "selection",
      value: function selection(selections) {
        return new HistEvent(undefined, none$2, undefined, undefined, selections);
      }
    }]);
  }();
  function updateBranch(branch, to, maxLen, newEvent) {
    var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
    var newBranch = branch.slice(start, to);
    newBranch.push(newEvent);
    return newBranch;
  }
  function isAdjacent(a, b) {
    var ranges = [],
      isAdjacent = false;
    a.iterChangedRanges(function (f, t) {
      return ranges.push(f, t);
    });
    b.iterChangedRanges(function (_f, _t, f, t) {
      for (var i = 0; i < ranges.length;) {
        var from = ranges[i++],
          to = ranges[i++];
        if (t >= from && f <= to) isAdjacent = true;
      }
    });
    return isAdjacent;
  }
  function eqSelectionShape(a, b) {
    return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
      return r.empty != b.ranges[i].empty;
    }).length === 0;
  }
  function conc(a, b) {
    return !a.length ? b : !b.length ? a : a.concat(b);
  }
  var none$2 = [];
  var MaxSelectionsPerEvent = 200;
  function _addSelection(branch, selection) {
    if (!branch.length) {
      return [HistEvent.selection([selection])];
    } else {
      var lastEvent = branch[branch.length - 1];
      var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
      if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
      sels.push(selection);
      return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
    }
  }
  // Assumes the top item has one or more selectionAfter values
  function popSelection(branch) {
    var last = branch[branch.length - 1];
    var newBranch = branch.slice();
    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
    return newBranch;
  }
  // Add a mapping to the top event in the given branch. If this maps
  // away all the changes and effects in that item, drop it and
  // propagate the mapping to the next item.
  function addMappingToBranch(branch, mapping) {
    if (!branch.length) return branch;
    var length = branch.length,
      selections = none$2;
    while (length) {
      var event = mapEvent(branch[length - 1], mapping, selections);
      if (event.changes && !event.changes.empty || event.effects.length) {
        // Event survived mapping
        var result = branch.slice(0, length);
        result[length - 1] = event;
        return result;
      } else {
        // Drop this event, since there's no changes or effects left
        mapping = event.mapped;
        length--;
        selections = event.selectionsAfter;
      }
    }
    return selections.length ? [HistEvent.selection(selections)] : none$2;
  }
  function mapEvent(event, mapping, extraSelections) {
    var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
      return s.map(mapping);
    }) : none$2, extraSelections);
    // Change-less events don't store mappings (they are always the last event in a branch)
    if (!event.changes) return HistEvent.selection(selections);
    var mappedChanges = event.changes.map(mapping),
      before = mapping.mapDesc(event.changes, true);
    var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  var joinableUserEvent = /^(input\.type|delete)($|\.)/;
  var HistoryState = /*#__PURE__*/function () {
    function HistoryState(done, undone) {
      var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      _classCallCheck(this, HistoryState);
      this.done = done;
      this.undone = undone;
      this.prevTime = prevTime;
      this.prevUserEvent = prevUserEvent;
    }
    return _createClass(HistoryState, [{
      key: "isolate",
      value: function isolate() {
        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
    }, {
      key: "addChanges",
      value: function addChanges(event, time, userEvent, config, tr) {
        var done = this.done,
          lastEvent = done[done.length - 1];
        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) ||
        // For compose (but not compose.start) events, always join with previous event
        userEvent == "input.type.compose")) {
          done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$2));
        } else {
          done = updateBranch(done, done.length, config.minDepth, event);
        }
        return new HistoryState(done, none$2, time, userEvent);
      }
    }, {
      key: "addSelection",
      value: function addSelection(selection, time, userEvent, newGroupDelay) {
        var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$2;
        if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
        return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
      }
    }, {
      key: "addMapping",
      value: function addMapping(mapping) {
        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
    }, {
      key: "pop",
      value: function pop(side, state, onlySelection) {
        var branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
        if (branch.length == 0) return null;
        var event = branch[branch.length - 1],
          selection = event.selectionsAfter[0] || state.selection;
        if (onlySelection && event.selectionsAfter.length) {
          return state.update({
            selection: event.selectionsAfter[event.selectionsAfter.length - 1],
            annotations: fromHistory.of({
              side: side,
              rest: popSelection(branch),
              selection: selection
            }),
            userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
            scrollIntoView: true
          });
        } else if (!event.changes) {
          return null;
        } else {
          var rest = branch.length == 1 ? none$2 : branch.slice(0, branch.length - 1);
          if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
          return state.update({
            changes: event.changes,
            selection: event.startSelection,
            effects: event.effects,
            annotations: fromHistory.of({
              side: side,
              rest: rest,
              selection: selection
            }),
            filter: false,
            userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
            scrollIntoView: true
          });
        }
      }
    }]);
  }();
  HistoryState.empty = /*@__PURE__*/new HistoryState(none$2, none$2);
  /**
  Default key bindings for the undo history.

  - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
  - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
  - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
  - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
  */
  var historyKeymap = [{
    key: "Mod-z",
    run: undo,
    preventDefault: true
  }, {
    key: "Mod-y",
    mac: "Mod-Shift-z",
    run: redo,
    preventDefault: true
  }, {
    linux: "Ctrl-Shift-z",
    run: redo,
    preventDefault: true
  }, {
    key: "Mod-u",
    run: undoSelection,
    preventDefault: true
  }, {
    key: "Alt-u",
    mac: "Mod-Shift-u",
    run: redoSelection,
    preventDefault: true
  }];
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
    return state.update({
      selection: selection,
      scrollIntoView: true,
      userEvent: "select"
    });
  }
  function moveSel(_ref4, how) {
    var state = _ref4.state,
      dispatch = _ref4.dispatch;
    var selection = updateSel(state.selection, how);
    if (selection.eq(state.selection, true)) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
    return moveSel(view, function (range) {
      return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
    });
  }
  function ltrAtCursor(view) {
    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  var cursorCharLeft = function cursorCharLeft(view) {
    return cursorByChar(view, !ltrAtCursor(view));
  };
  /**
  Move the selection one character to the right.
  */
  var cursorCharRight = function cursorCharRight(view) {
    return cursorByChar(view, ltrAtCursor(view));
  };
  function cursorByGroup(view, forward) {
    return moveSel(view, function (range) {
      return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
    });
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  var cursorGroupLeft = function cursorGroupLeft(view) {
    return cursorByGroup(view, !ltrAtCursor(view));
  };
  /**
  Move the selection one group to the right.
  */
  var cursorGroupRight = function cursorGroupRight(view) {
    return cursorByGroup(view, ltrAtCursor(view));
  };
  function interestingNode(state, node, bracketProp) {
    if (node.type.prop(bracketProp)) return true;
    var len = node.to - node.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
    var pos = syntaxTree(state).resolveInner(start.head);
    var bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    // Scan forward through child nodes to see if there's an interesting
    // node ahead.
    for (var at = start.head;;) {
      var next = forward ? pos.childAfter(at) : pos.childBefore(at);
      if (!next) break;
      if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
    }
    var bracket = pos.type.prop(bracketProp),
      match,
      newPos;
    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
    return moveSel(view, function (range) {
      return moveBySyntax(view.state, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the cursor over the next syntactic element to the right.
  */
  var cursorSyntaxRight = function cursorSyntaxRight(view) {
    return moveSel(view, function (range) {
      return moveBySyntax(view.state, range, ltrAtCursor(view));
    });
  };
  function cursorByLine(view, forward) {
    return moveSel(view, function (range) {
      if (!range.empty) return rangeEnd(range, forward);
      var moved = view.moveVertically(range, forward);
      return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
    });
  }
  /**
  Move the selection one line up.
  */
  var cursorLineUp = function cursorLineUp(view) {
    return cursorByLine(view, false);
  };
  /**
  Move the selection one line down.
  */
  var cursorLineDown = function cursorLineDown(view) {
    return cursorByLine(view, true);
  };
  function pageInfo(view) {
    var selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
    var marginTop = 0,
      marginBottom = 0,
      height;
    if (selfScroll) {
      var _iterator6 = _createForOfIteratorHelper$8(view.state.facet(EditorView.scrollMargins)),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var source = _step6.value;
          var margins = source(view);
          if (margins === null || margins === void 0 ? void 0 : margins.top) marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
          if (margins === null || margins === void 0 ? void 0 : margins.bottom) marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      height = view.scrollDOM.clientHeight - marginTop - marginBottom;
    } else {
      height = (view.dom.ownerDocument.defaultView || window).innerHeight;
    }
    return {
      marginTop: marginTop,
      marginBottom: marginBottom,
      selfScroll: selfScroll,
      height: Math.max(view.defaultLineHeight, height - 5)
    };
  }
  function cursorByPage(view, forward) {
    var page = pageInfo(view);
    var state = view.state,
      selection = updateSel(state.selection, function (range) {
        return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
      });
    if (selection.eq(state.selection)) return false;
    var effect;
    if (page.selfScroll) {
      var startPos = view.coordsAtPos(state.selection.main.head);
      var scrollRect = view.scrollDOM.getBoundingClientRect();
      var scrollTop = scrollRect.top + page.marginTop,
        scrollBottom = scrollRect.bottom - page.marginBottom;
      if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom) effect = EditorView.scrollIntoView(selection.main.head, {
        y: "start",
        yMargin: startPos.top - scrollTop
      });
    }
    view.dispatch(setSel(state, selection), {
      effects: effect
    });
    return true;
  }
  /**
  Move the selection one page up.
  */
  var cursorPageUp = function cursorPageUp(view) {
    return cursorByPage(view, false);
  };
  /**
  Move the selection one page down.
  */
  var cursorPageDown = function cursorPageDown(view) {
    return cursorByPage(view, true);
  };
  function moveByLineBoundary(view, start, forward) {
    var line = view.lineBlockAt(start.head),
      moved = view.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      var space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (space && start.head != line.from + space) moved = EditorSelection.cursor(line.from + space);
    }
    return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, true);
    });
  };
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, false);
    });
  };
  /**
  Move the selection one line wrap point to the left.
  */
  var cursorLineBoundaryLeft = function cursorLineBoundaryLeft(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection one line wrap point to the right.
  */
  var cursorLineBoundaryRight = function cursorLineBoundaryRight(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, ltrAtCursor(view));
    });
  };
  /**
  Move the selection to the start of the line.
  */
  var cursorLineStart = function cursorLineStart(view) {
    return moveSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).from, 1);
    });
  };
  /**
  Move the selection to the end of the line.
  */
  var cursorLineEnd = function cursorLineEnd(view) {
    return moveSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).to, -1);
    });
  };
  function toMatchingBracket(state, dispatch, extend) {
    var found = false,
      selection = updateSel(state.selection, function (range) {
        var matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
        if (!matching || !matching.end) return range;
        found = true;
        var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
        return EditorSelection.cursor(head);
      });
    if (!found) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  var cursorMatchingBracket = function cursorMatchingBracket(_ref5) {
    var state = _ref5.state,
      dispatch = _ref5.dispatch;
    return toMatchingBracket(state, dispatch);
  };
  function extendSel(target, how) {
    var selection = updateSel(target.state.selection, function (range) {
      var head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
    });
    if (selection.eq(target.state.selection)) return false;
    target.dispatch(setSel(target.state, selection));
    return true;
  }
  function selectByChar(view, forward) {
    return extendSel(view, function (range) {
      return view.moveByChar(range, forward);
    });
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  var selectCharLeft = function selectCharLeft(view) {
    return selectByChar(view, !ltrAtCursor(view));
  };
  /**
  Move the selection head one character to the right.
  */
  var selectCharRight = function selectCharRight(view) {
    return selectByChar(view, ltrAtCursor(view));
  };
  function selectByGroup(view, forward) {
    return extendSel(view, function (range) {
      return view.moveByGroup(range, forward);
    });
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  var selectGroupLeft = function selectGroupLeft(view) {
    return selectByGroup(view, !ltrAtCursor(view));
  };
  /**
  Move the selection head one group to the right.
  */
  var selectGroupRight = function selectGroupRight(view) {
    return selectByGroup(view, ltrAtCursor(view));
  };
  /**
  Move the selection head over the next syntactic element to the left.
  */
  var selectSyntaxLeft = function selectSyntaxLeft(view) {
    return extendSel(view, function (range) {
      return moveBySyntax(view.state, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection head over the next syntactic element to the right.
  */
  var selectSyntaxRight = function selectSyntaxRight(view) {
    return extendSel(view, function (range) {
      return moveBySyntax(view.state, range, ltrAtCursor(view));
    });
  };
  function selectByLine(view, forward) {
    return extendSel(view, function (range) {
      return view.moveVertically(range, forward);
    });
  }
  /**
  Move the selection head one line up.
  */
  var selectLineUp = function selectLineUp(view) {
    return selectByLine(view, false);
  };
  /**
  Move the selection head one line down.
  */
  var selectLineDown = function selectLineDown(view) {
    return selectByLine(view, true);
  };
  function selectByPage(view, forward) {
    return extendSel(view, function (range) {
      return view.moveVertically(range, forward, pageInfo(view).height);
    });
  }
  /**
  Move the selection head one page up.
  */
  var selectPageUp = function selectPageUp(view) {
    return selectByPage(view, false);
  };
  /**
  Move the selection head one page down.
  */
  var selectPageDown = function selectPageDown(view) {
    return selectByPage(view, true);
  };
  /**
  Move the selection head to the next line boundary.
  */
  var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, true);
    });
  };
  /**
  Move the selection head to the previous line boundary.
  */
  var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, false);
    });
  };
  /**
  Move the selection head one line boundary to the left.
  */
  var selectLineBoundaryLeft = function selectLineBoundaryLeft(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection head one line boundary to the right.
  */
  var selectLineBoundaryRight = function selectLineBoundaryRight(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, ltrAtCursor(view));
    });
  };
  /**
  Move the selection head to the start of the line.
  */
  var selectLineStart = function selectLineStart(view) {
    return extendSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).from);
    });
  };
  /**
  Move the selection head to the end of the line.
  */
  var selectLineEnd = function selectLineEnd(view) {
    return extendSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).to);
    });
  };
  /**
  Move the selection to the start of the document.
  */
  var cursorDocStart = function cursorDocStart(_ref7) {
    var state = _ref7.state,
      dispatch = _ref7.dispatch;
    dispatch(setSel(state, {
      anchor: 0
    }));
    return true;
  };
  /**
  Move the selection to the end of the document.
  */
  var cursorDocEnd = function cursorDocEnd(_ref8) {
    var state = _ref8.state,
      dispatch = _ref8.dispatch;
    dispatch(setSel(state, {
      anchor: state.doc.length
    }));
    return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  var selectDocStart = function selectDocStart(_ref9) {
    var state = _ref9.state,
      dispatch = _ref9.dispatch;
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: 0
    }));
    return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  var selectDocEnd = function selectDocEnd(_ref10) {
    var state = _ref10.state,
      dispatch = _ref10.dispatch;
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: state.doc.length
    }));
    return true;
  };
  /**
  Select the entire document.
  */
  var selectAll = function selectAll(_ref11) {
    var state = _ref11.state,
      dispatch = _ref11.dispatch;
    dispatch(state.update({
      selection: {
        anchor: 0,
        head: state.doc.length
      },
      userEvent: "select"
    }));
    return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  var selectLine = function selectLine(_ref12) {
    var state = _ref12.state,
      dispatch = _ref12.dispatch;
    var ranges = selectedLineBlocks(state).map(function (_ref13) {
      var from = _ref13.from,
        to = _ref13.to;
      return EditorSelection.range(from, Math.min(to + 1, state.doc.length));
    });
    dispatch(state.update({
      selection: EditorSelection.create(ranges),
      userEvent: "select"
    }));
    return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  var selectParentSyntax = function selectParentSyntax(_ref14) {
    var state = _ref14.state,
      dispatch = _ref14.dispatch;
    var selection = updateSel(state.selection, function (range) {
      var tree = syntaxTree(state),
        stack = tree.resolveStack(range.from, 1);
      if (range.empty) {
        var stackBefore = tree.resolveStack(range.from, -1);
        if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to) stack = stackBefore;
      }
      for (var cur = stack; cur; cur = cur.next) {
        var _cur = cur,
          node = _cur.node;
        if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && cur.next) return EditorSelection.range(node.to, node.from);
      }
      return range;
    });
    if (selection.eq(state.selection)) return false;
    dispatch(setSel(state, selection));
    return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  var simplifySelection = function simplifySelection(_ref15) {
    var state = _ref15.state,
      dispatch = _ref15.dispatch;
    var cur = state.selection,
      selection = null;
    if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
    if (!selection) return false;
    dispatch(setSel(state, selection));
    return true;
  };
  function deleteBy(target, by) {
    if (target.state.readOnly) return false;
    var event = "delete.selection",
      state = target.state;
    var changes = state.changeByRange(function (range) {
      var from = range.from,
        to = range.to;
      if (from == to) {
        var towards = by(range);
        if (towards < from) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from = Math.min(from, towards);
        to = Math.max(to, towards);
      } else {
        from = skipAtomic(target, from, false);
        to = skipAtomic(target, to, true);
      }
      return from == to ? {
        range: range
      } : {
        changes: {
          from: from,
          to: to
        },
        range: EditorSelection.cursor(from, from < range.head ? -1 : 1)
      };
    });
    if (changes.changes.empty) return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
    }));
    return true;
  }
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView) {
      var _iterator7 = _createForOfIteratorHelper$8(target.state.facet(EditorView.atomicRanges).map(function (f) {
          return f(target);
        })),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var ranges = _step7.value;
          ranges.between(pos, pos, function (from, to) {
            if (from < pos && to > pos) pos = forward ? to : from;
          });
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
    return pos;
  }
  var deleteByChar = function deleteByChar(target, forward, byIndentUnit) {
    return deleteBy(target, function (range) {
      var pos = range.from,
        state = target.state,
        line = state.doc.lineAt(pos),
        before,
        targetPos;
      if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
        if (before[before.length - 1] == "\t") return pos - 1;
        var col = countColumn(before, state.tabSize),
          drop = col % getIndentUnit(state) || getIndentUnit(state);
        for (var i = 0; i < drop && before[before.length - 1 - i] == " "; i++) pos--;
        targetPos = pos;
      } else {
        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from))) targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
      }
      return targetPos;
    });
  };
  /**
  Delete the selection, or, for cursor selections, the character or
  indentation unit before the cursor.
  */
  var deleteCharBackward = function deleteCharBackward(view) {
    return deleteByChar(view, false, true);
  };
  /**
  Delete the selection or the character after the cursor.
  */
  var deleteCharForward = function deleteCharForward(view) {
    return deleteByChar(view, true, false);
  };
  var deleteByGroup = function deleteByGroup(target, forward) {
    return deleteBy(target, function (range) {
      var pos = range.head,
        state = target.state,
        line = state.doc.lineAt(pos);
      var categorize = state.charCategorizer(pos);
      for (var cat = null;;) {
        if (pos == (forward ? line.to : line.from)) {
          if (pos == range.head && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
          break;
        }
        var next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
        var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
        var nextCat = categorize(nextChar);
        if (cat != null && nextCat != cat) break;
        if (nextChar != " " || pos != range.head) cat = nextCat;
        pos = next;
      }
      return pos;
    });
  };
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  var deleteGroupBackward = function deleteGroupBackward(target) {
    return deleteByGroup(target, false);
  };
  /**
  Delete the selection or forward until the end of the next group.
  */
  var deleteGroupForward = function deleteGroupForward(target) {
    return deleteByGroup(target, true);
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  var deleteToLineEnd = function deleteToLineEnd(view) {
    return deleteBy(view, function (range) {
      var lineEnd = view.lineBlockAt(range.head).to;
      return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
    });
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line or the next line wrap before the cursor.
  */
  var deleteLineBoundaryBackward = function deleteLineBoundaryBackward(view) {
    return deleteBy(view, function (range) {
      var lineStart = view.moveToLineBoundary(range, false).head;
      return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
    });
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line or the next line wrap after the cursor.
  */
  var deleteLineBoundaryForward = function deleteLineBoundaryForward(view) {
    return deleteBy(view, function (range) {
      var lineStart = view.moveToLineBoundary(range, true).head;
      return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
    });
  };
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  var splitLine = function splitLine(_ref17) {
    var state = _ref17.state,
      dispatch = _ref17.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: Text.of(["", ""])
        },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  var transposeChars = function transposeChars(_ref18) {
    var state = _ref18.state,
      dispatch = _ref18.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
        range: range
      };
      var pos = range.from,
        line = state.doc.lineAt(pos);
      var from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
      var to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
      return {
        changes: {
          from: from,
          to: to,
          insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
        },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty) return false;
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "move.character"
    }));
    return true;
  };
  function selectedLineBlocks(state) {
    var blocks = [],
      upto = -1;
    var _iterator8 = _createForOfIteratorHelper$8(state.selection.ranges),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var range = _step8.value;
        var startLine = state.doc.lineAt(range.from),
          endLine = state.doc.lineAt(range.to);
        if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
        if (upto >= startLine.number) {
          var prev = blocks[blocks.length - 1];
          prev.to = endLine.to;
          prev.ranges.push(range);
        } else {
          blocks.push({
            from: startLine.from,
            to: endLine.to,
            ranges: [range]
          });
        }
        upto = endLine.number + 1;
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    return blocks;
  }
  function moveLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    var changes = [],
      ranges = [];
    var _iterator9 = _createForOfIteratorHelper$8(selectedLineBlocks(state)),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var block = _step9.value;
        if (forward ? block.to == state.doc.length : block.from == 0) continue;
        var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
        var size = nextLine.length + 1;
        if (forward) {
          changes.push({
            from: block.to,
            to: nextLine.to
          }, {
            from: block.from,
            insert: nextLine.text + state.lineBreak
          });
          var _iterator10 = _createForOfIteratorHelper$8(block.ranges),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var r = _step10.value;
              ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        } else {
          changes.push({
            from: nextLine.from,
            to: block.from
          }, {
            from: block.to,
            insert: state.lineBreak + nextLine.text
          });
          var _iterator11 = _createForOfIteratorHelper$8(block.ranges),
            _step11;
          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var _r = _step11.value;
              ranges.push(EditorSelection.range(_r.anchor - size, _r.head - size));
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    if (!changes.length) return false;
    dispatch(state.update({
      changes: changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  /**
  Move the selected lines up one line.
  */
  var moveLineUp = function moveLineUp(_ref19) {
    var state = _ref19.state,
      dispatch = _ref19.dispatch;
    return moveLine(state, dispatch, false);
  };
  /**
  Move the selected lines down one line.
  */
  var moveLineDown = function moveLineDown(_ref20) {
    var state = _ref20.state,
      dispatch = _ref20.dispatch;
    return moveLine(state, dispatch, true);
  };
  function copyLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    var changes = [];
    var _iterator12 = _createForOfIteratorHelper$8(selectedLineBlocks(state)),
      _step12;
    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var block = _step12.value;
        if (forward) changes.push({
          from: block.from,
          insert: state.doc.slice(block.from, block.to) + state.lineBreak
        });else changes.push({
          from: block.to,
          insert: state.lineBreak + state.doc.slice(block.from, block.to)
        });
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
    dispatch(state.update({
      changes: changes,
      scrollIntoView: true,
      userEvent: "input.copyline"
    }));
    return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  var copyLineUp = function copyLineUp(_ref21) {
    var state = _ref21.state,
      dispatch = _ref21.dispatch;
    return copyLine(state, dispatch, false);
  };
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  var copyLineDown = function copyLineDown(_ref22) {
    var state = _ref22.state,
      dispatch = _ref22.dispatch;
    return copyLine(state, dispatch, true);
  };
  /**
  Delete selected lines.
  */
  var deleteLine = function deleteLine(view) {
    if (view.state.readOnly) return false;
    var state = view.state,
      changes = state.changes(selectedLineBlocks(state).map(function (_ref23) {
        var from = _ref23.from,
          to = _ref23.to;
        if (from > 0) from--;else if (to < state.doc.length) to++;
        return {
          from: from,
          to: to
        };
      }));
    var selection = updateSel(state.selection, function (range) {
      var dist = undefined;
      if (view.lineWrapping) {
        var block = view.lineBlockAt(range.head),
          pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (pos) dist = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
      }
      return view.moveVertically(range, true, dist);
    }).map(changes);
    view.dispatch({
      changes: changes,
      selection: selection,
      scrollIntoView: true,
      userEvent: "delete.line"
    });
    return true;
  };
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
      from: pos,
      to: pos
    };
    var context = syntaxTree(state).resolveInner(pos);
    var before = context.childBefore(pos),
      after = context.childAfter(pos),
      closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from))) return {
      from: before.to,
      to: after.from
    };
    return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  var insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  var insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return function (_ref26) {
      var state = _ref26.state,
        dispatch = _ref26.dispatch;
      if (state.readOnly) return false;
      var changes = state.changeByRange(function (range) {
        var from = range.from,
          to = range.to,
          line = state.doc.lineAt(from);
        var explode = !atEof && from == to && isBetweenBrackets(state, from);
        if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        var cx = new IndentContext(state, {
          simulateBreak: from,
          simulateDoubleBreak: !!explode
        });
        var indent = getIndentation(cx, from);
        if (indent == null) indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
        while (to < line.to && /\s/.test(line.text[to - line.from])) to++;
        if (explode) {
          from = explode.from;
          to = explode.to;
        } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
        var insert = ["", indentString(state, indent)];
        if (explode) insert.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: {
            from: from,
            to: to,
            insert: Text.of(insert)
          },
          range: EditorSelection.cursor(from + 1 + insert[1].length)
        };
      });
      dispatch(state.update(changes, {
        scrollIntoView: true,
        userEvent: "input"
      }));
      return true;
    };
  }
  function changeBySelectedLine(state, f) {
    var atLine = -1;
    return state.changeByRange(function (range) {
      var changes = [];
      for (var pos = range.from; pos <= range.to;) {
        var line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      var changeSet = state.changes(changes);
      return {
        changes: changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  var indentSelection = function indentSelection(_ref27) {
    var state = _ref27.state,
      dispatch = _ref27.dispatch;
    if (state.readOnly) return false;
    var updated = Object.create(null);
    var context = new IndentContext(state, {
      overrideIndentation: function overrideIndentation(start) {
        var found = updated[start];
        return found == null ? -1 : found;
      }
    });
    var changes = changeBySelectedLine(state, function (line, changes, range) {
      var indent = getIndentation(context, line.from);
      if (indent == null) return;
      if (!/\S/.test(line.text)) indent = 0;
      var cur = /^\s*/.exec(line.text)[0];
      var norm = indentString(state, indent);
      if (cur != norm || range.from < line.from + cur.length) {
        updated[line.from] = indent;
        changes.push({
          from: line.from,
          to: line.from + cur.length,
          insert: norm
        });
      }
    });
    if (!changes.changes.empty) dispatch(state.update(changes, {
      userEvent: "indent"
    }));
    return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  var indentMore = function indentMore(_ref28) {
    var state = _ref28.state,
      dispatch = _ref28.dispatch;
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
      changes.push({
        from: line.from,
        insert: state.facet(indentUnit)
      });
    }), {
      userEvent: "input.indent"
    }));
    return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  var indentLess = function indentLess(_ref29) {
    var state = _ref29.state,
      dispatch = _ref29.dispatch;
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
      var space = /^\s*/.exec(line.text)[0];
      if (!space) return;
      var col = countColumn(space, state.tabSize),
        keep = 0;
      var insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;
      changes.push({
        from: line.from + keep,
        to: line.from + space.length,
        insert: insert.slice(keep)
      });
    }), {
      userEvent: "delete.dedent"
    }));
    return true;
  };
  /**
  Enables or disables
  [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
  prevents the editor's key bindings from capturing Tab or
  Shift-Tab, making it possible for the user to move focus out of
  the editor with the keyboard.
  */
  var toggleTabFocusMode = function toggleTabFocusMode(view) {
    view.setTabFocusMode();
    return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.

   - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  var emacsStyleKeymap = [{
    key: "Ctrl-b",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Ctrl-f",
    run: cursorCharRight,
    shift: selectCharRight
  }, {
    key: "Ctrl-p",
    run: cursorLineUp,
    shift: selectLineUp
  }, {
    key: "Ctrl-n",
    run: cursorLineDown,
    shift: selectLineDown
  }, {
    key: "Ctrl-a",
    run: cursorLineStart,
    shift: selectLineStart
  }, {
    key: "Ctrl-e",
    run: cursorLineEnd,
    shift: selectLineEnd
  }, {
    key: "Ctrl-d",
    run: deleteCharForward
  }, {
    key: "Ctrl-h",
    run: deleteCharBackward
  }, {
    key: "Ctrl-k",
    run: deleteToLineEnd
  }, {
    key: "Ctrl-Alt-h",
    run: deleteGroupBackward
  }, {
    key: "Ctrl-o",
    run: splitLine
  }, {
    key: "Ctrl-t",
    run: transposeChars
  }, {
    key: "Ctrl-v",
    run: cursorPageDown
  }];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)

   - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
   - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
  */
  var standardKeymap = /*@__PURE__*/[{
    key: "ArrowLeft",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Mod-ArrowLeft",
    mac: "Alt-ArrowLeft",
    run: cursorGroupLeft,
    shift: selectGroupLeft,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowLeft",
    run: cursorLineBoundaryLeft,
    shift: selectLineBoundaryLeft,
    preventDefault: true
  }, {
    key: "ArrowRight",
    run: cursorCharRight,
    shift: selectCharRight,
    preventDefault: true
  }, {
    key: "Mod-ArrowRight",
    mac: "Alt-ArrowRight",
    run: cursorGroupRight,
    shift: selectGroupRight,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowRight",
    run: cursorLineBoundaryRight,
    shift: selectLineBoundaryRight,
    preventDefault: true
  }, {
    key: "ArrowUp",
    run: cursorLineUp,
    shift: selectLineUp,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowUp",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    mac: "Ctrl-ArrowUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "ArrowDown",
    run: cursorLineDown,
    shift: selectLineDown,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowDown",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    mac: "Ctrl-ArrowDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "PageUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "PageDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "Home",
    run: cursorLineBoundaryBackward,
    shift: selectLineBoundaryBackward,
    preventDefault: true
  }, {
    key: "Mod-Home",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    key: "End",
    run: cursorLineBoundaryForward,
    shift: selectLineBoundaryForward,
    preventDefault: true
  }, {
    key: "Mod-End",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    key: "Enter",
    run: insertNewlineAndIndent,
    shift: insertNewlineAndIndent
  }, {
    key: "Mod-a",
    run: selectAll
  }, {
    key: "Backspace",
    run: deleteCharBackward,
    shift: deleteCharBackward
  }, {
    key: "Delete",
    run: deleteCharForward
  }, {
    key: "Mod-Backspace",
    mac: "Alt-Backspace",
    run: deleteGroupBackward
  }, {
    key: "Mod-Delete",
    mac: "Alt-Delete",
    run: deleteGroupForward
  }, {
    mac: "Mod-Backspace",
    run: deleteLineBoundaryBackward
  }, {
    mac: "Mod-Delete",
    run: deleteLineBoundaryForward
  }].concat(/*@__PURE__*/emacsStyleKeymap.map(function (b) {
    return {
      mac: b.key,
      run: b.run,
      shift: b.shift
    };
  }));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
  */
  var defaultKeymap = /*@__PURE__*/[{
    key: "Alt-ArrowLeft",
    mac: "Ctrl-ArrowLeft",
    run: cursorSyntaxLeft,
    shift: selectSyntaxLeft
  }, {
    key: "Alt-ArrowRight",
    mac: "Ctrl-ArrowRight",
    run: cursorSyntaxRight,
    shift: selectSyntaxRight
  }, {
    key: "Alt-ArrowUp",
    run: moveLineUp
  }, {
    key: "Shift-Alt-ArrowUp",
    run: copyLineUp
  }, {
    key: "Alt-ArrowDown",
    run: moveLineDown
  }, {
    key: "Shift-Alt-ArrowDown",
    run: copyLineDown
  }, {
    key: "Escape",
    run: simplifySelection
  }, {
    key: "Mod-Enter",
    run: insertBlankLine
  }, {
    key: "Alt-l",
    mac: "Ctrl-l",
    run: selectLine
  }, {
    key: "Mod-i",
    run: selectParentSyntax,
    preventDefault: true
  }, {
    key: "Mod-[",
    run: indentLess
  }, {
    key: "Mod-]",
    run: indentMore
  }, {
    key: "Mod-Alt-\\",
    run: indentSelection
  }, {
    key: "Shift-Mod-k",
    run: deleteLine
  }, {
    key: "Shift-Mod-\\",
    run: cursorMatchingBracket
  }, {
    key: "Mod-/",
    run: toggleComment
  }, {
    key: "Alt-A",
    run: toggleBlockComment
  }, {
    key: "Ctrl-m",
    mac: "Shift-Alt-m",
    run: toggleTabFocusMode
  }].concat(standardKeymap);
  /**
  A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
  Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
  Please see the [Tab example](../../examples/tab/) before using
  this.
  */
  var indentWithTab = {
    key: "Tab",
    run: indentMore,
    shift: indentLess
  };

  /**
  A parse stack. These are used internally by the parser to track
  parsing progress. They also provide some properties and methods
  that external code such as a tokenizer can use to get information
  about the parse state.
  */
  class Stack {
      /**
      @internal
      */
      constructor(
      /**
      The parse that this stack is part of @internal
      */
      p, 
      /**
      Holds state, input pos, buffer index triplets for all but the
      top state @internal
      */
      stack, 
      /**
      The current parse state @internal
      */
      state, 
      // The position at which the next reduce should take place. This
      // can be less than `this.pos` when skipped expressions have been
      // added to the stack (which should be moved outside of the next
      // reduction)
      /**
      @internal
      */
      reducePos, 
      /**
      The input position up to which this stack has parsed.
      */
      pos, 
      /**
      The dynamic score of the stack, including dynamic precedence
      and error-recovery penalties
      @internal
      */
      score, 
      // The output buffer. Holds (type, start, end, size) quads
      // representing nodes created by the parser, where `size` is
      // amount of buffer array entries covered by this node.
      /**
      @internal
      */
      buffer, 
      // The base offset of the buffer. When stacks are split, the split
      // instance shared the buffer history with its parent up to
      // `bufferBase`, which is the absolute offset (including the
      // offset of previous splits) into the buffer at which this stack
      // starts writing.
      /**
      @internal
      */
      bufferBase, 
      /**
      @internal
      */
      curContext, 
      /**
      @internal
      */
      lookAhead = 0, 
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /**
      @internal
      */
      parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
      }
      /**
      @internal
      */
      toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /**
      @internal
      */
      static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      get context() { return this.curContext ? this.curContext.context : null; }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
      pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
      reduce(action) {
          var _a;
          let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
          let { parser } = this.p;
          let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
          if (lookaheadRecord)
              this.setLookAhead(this.pos);
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
              this.score += dPrec;
          if (depth == 0) {
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm)
                  this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
              this.reduceContext(type, this.reducePos);
              return;
          }
          // Find the base index into `this.stack`, content after which will
          // be dropped. Note that with `StayFlag` reductions we need to
          // consume two extra frames (the dummy parent node for the skipped
          // expression and the state that we'll be staying in, which should
          // be moved to `this.state`).
          let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
          let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
          // This is a kludge to try and detect overly deep left-associative
          // trees, which will not increase the parse stack depth and thus
          // won't be caught by the regular stack-depth limit check.
          if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
              if (start == this.p.lastBigReductionStart) {
                  this.p.bigReductionCount++;
                  this.p.lastBigReductionSize = size;
              }
              else if (this.p.lastBigReductionSize < size) {
                  this.p.bigReductionCount = 1;
                  this.p.lastBigReductionStart = start;
                  this.p.lastBigReductionSize = size;
              }
          }
          let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
          // Store normal terms or `R -> R R` repeat reductions
          if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
              let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144 /* Action.StayFlag */) {
              this.state = this.stack[base];
          }
          else {
              let baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
              this.stack.pop();
          this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
      storeNode(term, start, end, size = 4, mustSink = false) {
          if (term == 0 /* Term.Err */ &&
              (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
              // Try to omit/merge adjacent error nodes
              let cur = this, top = this.buffer.length;
              if (top == 0 && cur.parent) {
                  top = cur.bufferBase - cur.parent.bufferBase;
                  cur = cur.parent;
              }
              if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                  if (start == end)
                      return;
                  if (cur.buffer[top - 2] >= start) {
                      cur.buffer[top - 2] = end;
                      return;
                  }
              }
          }
          if (!mustSink || this.pos == end) { // Simple case, just append
              this.buffer.push(term, start, end, size);
          }
          else { // There may be skipped nodes that have to be moved forward
              let index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                  let mustMove = false;
                  for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                      if (this.buffer[scan - 1] >= 0) {
                          mustMove = true;
                          break;
                      }
                  }
                  if (mustMove)
                      while (index > 0 && this.buffer[index - 2] > end) {
                          // Move this record forward
                          this.buffer[index] = this.buffer[index - 4];
                          this.buffer[index + 1] = this.buffer[index - 3];
                          this.buffer[index + 2] = this.buffer[index - 2];
                          this.buffer[index + 3] = this.buffer[index - 1];
                          index -= 4;
                          if (size > 4)
                              size -= 4;
                      }
              }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
          }
      }
      // Apply a shift action
      /**
      @internal
      */
      shift(action, type, start, end) {
          if (action & 131072 /* Action.GotoFlag */) {
              this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
          }
          else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
              let nextState = action, { parser } = this.p;
              if (end > this.pos || type <= parser.maxNode) {
                  this.pos = end;
                  if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                      this.reducePos = end;
              }
              this.pushState(nextState, start);
              this.shiftContext(type, start);
              if (type <= parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
          else { // Shift-and-stay, which means this is a skipped token
              this.pos = end;
              this.shiftContext(type, start);
              if (type <= this.p.parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
      }
      // Apply an action
      /**
      @internal
      */
      apply(action, next, nextStart, nextEnd) {
          if (action & 65536 /* Action.ReduceFlag */)
              this.reduce(action);
          else
              this.shift(action, next, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
      useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
      split() {
          let parent = this;
          let off = parent.buffer.length;
          // Because the top of the buffer (after this.pos) may be mutated
          // to reorder reductions and skipped tokens, and shared buffers
          // should be immutable, this copies any outstanding skipped tokens
          // to the new buffer, and puts the base pointer before them.
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
              off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          // Make sure parent points to an actual parent with content, if there is such a parent.
          while (parent && base == parent.bufferBase)
              parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
      recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
              this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190 /* Recover.Delete */;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
      canShift(term) {
          for (let sim = new SimulatedStack(this);;) {
              let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
              if (action == 0)
                  return false;
              if ((action & 65536 /* Action.ReduceFlag */) == 0)
                  return true;
              sim.reduce(action);
          }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
      recoverByInsert(next) {
          if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
              return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
              let best = [];
              for (let i = 0, s; i < nextStates.length; i += 2) {
                  if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                      best.push(nextStates[i], s);
              }
              if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                  for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                      let s = nextStates[i + 1];
                      if (!best.some((v, i) => (i & 1) && v == s))
                          best.push(nextStates[i], s);
                  }
              nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
              let s = nextStates[i + 1];
              if (s == this.state)
                  continue;
              let stack = this.split();
              stack.pushState(s, this.pos);
              stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
              stack.shiftContext(nextStates[i], this.pos);
              stack.reducePos = this.pos;
              stack.score -= 200 /* Recover.Insert */;
              result.push(stack);
          }
          return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
      forceReduce() {
          let { parser } = this.p;
          let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
          if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
              return false;
          if (!parser.validAction(this.state, reduce)) {
              let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
              let target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                  let backup = this.findForcedReduction();
                  if (backup == null)
                      return false;
                  reduce = backup;
              }
              this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
              this.score -= 100 /* Recover.Reduce */;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
      findForcedReduction() {
          let { parser } = this.p, seen = [];
          let explore = (state, depth) => {
              if (seen.includes(state))
                  return;
              seen.push(state);
              return parser.allActions(state, (action) => {
                  if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                  else if (action & 65536 /* Action.ReduceFlag */) {
                      let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                      if (rDepth > 1) {
                          let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                          if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                              return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                      }
                  }
                  else {
                      let found = explore(action, depth + 1);
                      if (found != null)
                          return found;
                  }
              });
          };
          return explore(this.state, 0);
      }
      /**
      @internal
      */
      forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
              if (!this.forceReduce()) {
                  this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                  break;
              }
          }
          return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
      get deadEnd() {
          if (this.stack.length != 3)
              return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
              !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
      restart() {
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          this.state = this.stack[0];
          this.stack.length = 0;
      }
      /**
      @internal
      */
      sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
              return false;
          for (let i = 0; i < this.stack.length; i += 3)
              if (this.stack[i] != other.stack[i])
                  return false;
          return true;
      }
      /**
      Get the parser used by this stack.
      */
      get parser() { return this.p.parser; }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
      dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
      shiftContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      reduceContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /**
      @internal
      */
      emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
              this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
      emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
              this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
      updateContext(context) {
          if (context != this.curContext.context) {
              let newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash)
                  this.emitContext();
              this.curContext = newCx;
          }
      }
      /**
      @internal
      */
      setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
          }
      }
      /**
      @internal
      */
      close() {
          if (this.curContext && this.curContext.tracker.strict)
              this.emitContext();
          if (this.lookAhead > 0)
              this.emitLookAhead();
      }
  }
  class StackContext {
      constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
  }
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
      constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
      }
      reduce(action) {
          let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
          if (depth == 0) {
              if (this.stack == this.start.stack)
                  this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
          }
          else {
              this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
      }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
      constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
              this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
          }
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
              this.maybeNext();
      }
      fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
      }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
      if (typeof input != "string")
          return input;
      let array = null;
      for (let pos = 0, out = 0; pos < input.length;) {
          let value = 0;
          for (;;) {
              let next = input.charCodeAt(pos++), stop = false;
              if (next == 126 /* Encode.BigValCode */) {
                  value = 65535 /* Encode.BigVal */;
                  break;
              }
              if (next >= 92 /* Encode.Gap2 */)
                  next--;
              if (next >= 34 /* Encode.Gap1 */)
                  next--;
              let digit = next - 32 /* Encode.Start */;
              if (digit >= 46 /* Encode.Base */) {
                  digit -= 46 /* Encode.Base */;
                  stop = true;
              }
              value += digit;
              if (stop)
                  break;
              value *= 46 /* Encode.Base */;
          }
          if (array)
              array[out++] = value;
          else
              array = new Type(value);
      }
      return array;
  }

  class CachedToken {
      constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
      }
  }
  const nullToken = new CachedToken;
  /**
  [Tokenizers](#lr.ExternalTokenizer) interact with the input
  through this interface. It presents the input as a stream of
  characters, tracking lookahead and hiding the complexity of
  [ranges](#common.Parser.parse^ranges) from tokenizer code.
  */
  class InputStream {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      input, 
      /**
      @internal
      */
      ranges) {
          this.input = input;
          this.ranges = ranges;
          /**
          @internal
          */
          this.chunk = "";
          /**
          @internal
          */
          this.chunkOff = 0;
          /**
          Backup chunk
          */
          this.chunk2 = "";
          this.chunk2Pos = 0;
          /**
          The character code of the next code unit in the input, or -1
          when the stream is at the end of the input.
          */
          this.next = -1;
          /**
          @internal
          */
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
      }
      /**
      @internal
      */
      resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
              if (!index)
                  return null;
              let next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1)
                  return null;
              let next = this.ranges[++index];
              pos += next.from - range.to;
              range = next;
          }
          return pos;
      }
      /**
      @internal
      */
      clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
              return pos;
          for (let range of this.ranges)
              if (range.to > pos)
                  return Math.max(pos, range.from);
          return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
      peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
          }
          else {
              let resolved = this.resolveOffset(offset, 1);
              if (resolved == null)
                  return -1;
              pos = resolved;
              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                  result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              }
              else {
                  let i = this.rangeIndex, range = this.range;
                  while (range.to <= pos)
                      range = this.ranges[++i];
                  this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                  if (pos + this.chunk2.length > range.to)
                      this.chunk2 = this.chunk2.slice(0, range.to - pos);
                  result = this.chunk2.charCodeAt(0);
              }
          }
          if (pos >= this.token.lookAhead)
              this.token.lookAhead = pos + 1;
          return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
      acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
              throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
      }
      /**
      Accept a token ending at a specific given position.
      */
      acceptTokenTo(token, endPos) {
          this.token.value = token;
          this.token.end = endPos;
      }
      getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              let { chunk, chunkPos } = this;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
          }
          else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              let nextChunk = this.input.chunk(this.pos);
              let end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
          }
      }
      readNext() {
          if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length)
                  return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
      advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1)
                  return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
              this.token.lookAhead = this.pos + 1;
          return this.readNext();
      }
      setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
      }
      /**
      @internal
      */
      reset(pos, token) {
          if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
          }
          else {
              this.token = nullToken;
          }
          if (this.pos != pos) {
              this.pos = pos;
              if (pos == this.end) {
                  this.setDone();
                  return this;
              }
              while (pos < this.range.from)
                  this.range = this.ranges[--this.rangeIndex];
              while (pos >= this.range.to)
                  this.range = this.ranges[++this.rangeIndex];
              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                  this.chunkOff = pos - this.chunkPos;
              }
              else {
                  this.chunk = "";
                  this.chunkOff = 0;
              }
              this.readNext();
          }
          return this;
      }
      /**
      @internal
      */
      read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
          if (from >= this.range.from && to <= this.range.to)
              return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
              if (r.from >= to)
                  break;
              if (r.to > from)
                  result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
      }
  }
  /**
  @internal
  */
  class TokenGroup {
      constructor(data, id) {
          this.data = data;
          this.id = id;
      }
      token(input, stack) {
          let { parser } = stack.p;
          readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
      }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /**
  @hide
  */
  class LocalTokenGroup {
      constructor(data, precTable, elseToken) {
          this.precTable = precTable;
          this.elseToken = elseToken;
          this.data = typeof data == "string" ? decodeArray(data) : data;
      }
      token(input, stack) {
          let start = input.pos, skipped = 0;
          for (;;) {
              let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
              readToken(this.data, input, stack, 0, this.data, this.precTable);
              if (input.token.value > -1)
                  break;
              if (this.elseToken == null)
                  return;
              if (!atEof)
                  skipped++;
              if (nextPos == null)
                  break;
              input.reset(nextPos, input.token);
          }
          if (skipped) {
              input.reset(start, input.token);
              input.acceptToken(this.elseToken, skipped);
          }
      }
  }
  LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /**
  `@external tokens` declarations in the grammar should resolve to
  an instance of this class.
  */
  class ExternalTokenizer {
      /**
      Create a tokenizer. The first argument is the function that,
      given an input stream, scans for the types of tokens it
      recognizes at the stream's position, and calls
      [`acceptToken`](#lr.InputStream.acceptToken) when it finds
      one.
      */
      constructor(
      /**
      @internal
      */
      token, options = {}) {
          this.token = token;
          this.contextual = !!options.contextual;
          this.fallback = !!options.fallback;
          this.extend = !!options.extend;
      }
  }
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group, precTable, precOffset) {
      let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
      scan: for (;;) {
          if ((groupMask & data[state]) == 0)
              break;
          let accEnd = data[state + 1];
          // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens
          for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                  let term = data[i];
                  if (dialect.allows(term) &&
                      (input.token.value == -1 || input.token.value == term ||
                          overrides(term, input.token.value, precTable, precOffset))) {
                      input.acceptToken(term);
                      break;
                  }
              }
          let next = input.next, low = 0, high = data[state + 2];
          // Special case for EOF
          if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
              state = data[accEnd + high * 3 - 1];
              continue scan;
          }
          // Do a binary search on the state's edges
          for (; low < high;) {
              let mid = (low + high) >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1] || 0x10000;
              if (next < from)
                  high = mid;
              else if (next >= to)
                  low = mid + 1;
              else {
                  state = data[index + 2];
                  input.advance();
                  continue scan;
              }
          }
          break;
      }
  }
  function findOffset(data, start, term) {
      for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
          if (next == term)
              return i - start;
      return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
      let iPrev = findOffset(tableData, tableOffset, prev);
      return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }

  // Environment variable used to control console output
  const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  let stackIDs = null;
  function cutAt(tree, pos, side) {
      let cursor = tree.cursor(IterMode.IncludeAnonymous);
      cursor.moveTo(pos);
      for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
              for (;;) {
                  if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                      return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                          : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                  if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                      break;
                  if (!cursor.parent())
                      return side < 0 ? 0 : tree.length;
              }
      }
  }
  let FragmentCursor$1 = class FragmentCursor {
      constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
      }
      nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
              while (this.trees.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
              }
              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
          }
          else {
              this.nextStart = 1e9;
          }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
          if (pos < this.nextStart)
              return null;
          while (this.fragment && this.safeTo <= pos)
              this.nextFragment();
          if (!this.fragment)
              return null;
          for (;;) {
              let last = this.trees.length - 1;
              if (last < 0) { // End of tree
                  this.nextFragment();
                  return null;
              }
              let top = this.trees[last], index = this.index[last];
              if (index == top.children.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
                  continue;
              }
              let next = top.children[index];
              let start = this.start[last] + top.positions[index];
              if (start > pos) {
                  this.nextStart = start;
                  return null;
              }
              if (next instanceof Tree) {
                  if (start == pos) {
                      if (start < this.safeFrom)
                          return null;
                      let end = start + next.length;
                      if (end <= this.safeTo) {
                          let lookAhead = next.prop(NodeProp.lookAhead);
                          if (!lookAhead || end + lookAhead < this.fragment.to)
                              return next;
                      }
                  }
                  this.index[last]++;
                  if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                      this.trees.push(next);
                      this.start.push(start);
                      this.index.push(0);
                  }
              }
              else {
                  this.index[last]++;
                  this.nextStart = start + next.length;
              }
          }
      }
  };
  class TokenCache {
      constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(_ => new CachedToken);
      }
      getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
              if (((1 << i) & mask) == 0)
                  continue;
              let tokenizer = tokenizers[i], token = this.tokens[i];
              if (main && !tokenizer.fallback)
                  continue;
              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                  this.updateCachedToken(token, tokenizer, stack);
                  token.mask = mask;
                  token.context = context;
              }
              if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                  lookAhead = Math.max(token.lookAhead, lookAhead);
              if (token.value != 0 /* Term.Err */) {
                  let startIndex = actionIndex;
                  if (token.extended > -1)
                      actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                  actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                  if (!tokenizer.extend) {
                      main = token;
                      if (actionIndex > startIndex)
                          break;
                  }
              }
          }
          while (this.actions.length > actionIndex)
              this.actions.pop();
          if (lookAhead)
              stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
              main = new CachedToken;
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
      }
      getMainToken(stack) {
          if (this.mainToken)
              return this.mainToken;
          let main = new CachedToken, { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
          return main;
      }
      updateCachedToken(token, tokenizer, stack) {
          let start = this.stream.clipPos(stack.pos);
          tokenizer.token(this.stream.reset(start, token), stack);
          if (token.value > -1) {
              let { parser } = stack.p;
              for (let i = 0; i < parser.specialized.length; i++)
                  if (parser.specialized[i] == token.value) {
                      let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                      if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                          if ((result & 1) == 0 /* Specialize.Specialize */)
                              token.value = result >> 1;
                          else
                              token.extended = result >> 1;
                          break;
                      }
                  }
          }
          else {
              token.value = 0 /* Term.Err */;
              token.end = this.stream.clipPos(start + 1);
          }
      }
      putAction(action, token, end, index) {
          // Don't add duplicate actions
          for (let i = 0; i < index; i += 3)
              if (this.actions[i] == action)
                  return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
      }
      addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
              for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                  if (data[i] == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */) {
                          i = pair(data, i + 2);
                      }
                      else {
                          if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                              index = this.putAction(pair(data, i + 2), token, end, index);
                          break;
                      }
                  }
                  if (data[i] == token)
                      index = this.putAction(pair(data, i + 1), token, end, index);
              }
          }
          return index;
      }
  }
  class Parse {
      constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.lastBigReductionStart = -1;
          this.lastBigReductionSize = 0;
          this.bigReductionCount = 0;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
              ? new FragmentCursor$1(fragments, parser.nodeSet) : null;
      }
      get parsedPos() {
          return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          // This will hold stacks beyond `pos`.
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          // If a large amount of reductions happened with the same start
          // position, force the stack out of that production in order to
          // avoid creating a tree too deep to recurse through.
          // (This is an ugly kludge, because unfortunately there is no
          // straightforward, cheap way to check for this happening, due to
          // the history of reductions only being available in an
          // expensive-to-access format in the stack buffers.)
          if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
              let [s] = stacks;
              while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
              this.bigReductionCount = this.lastBigReductionSize = 0;
          }
          // Keep advancing any stacks at `pos` until they either move
          // forward or can't be advanced. Gather stacks that can't be
          // advanced further in `stopped`.
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i];
              for (;;) {
                  this.tokens.mainToken = null;
                  if (stack.pos > pos) {
                      newStacks.push(stack);
                  }
                  else if (this.advanceStack(stack, newStacks, stacks)) {
                      continue;
                  }
                  else {
                      if (!stopped) {
                          stopped = [];
                          stoppedTokens = [];
                      }
                      stopped.push(stack);
                      let tok = this.tokens.getMainToken(stack);
                      stoppedTokens.push(tok.value, tok.end);
                  }
                  break;
              }
          }
          if (!newStacks.length) {
              let finished = stopped && findFinished(stopped);
              if (finished) {
                  if (verbose)
                      console.log("Finish with " + this.stackID(finished));
                  return this.stackToTree(finished);
              }
              if (this.parser.strict) {
                  if (verbose && stopped)
                      console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                  throw new SyntaxError("No parse at " + pos);
              }
              if (!this.recovering)
                  this.recovering = 5 /* Rec.Distance */;
          }
          if (this.recovering && stopped) {
              let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                  : this.runRecovery(stopped, stoppedTokens, newStacks);
              if (finished) {
                  if (verbose)
                      console.log("Force-finish " + this.stackID(finished));
                  return this.stackToTree(finished.forceAll());
              }
          }
          if (this.recovering) {
              let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
              if (newStacks.length > maxRemaining) {
                  newStacks.sort((a, b) => b.score - a.score);
                  while (newStacks.length > maxRemaining)
                      newStacks.pop();
              }
              if (newStacks.some(s => s.reducePos > pos))
                  this.recovering--;
          }
          else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (let i = 0; i < newStacks.length - 1; i++) {
                  let stack = newStacks[i];
                  for (let j = i + 1; j < newStacks.length; j++) {
                      let other = newStacks[j];
                      if (stack.sameState(other) ||
                          stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                          if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                              newStacks.splice(j--, 1);
                          }
                          else {
                              newStacks.splice(i--, 1);
                              continue outer;
                          }
                      }
                  }
              }
              if (newStacks.length > 12 /* Rec.MaxStackCount */)
                  newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
              if (newStacks[i].pos < this.minStackPos)
                  this.minStackPos = newStacks[i].pos;
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
              return stack.forceReduce() ? stack : null;
          if (this.fragments) {
              let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
              for (let cached = this.fragments.nodeAt(start); cached;) {
                  let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                  if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                      stack.useNode(cached, match);
                      if (verbose)
                          console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                      return true;
                  }
                  if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                      break;
                  let inner = cached.children[0];
                  if (inner instanceof Tree && cached.positions[0] == 0)
                      cached = inner;
                  else
                      break;
              }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
          if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose)
                  console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
              return true;
          }
          if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
              while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length;) {
              let action = actions[i++], term = actions[i++], end = actions[i++];
              let last = i == actions.length || !split;
              let localStack = last ? stack : stack.split();
              let main = this.tokens.mainToken;
              localStack.apply(action, term, main ? main.start : localStack.pos, end);
              if (verbose)
                  console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
              if (last)
                  return true;
              else if (localStack.pos > start)
                  stacks.push(localStack);
              else
                  split.push(localStack);
          }
          return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (;;) {
              if (!this.advanceStack(stack, null, null))
                  return false;
              if (stack.pos > pos) {
                  pushStackDedup(stack, newStacks);
                  return true;
              }
          }
      }
      runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
              let base = verbose ? this.stackID(stack) + " -> " : "";
              if (stack.deadEnd) {
                  if (restarted)
                      continue;
                  restarted = true;
                  stack.restart();
                  if (verbose)
                      console.log(base + this.stackID(stack) + " (restarted)");
                  let done = this.advanceFully(stack, newStacks);
                  if (done)
                      continue;
              }
              let force = stack.split(), forceBase = base;
              for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                  if (verbose)
                      console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                  let done = this.advanceFully(force, newStacks);
                  if (done)
                      break;
                  if (verbose)
                      forceBase = this.stackID(force) + " -> ";
              }
              for (let insert of stack.recoverByInsert(token)) {
                  if (verbose)
                      console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
              }
              if (this.stream.end > stack.pos) {
                  if (tokenEnd == stack.pos) {
                      tokenEnd++;
                      token = 0 /* Term.Err */;
                  }
                  stack.recoverByDelete(token, tokenEnd);
                  if (verbose)
                      console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                  pushStackDedup(stack, newStacks);
              }
              else if (!finished || finished.score < stack.score) {
                  finished = stack;
              }
          }
          return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
          stack.close();
          return Tree.build({ buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm });
      }
      stackID(stack) {
          let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
          if (!id)
              stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
          return id + stack;
      }
  }
  function pushStackDedup(stack, newStacks) {
      for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
              if (newStacks[i].score < stack.score)
                  newStacks[i] = stack;
              return;
          }
      }
      newStacks.push(stack);
  }
  class Dialect {
      constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
      }
      allows(term) { return !this.disabled || this.disabled[term] == 0; }
  }
  const id = x => x;
  /**
  Context trackers are used to track stateful context (such as
  indentation in the Python grammar, or parent elements in the XML
  grammar) needed by external tokenizers. You declare them in a
  grammar file as `@context exportName from "module"`.

  Context values should be immutable, and can be updated (replaced)
  on shift or reduce actions.

  The export used in a `@context` declaration should be of this
  type.
  */
  class ContextTracker {
      /**
      Define a context tracker.
      */
      constructor(spec) {
          this.start = spec.start;
          this.shift = spec.shift || id;
          this.reduce = spec.reduce || id;
          this.reuse = spec.reuse || id;
          this.hash = spec.hash || (() => 0);
          this.strict = spec.strict !== false;
      }
  }
  /**
  Holds the parse tables for a given grammar, as generated by
  `lezer-generator`, and provides [methods](#common.Parser) to parse
  content with.
  */
  class LRParser extends Parser {
      /**
      @internal
      */
      constructor(spec) {
          super();
          /**
          @internal
          */
          this.wrappers = [];
          if (spec.version != 14 /* File.Version */)
              throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
              nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
              nodeProps.push([]);
          function setProp(nodeID, prop, value) {
              nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
              for (let propSpec of spec.nodeProps) {
                  let prop = propSpec[0];
                  if (typeof prop == "string")
                      prop = NodeProp[prop];
                  for (let i = 1; i < propSpec.length;) {
                      let next = propSpec[i++];
                      if (next >= 0) {
                          setProp(next, prop, propSpec[i++]);
                      }
                      else {
                          let value = propSpec[i + -next];
                          for (let j = -next; j > 0; j--)
                              setProp(propSpec[i++], prop, value);
                          i++;
                      }
                  }
              }
          this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
              name: i >= this.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
              this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
              this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Get a goto table entry @internal
      */
      getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
              return -1;
          for (let pos = table[term + 1];;) {
              let groupTag = table[pos++], last = groupTag & 1;
              let target = table[pos++];
              if (last && loose)
                  return target;
              for (let end = pos + (groupTag >> 1); pos < end; pos++)
                  if (table[pos] == state)
                      return target;
              if (last)
                  return -1;
          }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
      hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
              for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                  if ((next = data[i]) == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */)
                          next = data[i = pair(data, i + 2)];
                      else if (data[i + 1] == 2 /* Seq.Other */)
                          return pair(data, i + 2);
                      else
                          break;
                  }
                  if (next == terminal || next == 0 /* Term.Err */)
                      return pair(data, i + 1);
              }
          }
          return 0;
      }
      /**
      @internal
      */
      stateSlot(state, slot) {
          return this.states[(state * 6 /* ParseState.Size */) + slot];
      }
      /**
      @internal
      */
      stateFlag(state, flag) {
          return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
      }
      /**
      @internal
      */
      validAction(state, action) {
          return !!this.allActions(state, a => a == action ? true : null);
      }
      /**
      @internal
      */
      allActions(state, action) {
          let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
          let result = deflt ? action(deflt) : undefined;
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              result = action(pair(this.data, i + 1));
          }
          return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
      nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                  let value = this.data[i + 1];
                  if (!result.some((v, i) => (i & 1) && v == value))
                      result.push(this.data[i], value);
              }
          }
          return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
      configure(config) {
          // Hideous reflection-based kludge to make it easy to create a
          // slightly modified copy of a parser.
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
              copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
              let info = this.topRules[config.top];
              if (!info)
                  throw new RangeError(`Invalid top rule name ${config.top}`);
              copy.top = info;
          }
          if (config.tokenizers)
              copy.tokenizers = this.tokenizers.map(t => {
                  let found = config.tokenizers.find(r => r.from == t);
                  return found ? found.to : t;
              });
          if (config.specializers) {
              copy.specializers = this.specializers.slice();
              copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                  let found = config.specializers.find(r => r.from == s.external);
                  if (!found)
                      return s;
                  let spec = Object.assign(Object.assign({}, s), { external: found.to });
                  copy.specializers[i] = getSpecializer(spec);
                  return spec;
              });
          }
          if (config.contextTracker)
              copy.context = config.contextTracker;
          if (config.dialect)
              copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
              copy.strict = config.strict;
          if (config.wrap)
              copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
              copy.bufferLength = config.bufferLength;
          return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
      hasWrappers() {
          return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
      getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
      get eofTerm() { return this.maxNode + 1; }
      /**
      The type of top node produced by the parser.
      */
      get topNode() { return this.nodeSet.types[this.top[1]]; }
      /**
      @internal
      */
      dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
      }
      /**
      @internal
      */
      parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
              for (let part of dialect.split(" ")) {
                  let id = values.indexOf(part);
                  if (id >= 0)
                      flags[id] = true;
              }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
              if (!flags[i]) {
                  for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                      (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
              }
          return new Dialect(dialect, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
      static deserialize(spec) {
          return new LRParser(spec);
      }
  }
  function pair(data, off) { return data[off] | (data[off + 1] << 16); }
  function findFinished(stacks) {
      let best = null;
      for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
              stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
              (!best || best.score < stack.score))
              best = stack;
      }
      return best;
  }
  function getSpecializer(spec) {
      if (spec.external) {
          let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
          return (value, stack) => (spec.external(value, stack) << 1) | mask;
      }
      return spec.get;
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const RawString = 1,
    templateArgsEndFallback = 2,
    MacroName = 3;

  const R = 82, L = 76, u = 117, U = 85,
        a$1 = 97, z = 122, A = 65, Z = 90, Underscore = 95,
        Zero = 48,
        Quote = 34,
        ParenL = 40, ParenR = 41,
        Space = 32, GreaterThan = 62;

  const rawString = new ExternalTokenizer(input => {
    // Raw string literals can start with: R, LR, uR, UR, u8R
    if (input.next == L || input.next == U) {
      input.advance();
    } else if (input.next == u) {
      input.advance();
      if (input.next == Zero + 8) input.advance();
    }
    if (input.next != R) return
    input.advance();
    if (input.next != Quote) return
    input.advance();

    let marker = "";
    while (input.next != ParenL) {
      if (input.next == Space || input.next <= 13 || input.next == ParenR) return
      marker += String.fromCharCode(input.next);
      input.advance();
    }
    input.advance();

    for (;;) {
      if (input.next < 0)
        return input.acceptToken(RawString)
      if (input.next == ParenR) {
        let match = true;
        for (let i = 0; match && i < marker.length; i++)
          if (input.peek(i + 1) != marker.charCodeAt(i)) match = false;
        if (match && input.peek(marker.length + 1) == Quote)
          return input.acceptToken(RawString, 2 + marker.length)
      }
      input.advance();
    }
  });

  const fallback = new ExternalTokenizer(input => {
    if (input.next == GreaterThan) {
      // Provide a template-args-closing token when the next characters
      // are ">>", in which case the regular tokenizer will only see a
      // bit shift op.
      if (input.peek(1) == GreaterThan)
        input.acceptToken(templateArgsEndFallback, 1);
    } else {
      // Notice all-uppercase identifiers
      let sawLetter = false, i = 0;
      for (;; i++) {
        if (input.next >= A && input.next <= Z) sawLetter = true;
        else if (input.next >= a$1 && input.next <= z) return
        else if (input.next != Underscore && !(input.next >= Zero && input.next <= Zero + 9)) break
        input.advance();
      }
      if (sawLetter && i > 1) input.acceptToken(MacroName);
    }
  }, {extend: true});

  const cppHighlighting = styleTags({
    "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": tags$1.definitionKeyword,
    "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": tags$1.modifier,
    "if else switch for while do case default return break continue goto throw try catch": tags$1.controlKeyword,
    "co_return co_yield co_await": tags$1.controlKeyword,
    "new sizeof delete static_assert": tags$1.operatorKeyword,
    "NULL nullptr": tags$1.null,
    this: tags$1.self,
    "True False": tags$1.bool,
    "TypeSize PrimitiveType": tags$1.standard(tags$1.typeName),
    TypeIdentifier: tags$1.typeName,
    FieldIdentifier: tags$1.propertyName,
    "CallExpression/FieldExpression/FieldIdentifier": tags$1.function(tags$1.propertyName),
    "ModuleName/Identifier": tags$1.namespace,
    "PartitionName": tags$1.labelName,
    StatementIdentifier: tags$1.labelName,
    "Identifier DestructorName": tags$1.variableName,
    "CallExpression/Identifier": tags$1.function(tags$1.variableName),
    "CallExpression/ScopedIdentifier/Identifier": tags$1.function(tags$1.variableName),
    "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": tags$1.function(tags$1.definition(tags$1.variableName)),
    NamespaceIdentifier: tags$1.namespace,
    OperatorName: tags$1.operator,
    ArithOp: tags$1.arithmeticOperator,
    LogicOp: tags$1.logicOperator,
    BitOp: tags$1.bitwiseOperator,
    CompareOp: tags$1.compareOperator,
    AssignOp: tags$1.definitionOperator,
    UpdateOp: tags$1.updateOperator,
    LineComment: tags$1.lineComment,
    BlockComment: tags$1.blockComment,
    Number: tags$1.number,
    String: tags$1.string,
    "RawString SystemLibString": tags$1.special(tags$1.string),
    CharLiteral: tags$1.character,
    EscapeSequence: tags$1.escape,
    "UserDefinedLiteral/Identifier": tags$1.literal,
    PreProcArg: tags$1.meta,
    "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags$1.processingInstruction,
    MacroName: tags$1.special(tags$1.name),
    "( )": tags$1.paren,
    "[ ]": tags$1.squareBracket,
    "{ }": tags$1.brace,
    "< >": tags$1.angleBracket,
    ". ->": tags$1.derefOperator,
    ", ;": tags$1.separator
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier$2 = {__proto__:null,bool:36, char:36, int:36, float:36, double:36, void:36, size_t:36, ssize_t:36, intptr_t:36, uintptr_t:36, charptr_t:36, int8_t:36, int16_t:36, int32_t:36, int64_t:36, uint8_t:36, uint16_t:36, uint32_t:36, uint64_t:36, char8_t:36, char16_t:36, char32_t:36, char64_t:36, const:70, volatile:72, restrict:74, _Atomic:76, mutable:78, constexpr:80, constinit:82, consteval:84, struct:88, __declspec:92, final:148, override:148, public:152, private:152, protected:152, virtual:154, extern:160, static:162, register:164, inline:166, thread_local:168, __attribute__:172, __based:178, __restrict:180, __uptr:180, __sptr:180, _unaligned:180, __unaligned:180, noexcept:194, requires:198, TRUE:784, true:784, FALSE:786, false:786, typename:218, class:220, template:234, throw:248, __cdecl:256, __clrcall:256, __stdcall:256, __fastcall:256, __thiscall:256, __vectorcall:256, try:260, catch:264, export:282, import:286, case:296, default:298, if:308, else:314, switch:318, do:322, while:324, for:330, return:334, break:338, continue:342, goto:346, co_return:350, co_yield:354, using:362, typedef:366, namespace:380, new:398, delete:400, co_await:402, concept:406, enum:410, static_assert:414, friend:422, union:424, explicit:430, operator:444, module:456, signed:518, unsigned:518, long:518, short:518, decltype:528, auto:530, sizeof:566, NULL:572, nullptr:586, this:588};
  const spec_ = {__proto__:null,"<":131};
  const spec_templateArgsEnd = {__proto__:null,">":135};
  const spec_scopedIdentifier = {__proto__:null,operator:388, new:576, delete:582};
  const parser$5 = LRParser.deserialize({
    version: 14,
    states: "$:|Q!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FjO-sQbO'#CxO.UQUO'#CxO0TQUO'#KZO0[QUO'#CwO0gOpO'#DvO0oQ!dO'#D]OOQR'#JO'#JOO5XQVO'#GUO5fQUO'#JVOOQQ'#JV'#JVO8zQUO'#KmO<eQUO'#KmO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FhOOQR'#Fj'#FjOB{QUO'#FjOOQR'#LQ'#LQOOQR'#LP'#LPOETQVO'#KQOFxQUO'#LVOGVQUO'#KqOGkQUO'#LVOH]QUO'#LXOOQR'#HU'#HUOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#K|'#K|OOQR'#J_'#J_Q!QQVOOOHkQVO'#FOOIWQUO'#EhOI_QUOOOKZQVO'#HgOKkQUO'#HgONVQUO'#KqONaQUO'#KqOOQQ'#Kq'#KqO!!_QUO'#KqOOQQ'#Jq'#JqO!!lQUO'#HxOOQQ'#KZ'#KZO!&^QUO'#KZO!&zQUO'#KQO!(zQVO'#I]O!(zQVO'#I`OCQQUO'#KQOOQQ'#Ip'#IpOOQQ'#KQ'#KQO!,}QUO'#KZOOQR'#KY'#KYO!-UQUO'#DZO!/mQUO'#KnOOQQ'#Kn'#KnO!/tQUO'#KnO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F^O!0[Q#vO'#F`O!0gQUO'#FkO!0oQUO'#FpO!0tQVO'#FrO!0oQUO'#FuO!3sQUO'#FvO!3xQVO'#FxO!4SQUO'#FzO!4XQUO'#F|O!4^QUO'#GOO!4cQVO'#GQO!(zQVO'#GSO!4jQUO'#GpO!4xQUO'#GYO!(zQVO'#FeO!6VQUO'#FeO!6[QVO'#G`O!6cQUO'#GaO!6nQUO'#GnO!6sQUO'#GrO!6xQUO'#GzO!7jQ&lO'#HiO!:mQUO'#GuO!:}QUO'#HXO!;YQUO'#HZO!;bQUO'#DXO!;bQUO'#HuO!;bQUO'#HvO!;yQUO'#HwO!<[QUO'#H|O!=PQUO'#H}O!>uQVO'#IbO!(zQVO'#IdO!?PQUO'#IgO!?WQVO'#IjP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#IzPOOO)CEn)CEnOOOO'#I|'#I|O!AtOWO,59OOOQR,59O,59OO!(zQVO,59VOOQQ,59X,59XO!(zQVO,5;ROOQR,5<U,5<UO!BPQUO,59ZO!(zQVO,5>qOOQR'#IX'#IXOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[O!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!DOQVO,5>zOOQQ,5?W,5?WO!EqQVO'#CjO!IjQUO'#CzOOQQ,59d,59dOOQQ,59c,59cOOQQ,5<},5<}O!IwQ&lO,5=mO!?PQUO,5?RO!LkQVO,5?UO!LrQbO,59dO!L}QVO'#FYOOQQ,5?P,5?PO!M_QVO,59WO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K_O!N[QbO,59wO!NdQbO'#CxO!NuQUO'#CxO!NzQUO'#KZO# UQUO'#CwOOQR-E<|-E<|O# aQUO,5AoO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<p,5<pO#$aQUO'#KQO#$hQUO'#KQO!(zQVO'#IUO8zQUO,5;kO#${Q&lO'#HiO#(SQUO'#CtO#*wQbO'#CxO#*|QUO'#CwO#.jQUO'#KZOOQQ-E=T-E=TO#0}QUO,5AXO#1XQUO'#KZO#1cQUO,5AXOOQR,5Ao,5AoOOQQ,5>l,5>lO#3gQUO'#CgO#4]QUO,5>pO#6OQUO'#IeOOQR'#I}'#I}O#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CuO!0QQUO'#CmOOQQ'#JW'#JWO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#DOO#9kQUO,5;QO#9pQUO,5>QO#:|QUO'#DOO#;dQUO,5>{O#;iQUO'#KwO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L[O#?UQUO,5>UO#?ZQbO'#CxO#?fQUO'#GcO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#K}O#@{QUO,5;rOKkQUO'#HfOBUQUO'#HgO#AQQUO'#KqO!6nQUO'#HjO#AxQUO'#CuO!0tQVO,5<SOOQQ'#Cg'#CgOOQR'#Jh'#JhO#A}QVO,5=`OOQQ,5?Z,5?ZO#DWQbO'#CxO#DcQUO'#GcOOQQ'#Ji'#JiOOQQ-E=g-E=gOGVQUO,5AqOGkQUO,5AqO#DhQUO,5AsO#DsQUO'#G|OOQR,5Aq,5AqO#DhQUO,5AqO#EOQUO'#HOO#EWQUO,5AsOOQR,5As,5AsOOQR,5At,5AtO#EfQVO,5AtOOQR-E=]-E=]O#G`QVO,5;jOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#Kz'#KzO$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>PO$(WQUO'#E[O$(eQUO,5>ROOQQ,5>S,5>SO$,RQVO'#C|OOQQ-E=o-E=oOOQQ,5>d,5>dOOQQ,59a,59aO$,]QUO,5>wO$.]QUO,5>zO!6nQUO,59uO$.pQUO,5;qO$.}QUO,5<{O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KmOBUQUO,5;kOOQR,5;x,5;xO$0OQUO'#FbO$0^QUO'#FbO$0cQUO,5;zO$3|QVO'#FmO!0tQVO,5<VO!0oQUO,5<VO!0VQUO,5<[O$4TQVO'#GUO$7PQUO,5<^O!0tQVO,5<aO$:gQVO,5<bO$:tQUO,5<dOOQR,5<d,5<dO$;}QUO,5<dOOQR,5<f,5<fOOQR,5<h,5<hOOQQ'#Fi'#FiO$<SQUO,5<jO$<XQUO,5<lOOQR,5<l,5<lO$=_QUO,5<nO$>eQUO,5<rO$>pQUO,5=[O$>uQUO,5=[O!4xQUO,5<tO$>}QUO,5<tO$?cQUO,5<PO$@iQVO,5<PO$BzQUO,5<zOOQR,5<z,5<zOOQR,5<{,5<{O$>uQUO,5<{O$DQQUO,5<{O$D]QUO,5=YO!(zQVO,5=^O!(zQVO,5=fO#NeQUO,5=mOOQQ,5>T,5>TO$FbQUO,5>TO$FlQUO,5>TO$FqQUO,5>TO$FvQUO,5>TO!6nQUO,5>TO$HtQUO'#KZO$H{QUO,5=oO$IWQUO,5=aOKkQUO,5=oO$JQQUO,5=sOOQR,5=s,5=sO$JYQUO,5=sO$LeQVO'#H[OOQQ,5=u,5=uO!;]QUO,5=uO%#`QUO'#KjO%#gQUO'#K[O%#{QUO'#KjO%$VQUO'#DyO%$hQUO'#D|O%'eQUO'#K[OOQQ'#K['#K[O%)WQUO'#K[O%#gQUO'#K[O%)]QUO'#K[OOQQ,59s,59sOOQQ,5>a,5>aOOQQ,5>b,5>bO%)eQUO'#HzO%)mQUO,5>cOOQQ,5>c,5>cO%-XQUO,5>cO%-dQUO,5>hO%1OQVO,5>iO%1VQUO,5>|O# hQVO'#EfO%4]QUO,5>|OOQQ,5>|,5>|O%4|QUO,5?OO%7QQUO,5?RO!<[QUO,5?RO%8|QUO,5?UO%<iQVO,5?UP!A_{,UO,58|P%<p{,UO,58|P%=O{7[O,58|P%=U{,UO,58|PO{O'#Ju'#JuP%=Z{,UO'#LcPOOO'#Lc'#LcP%=a{,UO'#LcPOOO,58|,58|POOO,5?f,5?fP%=fOSO,5?fOOOO-E<z-E<zOOQR1G.j1G.jO%=mQUO1G.qO%>sQUO1G0mOOQQ1G0m1G0mO%@PQUO'#CpO%B`QbO'#CxO%BkQUO'#CsO%BpQUO'#CsO%BuQUO1G.uO#AxQUO'#CrOOQQ1G.u1G.uO%DxQUO1G4]O%FOQUO1G4^O%GqQUO1G4^O%IdQUO1G4^O%KVQUO1G4^O%LxQUO1G4^O%NkQUO1G4^O&!^QUO1G4^O&$PQUO1G4^O&%rQUO1G4^O&'eQUO1G4^O&)WQUO1G4^O&*yQUO'#KPO&,SQUO'#KPO&,[QUO,59UOOQQ,5=P,5=PO&.dQUO,5=PO&.nQUO,5=PO&.sQUO,5=PO&.xQUO,5=PO!6nQUO,5=PO#NeQUO1G3XO&/SQUO1G4mO!<[QUO1G4mO&1OQUO1G4pO&2qQVO1G4pOOQQ1G/O1G/OOOQQ1G.}1G.}OOQQ1G2i1G2iO!IwQ&lO1G3XO&2xQUO'#LOO@XQVO'#EiO&4RQUO'#F]OOQQ'#Ja'#JaO&4WQUO'#FZO&4cQUO'#LOO&4kQUO,5;tO&4pQUO1G.rOOQQ1G.r1G.rOOQR1G/|1G/|O&6cQ!dO'#JPO&6hQbO,59xO&8yQ!eO'#D`O&9QQ!dO'#JRO&9VQbO,5@yO&9VQbO,5@yOOQR1G/c1G/cO&9bQbO1G/cO&9gQ&lO'#GeO&:eQbO,59dOOQR1G7Z1G7ZO#@[QUO1G1VO&:pQUO1G1^OBUQUO1G1VO&=RQUO'#CzO#*wQbO,59dO&@tQUO1G6sOOQR-E<{-E<{O&BWQUO1G0dO#6WQUO1G0dOOQQ-E=U-E=UO#6tQUO1G0dOOQQ1G0l1G0lO&B{QUO,59jOOQQ1G3l1G3lO&CcQUO,59jO&CyQUO,59jO!M_QVO1G4gO!(zQVO'#JYO&DeQUO,5AcOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JnO&DmQUO,5AvOOQQ1G3p1G3pOOQR1G1V1G1VO&HjQVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JcO&JfQUO,5AiO&JnQVO'#E[OOQR1G1^1G1^O&M]QUO'#L[OOQR1G1n1G1nOOQR-E=f-E=fOOQR1G7]1G7]O#DhQUO1G7]OGVQUO1G7]O#DhQUO1G7_OOQR1G7_1G7_O&MeQUO'#G}O&MmQUO'#LWOOQQ,5=h,5=hO&M{QUO,5=jO&NQQUO,5=kOOQR1G7`1G7`O#EfQVO1G7`O&NVQUO1G7`O' ]QVO,5=kOOQR1G1U1G1UO$.vQUO'#E]O'!RQUO'#E]OOQQ'#Ky'#KyO'!lQUO'#KxO'!wQUO,5;UO'#PQUO'#ElO'#dQUO'#ElO'#wQUO'#EtOOQQ'#J['#J[O'#|QUO,5;cO'$sQUO,5;cO'%nQUO,5;dO'&tQVO,5;dOOQQ,5;d,5;dO''OQVO,5;dO'&tQVO,5;dO''VQUO,5;bO'(SQUO,5;eO'(_QUO'#KpO'(gQUO,5:vO'(lQUO,5;fOOQQ1G0n1G0nOOQQ'#J]'#J]O''VQUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')gQUO'#E`O'+aQUO'#E{OHrQUO1G0nO'+fQUO'#EbOOQQ'#JX'#JXO'-OQUO'#KrOOQQ'#Kr'#KrO'-xQUO1G0eO'.pQUO1G3kO'/vQVO1G3kOOQQ1G3k1G3kO'0QQVO1G3kO'0XQUO'#L_O'1eQUO'#KXO'1sQUO'#KWO'2OQUO,59hO'2WQUO1G/aO'2]QUO'#FPOOQR1G1]1G1]OOQR1G2g1G2gO$>uQUO1G2gO'2gQUO1G2gO'2rQUO1G0ZOOQR'#J`'#J`O'2wQVO1G1XO'8pQUO'#FTO'8uQUO1G1VO!6nQUO'#JdO'9TQUO,5;|O$0^QUO,5;|OOQQ'#Fc'#FcOOQQ,5;|,5;|O'9cQUO1G1fOOQR1G1f1G1fO'9kQUO,5<XO$.vQUO'#FWOBUQUO'#FWO'9rQUO,5<XO!(zQVO,5<XO'9zQUO,5<XO':PQVO1G1qO!0tQVO1G1qOOQR1G1v1G1vO'?oQUO1G1xOOQR1G1{1G1{O'?tQUO1G1|OBUQUO1G2]O'@}QVO1G1|O'CcQUO1G1|O'ChQUO'#GWO8zQUO1G2]OOQR1G2O1G2OOOQR1G2U1G2UOOQR1G2W1G2WOOQR1G2Y1G2YO'CmQUO1G2^O!4xQUO1G2^OOQR1G2v1G2vO'CuQUO1G2vO$>}QUO1G2`OOQQ'#Cv'#CvO'CzQUO'#G[O'DuQUO'#G[O'DzQUO'#LRO'EYQUO'#G_OOQQ'#LS'#LSO'EhQUO1G2`O'EmQVO1G1kO'HOQVO'#GUOBUQUO'#FWOOQR'#Je'#JeO'EmQVO1G1kO'HYQUO'#FvOOQR1G2f1G2fO'H_QUO1G2gO'HdQUO'#JgO'2gQUO1G2gO!(zQVO1G2tO'HlQUO1G2xO'IuQUO1G3QO'J{QUO1G3XOOQQ1G3o1G3oO'KaQUO1G3oOOQR1G3Z1G3ZO'KfQUO'#KZO'2]QUO'#LTOGkQUO'#LVOOQR'#Gy'#GyO#DhQUO'#LXOOQR'#HQ'#HQO'KpQUO'#GvO'#wQUO'#GuOOQR1G2{1G2{O'LmQUO1G2{O'MdQUO1G3ZO'MoQUO1G3_O'MtQUO1G3_OOQR1G3_1G3_O'M|QUO'#H]OOQR'#H]'#H]O( VQUO'#H]O!(zQVO'#H`O!(zQVO'#H_OOQR'#LZ'#LZO( [QUO'#LZOOQR'#Jk'#JkO( aQVO,5=vOOQQ,5=v,5=vO( hQUO'#H^O( pQUO'#HZOOQQ1G3a1G3aO( zQUO,5@vOOQQ,5@v,5@vO%)WQUO,5@vO%)]QUO,5@vO%$VQUO,5:eO(%iQUO'#KkO(%wQUO'#KkOOQQ,5:e,5:eOOQQ'#JS'#JSO(&SQUO'#D}O(&^QUO'#KqOGkQUO'#LVO('YQUO'#D}OOQQ'#Hp'#HpOOQQ'#Hr'#HrOOQQ'#Hs'#HsOOQQ'#Kl'#KlOOQQ'#JU'#JUO('dQUO,5:hOOQQ,5:h,5:hO((aQUO'#LVO((nQUO'#HtO()UQUO,5@vO()]QUO'#H{O()hQUO'#L^O()pQUO,5>fO()uQUO'#L]OOQQ1G3}1G3}O(-lQUO1G3}O(-sQUO1G3}O(-zQUO1G4TO(/QQUO1G4TO(/VQUO,5A|O!6nQUO1G4hO!(zQVO'#IiOOQQ1G4m1G4mO(/[QUO1G4mO(1_QVO1G4pPOOO1G.h1G.hP!A_{,UO1G.hP(3_QUO'#LeP(3j{,UO1G.hP(3o{7[O1G.hPO{O-E=s-E=sPOOO,5A},5A}P(3w{,UO,5A}POOO1G5Q1G5QO!(zQVO7+$]O(3|QUO'#CzOOQQ,59_,59_O(4XQbO,59dO(4dQbO,59_OOQQ,59^,59^OOQQ7+)w7+)wO!M_QVO'#JtO(4oQUO,5@kOOQQ1G.p1G.pOOQQ1G2k1G2kO(4wQUO1G2kO(4|QUO7+(sOOQQ7+*X7+*XO(7bQUO7+*XO(7iQUO7+*XO(1_QVO7+*[O#NeQUO7+(sO(7vQVO'#JbO(8ZQUO,5AjO(8cQUO,5;vOOQQ'#Cp'#CpOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=_-E=_O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?k,5?kOOQQ-E<}-E<}OOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9lQ!eO'#K`O(9sQMkO'#K`O(9zQ!eO'#K`OOQR'#K`'#K`OOQR'#JQ'#JQO(:RQ!eO,59zOOQQ,59z,59zO(:YQbO,5?mOOQQ-E=P-E=PO(:hQbO1G6eOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8uQUO7+&qO(:sQUO7+&OO#6WQUO7+&OO(;hQUO1G/UO(<OQUO1G/UO(<jQUO7+*ROOQQ7+*V7+*VO(>]QUO,5?tOOQQ-E=W-E=WO(?fQUO7+&ZOOQQ,5@Y,5@YOOQQ-E=l-E=lO(?kQUO'#LOO@XQVO'#EiO(@wQUO1G1_OOQQ1G1_1G1_O(BQQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aO(BfQUO'#KpOOQR7+,w7+,wO#DhQUO7+,wOOQR7+,y7+,yO(BsQUO,5=iO#DsQUO'#JjO(CUQUO,5ArOOQR1G3U1G3UOOQR1G3V1G3VO(CdQUO7+,zOOQR7+,z7+,zO(E[QUO,5:wO(FyQUO'#EwO!(zQVO,5;VO(GlQUO,5:wO(GvQUO'#EpO(HXQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(HoQUO,5:wO(HvQUO'#EyO#GgQUO'#JZO(J`QUO,5AdOOQQ1G0p1G0pO(JkQUO,5;WO!<[QUO,5;^O(KUQUO,5;_O(KdQUO,5;WO(MvQUO,5;`OOQQ-E=Y-E=YO(NOQUO1G0}OOQQ1G1O1G1OO(NyQUO1G1OO)!PQVO1G1OO)!WQVO1G1OO)!bQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#_QUO'#JoO)#iQUO,5A[OOQQ1G0b1G0bOOQQ-E=Z-E=ZO)#qQUO,5;iO!<[QUO,5;iO)$nQVO,5:zO)$uQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)$|QUO,5:|OOQQ'#Ks'#KsOOQQ-E=V-E=VOOQQ,5A^,5A^OOQQ'#Jl'#JlO)(qQUO7+&PPOQQ7+&P7+&POOQQ7+)V7+)VO))iQUO7+)VO)*oQVO7+)VOOQQ,5>m,5>mO$)YQVO'#JsO)*vQUO,5@rOOQQ1G/S1G/SOOQQ7+${7+${O)+RQUO7+(RO)+WQUO7+(ROOQR7+(R7+(RO$>uQUO7+(ROOQQ7+%u7+%uOOQR-E=^-E=^O!0VQUO,5;oOOQQ,5@O,5@OOOQQ-E=b-E=bO$0^QUO1G1hOOQQ1G1h1G1hOOQR7+'Q7+'QOOQR1G1s1G1sOBUQUO,5;rO)+tQUO,5<YO)+{QUO1G1sO)-UQUO1G1sO!0tQVO7+']O)-ZQVO7+']O)2yQUO7+'dO)3OQVO7+'hO)5dQUO7+'wO)5nQUO7+'hO)6tQVO7+'hOKkQUO7+'wO$>hQUO,5<rO!4xQUO7+'xO)6{QUO7+'xOOQR7+(b7+(bO)7QQUO7+'zO)7VQUO,5<vO'CzQUO,5<vO)7}QUO,5<vO'CzQUO,5<vOOQQ,5<w,5<wO)8`QVO,5<xO'EYQUO'#JfO)8jQUO,5AmO)8rQUO,5<yOOQR7+'z7+'zO)8}QVO7+'VO)5gQUO'#K}OOQR-E=c-E=cO);`QVO,5<bOOQQ,5@R,5@RO!6nQUO,5@ROOQQ-E=e-E=eO)=wQUO7+(`O)>}QUO7+(dO)?SQVO7+(dOOQQ7+(l7+(lOOQQ7+)Z7+)ZO)?[QUO'#KjO)?fQUO'#KjOOQR,5=b,5=bO)?sQUO,5=bO!;bQUO,5=bO!;bQUO,5=bO!;bQUO,5=bOOQR7+(g7+(gOOQR7+(u7+(uOOQR7+(y7+(yOOQR,5=w,5=wO)?xQUO,5=zO)AOQUO,5=yOOQR,5Au,5AuOOQR-E=i-E=iOOQQ1G3b1G3bO)BUQUO,5=xO)BZQVO'#EfOOQQ1G6b1G6bO%)WQUO1G6bO%)]QUO1G6bOOQQ1G0P1G0POOQQ-E=Q-E=QO)DrQUO,5AVO(%iQUO'#JTO)D}QUO,5AVO)D}QUO,5AVO)EVQUO,5:iO8zQUO,5:iOOQQ,5>],5>]O)EaQUO,5AqO)EhQUO'#EVO)FrQUO'#EVO)G]QUO,5:iO)GgQUO'#HlO)GgQUO'#HmOOQQ'#Ko'#KoO)HUQUO'#KoO!(zQVO'#HnOOQQ,5:i,5:iO)HvQUO,5:iO!M_QVO,5:iOOQQ-E=S-E=SOOQQ1G0S1G0SOOQQ,5>`,5>`O)H{QUO1G6bO!(zQVO,5>gO)LjQUO'#JrO)LuQUO,5AxOOQQ1G4Q1G4QO)L}QUO,5AwOOQQ,5Aw,5AwOOQQ7+)i7+)iO*!lQUO7+)iOOQQ7+)o7+)oO*'kQVO1G7hO*)mQUO7+*SO*)rQUO,5?TO**xQUO7+*[POOO7+$S7+$SP*,kQUO'#LfP*,sQUO,5BPP*,x{,UO7+$SPOOO1G7i1G7iO*,}QUO<<GwOOQQ1G.y1G.yOOQQ'#IT'#ITO*.pQUO,5@`OOQQ,5@`,5@`OOQQ-E=r-E=rOOQQ7+(V7+(VOOQQ<<Ms<<MsO*/yQUO<<MsO*1|QUO<<MvO*3oQUO<<L_O*4TQUO,5?|OOQQ,5?|,5?|OOQQ-E=`-E=`OOQQ1G1b1G1bO*5^QUO,5;vO*6dQUO1G1aOOQQ1G1a1G1aOOQR,5@z,5@zO*7mQ!eO,5@zO*7tQMkO,5@zO*7{Q!eO,5@zOOQR-E=O-E=OOOQQ1G/f1G/fO*8SQ!eO'#DwOOQQ1G5X1G5XOOQR<<J]<<J]O*8ZQUO<<IjO*9OQUO7+$pOOQQ<<Iu<<IuO(7vQVO,5;ROOQR<=!c<=!cOOQQ1G3T1G3TOOQQ,5@U,5@UOOQQ-E=h-E=hOOQR<=!f<=!fO*9{QUO1G0cO*:SQUO'#EzO*:dQUO1G0cO*:kQUO'#I}O*<RQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?u,5?uOOQQ-E=X-E=XO!<[QUO1G0xO*=bQUO1G0xOOQQ1G0y1G0yO*=sQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>XQUO7+&jO*?_QVO7+&jOOQQ7+&h7+&hOOQQ,5@Z,5@ZOOQQ-E=m-E=mO*@ZQUO1G1TO*@eQUO1G1TO*AOQUO1G0fOOQQ1G0f1G0fO*BUQUO'#K{O*B^QUO1G1ROOQQ<<It<<ItOOQQ'#Hb'#HbO'+fQUO,5={OOQQ'#Hd'#HdO'+fQUO,5=}OOQQ-E=j-E=jPOQQ<<Ik<<IkPOQQ-E=k-E=kOOQQ<<Lq<<LqO*BcQUO'#LaO*CoQUO'#L`OOQQ,5@_,5@_OOQQ-E=q-E=qOOQR<<Km<<KmO$>uQUO<<KmO*C}QUO<<KmOOQR1G1Z1G1ZOOQQ7+'S7+'SO!M_QVO1G1tO*DSQUO1G1tOOQR7+'_7+'_OOQR<<Jw<<JwO!0tQVO<<JwOOQR<<KO<<KOO*D_QUO<<KSO*EeQVO<<KSOKkQUO<<KcO!M_QVO<<KcO*ElQUO<<KSO!0tQVO<<KSO*FuQUO<<KSO*FzQUO<<KcO*GVQUO<<KdOOQR<<Kd<<KdOOQR<<Kf<<KfO*G[QUO1G2bO)7VQUO1G2bO'CzQUO1G2bO*GmQUO1G2dO*HsQVO1G2dOOQQ1G2d1G2dO*H}QVO1G2dO*IUQUO,5@QOOQQ-E=d-E=dOOQQ1G2e1G2eO*IdQUO1G1|O*JmQVO1G1|O*JtQUO1G1|OOQQ1G5m1G5mOOQR<<Kz<<KzOOQR<<LO<<LOO*JyQVO<<LOO*KUQUO<<LOOOQR1G2|1G2|O*KZQUO1G2|O*KbQUO1G3eOOQR1G3d1G3dOOQQ7++|7++|O%)WQUO7++|O*KmQUO1G6qO*KmQUO1G6qO(%iQUO,5?oO*KuQUO,5?oOOQQ-E=R-E=RO*LQQUO1G0TOOQQ1G0T1G0TO*L[QUO1G0TO!M_QVO1G0TO*LaQUO1G0TOOQQ1G3w1G3wO*LkQUO,5:qO)EhQUO,5:qO*MXQUO,5:qO)EhQUO,5:qO$#uQUO,5:uO*MvQVO,5>VO)GgQUO'#JpO*NQQUO1G0TO*NcQVO1G0TOOQQ1G3u1G3uO*NjQUO,5>WO*NuQUO,5>XO+ dQUO,5>YO+!jQUO1G0TO%)]QUO7++|O+#pQUO1G4ROOQQ,5@^,5@^OOQQ-E=p-E=pOOQQ<<MT<<MTOOQQ<<Mn<<MnO+$yQUO1G4oP+&|QUO'#JvP+'UQUO,5BQPO{O1G7k1G7kPOOO<<Gn<<GnOOQQANC_ANC_OOQR1G6f1G6fO+'^Q!eO,5:cOOQQ,5:c,5:cO+'eQUO1G0mO+(qQUO7+&]O+*QQUO7+&dO+*cQUO,5;WOOQQ<<JU<<JUO+*qQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J^O++lQUO,5AgOOQQ7+&m7+&mOOQQ1G3g1G3gO++tQUO1G3iOOQQ,5>n,5>nO+/iQUOANAXOOQRANAXANAXO+/nQUO7+'`OOQRAN@cAN@cO+0zQVOAN@nO+1RQUOAN@nO!0tQVOAN@nO+2[QUOAN@nO+2aQUOAN@}O+2lQUOAN@}O+3rQUOAN@}OOQRAN@nAN@nO!M_QVOAN@}OOQRANAOANAOO+3wQUO7+'|O)7VQUO7+'|OOQQ7+(O7+(OO+4YQUO7+(OO+5`QVO7+(OO+5gQVO7+'hO+5nQUOANAjOOQR7+(h7+(hOOQR7+)P7+)PO+5sQUO7+)PO+5xQUO7+)POOQQ<= h<= hO+6QQUO7+,]O+6YQUO1G5ZOOQQ1G5Z1G5ZO+6eQUO7+%oOOQQ7+%o7+%oO+6vQUO7+%oO*NcQVO7+%oOOQQ7+)a7+)aO+6{QUO7+%oO+8RQUO7+%oO!M_QVO7+%oO+8]QUO1G0]O*LkQUO1G0]O)EhQUO1G0]OOQQ1G0a1G0aO+8zQUO1G3qO+:QQVO1G3qOOQQ1G3q1G3qO+:[QVO1G3qO+:cQUO,5@[OOQQ-E=n-E=nOOQQ1G3r1G3rO%)WQUO<= hOOQQ7+*Z7+*ZPOQQ,5@b,5@bPOQQ-E=t-E=tOOQQ1G/}1G/}OOQQ,5?x,5?xOOQQ-E=[-E=[OOQRG26sG26sO+:zQUOG26YO!0tQVOG26YO+<TQUOG26YOOQRG26YG26YO!M_QVOG26iO!0tQVOG26iO+<YQUOG26iO+=`QUOG26iO+=eQUO<<KhOOQQ<<Kj<<KjOOQRG27UG27UOOQR<<Lk<<LkO+=vQUO<<LkOOQQ7+*u7+*uOOQQ<<IZ<<IZO+={QUO<<IZO!M_QVO<<IZO+>QQUO<<IZO+?WQUO<<IZO*NcQVO<<IZOOQQ<<L{<<L{O+?iQUO7+%wO*LkQUO7+%wOOQQ7+)]7+)]O+@WQUO7+)]O+A^QVO7+)]OOQQANESANESO!0tQVOLD+tOOQRLD+tLD+tO+AeQUOLD,TO+BkQUOLD,TOOQRLD,TLD,TO!0tQVOLD,TOOQRANBVANBVOOQQAN>uAN>uO+BpQUOAN>uO+CvQUOAN>uO!M_QVOAN>uO+C{QUO<<IcOOQQ<<Lw<<LwOOQR!$( `!$( `O!0tQVO!$( oOOQR!$( o!$( oOOQQG24aG24aO+DjQUOG24aO+EpQUOG24aOOQR!)9EZ!)9EZOOQQLD){LD){O+EuQUO'#CgO(dQUO'#CgO+IrQUO'#CzO+LcQUO'#CzO!E{QUO'#CzO+M[QUO'#CzO+MoQUO'#CzO,#bQUO'#CzO,#rQUO'#CzO,$PQUO'#CzO,$[QbO,59dO,$gQbO,59dO,$rQbO,59dO,$}QbO'#CxO,%`QbO'#CxO,%qQbO'#CxO,&SQUO'#CgO,(gQUO'#CgO,(tQUO'#CgO,+iQUO'#CgO,.lQUO'#CgO,.|QUO'#CgO,2uQUO'#CgO,2|QUO'#CgO,3|QUO'#CgO,6VQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L[O,6sQbO'#CxO,7OQbO'#CxO,7ZQbO'#CxO,7fQbO'#CxO#6tQUO'#E^O,7qQUO'#E^O,9OQUO'#HgO,9pQbO'#CxO,9{QbO'#CxO,:WQUO'#CwO,:]QUO'#CwO,:bQUO'#CpO,:pQbO,59dO,:{QbO,59dO,;WQbO,59dO,;cQbO,59dO,;nQbO,59dO,;yQbO,59dO,<UQbO,59dO,6VQUO1G0dO,<aQUO1G0dO#?kQUO1G0dO,7qQUO1G0dO,>nQUO'#KZO,?OQUO'#CzO,?^QbO,59dO,6VQUO7+&OO,<aQUO7+&OO,?iQUO'#EwO,@[QUO'#EzO,@{QUO'#E^O,AQQUO'#GcO,AVQUO'#CwO,A[QUO'#CxO,AaQUO'#CxO,AfQUO'#CwO,AkQUO'#GcO,ApQUO'#KZO,B^QUO'#KZO,BhQUO'#CwO,BsQUO'#CwO,COQUO'#CwO,<aQUO,5:xO,7qQUO,5:xO,7qQUO,5:xO,CZQUO'#KZO,CnQbO'#CxO,CyQUO'#CsO,DOQUO'#E^",
    stateData: ",Dt~O(nOSSOSTOSRPQVPQ'ePQ'gPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ~O*ZOS~OPmO]eOb!]Oe!POmTOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$R!gO$T!hO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO${!tO$}!uO%U!yO%_#ZO%`#[O%a#YO%c!zO%e#UO%g!{O%l#SO%o!|O%v!}O%|#PO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(rRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)[XO)hcO)idO~OR#bOV#]O'e#^O'g#_O'h#`O'i#`O'j#aO'k#aO'l#_O'm#_O~OX#dO(o#fO(q#dO~O]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!TjX!VZX!VjX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX(uZX(v$]X(wZX(xZX)TZX)TjX)UZX)VZX)VjX)WZX)WjX)XZX)YZX)jZX~O)XjX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO(w#kO(x#kO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O~Oe$RO%Y$SO'[$TO'_$UO(y$OO~Om$VO~O!T$WO](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X~Om$VO~P.ZOm$VO!g$YO)j$YO~OX$ZO)]$ZO~O!R$[O)P)RP)Y)RP~OPmO]$eOb!]Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~Om$_O#t$lO(rRO~P0zO](]Xb'yXe(]Xm'yXm(]Xs'yXs(]Xt'yXt(]Xu'yXu(]Xv'yXv(]Xw'yXw(]Xx'yXx(]Xy'yXy(]Xz'yXz(]X|'yX!O'yX!V(]X!o(]X!r'yX!r(]X!s'yX!s(]X!t'yX!t(]X!u'yX!u(]X!v'yX!v(]X!x'yX!x(]X!{(]X#a'yX#b'yX%e'yX%l'yX%o(]X%v(]X&m'yX&r'yX&s'yX(r'yX(r(]X)T(]X)V(]X)W(]X~Ob!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&r#WO&s$wO])aXe)aXm)aX!V)aX!{)aX%v)aX(r)aX)T)aX)V)aX)W)aX~O)X$vO~P:nOPmO]eOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)TaO)V|O)W{O)Y!ZO)[XO)hcO)idO~Ob%QOm:zO!|%RO(r$xO~P<lO)T%SO~Ob!]Om$_O|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r:}O~P<lOPmO]$eOb%QOm:zO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W%]O)Y!ZO)[XO)hcO)idO)j%[O~O]%hOe!POm%bO!V%kO!{!dO%v$mO(r;OO)T%dO)V%iO)W%iO~O(v%mO~O)X#jO~O(r%nO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX!g(tX)j(tX[(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OP%oO(pQO~PCQO]%hOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%o!|O%v!}O)T;`O)V|O)W|O~Om%rO!o%wO(r$xO~PE_O!TxO#v!eO(v%yO)j%|O])eX!V)eX~O]%hOe!POm%rO!V%kO!{!dO%v!}O(r$xO)T;`O)V|O)W|O~O!TxO#v!eO)X&PO)j&QO~O!U&TO~P!QO]&YO!TxO!V&WO)T&VO)V&ZO)W&ZO~Oq&UO~PHrO]&cO!V&bO~OPmO]eOe!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)TaO)V|O)W{O)Y!ZO)[XO)hcO)idO~Ob%QOm:zO%v$mO(r$xO~PIgO]%hOe!POm;[O!V%kO!{!dO%v$mO(r$xO)T;`O)V|O)W|O~Oq&fO](tX])eX!V(tX!V)eX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX[(tX[)eX!U(tX~O!g$YO)j$YO~PL]O!g(tX)j(tX~PL]O](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX!g(tX)j(tX[(tX!U(tX~O])eX!V)eX[)eX~PNkOb&hO&m!RO]&lXe&lXm&lXs&lXt&lXu&lXv&lXw&lXx&lXy&lXz&lX!O&lX!V&lX!r&lX!s&lX!t&lX!u&lX!v&lX!x&lX!{&lX%v&lX&r&lX&s&lX(r&lX)T&lX)V&lX)W&lX)X&lX[&lX!T&lX!X&lX!Y&lX![&lX!^&lX!_&lX!a&lX!b&lX!c&lX!e&lX!f&lX!h&lX(u&lX(w&lX(x&lX)U&lX)Y&lX!g&lX)j&lX!W&lXQ&lX!d&lX(v&lX!U&lX#v&lX~Oq&fOm(}X[(}XQ(}X!d(}X!h(}X)Y(}X)j(}X~P.ZO!g$YO)j$YO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX[(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O](}Xe(}Xm(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X[(}XQ(}X!d(}X!h(}X)Y(}X)j(}X~O]#}O~P!*qO]&lO~O])bXb)bXe)bXm)bXs)bXt)bXu)bXv)bXw)bXx)bXy)bXz)bX|)bX!O)bX!V)bX!o)bX!r)bX!s)bX!t)bX!u)bX!v)bX!x)bX!{)bX#a)bX#b)bX%e)bX%l)bX%o)bX%v)bX&m)bX&r)bX&s)bX(r)bX)T)bX)V)bX)W)bX~O(pQO~P!-ZO%U&nO~P!-ZO]&oO~O]#}O~O!TxO~O$W&wO(r%nO(v&vO~O]&xOx&zO~O]&xO~OPmO]$eOb%QOm:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:mO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O]'PO~O!T$WO)X'RO~P!(zO)X'TO~O)X'UO~O(r'VO~O)X'YO~P!(zOm;^O%U'^O%e'^O(r;PO~Ob!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O(v'bO~O)X'dO~P!(zO!TxO(r%nO)j'fO~O(r%nO~O]'iO~O]'jOe%nXm%nX!V%nX!{%nX%v%nX(r%nX)T%nX)V%nX)W%nX~O]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~P8zO]%hOb!TOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO)T;`O)V|O)W|O~Om;_Oq&UO%v$mO(r;QO~P!8jO(r%nO(v'vO)X'wO~O]&cO!T'yO~Om$oO!O!_O!T(QO!l(VO(r$nO(v(PO)QYO~Om$oO|(^O!T(ZO#b(^O(r$nO~Ob!TOm$oO|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O](`O~OPmOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)[XO)hcO)idO~O](bO)Y(cO~P!=UO]#}O~P!<[OPmO]$eOb%QOm:zO!V(iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~OY(jO(pQO(r%nO~O'f(mO~OS(qOT(nO*W(pO~O]#}O(n(tO~Q'nXX#dO(o(vO(q#dO~Oe)QOm({O&r#WO(r(zO~O!Y'Sa!['Sa!^'Sa!_'Sa!a'Sa!b'Sa!c'Sa!e'Sa!f'Sa!h'Sa(u'Sa)T'Sa)U'Sa)V'Sa)W'Sa)X'Sa)Y'Sa!g'Sa)j'Sa['Sa!W'Sa(v'Sa!U'SaQ'Sa!d'Sa~OPmOb%QOm:zO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)[XO)hcO)idO]'Sa!V'Sa!X'Sa(w'Sa(x'Sa~P!B_O!T$WO[(sP~P!(zO]oX]%WXeoXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!ToX!VoX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gnX!h%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX(u%WX(w%WX(x%WX)ToX)T%WX)U%WX)VoX)V%WX)WoX)W%WX)X%WX)Y%WX)jnX[%WX~O)XoX[oX!U%WX~P!E{O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~P8zOPmO]$eOb%QOm:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O!V)lO~P!JwOe)oO%Y)pO(y$OO~O!T$WO!V)rO(w)sO!U)rP~P!JwO!T$WO~P!(zO)Z)zO~Om){O]!QX!h!QX)P!QX)Y!QX~O])}O!h*OO)P)RX)Y)RX~O)P*RO)Y*SO~Oe$RO%Y*TO'[$TO'_$UO(y$OO~Om*UO~Om*UO[(}X~P.ZOm*UO!g$YO)j$YO~O)X*VO~P:nOPmO]$eOb!]Om$_Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)Y!ZO)[XO)hcO)idO~Oq&fO~P!&zOq&fO!W(tX(v(tXQ(tX!d(tX~PNkO]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~O]jXejXmhXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX!TjX!hjX)YjX)jjX[jX~O!ljX(vjX)XjX!XjX!YjX![jX!^jX!_jX!ajX!bjX!cjX!ejX!fjX(ujX(wjX(xjX)UjX!gjX!WjXQjX!djX!UjX#vjX#TjX#VjX#pjXbjX|jX!ojX#ajX#bjX#ijX#tjX${jX%cjX%ejX%kjX%ljX%ojX&mjX)QjX~P#%yO(y*ZO~Om*[O~O](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X!T(}X!X(}X!Y(}X![(}X!^(}X!_(}X!a(}X!b(}X!c(}X!e(}X!f(}X!h(}X(u(}X(w(}X(x(}X)U(}X)Y(}X!g(}X)j(}X[(}X!W(}XQ(}X!d(}X(v(}X!U(}X#v(}X~Om*[O~P#+ROs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])aae)aam)aa!V)aa!{)aa%v)aa(r)aa)T)aa)V)aa)W)aaQ)aa!d)aa!h)aa)Y)aa)j)aa[)aa!T)aa(v)aa)X)aa~O&r#WO&s$wO~P#.qOq&fOm(}X~P#+RO&r)aa~P#.qO]ZXmhXqZXqjX!TjX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(wZX(xZX)TZX)UZX)VZX)WZX)XZX)YZX)jZX[ZX~O!WZX(vZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(w#kO(x#kO~O!Y&xa![&xa!^&xa!_&xa!a&xa!b&xa!c&xa!e&xa!f&xa!g&xa!h&xa(u&xa)T&xa)U&xa)V&xa)W&xa)X&xa)Y&xa)j&xa[&xa!W&xa(v&xa!U&xaQ&xa!d&xa~P#3zOm;hO!T$WO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~PKkOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!|%RO~PKkO]&cO!V&bO[#Qa!T#Qa!h#Qa#v#Qa)X#Qa)j#QaQ#Qa!d#Qa(v#Qa~Oq&fO!T$WO~O[*cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[*cO~O[*eO]&cO!V&bO~O]&YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V&WO&r#WO&s$wO)T&VO)V&ZO)W&ZO~O[rXQrX!drX!hrX)YrX)XrX~P#9{O[*hO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W)kX~P#3zO!W*kO!h*lO~O!W*kO!h*lO~P!(zO!W*kO~Oq&fO!g$YO!h*mO)j$YO](tX!V(tX!W(tX!W*OX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)Y(tX~O!h(tX~P#=ZO!W*oO~Oe$RO%Y*TO(y:rO~Om;kO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!|%RO~PBUO]*vO!T*qO!V&bO!h*tO#v!eO)j*rO)X)qX~O!h*tO)X)qX~O)X*wO~Oq&fO])eX!T)eX!V)eX!h)eX#v)eX)X)eX)j)eX[)eXQ)eX!d)eX(v)eX~Oq&fO~OP%oO(pQO]%ha!V%ha!X%ha!Y%ha![%ha!^%ha!_%ha!a%ha!b%ha!c%ha!e%ha!f%ha!h%ha(r%ha(u%ha(w%ha(x%ha)T%ha)U%ha)V%ha)W%ha)X%ha)Y%ha!g%ha)j%ha[%ha!W%ha(v%ha!U%haQ%ha!d%ha~Oe$RO%Y$SO(y:oO~Om:wO~O!TxO#v!eO)j%|O~Om<[O&r#WO(r;gO~O$Z+TO%`+UO~O!TxO#v!eO)X+VO)j+WO~OPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO$Z+TO%_#ZO%`+YO%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O!U+ZO~P!QOb!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+aO#b+bO#i+cO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO)QYO~OQ)lP!d)lP~P#GgO]&YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V&WO)T&VO)V&ZO)W&ZO~O[#kX!T#kX#v#kX)X#kX)j#kXQ#kX!d#kX!h#kX)Y#kX!x#kX(v#kX~P#IkOPmO]$eOb%QOm:zOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V$fO!W+iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T+jO)W$kO)Y!ZO)[XO)hcO)idO~O]&cO!V+kO~O]&YO!V&WO)QYO)T&VO)V&ZO)W&ZO)Y+nO[)dP~P8zO]&YO!V&WO)T&VO)V&ZO)W&ZO~O[#nX!T#nX#v#nX)X#nX)j#nXQ#nX!d#nX!h#nX)Y#nX!x#nX(v#nX~P#NeO!TxO])nX!V)nX~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O#T+vO#p+wO(x+tO)V+rO)W+rO~O]#jX!T#jX!V#jX[#jX#v#jX)X#jX)j#jXQ#jX!d#jX!h#jX)Y#jX!x#jX(v#jX~P$ xO#V+yO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!l+zO#T+vO#V+yO#p+wO(x+tO)V+zO)W+zO])fP!T)fP!V)fP#v)fP(v)fP)j)fP[)fP!h)fP)X)fP~O!x)fPQ)fP!d)fP~P$#uOPmO]$eOb%QOm:zOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)W$kO)Y!ZO)[XO)hcO)idO~O!W,QO)T,RO~P$%pO)QYO)Y+nO[)dP~P8zO]&cO!V&bO[&Za!T&Za!h&Za#v&Za)X&Za)j&ZaQ&Za!d&Za(v&Za~OPmO]$eOb!]Om:|Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;RO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~OQ(zP!d(zP~P$)YO]#}O!V#lO(w#kO(x#kO!X'Pa!Y'Pa!['Pa!^'Pa!_'Pa!a'Pa!b'Pa!c'Pa!e'Pa!f'Pa!h'Pa(u'Pa)T'Pa)U'Pa)V'Pa)W'Pa)X'Pa)Y'Pa!g'Pa)j'Pa['Pa!W'Pa(v'Pa!U'PaQ'Pa!d'Pa~O]#}O!V#lO!X#{O(w#kO(x#kO~P!B_O!TxO#t!fO)QYO~P8zO!TxO(r%nO)j,[O~O#x,aO~OQ)aX!d)aX!h)aX)Y)aX)j)aX[)aX!T)aX(v)aX)X)aX~P:nO(v,eO(w,cO)Q$UX)X$UX~O(r,fO~O)QYO)X,iO~OPmO]$eOb!]Om:{Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O(r;SO~P$0kOPmO]$eOb%QOm:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:mO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O$h,sO~OPmO]$eOb!]Om:{Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO$}!uO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O${,yO(r:}O)X,wO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X,{O)Y#|O~P#3zO)X,{O~O)X,|O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X,}O)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X-OO)Y#|O~P#3zOq&fO)QYO)j-QO~O)X-RO~Om;^O(r;PO~O]-YO!{!dO&r#WO&s$wO(r-UO)T-VO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v-]O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xa!o$Xa!{$Xa#i$Xa#p$Xa#t$Xa#v$Xa$R$Xa$T$Xa$Y$Xa$Z$Xa${$Xa%U$Xa%c$Xa%g$Xa%o$Xa%|$Xa(k$Xa)V$Xa!U$Xa$c$Xa~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X-cO)Y#|O~P#3zOm-eO!TxO)j,[O~O)j-gO~O]&]a!X&]a!Y&]a![&]a!^&]a!_&]a!a&]a!b&]a!c&]a!e&]a!f&]a!h&]a(u&]a(w&]a(x&]a)U&]a)V&]a)W&]a)X&]a)Y&]a!g&]a)j&]a[&]a!W&]a!T&]a#v&]a(v&]a!U&]aQ&]a!d&]a~O)T-kO!V&]a~P$DbO[-kO~O!W-kO~O!V-lO)T&]a~P$DbO](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X~Om;mO~P$GQO]&cO!V&bO)X-mO~Om;cO!o-pO#V+yO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)QYO~P!8jO!n-yO(r,fO~O)QYO)X-{O~OPmO]$eOb%QOm:zO!T.QO!V$fO!X!XO!Y!WO!i!YO#V.XO#a.WO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO(x.PO)T$kO)W$kO)X-}O)Y!ZO)[XO)hcO)idO~O!U.VO~P$JbO])^Xe)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^Xz)^X!O)^X!T)^X!V)^X!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)T)^X)V)^X)W)^X)X)^X[)^X!h)^X)Y)^X!X)^X!Y)^X![)^X!^)^X!_)^X!a)^X!b)^X!c)^X!e)^X!f)^X(u)^X(w)^X(x)^X)U)^X!g)^X)j)^X!W)^XQ)^X!d)^X#T)^X#V)^X#p)^X#v)^Xb)^X|)^X!o)^X#a)^X#b)^X#i)^X#t)^X${)^X%c)^X%e)^X%k)^X%l)^X%o)^X&m)^X)Q)^X!U)^X~Om*[O~P$LlOm$oO!T(QO!l.^O(r$nO(v(PO)QYO~Oq&fOm)^X~P$LlOm$oO!n.cO!o.cO(r$nO)QYO~Om;dO!U.nO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)QYO~P!8jO!T(QO!l.^O(v(PO])OXe)OXm)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OXz)OX!O)OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%v)OX&r)OX&s)OX(r)OX)T)OX)V)OX)W)OX~O)X)OX[)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(u)OX(w)OX(x)OX)U)OX)Y)OX!g)OX)j)OX!W)OXQ)OX!d)OX!U)OX#v)OX~P%%eO!T(QO~O!T(QO(v(PO~O(r%nO!U*QP~O!T(ZO(v.uO]&kae&kam&kas&kat&kau&kav&kaw&kax&kay&kaz&ka!O&ka!V&ka!r&ka!s&ka!t&ka!u&ka!v&ka!x&ka!{&ka%v&ka&r&ka&s&ka(r&ka)T&ka)V&ka)W&ka)X&ka[&ka!X&ka!Y&ka![&ka!^&ka!_&ka!a&ka!b&ka!c&ka!e&ka!f&ka!h&ka(u&ka(w&ka(x&ka)U&ka)Y&ka!g&ka)j&ka!W&kaQ&ka!d&ka!U&ka#v&ka~Om$oO!T(ZO(r$nO~O&r#WO&s$wO]&pae&pam&pas&pat&pau&pav&paw&pax&pay&paz&pa!O&pa!V&pa!r&pa!s&pa!t&pa!u&pa!v&pa!x&pa!{&pa%v&pa(r&pa)T&pa)V&pa)W&pa)X&pa[&pa!T&pa!X&pa!Y&pa![&pa!^&pa!_&pa!a&pa!b&pa!c&pa!e&pa!f&pa!h&pa(u&pa(w&pa(x&pa)U&pa)Y&pa!g&pa)j&pa!W&paQ&pa!d&pa(v&pa!U&pa#v&pa~O&s.zO~P!(zO!Y#qO![#rO!f#zO)T#mO!^'Ua!_'Ua!a'Ua!b'Ua!c'Ua!e'Ua!h'Ua(u'Ua)U'Ua)V'Ua)W'Ua)X'Ua)Y'Ua!g'Ua)j'Ua['Ua!W'Ua(v'Ua!U'UaQ'Ua!d'Ua~P#3zO!V'dX!X'dX!Y'dX!['dX!^'dX!_'dX!a'dX!b'dX!c'dX!e'dX!f'dX!h'dX(u'dX(w'dX(x'dX)T'dX)U'dX)V'dX)W'dX)Y'dX['dX~O].|O)X'dX!g'dX)j'dX!W'dX(v'dX!U'dXQ'dX!d'dX~P%2xO!Y#qO![#rO!f#zO)T#mO!^'Wa!_'Wa!a'Wa!b'Wa!c'Wa!e'Wa!h'Wa(u'Wa)U'Wa)V'Wa)W'Wa)X'Wa)Y'Wa!g'Wa)j'Wa['Wa!W'Wa(v'Wa!U'WaQ'Wa!d'Wa~P#3zO]#}O!T$WO!V.}O&r#WO&s$wO~O!X'Za!Y'Za!['Za!^'Za!_'Za!a'Za!b'Za!c'Za!e'Za!f'Za!h'Za(u'Za(w'Za(x'Za)T'Za)U'Za)V'Za)W'Za)X'Za)Y'Za!g'Za)j'Za['Za!W'Za(v'Za!U'ZaQ'Za!d'Za~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^a)X'^a!g'^a)j'^a['^a!W'^a(v'^a!U'^aQ'^a!d'^a~P#3zOPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W%]O)Y!ZO)[XO)hcO)idO)j%[O~O!W/QO~P%:oOS(qOT(nO]#}O*W(pO~O]/TO'f/UO*W/RO~OS/YOT(nO*W/XO~O]#}O~Q'na!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v/[O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X#Zi[#Zi~P#3zO]dXmhXqdXqjX!VdX!XdX!YdX![dX!^dX!_dX!adX!bdX!cdX!edX!fdX!gdX!hdX(udX(wdX(xdX)TdX)UdX)VdX)WdX)XdX)YdX)jdX[dX!WdX(vdX!TdX#vdX!UdXQdX!ddX~Oe/^O%Y*TO(y/]O~Om/_O~Om/`O~Oq&fO]ci!Vci!Xci!Yci![ci!^ci!_ci!aci!bci!cci!eci!fci!gci!hci(uci(wci(xci)Tci)Uci)Vci)Wci)Xci)Yci)jci[ci!Wci(vci!UciQci!dci~O!W/bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO![#rO)T#mO!Y&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y&zi![&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)V#nO)W#pO!h&zi(u&zi)U&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&zi!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&zi!_&zi!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO!^&zi!_&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)T#mO!^&zi!_&zi!a&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!f#zO)T#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO)T#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO!h&zi(u&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/cO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[(sX~P#3zO!h/cO[(sX~O[/eO~O]%Xaq%Xa!X%Xa!Y%Xa![%Xa!^%Xa!_%Xa!a%Xa!b%Xa!c%Xa!e%Xa!f%Xa!h%Xa(u%Xa(w%Xa(x%Xa)U%Xa)V%Xa)W%Xa)X%Xa)Y%Xa!g%Xa)j%Xa[%Xa!W%Xa!T%Xa#v%Xa(v%Xa!U%XaQ%Xa!d%Xa~O)T/fO!V%Xa~P&,aO[/fO~O!W/fO~O!V/gO)T%Xa~P&,aO!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi)Y'Zi!g'Zi)j'Zi['Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^i)X'^i!g'^i)j'^i['^i!W'^i(v'^i!U'^iQ'^i!d'^i~P#3zO!W/lO~P%:oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/nO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U)rX~P#3zO(r/qO~O!V/sO(w)sO)j/uO~O!h/nO!U)rX~O!U/vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO)Y#|O!h`i(u`i)X`i!g`i)j`i[`i!W`i(v`i!U`iQ`i!d`i~P#3zO!R/wO~Om){O]!Qa!h!Qa)P!Qa)Y!Qa~OP0PO]0OOm0PO!R0PO!T/|O!V/}O!X0PO!Y0PO![0PO!^0PO!_0PO!a0PO!b0PO!c0PO!e0PO!f0PO!g0PO!h0PO!i0PO(pQO(v0PO(w0PO(x0PO)T/yO)U/zO)V/zO)W/{O)X0PO)Y0PO)[XO~O[0SO~P&6yO!R$[O~O!h*OO)P)Ra)Y)Ra~O)P0WO~O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~Oe)oO%Y*TO(y$OO~O)X0YO~O]oXeoXmnXqoXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!VoX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX!ToX!hoX)YoX[oXQoX!doX~O!loX(voX)XoX!XoX!YoX![oX!^oX!_oX!aoX!boX!coX!eoX!foX(uoX(woX(xoX)UoX!goX)joX!WoX!UoX#voX#ToX#VoX#poXboX|oX!ooX#aoX#boX#ioX#toX${oX%coX%eoX%koX%loX%ooX&moX)QoX~P&:uOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])aie)aim)ai!V)ai!{)ai%v)ai(r)ai)T)ai)V)ai)W)aiQ)ai!d)ai!h)ai)Y)ai)j)ai[)ai!T)ai&r)ai(v)ai)X)ai~P&?sO]&cO!V&bO[#Qi!T#Qi!h#Qi#v#Qi)X#Qi)j#QiQ#Qi!d#Qi(v#Qi~O[raQra!dra!hra)Yra)Xra~P#9{O[raQra!dra!hra)Yra)Xra~P#IkO]&cO!V+kO[raQra!dra!hra)Yra)Xra~O!h*iO!W)ka~O!h*mO!W*Oa~OPmOb!]Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!X!XO!Y!WO!i!YO!s!aO!t!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)XiO)Y!ZO)[XO)hcO)idO~O]eOe!POmTO!T*qO!U&TO!V0hO!opO!r!`O!u!bO!{!dO#i#OO#p!xO#t!fO$R!gO$T!hO${!tO$}!uO%U!yO%c!zO%g!{O%o!|O%v!}O%|#PO(rRO(w)sO)TaO)V|O)W{O~P&DuO!h*tO)X)qa~OPmO]$eOb!]Om:|O|#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;UO)QYO)T$kO)W$kO)Y0nO)[XO)hcO)idO[(sP[)dP~P&?sO!h*mO!W*OX~O]#}O!T$WO~O!h0sO!T)zX#v)zX)j)zX~O)X0uO~O)X0vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X0xO)Y#|O~P#3zO)X0vO~P!?WO]1SOe!POm%bO!V1QO!{!dO%v$mO(r$xO)T0zO)Y0}O~O)V1OO)W1OO)j0{OQ#PX!d#PX!h#PX[#PX~P' dO!h1TOQ)lX!d)lX~OQ1VO!d1VO~O)Y1YO)j1XOQ#`X!d#`X!h#`X~P!<[O)Y1YO)j1XOQ#`X!d#`X!h#`X~P!;bOq&UO~O[#ka!T#ka#v#ka)X#ka)j#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(v#ka~P#IkO]&cO!V+kO[#ka!T#ka#v#ka)X#ka)j#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(v#ka~O!W1_O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1_O)T1aO~P$%pO!W1_O~P!(zO]#ja!T#ja!V#ja[#ja#v#ja)X#ja)j#jaQ#ja!d#ja!h#ja)Y#ja!x#ja(v#ja~P$ xO[1eO]&cO!V+kO~O!h1fO[)dX~O[1hO~O]&cO!V+kO[#na!T#na#v#na)X#na)j#naQ#na!d#na!h#na)Y#na!x#na(v#na~O]1lOs#SXt#SXu#SXv#SXw#SXx#SXy#SXz#SX!T#SX!V#SX#T#SX#p#SX(x#SX)V#SX)W#SX!l#SX!x#SX#V#SX#v#SX(v#SX)j#SX[#SX!h#SX)X#SXQ#SX!d#SX)Y#SX~O]1mO~O]1pOm$oO!V$fO#V#QO(r$nO)hcO)idO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!l+zO#T+vO#V+yO#p+wO(x+tO)V+zO)W+zO~O])fX!T)fX!V)fX!x)fX#v)fX(v)fX)j)fX[)fX!h)fX)X)fXQ)fX!d)fX~P'+}O!x!cO]#Ri!T#Ri!V#Ri#v#Ri(v#Ri)j#Ri[#Ri!h#Ri)X#RiQ#Ri!d#Ri~O!W1xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1xO)T1zO~P$%pO!W1xO~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*RX!d*RX!h*RX~P#3zO)Y1{OQ({X!d({X!h({X~O!h1|OQ(zX!d(zX~OQ2OO!d2OO~O[2PO~O#t$lO)QYO~P8zOm-eO!TxO)j2TO~O[2UO~O#x,aOP#ui]#uib#uie#uim#uis#uit#uiu#uiv#uiw#uix#uiy#uiz#ui|#ui!O#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$R#ui$T#ui$Y#ui$Z#ui$`#ui$e#ui$g#ui$h#ui$k#ui$m#ui$o#ui$q#ui$s#ui$u#ui$w#ui${#ui$}#ui%U#ui%_#ui%`#ui%a#ui%c#ui%e#ui%g#ui%l#ui%o#ui%v#ui%|#ui&m#ui&r#ui&s#ui'Q#ui'R#ui'V#ui'Y#ui'a#ui'b#ui(k#ui(p#ui(r#ui)Q#ui)T#ui)V#ui)W#ui)X#ui)Y#ui)[#ui)h#ui)i#ui!U#ui$c#ui!n#ui%k#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(v2ZO(w,cO)Q$Ua)X$Ua~O)QYO)X2]O~O[2^O~P,]O[2^O)X#jO~O[2^O~O$c2cOP$_i]$_ib$_ie$_im$_is$_it$_iu$_iv$_iw$_ix$_iy$_iz$_i|$_i!O$_i!T$_i!V$_i!X$_i!Y$_i!i$_i!o$_i!r$_i!s$_i!t$_i!u$_i!v$_i!x$_i!{$_i#V$_i#a$_i#b$_i#i$_i#p$_i#t$_i#v$_i$R$_i$T$_i$Y$_i$Z$_i$`$_i$e$_i$g$_i$h$_i$k$_i$m$_i$o$_i$q$_i$s$_i$u$_i$w$_i${$_i$}$_i%U$_i%_$_i%`$_i%a$_i%c$_i%e$_i%g$_i%l$_i%o$_i%v$_i%|$_i&m$_i&r$_i&s$_i'Q$_i'R$_i'V$_i'Y$_i'a$_i'b$_i(k$_i(p$_i(r$_i)Q$_i)T$_i)V$_i)W$_i)X$_i)Y$_i)[$_i)h$_i)i$_i!U$_i~O]1pO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X2fO)Y#|O~P#3zOPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)X2iO)Y!ZO)[XO)hcO)idO~P&?sO)X2fO~O(r-UO~O)QYO)j2lO~O)X2nO~O]-YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO!|%RO(r-UO)T-VO~O)T2sO~O]&cO!V2uO!h2vO)X)uX~O]-YO!{!dO(r-UO)T-VO~O)X2yO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xi!o$Xi!{$Xi#i$Xi#p$Xi#t$Xi#v$Xi$R$Xi$T$Xi$Y$Xi$Z$Xi${$Xi%U$Xi%c$Xi%g$Xi%o$Xi%|$Xi(k$Xi)V$Xi!U$Xi$c$Xi~P$0kOm:{O(r:nO~P0zO]2}O~O)X2SO~O!u3PO(r%nO~O[3SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3TO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[3UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO]&cO!V+kO!T%ui#v%ui)X%ui)j%ui~O!W3VO~Om:yO)X(}X~P$GQOb!TOm$oO|3]O#a#VO#b3[O#t!fO%e#UO%l3^O&m!RO&r#WO&s!TO(r$nO)QYO~P&?sOm;cO!o-pO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)QYO~P!8jO]&cO!V&bO)X3`O~O)X3aO~O)QYO)X3aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X3bO)Y#|O~P#3zO)X3bO~O)X3eO~O!U3gO~P$JbOm$oO(r$nO~O]3iO!T'yO~P'+iO!T(QO!l3lO(v(PO])Oae)Oam)Oas)Oat)Oau)Oav)Oaw)Oax)Oay)Oaz)Oa!O)Oa!V)Oa!r)Oa!s)Oa!t)Oa!u)Oa!v)Oa!x)Oa!{)Oa%v)Oa&r)Oa&s)Oa(r)Oa)T)Oa)V)Oa)W)Oa)X)Oa[)Oa!X)Oa!Y)Oa![)Oa!^)Oa!_)Oa!a)Oa!b)Oa!c)Oa!e)Oa!f)Oa!h)Oa(u)Oa(w)Oa(x)Oa)U)Oa)Y)Oa!g)Oa)j)Oa!W)OaQ)Oa!d)Oa!U)Oa#v)Oa~Om$oO!n.cO!o.cO(r$nO~O!h3pO)Y3rO!T)_X~O!o3tO)QYO~P8zO)X3uO~PGVO]3zOm({O!T$WO!{!dO%v$mO&r#WO(r(zO(v4OO)T3wO)V3{O)W3{O~O)X4PO)j4RO~P(&eOm;dO!U4TO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)QYO~P!8jOm;dO%v!}O(r;VO~P!8jO(v4UO~Om$oO!T(QO(r$nO(v(PO)QYO~O!l3lO~P((sO)j4WO!U&oX!h&oX~O!h4XO!U*QX~O!U4ZO~Ob4]Om$oO&m!RO(r$nO~O!T(ZO]&kie&kim&kis&kit&kiu&kiv&kiw&kix&kiy&kiz&ki!O&ki!V&ki!r&ki!s&ki!t&ki!u&ki!v&ki!x&ki!{&ki%v&ki&r&ki&s&ki(r&ki)T&ki)V&ki)W&ki)X&ki[&ki!X&ki!Y&ki![&ki!^&ki!_&ki!a&ki!b&ki!c&ki!e&ki!f&ki!h&ki(u&ki(w&ki(x&ki)U&ki)Y&ki!g&ki)j&ki!W&kiQ&ki!d&ki!U&ki#v&ki~O(v&ki~P(*TO(v.uO~P(*TO[4`O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[4`O~O[4aO~O]#}O!T$WO!V'Zi!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi)Y'Zi!g'Zi)j'Zi['Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~OPmOb%QOm:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)Y!ZO)[XO)hcO)idO]#]aq#]a!T#]a!V#]a)T#]a)V#]a)W#]a~O(r%nO)Y4fO[*YP~O*W4eO~O'f4hO*W4eO~O*W4iO~OmnXqoXq&wX~Oe4kO%Y*TO(y/]O~Oe4kO%Y*TO(y4lO~O!h/cO[(sa~O!W4pO~O]&cO!V+kO!T%uq#v%uq)X%uq)j%uq~O]#}O!T$WO!X'Zq!Y'Zq!['Zq!^'Zq!_'Zq!a'Zq!b'Zq!c'Zq!e'Zq!f'Zq!h'Zq(u'Zq(w'Zq(x'Zq)T'Zq)U'Zq)V'Zq)W'Zq)X'Zq)Y'Zq!g'Zq)j'Zq['Zq!W'Zq(v'Zq!U'ZqQ'Zq!d'Zq~O!V'Zq~P(5bO!V.}O&r#WO&s$wO~P(5bO!T$WO!V)rO(w)sO!U(UX!h(UX~P!JwO!h/nO!U)ra~O!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!U4|O~P&6yO!W4|O~P&6yO[4|O~P&6yO[5RO~P&6yO]5SO!h'ua)P'ua)Y'ua~O!h*OO)P)Ri)Y)Ri~O]&cO!V&bO[#Qq!T#Qq!h#Qq#v#Qq)X#Qq)j#QqQ#Qq!d#Qq(v#Qq~O[riQri!dri!hri)Yri)Xri~P#IkO]&cO!V+kO[riQri!dri!hri)Yri)Xri~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'Tq)X'Tq!g'Tq)j'Tq['Tq!W'Tq(v'Tq!U'TqQ'Tq!d'Tq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W'|a!h'|a~P#3zO!W5XO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5YO(u#gO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O!U)rX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h#{i)X#{i~P#3zO]*vO!T$WO!V&bO)j*rO!h(Va)X(Va~O!h1fO[)dX]'dX~P%2xO)Y5[O!T%qa!h%qa#v%qa)j%qa~O!h0sO!T)za#v)za)j)za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X5_O)Y#|O~P#3zO]1SOe!POm;[O!V1QO!{!dO%v$mO(r$xO)T;xO)V5aO)W5aO~OQ#Pa!d#Pa!h#Pa[#Pa~P(DjO]1SOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V1QO!{!dO!|%RO%v$mO(r$xOQ#kX!d#kX!h#kX[#kX~Om%bO)T0zO)V;yO)W;yO~P(ElO]&cOQ#Pa!d#Pa!h#Pa[#Pa~O!V&bO)j5eO~P(GZO(r%nOQ#dX!d#dX!h#dX[#dX~O)V;yO)W;yOQ#nX!d#nX!h#nX[#nX~P' dO!V+kO~P(GZO]1SOb!TOe!POm;]O|#RO!V1QO!{!dO#a#VO#b#TO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO(r;QO)QYO)T;xO)V5aO)W5aO)Y+nO[)dP~P&?sO!h1TOQ)la!d)la~Oq&fO)j5jOQ#`am(}X!d#`a!h#`a)Y(}X~P$GQO(r-UOQ#ga!d#ga!h#ga~Oq&fO)j5jOQ#`a])^Xe)^Xm)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^Xz)^X!O)^X!T)^X!V)^X!d#`a!h#`a!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)T)^X)V)^X)W)^X)Y)^X~O#a5mO#b5mO~O]&cO!V+kO[#ki!T#ki#v#ki)X#ki)j#kiQ#ki!d#ki!h#ki)Y#ki!x#ki(v#ki~O!W5oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W5oO~P!(zO!W5oO)T5qO~P$%pO]#ji!T#ji!V#ji[#ji#v#ji)X#ji)j#jiQ#ji!d#ji!h#ji)Y#ji!x#ji(v#ji~P$ xO)QYO)Y5sO~P8zO!h1fO[)da~O&r#WO&s$wO!T#qa!x#qa#v#qa(v#qa)j#qa[#qa!h#qa)X#qaQ#qa!d#qa)Y#qa~P#NeO[5xO~P!(zO[)oP~P!4xO)U6OO)V5|O]#Ua!T#Ua!V#Ua)T#Ua)W#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Uaz#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(v#Ua(x#Ua)j#Uab#Uae#Uam#Ua|#Ua!O#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua${#Ua%c#Ua%e#Ua%k#Ua%l#Ua%o#Ua%v#Ua&m#Ua&r#Ua&s#Ua(r#Ua)Q#Ua)X#Ua[#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(v#Rq)j#Rq[#Rq!h#Rq)X#RqQ#Rq!d#Rq~O!W6TO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W6TO~P!(zO!h1|OQ(za!d(za~O)X6YO~Om-eO!TxO)j6ZO~O]*vO!T$WO!V&bO!h*tO)X)qX~O)j6_O~P)+cO[6aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[6aO~O$c6cOP$_q]$_qb$_qe$_qm$_qs$_qt$_qu$_qv$_qw$_qx$_qy$_qz$_q|$_q!O$_q!T$_q!V$_q!X$_q!Y$_q!i$_q!o$_q!r$_q!s$_q!t$_q!u$_q!v$_q!x$_q!{$_q#V$_q#a$_q#b$_q#i$_q#p$_q#t$_q#v$_q$R$_q$T$_q$Y$_q$Z$_q$`$_q$e$_q$g$_q$h$_q$k$_q$m$_q$o$_q$q$_q$s$_q$u$_q$w$_q${$_q$}$_q%U$_q%_$_q%`$_q%a$_q%c$_q%e$_q%g$_q%l$_q%o$_q%v$_q%|$_q&m$_q&r$_q&s$_q'Q$_q'R$_q'V$_q'Y$_q'a$_q'b$_q(k$_q(p$_q(r$_q)Q$_q)T$_q)V$_q)W$_q)X$_q)Y$_q)[$_q)h$_q)i$_q!U$_q~O)X6dO~OPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)X6fO)Y!ZO)[XO)hcO)idO~P&?sO(v6hO)j*rO~P)+cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X6fO)Y#|O~P#3zO[6jO~P!(zO)X6nO~O)X6oO~O]-YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO(r-UO)T-VO~O]&cO!V2uO!h%Oa)X%Oa[%Oa~O!W6uO)T6vO~P$%pO!h2vO)X)ua~O[6yO]&cO!V2uO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xq!o$Xq!{$Xq#i$Xq#p$Xq#t$Xq#v$Xq$R$Xq$T$Xq$Y$Xq$Z$Xq${$Xq%U$Xq%c$Xq%g$Xq%o$Xq%|$Xq(k$Xq)V$Xq!U$Xq$c$Xq~P$0kOPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)QYO)T$kO)W$kO)X6{O)Y!ZO)[XO)hcO)idO~P&?sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X7OO)Y#|O~P#3zO)X7PO~OP7QO(pQO~Om*[O)X)^X~P$GQOq&fOm(}X)X)^X~P$GQO)X7SO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&Sa~P#3zO!U7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO)X7VO~OPmO]$eOb!]Om:|O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;UO)QYO)T$kO)W$kO)Y0nO)[XO)hcO)idO[)dP~P&?sO!h3pO)Y7ZO!T)_a~O!h3pO!T)_a~O)X7`O)j7bO~P(&eO)X7dO~PGVO]3zOm({Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO!|%RO%v$mO&r#WO(r(zO)T3wO)V3{O)W3{O~O)T7hO~O]&cO!T*qO!V7jO!h7kO#v!eO(v4OO~O)X7`O)j7mO~P)FwO]3zOm({O!{!dO%v$mO&r#WO(r(zO)T3wO)V3{O)W3{O~Oq&fO])cX!T)cX!V)cX!h)cX#v)cX(v)cX)X)cX)j)cX[)cX~O)X7`O~O!T(QO!l7sO(v(PO])Oie)Oim)Ois)Oit)Oiu)Oiv)Oiw)Oix)Oiy)Oiz)Oi!O)Oi!V)Oi!r)Oi!s)Oi!t)Oi!u)Oi!v)Oi!x)Oi!{)Oi%v)Oi&r)Oi&s)Oi(r)Oi)T)Oi)V)Oi)W)Oi)X)Oi[)Oi!X)Oi!Y)Oi![)Oi!^)Oi!_)Oi!a)Oi!b)Oi!c)Oi!e)Oi!f)Oi!h)Oi(u)Oi(w)Oi(x)Oi)U)Oi)Y)Oi!g)Oi)j)Oi!W)OiQ)Oi!d)Oi!U)Oi#v)Oi~O(r%nO!U(fX!h(fX~O!h4XO!U*Qa~Oq&fO]*Pae*Pam*Pas*Pat*Pau*Pav*Paw*Pax*Pay*Paz*Pa!O*Pa!T*Pa!V*Pa!r*Pa!s*Pa!t*Pa!u*Pa!v*Pa!x*Pa!{*Pa%v*Pa&r*Pa&s*Pa(r*Pa)T*Pa)V*Pa)W*Pa)X*Pa[*Pa!X*Pa!Y*Pa![*Pa!^*Pa!_*Pa!a*Pa!b*Pa!c*Pa!e*Pa!f*Pa!h*Pa(u*Pa(w*Pa(x*Pa)U*Pa)Y*Pa!g*Pa)j*Pa!W*PaQ*Pa!d*Pa(v*Pa!U*Pa#v*Pa~O!T(ZO]&kqe&kqm&kqs&kqt&kqu&kqv&kqw&kqx&kqy&kqz&kq!O&kq!V&kq!r&kq!s&kq!t&kq!u&kq!v&kq!x&kq!{&kq%v&kq&r&kq&s&kq(r&kq)T&kq)V&kq)W&kq)X&kq[&kq!X&kq!Y&kq![&kq!^&kq!_&kq!a&kq!b&kq!c&kq!e&kq!f&kq!h&kq(u&kq(w&kq(x&kq)U&kq)Y&kq!g&kq)j&kq!W&kqQ&kq!d&kq(v&kq!U&kq#v&kq~OPmOb%QOm:zO!T$WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)[XO)hcO)idO~O]*Ui!V*Ui!X*Ui!Y*Ui![*Ui!^*Ui!_*Ui!a*Ui!b*Ui!c*Ui!e*Ui!f*Ui!h*Ui(u*Ui(w*Ui(x*Ui)T*Ui)U*Ui)V*Ui)W*Ui)X*Ui)Y*Ui!g*Ui)j*Ui[*Ui!W*Ui(v*Ui!U*UiQ*Ui!d*Ui~P*&WO[7xO~O!W7yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^q)X'^q!g'^q)j'^q['^q!W'^q(v'^q!U'^qQ'^q!d'^q~P#3zO!h7zO[*YX~O[7|O~O*W7}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h_y)X_y!g_y)j_y[_y!W_y(v_y!U_yQ_y!d_y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[(ha!h(ha~P#3zO]#}O!T$WO!V'Zy!X'Zy!Y'Zy!['Zy!^'Zy!_'Zy!a'Zy!b'Zy!c'Zy!e'Zy!f'Zy!h'Zy(u'Zy(w'Zy(x'Zy)T'Zy)U'Zy)V'Zy)W'Zy)X'Zy)Y'Zy!g'Zy)j'Zy['Zy!W'Zy(v'Zy!U'ZyQ'Zy!d'Zy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^y)X'^y!g'^y)j'^y['^y!W'^y(v'^y!U'^yQ'^y!d'^y~P#3zO]&cO!V+kO!T%uy#v%uy)X%uy)j%uy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Ua!h(Ua~P#3zO!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U#}i!h#}i~P#3zO!U8PO~P&6yO!W8PO~P&6yO[8PO~P&6yO[8RO~P&6yO]&cO!V&bO[#Qy!T#Qy!h#Qy#v#Qy)X#Qy)j#QyQ#Qy!d#Qy(v#Qy~O]&cO!V+kO[rqQrq!drq!hrq)Yrq)Xrq~O]&cOQ#Pi!d#Pi!h#Pi[#Pi~O!V+kO~P*9jOQ#nX!d#nX!h#nX[#nX~P(DjO!V&bO~P*9jOQ(OX](OXe'qXm'qXs(OXt(OXu(OXv(OXw(OXx(OXy(OXz(OX!V(OX!d(OX!h(OX!{'qX%v'qX(r'qX)T(OX)V(OX)W(OX[(OX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_i!d#_i!h#_i[#_i~P#3zO&r#WO&s$wOQ#fi!d#fi!h#fi~O(r-UO)Y1YO)j1XOQ#`X!d#`X!h#`X~O!W8WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8WO~P!(zO!T#qi!x#qi#v#qi(v#qi)j#qi[#qi!h#qi)X#qiQ#qi!d#qi)Y#qi~O]&cO!V+kO~P*?fO]&YO!V&WO&r#WO&s$wO)T&VO)V&ZO)W&ZO~P*?fO[8YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!h8ZO[)oX~O[8]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*TX!d*TX!h*TX~P#3zO)Y8`OQ*SX!d*SX!h*SX~O)X8bO~O[$bi!h#{a)X#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X8eO)Y#|O~P#3zO[8gO~P!(zO[8gO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[8gO~O]&cO!V&bO(v8mO~O)X8nO~O]&cO!V2uO!h%Oi)X%Oi[%Oi~O!W8qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8qO)T8sO~P$%pO!W8qO~P!(zO]&cO!V2uO!h(Ya)X(Ya~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X8tO)Y#|O~P#3zO)X2iO~P!(zO)X8tO~OP%oO[8uO(pQO~O[8uO~O)X8vO~P%%eO#T8yO(x.PO)X8wO~O!h3pO!T)_i~O)Y8}O!T'wa!h'wa~O)X9PO)j9RO~P)FwO)X9PO~O)X9PO)j9VO~P(&eOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~P)GgO]&cO!V7jO!T!ya!h!ya#v!ya(v!ya)X!ya)j!ya[!ya~O!W9^O)T9_O~P$%pO!T$WO!h7kO(v4OO)X9PO)j9VO~O!T$WO~P#EfO[9bO]&cO!V7jO~O]&cO!V7jO!T&aa!h&aa#v&aa(v&aa)X&aa)j&aa[&aa~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&ba~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X9PO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U&oi!h&oi~P#3zO!V.}O]']i!T']i!X']i!Y']i![']i!^']i!_']i!a']i!b']i!c']i!e']i!f']i!h']i(u']i(w']i(x']i)T']i)U']i)V']i)W']i)X']i)Y']i!g']i)j']i[']i!W']i(v']i!U']iQ']i!d']i~O(r%nO)Y9eO~O!h7zO[*Ya~O[9gO~P&6yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Ua)X#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_q!d#_q!h#_q[#_q~P#3zO&r#WO&s$wOQ#fq!d#fq!h#fq~O)j5jOQ#`a!d#`a!h#`a~O]&cO!V+kO!T#qq!x#qq#v#qq(v#qq)j#qq[#qq!h#qq)X#qqQ#qq!d#qq)Y#qq~O!h8ZO[)oa~O)V5|O]&Vi!T&Vi!V&Vi)T&Vi)U&Vi)W&Vis&Vit&Viu&Viv&Viw&Vix&Viy&Viz&Vi!l&Vi!x&Vi#T&Vi#V&Vi#p&Vi#v&Vi(v&Vi(x&Vi)j&Vib&Vie&Vim&Vi|&Vi!O&Vi!o&Vi!r&Vi!s&Vi!t&Vi!u&Vi!v&Vi!{&Vi#a&Vi#b&Vi#i&Vi#t&Vi${&Vi%c&Vi%e&Vi%k&Vi%l&Vi%o&Vi%v&Vi&m&Vi&r&Vi&s&Vi(r&Vi)Q&Vi)X&Vi[&Vi!h&ViQ&Vi!d&Vi~O)X9jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[$bq!h#{i)X#{i~P#3zO[9lO~P!(zO[9lO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[9lO~O]&cO!V&bO(v9oO~O[9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[9pO~O]&cO!V2uO!h%Oq)X%Oq[%Oq~O!W9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W9tO~P!(zO)X6fO~P!(zO)X9uO~O)X9vO~O(x.PO)X9vO~O!h3pO!T)_q~O)Y9xO!T'wi!h'wi~O!T$WO!h7kO(v4OO)X9yO)j9{O~O)X9yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X9yO)Y#|O~P#3zO)X9yO)j:OO~P)FwO]&cO!V7jO!T!yi!h!yi#v!yi(v!yi)X!yi)j!yi[!yi~O!W:SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:SO)T:UO~P$%pO!W:SO~P!(zO]&cO!V7jO!T(da!h(da(v(da)X(da)j(da~O[:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:WO~O[:]O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:]O~O]&cO!V2uO!h%Oy)X%Oy[%Oy~O)X:^O~O)X:_O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:_O)Y#|O~P#3zO!T$WO!h7kO(v4OO)X:_O)j:bO~O]&cO!V7jO!T!yq!h!yq#v!yq(v!yq)X!yq)j!yq[!yq~O!W:dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:dO~P!(zO[:fO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:fO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:hO)Y#|O~P#3zO)X:hO~O]&cO!V7jO!T!yy!h!yy#v!yy(v!yy)X!yy)j!yy[!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:lO)Y#|O~P#3zO)X:lO~O]ZXmhXqZXqjX!TjX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(v$]X(wZX(xZX)TZX)UZX)VZX)WZX)XZX)YZX)jZX~O]%WXmnXqoXq%WX!ToX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gnX!h%WX(u%WX(w%WX(x%WX)T%WX)U%WX)V%WX)W%WX)Y%WX)jnX[%WXQ%WX!d%WX~O)X%WX!W%WX(v%WX!U%WX~P+GrO]oX]%WXeoXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!VoX!V%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX[oX[%WX!hoX)YoX~O)XoX)joX~P+JSO]%WXmnXqoXq%WX!V%WX!h%WXQ%WX!d%WX[%WX~O!T%WX#v%WX)X%WX)j%WX(v%WX~P+LmOQoXQ%WX!ToX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!doX!d%WX!e%WX!f%WX!gnX!h%WX(u%WX(w%WX(x%WX)T%WX)U%WX)V%WX)W%WX)Y%WX)jnX~P+JSO]oX]%WXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!V%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX~O!ToX(voX)XoX)joX~P, eOeoX!VoX)X%WX~P, eOmnXqoX)X%WX~Oe)oO%Y)pO(y:oO~Oe)oO%Y)pO(y:tO~Oe)oO%Y)pO(y:pO~Oe$RO%Y*TO'[$TO'_$UO(y:oO~Oe$RO%Y*TO'[$TO'_$UO(y:qO~Oe$RO%Y*TO'[$TO'_$UO(y:sO~O[jX]jXsjXtjXujXvjXwjXxjXyjXzjX!VjX&rjX&sjX)TjX)VjX)WjXejX!OjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX(rjX~P#1jO]ZXmhXqZXqjX!VZX!hZX)XZX)jZX~O!TZX#vZX(vZX~P,'{OmhXqjX)QjX)XZX)jjX~O]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VZX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX[ZX[jX!hjX)YjX)jjX~O)XZX~P,)VO]ZX]jXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!TjX!VZX!VjX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hjX&rjX&sjX(uZX(wZX(xZX)TZX)TjX)UZX)VZX)VjX)WZX)WjX)YZX)YjX)jZX~OQZXQjX!dZX!djX~P,+pO]jXejXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX~P#1jO]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VZX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX~O)XjX~P,0rO[ZX[jXejX!OjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX(rjX)jjX~P,+pO]ZX]jXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!TjX!VZX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX(vjX)TjX)VjX)WjX)XjX)jjX~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~PBUOe$RO%Y*TO(y:oO~Oe$RO%Y*TO(y:pO~Oe$RO%Y*TO(y:vO~Oe$RO%Y*TO(y:uO~O]%hOe!POm%bOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V%kO!{!dO!|%RO%v$mO(r$xO)T;aO)V;bO)W;bO~O]%hOe!POm%bO!V%kO!{!dO%v$mO(r$xO)T;aO)V;bO)W;bO~Oe$RO%Y$SO(y:pO~Oe$RO%Y$SO(y:tO~Om:yO~Om:xO~O]dXmhXqjX!TdX~Oe)oO%Y*TO(y:oO~Oe)oO%Y*TO(y:pO~Oe)oO%Y*TO(y:qO~Oe)oO%Y*TO(y:rO~Oe)oO%Y*TO(y:sO~Oe)oO%Y*TO(y:uO~Oe)oO%Y*TO(y:vO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~P,9OO](}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)j(}X~Om:xO!T(}X(v(}X)X(}X~P,<}O]&wXmnXqoX!T&wX~Oe4kO%Y*TO(y;tO~Om;[O)T;xO)V5aO)W5aO~P(ElOe!POm%bO!{!dO%v$mO(r$xO~O]1SO!V1QO)T0zO)V;yO)W;yOQ#nX!d#nX!h#nX[#nX~P,?yO)T;YO~Om;hO~Om;iO~Om;jO~Om;lO~Om;mO~Om;nO~Om;lO!T$WOQ(}X!d(}X!h(}X)Y(}X[(}X)j(}X~P$GQOm;jO!T$WO~P$GQOm;hO!g$YO)j$YO~Om;jO!g$YO)j$YO~Om;lO!g$YO)j$YO~Om;iO[(}X!h(}X)Y(}X)j(}X~P$GQOe/^O%Y*TO(y;tO~Om;uO~O)T<YO~OV'e'h'i'g(p)[!R(rST%Z!Y!['je%[!i'R!f]'f*Z'k(w!^!_'l'm'l~",
    goto: "%5]*ZPPPPPP*[P*_PP.TPP4i7j7j:tP:t>OP>i>{?aFXMX!&]!,sP!3m!4b!5VP!5qPPPPPPPP!6[P!7tP!9V!:oP!:uPPPPPP!:xP!:xPP!:xPPPPPPPPP!;U!>lP!>oPP!?]!@QPPPPP!@UP>l!AgPP>l!Cn!Eo!E}!Gd!ITP!I`P!Io!Io!MP#!`##v#'S#*^!Eo#*hPP!Eo#*o#*u#*h#*h#*xP#*|#+k#+k#+k#+k!ITP#,U#,g#.|P#/bP#0}P#1R#1Z#2O#2Z#4i#4q#4q#1RP#1RP#4x#5OP#5YPP#5u#6d#7U#5uP#7v#8SP#5uP#5uPP#5u#5uP#5uP#5uP#5uP#5uP#5uP#5uP#8V#5Y#8sP#9YP#9o#9o#9o#9o#9|#1RP#:d#?`#?}PPPPPPPP#@uP#ATP#ATP#Aa#Dn#9OPP#@}#EQP#Ee#Ep#Ev#Ev#@}#FlP#1R#1R#1R#1R#1RP!Io#GW#G_#G_#G_#Gc!Ly#Gm!Ly#Gq!E}!E}!E}#Gt#L^!E}>l>l>l$#V!@Q!@Q!@Q!@Q!@Q!@Q!6[!6[!6[$#jP$%V$%e!6[$%kPP!6[$'y$'|#@l$(P:t7j$+V$-Q$.q$0a7jPP7j$2T7jP7j7jP7jP$5Z7jP7jPP7j$5gPPPPPPPPP*[P$8o$8u$;^$=d$=j$>Q$>[$>g$>v$>|$@[$AZ$Ab$Ai$Ao$Aw$BR$BX$Bd$Bj$Bs$B{$CW$C^$Ch$Cn$Cx$DP$D`$Df$DlP$Dr$Dz$ER$Ea$F}$GT$GZ$Gb$GkPPPPPPPP$Gq$GuPPPPP$Nw$'y$Nz%$S%&[PP%&i%&lPPPPPPPPP%&x%'{%(R%(V%)|%+Z%+|%,T%.d%.jPPP%.t%/P%/S%/Y%0a%0d%0n%0x%0|%2Q%2s%2y#@uP%3d%3t%3w%4X%4e%4i%4o%4u$'y$'|$'|%4x%4{P%5V%5YR#cP'`mO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fU%om%p7QQ&m!`Q(j#]d0P)}/|/}0O0R4}5O5P5S8QR7Q3Tb}Oaewx{!g&S*q&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0{1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fS%`f0h#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YS%qm!YS&u!h#PQ']!tQ'g!yQ'h!zQ(j#`Q(k#]Q(l#^Q*x%kQ,W&lQ,]&nQ-S'^Q-d'fQ-k'qS.r(Z4XQ/f)gQ0e*mQ2Q,[Q2X,cQ3O-eQ4b.|Q4f/TQ5f0}Q6[2TQ6}3PQ8a6ZQ9e7zR;Z1Q$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(a(e(h(w(x)R)S)T)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:iQ&p!dQ(g#ZQ(s#bQ)j$T[*s%e*W0k2`2g2{Q,^&oQ/O(fQ/S(kQ/Z(tS/i)i/PQ0r+QS4q/j/kR8O4r'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f'a!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ)O#kS+Q%y0sQ/r)sk3}.g3s3w3z3{7c7e7f7h7k9X9Y:RQ)Q#kk3|.g3s3w3z3{7c7e7f7h7k9X9Y:Rl)P#k.g3s3w3z3{7c7e7f7h7k9X9Y:RT+Q%y0s[UOwx!g&S*qW$`[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.o&|;{af{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'i'j'u'y(`(i)l)r*`*b*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0]0h0y0{1Q1a1b1l1p1z2c2i2j2u4O4R4W4a5Y5a5e5q6_6c6f6g6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f;`;xQ;|1Sd;}&x'P'b,w-]-^-a2f2z2}W<O&f*v1|3iQ<P#O[<Q!t'^'f,[2T6ZT<]%y0s[VOwx!g&S*qW$a[e$e(bQ$p.u!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(g)j)p+[+a+t,X,k,z-Q-o.d1T1X1f1k1m2l3t5j8Z&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fQ'r#O|'|#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[l(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS-n't-wQ3W-tU;s(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;x[<Q!t'^'f,[2T6ZW<R&f*v1|3id<S&x'P'b,w-]-^-a2f2z2}Q<Z1ST<]%y0s!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ'[!tz(O#R#S#T#U'}(P(U(^+y.W.X._.`.q3[3]3^3p5}6P7[f-Z'`-T-V-Y2p2q2s2v6q6r8pQ1W+aQ1Z+bQ2k,yQ3X-tQ4[.uQ5l1YR8V5m!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+a+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y|(O#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[Q3X-tR4[.u[WOwx!g&S*qW$b[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;xQ;|1SQ<P#O[<Q!t'^'f,[2T6Z&^<Taf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fd<U&x'P'b,w-]-^-a2f2z2}W<V&f*v1|3iT<]%y0sp$PT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)m$V*U*[/_:w:x:y;h;i;j;k;l;m;n;up$QT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)n$V*U*[/_:w:x:y;h;i;j;k;l;m;n;u^&e}!O$i$j%`%j;Zd&i!U$t%P%l'[(O1W1Z3X4[V/a)O)P3}S%Ye$eQ,T&fQ.{(bQ2m-QQ5y1mQ6V1|Q6m2lR9h8Z#}!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Z#[^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b't(Q)p*]*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3t_(U#R#S#T+b3[3]3^#}ZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b't'x'}(P(Q(U*q*v+[+b,X,h,k,q-P-]-^-a-o-t-w-z._.d.m.q1S1T1f2c2k2z2}3[3]3^3i6c6j8g9l9p:W:]:fQ$]YR0T*OR*Q$]e0P)}/|/}0O0R4}5O5P5S8Q'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fe0P)}/|/}0O0R4}5O5P5S8QR5T0T^(T#R#S#T+b3[3]3^Y.]'}(R(U(V7TU3k.Z.^.qS7X3l4VR9c7s^(S#R#S#T+b3[3]3^[.['}(R(T(U(V7TW3j.Z.].^.qU7W3k3l4VS8z7X7sR:V9cT.k(Q.md]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tQ%tnT1u+}1v!jbOaenpwx{|!g#O$|$}%S%h%w&S't'u(Q*`*b*q-p-w.f.m.o0]0y1S2j5a6g;`;xf-W'`-T-V-Y2p2q2s2v6q6r8pj3x.g3s3w3z3{7c7e7f7h7k9X9Y:Rr;zg$g%d%i&s*Y*t,l,v-_2_;W;X;Y;o;q;vi<^+]0z1O;a;b;p;r;w;y<W<X<Y!O&^y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yz&az%O%W%e&d's*W*_,b-x0Z0[0k0|2`2g2{5V5b6l8iS'{#Q.Xn+l&X*g+f+m+p-j/h0_1R1^4t5W5`5u8XQ2W,a^2t-X2r2x6p6w8o9se7i3y7_7g7o7p9U9W9`:Q:cS+^&U1TY+n&Y&c*v1S3iR5s1f#w!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s't'u(Q*Y*`*b*q*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y`oOwx!g&S't*q-w#U!Paeg{|#O$g$|$}%S%d%h%i&s'u*Y*`*b*t+],l,v-_0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YU%vnp-pQ*}%wS.e(Q.mT3v.f.oW+r&^+l+s1cV+z&a+{7iQ+x&`U+z&a+{7iQ-w'tT.S'y.U'`![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'W!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fW1r+y.X5}6PR2e,s!WjO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fY%Ve$e(b1p3iQ'S!nS(y#i5YQ,m&xQ,x'PS.O'y.UQ2b,nQ6k2iQ6|2}Q8h6fR9m8e'W![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'ayO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k+y,P,R,n,q,w-]-^-a-g.P.Q.U.X.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q5}6P6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ&`yS't#O-uR1[+cS+^&U1TR5n1[Q1P+]R5g1OR1P+]T+^&U1Tz&[%X&V&Y&Z'k)h*d*f+]+e/m0^0y0z1O1S1j5a5v;x;yQ&]yR1n+x!P&[y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yQ+u&^S+|&a7iS1d+l+sQ1t+{R5r1c!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fS%zo.eS&Oq-rQ&_yQ&q!eQ'e!yQ*p%eU*{%v%{3vS+P%x%}Q+q&]Q,Y&mS,Z&n'gQ,r&{S0X*W,bS0o*|*}Q0q+OQ1o+xS2S,]-fQ5U0ZQ5Z0pQ5{1nQ6Y2RQ6]2WQ7n3yQ9S7_R:P9U[uOwx!g&S*qQ,Y&mQ-v'tQ3Y-tR3_-wxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^S%zo.eS&Oq-rQ*p%eU*{%v%{3vS+P%x%}S0X*W,bS0o*|*}Q0q+OQ5U0ZQ5Z0pQ7n3yQ9S7_R:P9UT,_&q,`]uOwx!g&S*q[uOwx!g&S*qQ,Y&mQ,n&xQ,w'PW-`'b-]-a2zQ-v'tQ3Y-tQ3_-wR6{2}[%fg$g,l,v-_2_R0l*t^$XV!U$a$z%P<R<SQ'S!nS)`#}*vS)v$W*qQ)y$YY*s%e*W0k2g2{Q/O(fS/i)i/PS0a*h4aS0j*r6_Q0r+QQ4Q.gQ4n/cS4q/j/kS4v/n5YQ4{/uQ6`2`U7a3s3y4RQ8O4rQ8k6hY9Q7_7b7c7l7mQ9r8mW9z9O9R9U9VQ:Z9oU:a9{9}:OR:j:bS)v$W*qT4v/n5YZ)t$W)u*q/n5YQ&w!hR'x#PS,g&v'vQ2[,eR6^2ZxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fV$h[&|-^!XkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:f!WhO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR'W!q!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR,n&xQ&y!iQ&{!jQ'O!lR,q&zR,o&xxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fX-`'b-]-a2z[uOwx!g&S*qQ,z'PQ-v'tS.k(Q.mR3_-w[uOwx!g&S*qQ,z'PW-`'b-]-a2zT.k(Q.mg-Z'`-T-V-Y2p2q2s2v6q6r8pylOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fb!OOaewx{!g&S*q&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ']!tQ-S'^Q-d'fQ2Q,[Q6[2TR8a6Zj$RT$_%b%r:z:{:|;[;];^;_;c;di)o$V*U:w:x:y;h;i;j;k;l;m;nj$RT$_%b%r:z:{:|;[;];^;_;c;dh)o$V*U:w:x:y;h;i;j;k;l;m;nS/^({<[V4k/_/`;u[uOwx!g&S*qQ-v'tR3_-w[uOwx!g&S*qT.k(Q.m'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fR7R3T[uOwx!g&S*qQ-v'tS.k(Q.mR3_-w[pOwx!g&S*qQ%wnS-p't-wT.f(Q.mS%{o.eS*|%v3vR0p*}Q+R%yR5]0sS%zo.eS&Oq-rU*{%v%{3vS+P%x%}S0o*|*}Q0q+OQ5Z0pQ7n3yQ9S7_R:P9U`qOwx!g&S(Q*q.mS%xn-pU%}p.f.oQ+O%wT-r't-wS'z#Q.XR.Y'{T.R'y.US.S'y.UQ8x7UR9w8yT5}1q8_R6P1q#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fk3|.g3s3w3z3{7c7e7f7h7k9X9Y:RQ4Q.gS7a3s3yU9Q7_7c7lS9z9O9UR:a9}#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR4].uQ(]#US.v([(^S4^.w.xR7w4_Q.s(ZR7u4X#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Zp$w`$d$s%X&r'`(_(f)i*d-T/k1j5k5v8Uq(}#k%y.g0s3s3w3z3{7c7e7f7h7k9X9Y:RR,U&fR6W1|'X!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$q#rS%T%Z'Q'X'Z'a'c(a(e(h(w(x)R)S)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$]#sS%T%Z'Q'X'Z'a'c(h(w(x)R)V)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$Z#tS%T%Z'Q'X'Z'a'c(h(w(x)R)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$c#wS%T%Z'Q'X'Z'a'c(h(w(x)R)U)V)W)X)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i'X![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ/P(fQ/j)iQ4r/kR9d7y']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ#eQR(u#eU$|a;`;xb%Ue$e&f(b-Q1m1|2l8ZQ'_!u!Q*^$|%U'_*`*f+h,P0]0^1b2p6q6t7e8p9X9]:R;W;o;p;v;w<WS*`$}%SQ*f%XS+h&W1QQ,P&bQ0]*bQ0^*dQ1b+kQ2p-VS6q2q2sQ6t2uQ7e3wQ8p6rS9X7f7hQ9]7jQ:R9YQ;W%dS;o;X;YS;p<X<YQ;v;qQ;w;rT<W0z;a[[Owx!g&S*ql$c[&|'}+[,X,h,k-P-^-o-z._.d.ql&|!k%m&y'O,q2c6c6j8g9l9p:W:]:f^'}#R#S#T+b3[3]3^`+[&U&Y&c*v1S1T1f3iS,X&m-tQ,h&wU,k&x'P2}S-P'[2kW-^'b-]-a2zS-o't-wQ-z'xQ._(PS.d(Q.mR.q(UQ)|$[R/x)|Q0R)}Q4}/|Q5O/}Q5P0OY5Q0R4}5O5P8QR8Q5SQ*P$]S0U*P0VR0V*QS.`(P._S3n.`7[R7[3pQ3q.aS7Y3o3rU7^3q7Y8{R8{7ZQ.m(QR4S.m!|_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b't(Q)p*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3tU$r_$u*]U$u`$d&rR*]$sU$}a;`;xd*a$}*b2q6r7f9Y;X;q;r<XQ*b%SQ2q-VQ6r2sQ7f3wQ9Y7hQ;X%dQ;q;YQ;r<YT<X0z;aS+{&a7iR1s+{S*j%Z/pR0c*jQ1U+_R5i1UU+e&V0z;xR1]+eQ+s&^Q1c+lT1i+s1cQ8[5yR9i8[QwOS&Rw&ST&Sx*qQ,`&qR2V,`W)u$W*q/n5YR/t)uU/o)q)v0gR4w/o[*u%e%f*W2`2g2{R0m*uQ,d&uR2Y,dQ-a'bQ2z-]T2|-a2zQ2w-XR6x2wQ-f'gQ2R,]T3Q-f2RS%pm7QR*z%pdnOwx!g&S't(Q*q-w.mR%unQ0t+RR5^0tQ.U'yR3f.UQ1v+}R6Q1vU*n%`*x;ZR0f*nS1g+n0nR5t1gQ7l3yQ9O7_U9a7l9O9}R9}9U$O!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o.u1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR&g!SQ4Y.sR7v4YQ1},UR6X1}S/d)_)`R4o/dW(o#a(j(k/SR/W(oQ7{4fR9f7{T)a#}*v!USO[wx!g!k%m&S&y&|'O'b,q-]-^-a2c2z6c6j8g9l9p:W:]:fj$ya{$k%]+j,R1a1z5q6v8s9_:UY%Te$e(b1p3iY%Zf$f(i)l*lQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(a#XQ(e#YS(h#[+YQ(w#gQ(x#iQ)R#lQ)S#qQ)T#rQ)U#sQ)V#tQ)W#uQ)X#vQ)Y#wQ)Z#xQ)[#yQ)]#zQ)^#{S)_#}*vQ)k$UQ)q$WQ)x$YQ+X&QS+g&W1QQ,O&bQ,S&fQ,j&xQ,u'PQ-h'iQ-i'jS-|'y.UQ.y(`S/p)r0hS0`*h4aQ0b*iQ0g*qQ0i*rQ0w+WS1`+h+kQ1y,PQ2a,nS2h,w6{Q3R-gQ3c.PQ3d.QQ4c.}Q4d/QQ4j/[Q4m/cQ4s/lQ4u/nQ4y/sQ4z/uQ5d0{Q5p1bQ5w1lQ6U1|S6e2f8tQ6i2iQ6s2uQ6z2}Q7q4OQ7r4RQ7t4WQ8S5YQ8T5eQ8c6_Q8f6fQ8j6hQ8r6tS9T7b7mQ9[7jQ9k8eQ9q8mS9|9R9VQ:T9]Q:Y9oS:`9{:OR:i:bR,V&fd]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3t#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(b*`*b*d*f+h+k,P-Q-V0]0^1Q1b1m1|2l2p2q2s2u3w6q6r6t7e7f7h7j8Z8p9X9Y9]:R;W;X;Y;`;a;o;p;q;r;v;w<W<X<YQ%tnS+d&V+eW+r&^+l+s1cU+z&a+{7iQ1k+tT5c0z;x``Owx!g&S't*q-wS$d[-oQ$s_b%Xe$e&f(b-Q1m1|2l8Z!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(Q)p*v+[,X,k,w,z-]-^-a-t.d.m.o1S1T1f2f2z2}3i3tQ'`!uS(_#V+aQ(f#ZS)i$T(gQ*d%UQ-T'_Q/k)jQ1j+tQ5k1XQ5v1kR8U5jS(W#R3]S(X#S3^V(Y#T+b3[R$^Ye0Q)}/|/}0O0R4}5O5P5S8QW(R#R#S#T+bQ([#US.Z'}(US.a(P._Q.x(^W1r+y.X5}6PQ3Z-tQ3h.WQ3o.`Q4V.qU7T3[3]3^Q7]3pR8|7[Q.b(PR3m._T.l(Q.mdgOwx!g&S&m't*q-t-wU$g[,X-oQ&s!fQ'k!}Q'u#OQ)h$SQ*Y$l`+]&U&Y&c*v1S1T1f3iQ,l&xQ,v'PY-_'b-]-a2z2}S.g(Q.mQ/m)pQ0y+[S2_,k-^S2j,w,zS3s.d.oQ6g2fR7c3td]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tR%tnQ3y.gQ7_3sQ7g3wQ7o3zQ7p3{Q9U7cU9W7e7f7hQ9`7kS:Q9X9YR:c:RZ+o&Y&c*v1S3ipzOnpwx!g%w&S't(Q*q-p-w.f.m.o[%Oa%d0z;`;a;xU%We%h1SQ%eg^&d{|%i1O5a;b;yQ's#OQ*W$gb*_$|$}%S;W;X;Y<W<X<YQ,b&sQ-x'uQ0Z*Y[0[*`*b;o;p;q;rQ0k*tQ0|+]Q2`,lQ2g,vS2{-_2_U5V0];v;wQ5b0yQ6l2jR8i6gQ+}&aR9Z7iS1q+y.XQ8^5}R8_6P[%^f$f(i)l)r0hR0d*lR+`&UQ+_&UR5h1TS&Xy+xQ*g%XU+f&V0z;xS+m&Y1SW+p&Z1O5a;yQ-j'kQ/h)hS0_*d*fQ1R+]Q1^+eQ4t/mQ5W0^Q5`0yQ5u1jR8X5vR5z1mYvOwx&S*qR&t!gW%gg,l,v-_T*X$g2_T)w$W*q[uOwx!g&S*qQ&}!kQ*y%mQ,p&yQ,t'OQ2d,qQ6b2cQ8d6cQ8l6jQ9n8gQ:X9lQ:[9pQ:e:WQ:g:]R:k:fxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^X-`'b-]-a2zQ-['`R2o-TS-X'`-TQ2r-VQ2x-YU6p2p2q2sQ6w2vS8o6q6rR9s8p[rOwx!g&S*qS-q't-wT.h(Q.mR+S%y[sOwx!g&S*qS-s't-wT.i(Q.m[tOwx!g&S*qT.j(Q.mT.T'y.UX%af%k0h1QQ.w([R4_.xR.t(ZR(d#XQ(r#aS/R(j(kR4e/SR/V(lR4g/T",
    nodeNames: "⚠ RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ) ( ArgumentList ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
    maxTerm: 425,
    nodeProps: [
      ["group", -35,1,8,11,15,16,17,19,71,72,100,101,102,104,191,208,229,242,243,270,271,272,277,280,281,282,284,285,286,287,290,292,293,294,295,296,"Expression",-13,18,25,26,27,43,255,256,257,258,262,263,265,266,"Type",-19,126,129,147,150,152,153,158,160,163,164,166,168,170,172,174,176,178,179,188,"Statement"],
      ["isolate", -4,4,5,8,10,""],
      ["openedBy", 12,"(",52,"{",54,"["],
      ["closedBy", 13,")",51,"}",53,"]"]
    ],
    propSources: [cppHighlighting],
    skippedNodes: [0,3,4,5,6,7,10,297,298,299,300,301,302,303,304,305,306,347,348],
    repeatNodeCount: 41,
    tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'f&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(qQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)]W(qQ(n.o'f&j*Z)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(n.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)]W(qQ(n.o'f&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'f&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*W)`(n.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%^!b'QP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%]!b!a,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)]W(oQ(p/]'f&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)x!b)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)]W(qQ'f&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)]W(qQ'e.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)]W(qQ'f&j'l.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)]W(qQ'j.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)]W(qQ'f&j'k.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)]W(qQ'g.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)]W(qQ'h.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)]W(qQ'i.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)]W(qQV.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)]W(qQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])W,g)]W(qQ%[!b'f&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)V,g%^!b)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)ZS(qQ)[,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)]W(qQ]6_'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y[a)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)T,g)]W(qQ%Z!b'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)]W(qQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)]W!X-y(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)]W(qQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(x-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)]W(qQ'f&j(w,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)Y,k)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(qQ!i,g'f&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(qQ!i,g'f&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)]W(qQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])]W(qQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)]W'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'f&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'f&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'f&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'f&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])]W'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)]WT1e'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(qQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](qQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(qQT1e'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)]W(qQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)]W(qQT1e'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)]W(qQS1e'f&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)]WS1e'f&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'f&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'f&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'f&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(qQS1e'f&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(qQ!i,g'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(v-X)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYm-})]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)X,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_q,g%]!b)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Wpp$GWP;=`<%l$Fl*Y$GbZ)]W'f&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'f&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$WpY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['f&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'f&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'f&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Wp'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'f&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'f&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Wp'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'f&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'f&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'f&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'f&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$WpY#t)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(qQ'f&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$WpY#t(qQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$WpY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)]W(qQ%[!b!f,g'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%]!b!b,g)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%]!b!b,g$WpY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)j!c)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%]!b)]W(qQ!d,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%]!b!b,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)]W(qQ%[!b!f,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(uP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)]W(p/]'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(qQ)[,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)QP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'f&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'f&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'f&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['f&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['f&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['f&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['f&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['f&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['f&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['f&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['f&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['f&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)Pd)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)]W(qQ%[!b'f&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)]W(qQ%[!b'f&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)U,g%^!b)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)]W(qQ%[!b'RP'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)]W(qQ'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)]W(qQeT'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
    tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    topRules: {"Program":[0,307]},
    dynamicPrecedences: {"87":1,"94":1,"119":1,"184":1,"187":-10,"240":-10,"241":1,"244":-1,"246":-10,"247":1,"262":-1,"267":2,"268":2,"306":-10,"365":3,"417":1,"418":3,"419":1,"420":1},
    specialized: [{term: 356, get: (value) => spec_identifier$2[value] || -1},{term: 33, get: (value) => spec_[value] || -1},{term: 66, get: (value) => spec_templateArgsEnd[value] || -1},{term: 363, get: (value) => spec_scopedIdentifier[value] || -1}],
    tokenPrec: 24891
  });

  /**
  A language provider based on the [Lezer C++
  parser](https://github.com/lezer-parser/cpp), extended with
  highlighting and indentation information.
  */
  var cppLanguage = /*@__PURE__*/LRLanguage.define({
    name: "cpp",
    parser: /*@__PURE__*/parser$5.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        IfStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|else\b)/
        }),
        TryStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|catch)\b/
        }),
        LabeledStatement: flatIndent,
        CaseStatement: function CaseStatement(context) {
          return context.baseIndent + context.unit;
        },
        BlockComment: function BlockComment() {
          return null;
        },
        CompoundStatement: /*@__PURE__*/delimitedIndent({
          closing: "}"
        }),
        Statement: /*@__PURE__*/continuedIndent({
          except: /^{/
        })
      }), /*@__PURE__*/foldNodeProp.add({
        "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": foldInside,
        BlockComment: function BlockComment(tree) {
          return {
            from: tree.from + 2,
            to: tree.to - 2
          };
        }
      })]
    }),
    languageData: {
      commentTokens: {
        line: "//",
        block: {
          open: "/*",
          close: "*/"
        }
      },
      indentOnInput: /^\s*(?:case |default:|\{|\})$/,
      closeBrackets: {
        stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"]
      }
    }
  });
  /**
  Language support for C++.
  */
  function cpp() {
    return new LanguageSupport(cppLanguage);
  }

  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  var createTheme = _ref => {
    var {
      theme,
      settings = {},
      styles = []
    } = _ref;
    var themeOptions = {
      '.cm-gutters': {}
    };
    var baseStyle = {};
    if (settings.background) {
      baseStyle.backgroundColor = settings.background;
    }
    if (settings.backgroundImage) {
      baseStyle.backgroundImage = settings.backgroundImage;
    }
    if (settings.foreground) {
      baseStyle.color = settings.foreground;
    }
    if (settings.fontSize) {
      baseStyle.fontSize = settings.fontSize;
    }
    if (settings.background || settings.foreground) {
      themeOptions['&'] = baseStyle;
    }
    if (settings.fontFamily) {
      themeOptions['&.cm-editor .cm-scroller'] = {
        fontFamily: settings.fontFamily
      };
    }
    if (settings.gutterBackground) {
      themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;
    }
    if (settings.gutterForeground) {
      themeOptions['.cm-gutters'].color = settings.gutterForeground;
    }
    if (settings.gutterBorder) {
      themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;
    }
    if (settings.caret) {
      themeOptions['.cm-content'] = {
        caretColor: settings.caret
      };
      themeOptions['.cm-cursor, .cm-dropCursor'] = {
        borderLeftColor: settings.caret
      };
    }
    var activeLineGutterStyle = {};
    if (settings.gutterActiveForeground) {
      activeLineGutterStyle.color = settings.gutterActiveForeground;
    }
    if (settings.lineHighlight) {
      themeOptions['.cm-activeLine'] = {
        backgroundColor: settings.lineHighlight
      };
      activeLineGutterStyle.backgroundColor = settings.lineHighlight;
    }
    themeOptions['.cm-activeLineGutter'] = activeLineGutterStyle;
    if (settings.selection) {
      themeOptions['&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection'] = {
        background: settings.selection + ' !important'
      };
    }
    if (settings.selectionMatch) {
      themeOptions['& .cm-selectionMatch'] = {
        backgroundColor: settings.selectionMatch
      };
    }
    var themeExtension = EditorView.theme(themeOptions, {
      dark: theme === 'dark'
    });
    var highlightStyle = HighlightStyle.define(styles);
    var extension = [themeExtension, syntaxHighlighting(highlightStyle)];
    return extension;
  };

  var defaultSettingsDracula = {
    background: '#282a36',
    foreground: '#f8f8f2',
    caret: '#f8f8f0',
    selection: 'rgba(255, 255, 255, 0.1)',
    selectionMatch: 'rgba(255, 255, 255, 0.2)',
    gutterBackground: '#282a36',
    gutterForeground: '#6D8A88',
    gutterBorder: 'transparent',
    lineHighlight: 'rgba(255, 255, 255, 0.1)'
  };
  var draculaDarkStyle = [{
    tag: tags$1.comment,
    color: '#6272a4'
  }, {
    tag: tags$1.string,
    color: '#f1fa8c'
  }, {
    tag: tags$1.atom,
    color: '#bd93f9'
  }, {
    tag: tags$1.meta,
    color: '#f8f8f2'
  }, {
    tag: [tags$1.keyword, tags$1.operator, tags$1.tagName],
    color: '#ff79c6'
  }, {
    tag: [tags$1.function(tags$1.propertyName), tags$1.propertyName],
    color: '#66d9ef'
  }, {
    tag: [tags$1.definition(tags$1.variableName), tags$1.function(tags$1.variableName), tags$1.className, tags$1.attributeName],
    color: '#50fa7b'
  }, {
    tag: tags$1.atom,
    color: '#bd93f9'
  }];
  var draculaInit = options => {
    var {
      theme = 'dark',
      settings = {},
      styles = []
    } = {};
    return createTheme({
      theme: theme,
      settings: _extends({}, defaultSettingsDracula, settings),
      styles: [...draculaDarkStyle, ...styles]
    });
  };
  var dracula = draculaInit();

  function _callSuper$3(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$4() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$4() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _createForOfIteratorHelper$7(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$7(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$7(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$7(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$7(r, a) : void 0; } }
  function _arrayLikeToArray$7(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }

  /**
  An instance of this is passed to completion source functions.
  */
  var CompletionContext = /*#__PURE__*/function () {
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    function CompletionContext(
    /**
    The editor state that the completion happens in.
    */
    state,
    /**
    The position at which the completion is happening.
    */
    pos,
    /**
    Indicates whether completion was activated explicitly, or
    implicitly by typing. The usual way to respond to this is to
    only return completions when either there is part of a
    completable entity before the cursor, or `explicit` is true.
    */
    explicit,
    /**
    The editor view. May be undefined if the context was created
    in a situation where there is no such view available, such as
    in synchronous updates via
    [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
    or when called by test code.
    */
    view) {
      _classCallCheck(this, CompletionContext);
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      this.view = view;
      /**
      @internal
      */
      this.abortListeners = [];
      /**
      @internal
      */
      this.abortOnDocChange = false;
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    return _createClass(CompletionContext, [{
      key: "tokenBefore",
      value: function tokenBefore(types) {
        var token = syntaxTree(this.state).resolveInner(this.pos, -1);
        while (token && types.indexOf(token.name) < 0) token = token.parent;
        return token ? {
          from: token.from,
          to: this.pos,
          text: this.state.sliceDoc(token.from, this.pos),
          type: token.type
        } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
    }, {
      key: "matchBefore",
      value: function matchBefore(expr) {
        var line = this.state.doc.lineAt(this.pos);
        var start = Math.max(line.from, this.pos - 250);
        var str = line.text.slice(start - line.from, this.pos - line.from);
        var found = str.search(ensureAnchor(expr, false));
        return found < 0 ? null : {
          from: start + found,
          to: this.pos,
          text: str.slice(found)
        };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
    }, {
      key: "aborted",
      get: function get() {
        return this.abortListeners == null;
      }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener, options) {
        if (type == "abort" && this.abortListeners) {
          this.abortListeners.push(listener);
          if (options && options.onDocChange) this.abortOnDocChange = true;
        }
      }
    }]);
  }();
  function toSet(chars) {
    var flat = Object.keys(chars).join("");
    var words = /\w/.test(flat);
    if (words) flat = flat.replace(/\w/g, "");
    return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
  }
  function prefixMatch(options) {
    var first = Object.create(null),
      rest = Object.create(null);
    var _iterator = _createForOfIteratorHelper$7(options),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var label = _step.value.label;
        first[label[0]] = true;
        for (var i = 1; i < label.length; i++) rest[label[i]] = true;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
    var options = list.map(function (o) {
      return typeof o == "string" ? {
        label: o
      } : o;
    });
    var _ref = options.every(function (o) {
        return /^\w+$/.test(o.label);
      }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
      _ref2 = _slicedToArray(_ref, 2),
      validFor = _ref2[0],
      match = _ref2[1];
    return function (context) {
      var token = context.matchBefore(match);
      return token || context.explicit ? {
        from: token ? token.from : context.pos,
        options: options,
        validFor: validFor
      } : null;
    };
  }
  /**
  Wrap the given completion source so that it will not fire when the
  cursor is in a syntax node with one of the given names.
  */
  function ifNotIn(nodes, source) {
    return function (context) {
      for (var pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1) return null;
        if (pos.type.isTop) break;
      }
      return source(context);
    };
  }
  var Option = /*#__PURE__*/_createClass(function Option(completion, source, match, score) {
    _classCallCheck(this, Option);
    this.completion = completion;
    this.source = source;
    this.match = match;
    this.score = score;
  });
  function cur(state) {
    return state.selection.main.from;
  }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
    var _a;
    var source = expr.source;
    var addStart = start && source[0] != "^",
      addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd) return expr;
    return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  var pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
    var main = state.selection.main,
      fromOff = from - main.from,
      toOff = to - main.from;
    return Object.assign(Object.assign({}, state.changeByRange(function (range) {
      if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to)) return {
        range: range
      };
      var lines = state.toText(text);
      return {
        changes: {
          from: range.from + fromOff,
          to: to == main.from ? range.to : range.from + toOff,
          insert: lines
        },
        range: EditorSelection.cursor(range.from + fromOff + lines.length)
      };
    })), {
      scrollIntoView: true,
      userEvent: "input.complete"
    });
  }
  var SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source)) return source;
    var known = SourceCache.get(source);
    if (!known) SourceCache.set(source, known = completeFromList(source));
    return known;
  }
  var startCompletionEffect = /*@__PURE__*/StateEffect.define();
  var closeCompletionEffect = /*@__PURE__*/StateEffect.define();

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  var FuzzyMatcher = /*#__PURE__*/function () {
    function FuzzyMatcher(pattern) {
      _classCallCheck(this, FuzzyMatcher);
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      // Buffers reused by calls to `match` to track matched character
      // positions.
      this.any = [];
      this.precise = [];
      this.byWord = [];
      this.score = 0;
      this.matched = [];
      for (var p = 0; p < pattern.length;) {
        var _char = codePointAt(pattern, p),
          size = codePointSize(_char);
        this.chars.push(_char);
        var part = pattern.slice(p, p + size),
          upper = part.toUpperCase();
        this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
        p += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    return _createClass(FuzzyMatcher, [{
      key: "ret",
      value: function ret(score, matched) {
        this.score = score;
        this.matched = matched;
        return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
    }, {
      key: "match",
      value: function match(word) {
        if (this.pattern.length == 0) return this.ret(-100 /* Penalty.NotFull */, []);
        if (word.length < this.pattern.length) return null;
        var chars = this.chars,
          folded = this.folded,
          any = this.any,
          precise = this.precise,
          byWord = this.byWord;
        // For single-character queries, only match when they occur right
        // at the start
        if (chars.length == 1) {
          var first = codePointAt(word, 0),
            firstSize = codePointSize(first);
          var _score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
          if (first == chars[0]) ;else if (first == folded[0]) _score += -200 /* Penalty.CaseFold */;else return null;
          return this.ret(_score, [0, firstSize]);
        }
        var direct = word.indexOf(this.pattern);
        if (direct == 0) return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
        var len = chars.length,
          anyTo = 0;
        if (direct < 0) {
          for (var i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
            var next = codePointAt(word, i);
            if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
            i += codePointSize(next);
          }
          // No match, exit immediately
          if (anyTo < len) return null;
        }
        // This tracks the extent of the precise (non-folded, not
        // necessarily adjacent) match
        var preciseTo = 0;
        // Tracks whether there is a match that hits only characters that
        // appear to be starting words. `byWordFolded` is set to true when
        // a case folded character is encountered in such a match
        var byWordTo = 0,
          byWordFolded = false;
        // If we've found a partial adjacent match, these track its state
        var adjacentTo = 0,
          adjacentStart = -1,
          adjacentEnd = -1;
        var hasLower = /[a-z]/.test(word),
          wordAdjacent = true;
        // Go over the option's text, scanning for the various kinds of matches
        for (var _i = 0, _e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; _i < _e && byWordTo < len;) {
          var _next = codePointAt(word, _i);
          if (direct < 0) {
            if (preciseTo < len && _next == chars[preciseTo]) precise[preciseTo++] = _i;
            if (adjacentTo < len) {
              if (_next == chars[adjacentTo] || _next == folded[adjacentTo]) {
                if (adjacentTo == 0) adjacentStart = _i;
                adjacentEnd = _i + 1;
                adjacentTo++;
              } else {
                adjacentTo = 0;
              }
            }
          }
          var ch = void 0,
            type = _next < 0xff ? _next >= 48 && _next <= 57 || _next >= 97 && _next <= 122 ? 2 /* Tp.Lower */ : _next >= 65 && _next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = fromCodePoint(_next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;
          if (!_i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
            if (chars[byWordTo] == _next || folded[byWordTo] == _next && (byWordFolded = true)) byWord[byWordTo++] = _i;else if (byWord.length) wordAdjacent = false;
          }
          prevType = type;
          _i += codePointSize(_next);
        }
        if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
        if (adjacentTo == len && adjacentStart == 0) return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
        if (direct > -1) return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
        if (adjacentTo == len) return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
        if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
        return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
      }
    }, {
      key: "result",
      value: function result(score, positions, word) {
        var result = [],
          i = 0;
        var _iterator2 = _createForOfIteratorHelper$7(positions),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var pos = _step2.value;
            var to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
            if (i && result[i - 1] == pos) result[i - 1] = to;else {
              result[i++] = pos;
              result[i++] = to;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return this.ret(score - word.length, result);
      }
    }]);
  }();
  var StrictMatcher = /*#__PURE__*/function () {
    function StrictMatcher(pattern) {
      _classCallCheck(this, StrictMatcher);
      this.pattern = pattern;
      this.matched = [];
      this.score = 0;
      this.folded = pattern.toLowerCase();
    }
    return _createClass(StrictMatcher, [{
      key: "match",
      value: function match(word) {
        if (word.length < this.pattern.length) return null;
        var start = word.slice(0, this.pattern.length);
        var match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
        if (match == null) return null;
        this.matched = [0, start.length];
        this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
        return this;
      }
    }]);
  }();
  var completionConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        activateOnCompletion: function activateOnCompletion() {
          return false;
        },
        activateOnTypingDelay: 100,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: function tooltipClass() {
          return "";
        },
        optionClass: function optionClass() {
          return "";
        },
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        positionInfo: defaultPositionInfo,
        filterStrict: false,
        compareCompletions: function compareCompletions(a, b) {
          return a.label.localeCompare(b.label);
        },
        interactionDelay: 75,
        updateSyncTime: 100
      }, {
        defaultKeymap: function defaultKeymap(a, b) {
          return a && b;
        },
        closeOnBlur: function closeOnBlur(a, b) {
          return a && b;
        },
        icons: function icons(a, b) {
          return a && b;
        },
        tooltipClass: function tooltipClass(a, b) {
          return function (c) {
            return joinClass(a(c), b(c));
          };
        },
        optionClass: function optionClass(a, b) {
          return function (c) {
            return joinClass(a(c), b(c));
          };
        },
        addToOptions: function addToOptions(a, b) {
          return a.concat(b);
        },
        filterStrict: function filterStrict(a, b) {
          return a || b;
        }
      });
    }
  });
  function joinClass(a, b) {
    return a ? b ? a + " " + b : a : b;
  }
  function defaultPositionInfo(view, list, option, info, space, tooltip) {
    var rtl = view.textDirection == Direction.RTL,
      left = rtl,
      narrow = false;
    var side = "top",
      offset,
      maxWidth;
    var spaceLeft = list.left - space.left,
      spaceRight = space.right - list.right;
    var infoWidth = info.right - info.left,
      infoHeight = info.bottom - info.top;
    if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;
    if (infoWidth <= (left ? spaceLeft : spaceRight)) {
      offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
      maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
    } else {
      narrow = true;
      maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
      var spaceBelow = space.bottom - list.bottom;
      if (spaceBelow >= infoHeight || spaceBelow > list.top) {
        // Below the completion
        offset = option.bottom - list.top;
      } else {
        // Above it
        side = "bottom";
        offset = list.bottom - option.top;
      }
    }
    var scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
    var scaleX = (list.right - list.left) / tooltip.offsetWidth;
    return {
      style: "".concat(side, ": ").concat(offset / scaleY, "px; max-width: ").concat(maxWidth / scaleX, "px"),
      "class": "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
    };
  }
  function optionContent(config) {
    var content = config.addToOptions.slice();
    if (config.icons) content.push({
      render: function render(completion) {
        var _icon$classList;
        var icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
          return "cm-completionIcon-" + cls;
        })));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
    content.push({
      render: function render(completion, _s, _v, match) {
        var labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        var label = completion.displayLabel || completion.label,
          off = 0;
        for (var j = 0; j < match.length;) {
          var from = match[j++],
            to = match[j++];
          if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
          var span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label.slice(from, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render: function render(completion) {
        if (!completion.detail) return null;
        var detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content.sort(function (a, b) {
      return a.position - b.position;
    }).map(function (a) {
      return a.render;
    });
  }
  function rangeAroundSelected(total, selected, max) {
    if (total <= max) return {
      from: 0,
      to: total
    };
    if (selected < 0) selected = 0;
    if (selected <= total >> 1) {
      var _off = Math.floor(selected / max);
      return {
        from: _off * max,
        to: (_off + 1) * max
      };
    }
    var off = Math.floor((total - selected) / max);
    return {
      from: total - (off + 1) * max,
      to: total - off * max
    };
  }
  var CompletionTooltip = /*#__PURE__*/function () {
    function CompletionTooltip(view, stateField, applyCompletion) {
      var _this = this;
      _classCallCheck(this, CompletionTooltip);
      this.view = view;
      this.stateField = stateField;
      this.applyCompletion = applyCompletion;
      this.info = null;
      this.infoDestroy = null;
      this.placeInfoReq = {
        read: function read() {
          return _this.measureInfo();
        },
        write: function write(pos) {
          return _this.placeInfo(pos);
        },
        key: this
      };
      this.space = null;
      this.currentClass = "";
      var cState = view.state.field(stateField);
      var _cState$open = cState.open,
        options = _cState$open.options,
        selected = _cState$open.selected;
      var config = view.state.facet(completionConfig);
      this.optionContent = optionContent(config);
      this.optionClass = config.optionClass;
      this.tooltipClass = config.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view.state);
      this.dom.addEventListener("mousedown", function (e) {
        var options = view.state.field(stateField).open.options;
        for (var dom = e.target, match; dom && dom != _this.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
            _this.applyCompletion(view, options[+match[1]]);
            e.preventDefault();
            return;
          }
        }
      });
      this.dom.addEventListener("focusout", function (e) {
        var state = view.state.field(_this.stateField, false);
        if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
      });
      this.showOptions(options, cState.id);
    }
    return _createClass(CompletionTooltip, [{
      key: "mount",
      value: function mount() {
        this.updateSel();
      }
    }, {
      key: "showOptions",
      value: function showOptions(options, id) {
        var _this2 = this;
        if (this.list) this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
        this.list.addEventListener("scroll", function () {
          if (_this2.info) _this2.view.requestMeasure(_this2.placeInfoReq);
        });
      }
    }, {
      key: "update",
      value: function update(_update) {
        var _a;
        var cState = _update.state.field(this.stateField);
        var prevState = _update.startState.field(this.stateField);
        this.updateTooltipClass(_update.state);
        if (cState != prevState) {
          var _cState$open2 = cState.open,
            options = _cState$open2.options,
            selected = _cState$open2.selected,
            disabled = _cState$open2.disabled;
          if (!prevState.open || prevState.open.options != options) {
            this.range = rangeAroundSelected(options.length, selected, _update.state.facet(completionConfig).maxRenderedOptions);
            this.showOptions(options, cState.id);
          }
          this.updateSel();
          if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled)) this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
        }
      }
    }, {
      key: "updateTooltipClass",
      value: function updateTooltipClass(state) {
        var cls = this.tooltipClass(state);
        if (cls != this.currentClass) {
          var _iterator3 = _createForOfIteratorHelper$7(this.currentClass.split(" ")),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var c = _step3.value;
              if (c) this.dom.classList.remove(c);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          var _iterator4 = _createForOfIteratorHelper$7(cls.split(" ")),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _c = _step4.value;
              if (_c) this.dom.classList.add(_c);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          this.currentClass = cls;
        }
      }
    }, {
      key: "positioned",
      value: function positioned(space) {
        this.space = space;
        if (this.info) this.view.requestMeasure(this.placeInfoReq);
      }
    }, {
      key: "updateSel",
      value: function updateSel() {
        var _this3 = this;
        var cState = this.view.state.field(this.stateField),
          open = cState.open;
        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
          this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(open.options, cState.id);
        }
        if (this.updateSelectedOption(open.selected)) {
          this.destroyInfo();
          var completion = open.options[open.selected].completion;
          var info = completion.info;
          if (!info) return;
          var infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
          if (!infoResult) return;
          if ("then" in infoResult) {
            infoResult.then(function (obj) {
              if (obj && _this3.view.state.field(_this3.stateField, false) == cState) _this3.addInfoPane(obj, completion);
            })["catch"](function (e) {
              return logException(_this3.view.state, e, "completion info");
            });
          } else {
            this.addInfoPane(infoResult, completion);
          }
        }
      }
    }, {
      key: "addInfoPane",
      value: function addInfoPane(content, completion) {
        this.destroyInfo();
        var wrap = this.info = document.createElement("div");
        wrap.className = "cm-tooltip cm-completionInfo";
        if (content.nodeType != null) {
          wrap.appendChild(content);
          this.infoDestroy = null;
        } else {
          var dom = content.dom,
            destroy = content.destroy;
          wrap.appendChild(dom);
          this.infoDestroy = destroy || null;
        }
        this.dom.appendChild(wrap);
        this.view.requestMeasure(this.placeInfoReq);
      }
    }, {
      key: "updateSelectedOption",
      value: function updateSelectedOption(selected) {
        var set = null;
        for (var opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
          if (opt.nodeName != "LI" || !opt.id) {
            i--; // A section header
          } else if (i == selected) {
            if (!opt.hasAttribute("aria-selected")) {
              opt.setAttribute("aria-selected", "true");
              set = opt;
            }
          } else {
            if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
          }
        }
        if (set) scrollIntoView(this.list, set);
        return set;
      }
    }, {
      key: "measureInfo",
      value: function measureInfo() {
        var sel = this.dom.querySelector("[aria-selected]");
        if (!sel || !this.info) return null;
        var listRect = this.dom.getBoundingClientRect();
        var infoRect = this.info.getBoundingClientRect();
        var selRect = sel.getBoundingClientRect();
        var space = this.space;
        if (!space) {
          var docElt = this.dom.ownerDocument.documentElement;
          space = {
            left: 0,
            top: 0,
            right: docElt.clientWidth,
            bottom: docElt.clientHeight
          };
        }
        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;
        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
      }
    }, {
      key: "placeInfo",
      value: function placeInfo(pos) {
        if (this.info) {
          if (pos) {
            if (pos.style) this.info.style.cssText = pos.style;
            this.info.className = "cm-tooltip cm-completionInfo " + (pos["class"] || "");
          } else {
            this.info.style.cssText = "top: -1e6px";
          }
        }
      }
    }, {
      key: "createListBox",
      value: function createListBox(options, id, range) {
        var ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
        ul.addEventListener("mousedown", function (e) {
          // Prevent focus change when clicking the scrollbar
          if (e.target == ul) e.preventDefault();
        });
        var curSection = null;
        for (var i = range.from; i < range.to; i++) {
          var _options$i = options[i],
            completion = _options$i.completion,
            match = _options$i.match,
            section = completion.section;
          if (section) {
            var name = typeof section == "string" ? section : section.name;
            if (name != curSection && (i > range.from || range.from == 0)) {
              curSection = name;
              if (typeof section != "string" && section.header) {
                ul.appendChild(section.header(section));
              } else {
                var header = ul.appendChild(document.createElement("completion-section"));
                header.textContent = name;
              }
            }
          }
          var li = ul.appendChild(document.createElement("li"));
          li.id = id + "-" + i;
          li.setAttribute("role", "option");
          var cls = this.optionClass(completion);
          if (cls) li.className = cls;
          var _iterator5 = _createForOfIteratorHelper$7(this.optionContent),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var source = _step5.value;
              var node = source(completion, this.view.state, this.view, match);
              if (node) li.appendChild(node);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
        if (range.from) ul.classList.add("cm-completionListIncompleteTop");
        if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
        return ul;
      }
    }, {
      key: "destroyInfo",
      value: function destroyInfo() {
        if (this.info) {
          if (this.infoDestroy) this.infoDestroy();
          this.info.remove();
          this.info = null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyInfo();
      }
    }]);
  }();
  function completionTooltip(stateField, applyCompletion) {
    return function (view) {
      return new CompletionTooltip(view, stateField, applyCompletion);
    };
  }
  function scrollIntoView(container, element) {
    var parent = container.getBoundingClientRect();
    var self = element.getBoundingClientRect();
    var scaleY = parent.height / container.offsetHeight;
    if (self.top < parent.top) container.scrollTop -= (parent.top - self.top) / scaleY;else if (self.bottom > parent.bottom) container.scrollTop += (self.bottom - parent.bottom) / scaleY;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
    var options = [];
    var sections = null;
    var addOption = function addOption(option) {
      options.push(option);
      var section = option.completion.section;
      if (section) {
        if (!sections) sections = [];
        var name = typeof section == "string" ? section : section.name;
        if (!sections.some(function (s) {
          return s.name == name;
        })) sections.push(typeof section == "string" ? {
          name: name
        } : section);
      }
    };
    var conf = state.facet(completionConfig);
    var _iterator6 = _createForOfIteratorHelper$7(active),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var a = _step6.value;
        if (a.hasResult()) {
          var getMatch = a.result.getMatch;
          if (a.result.filter === false) {
            var _iterator10 = _createForOfIteratorHelper$7(a.result.options),
              _step10;
            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var _option = _step10.value;
                addOption(new Option(_option, a.source, getMatch ? getMatch(_option) : [], 1e9 - options.length));
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          } else {
            var pattern = state.sliceDoc(a.from, a.to),
              match = void 0;
            var matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
            var _iterator11 = _createForOfIteratorHelper$7(a.result.options),
              _step11;
            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var _option2 = _step11.value;
                if (match = matcher.match(_option2.label)) {
                  var matched = !_option2.displayLabel ? match.matched : getMatch ? getMatch(_option2, match.matched) : [];
                  addOption(new Option(_option2, a.source, matched, match.score + (_option2.boost || 0)));
                }
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          }
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    if (sections) {
      var sectionOrder = Object.create(null),
        pos = 0;
      var cmp = function cmp(a, b) {
        var _a, _b;
        return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
      };
      var _iterator7 = _createForOfIteratorHelper$7(sections.sort(cmp)),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var s = _step7.value;
          pos -= 1e5;
          sectionOrder[s.name] = pos;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var _iterator8 = _createForOfIteratorHelper$7(options),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var option = _step8.value;
          var section = option.completion.section;
          if (section) option.score += sectionOrder[typeof section == "string" ? section : section.name];
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
    var result = [],
      prev = null;
    var compare = conf.compareCompletions;
    var _iterator9 = _createForOfIteratorHelper$7(options.sort(function (a, b) {
        return b.score - a.score || compare(a.completion, b.completion);
      })),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var opt = _step9.value;
        var _cur = opt.completion;
        if (!prev || prev.label != _cur.label || prev.detail != _cur.detail || prev.type != null && _cur.type != null && prev.type != _cur.type || prev.apply != _cur.apply || prev.boost != _cur.boost) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
        prev = opt.completion;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return result;
  }
  var CompletionDialog = /*#__PURE__*/function () {
    function CompletionDialog(options, attrs, tooltip, timestamp, selected, disabled) {
      _classCallCheck(this, CompletionDialog);
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    return _createClass(CompletionDialog, [{
      key: "setSelected",
      value: function setSelected(selected, id) {
        return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
    }, {
      key: "map",
      value: function map(changes) {
        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
          pos: changes.mapPos(this.tooltip.pos)
        }), this.timestamp, this.selected, this.disabled);
      }
    }, {
      key: "setDisabled",
      value: function setDisabled() {
        return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
    }], [{
      key: "build",
      value: function build(active, state, id, prev, conf, didSetActive) {
        if (prev && !didSetActive && active.some(function (s) {
          return s.isPending;
        })) return prev.setDisabled();
        var options = sortOptions(active, state);
        if (!options.length) return prev && active.some(function (a) {
          return a.isPending;
        }) ? prev.setDisabled() : null;
        var selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
        if (prev && prev.selected != selected && prev.selected != -1) {
          var selectedValue = prev.options[prev.selected].completion;
          for (var i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {
            selected = i;
            break;
          }
        }
        return new CompletionDialog(options, makeAttrs(id, selected), {
          pos: active.reduce(function (a, b) {
            return b.hasResult() ? Math.min(a, b.from) : a;
          }, 1e8),
          create: createTooltip,
          above: conf.aboveCursor
        }, prev ? prev.timestamp : Date.now(), selected, false);
      }
    }]);
  }();
  var CompletionState = /*#__PURE__*/function () {
    function CompletionState(active, id, open) {
      _classCallCheck(this, CompletionState);
      this.active = active;
      this.id = id;
      this.open = open;
    }
    return _createClass(CompletionState, [{
      key: "update",
      value: function update(tr) {
        var _this4 = this;
        var state = tr.state,
          conf = state.facet(completionConfig);
        var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
        var active = sources.map(function (source) {
          var value = _this4.active.find(function (s) {
            return s.source == source;
          }) || new ActiveSource(source, _this4.active.some(function (a) {
            return a.state != 0;
          } /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
          return value.update(tr, conf);
        });
        if (active.length == this.active.length && active.every(function (a, i) {
          return a == _this4.active[i];
        })) active = this.active;
        var open = this.open,
          didSet = tr.effects.some(function (e) {
            return e.is(setActiveEffect);
          });
        if (open && tr.docChanged) open = open.map(tr.changes);
        if (tr.selection || active.some(function (a) {
          return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
        }) || !sameResults(active, this.active) || didSet) open = CompletionDialog.build(active, state, this.id, open, conf, didSet);else if (open && open.disabled && !active.some(function (a) {
          return a.isPending;
        })) open = null;
        if (!open && active.every(function (a) {
          return !a.isPending;
        }) && active.some(function (a) {
          return a.hasResult();
        })) active = active.map(function (a) {
          return a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a;
        });
        var _iterator12 = _createForOfIteratorHelper$7(tr.effects),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var effect = _step12.value;
            if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
    }, {
      key: "tooltip",
      get: function get() {
        return this.open ? this.open.tooltip : null;
      }
    }, {
      key: "attrs",
      get: function get() {
        return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs;
      }
    }], [{
      key: "start",
      value: function start() {
        return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
    }]);
  }();
  function sameResults(a, b) {
    if (a == b) return true;
    for (var iA = 0, iB = 0;;) {
      while (iA < a.length && !a[iA].hasResult()) iA++;
      while (iB < b.length && !b[iB].hasResult()) iB++;
      var endA = iA == a.length,
        endB = iB == b.length;
      if (endA || endB) return endA == endB;
      if (a[iA++].result != b[iB++].result) return false;
    }
  }
  var baseAttrs = {
    "aria-autocomplete": "list"
  };
  var noAttrs = {};
  function makeAttrs(id, selected) {
    var result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id
    };
    if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
    return result;
  }
  var none$1 = [];
  function getUpdateType(tr, conf) {
    if (tr.isUserEvent("input.complete")) {
      var completion = tr.annotation(pickedCompletion);
      if (completion && conf.activateOnCompletion(completion)) return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
    }
    var typing = tr.isUserEvent("input.type");
    return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */ : typing ? 1 /* UpdateType.Typing */ : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */ : tr.selection ? 8 /* UpdateType.Reset */ : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
  }
  var ActiveSource = /*#__PURE__*/function () {
    function ActiveSource(source, state) {
      var explicit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      _classCallCheck(this, ActiveSource);
      this.source = source;
      this.state = state;
      this.explicit = explicit;
    }
    return _createClass(ActiveSource, [{
      key: "hasResult",
      value: function hasResult() {
        return false;
      }
    }, {
      key: "isPending",
      get: function get() {
        return this.state == 1 /* State.Pending */;
      }
    }, {
      key: "update",
      value: function update(tr, conf) {
        var type = getUpdateType(tr, conf),
          value = this;
        if (type & 8 /* UpdateType.Reset */ || type & 16 /* UpdateType.ResetIfTouching */ && this.touches(tr)) value = new ActiveSource(value.source, 0 /* State.Inactive */);
        if (type & 4 /* UpdateType.Activate */ && value.state == 0 /* State.Inactive */) value = new ActiveSource(this.source, 1 /* State.Pending */);
        value = value.updateFor(tr, type);
        var _iterator13 = _createForOfIteratorHelper$7(tr.effects),
          _step13;
        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var effect = _step13.value;
            if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) {
              var _iterator14 = _createForOfIteratorHelper$7(effect.value),
                _step14;
              try {
                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                  var active = _step14.value;
                  if (active.source == value.source) value = active;
                }
              } catch (err) {
                _iterator14.e(err);
              } finally {
                _iterator14.f();
              }
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
        return value;
      }
    }, {
      key: "updateFor",
      value: function updateFor(tr, type) {
        return this.map(tr.changes);
      }
    }, {
      key: "map",
      value: function map(changes) {
        return this;
      }
    }, {
      key: "touches",
      value: function touches(tr) {
        return tr.changes.touchesRange(cur(tr.state));
      }
    }]);
  }();
  var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
    function ActiveResult(source, explicit, limit, result, from, to) {
      var _this5;
      _classCallCheck(this, ActiveResult);
      _this5 = _callSuper$3(this, ActiveResult, [source, 3 /* State.Result */, explicit]);
      _this5.limit = limit;
      _this5.result = result;
      _this5.from = from;
      _this5.to = to;
      return _this5;
    }
    _inherits(ActiveResult, _ActiveSource);
    return _createClass(ActiveResult, [{
      key: "hasResult",
      value: function hasResult() {
        return true;
      }
    }, {
      key: "updateFor",
      value: function updateFor(tr, type) {
        var _a;
        if (!(type & 3 /* UpdateType.SimpleInteraction */)) return this.map(tr.changes);
        var result = this.result;
        if (result.map && !tr.changes.empty) result = result.map(result, tr.changes);
        var from = tr.changes.mapPos(this.from),
          to = tr.changes.mapPos(this.to, 1);
        var pos = cur(tr.state);
        if (pos > to || !result || type & 2 /* UpdateType.Backspacing */ && (cur(tr.startState) == this.from || pos < this.limit)) return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
        var limit = tr.changes.mapPos(this.limit);
        if (checkValid(result.validFor, tr.state, from, to)) return new ActiveResult(this.source, this.explicit, limit, result, from, to);
        if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false)))) return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
        return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
      }
    }, {
      key: "map",
      value: function map(mapping) {
        if (mapping.empty) return this;
        var result = this.result.map ? this.result.map(this.result, mapping) : this.result;
        if (!result) return new ActiveSource(this.source, 0 /* State.Inactive */);
        return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
    }, {
      key: "touches",
      value: function touches(tr) {
        return tr.changes.touchesRange(this.from, this.to);
      }
    }]);
  }(ActiveSource);
  function checkValid(validFor, state, from, to) {
    if (!validFor) return false;
    var text = state.sliceDoc(from, to);
    return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  var setActiveEffect = /*@__PURE__*/StateEffect.define({
    map: function map(sources, mapping) {
      return sources.map(function (s) {
        return s.map(mapping);
      });
    }
  });
  var setSelectedEffect = /*@__PURE__*/StateEffect.define();
  var completionState = /*@__PURE__*/StateField.define({
    create: function create() {
      return CompletionState.start();
    },
    update: function update(value, tr) {
      return value.update(tr);
    },
    provide: function provide(f) {
      return [showTooltip.from(f, function (val) {
        return val.tooltip;
      }), EditorView.contentAttributes.from(f, function (state) {
        return state.attrs;
      })];
    }
  });
  function applyCompletion(view, option) {
    var apply = option.completion.apply || option.completion.label;
    var result = view.state.field(completionState).active.find(function (a) {
      return a.source == option.source;
    });
    if (!(result instanceof ActiveResult)) return false;
    if (typeof apply == "string") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {
      annotations: pickedCompletion.of(option.completion)
    }));else apply(view, option.completion, result.from, result.to);
    return true;
  }
  var createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward) {
    var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
    return function (view) {
      var cState = view.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
      var step = 1,
        tooltip;
      if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      var length = cState.open.options.length;
      var selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
      if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
      view.dispatch({
        effects: setSelectedEffect.of(selected)
      });
      return true;
    };
  }
  /**
  Accept the current completion.
  */
  var acceptCompletion = function acceptCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
    return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  /**
  Explicitly start autocompletion.
  */
  var startCompletion = function startCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (!cState) return false;
    view.dispatch({
      effects: startCompletionEffect.of(true)
    });
    return true;
  };
  /**
  Close the currently active completion.
  */
  var closeCompletion = function closeCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (!cState || !cState.active.some(function (a) {
      return a.state != 0;
    } /* State.Inactive */)) return false;
    view.dispatch({
      effects: closeCompletionEffect.of(null)
    });
    return true;
  };
  var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
    _classCallCheck(this, RunningQuery);
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = [];
    // Note that 'undefined' means 'not done yet', whereas 'null' means
    // 'query returned null'.
    this.done = undefined;
  });
  var MaxUpdateCount = 50,
    MinAbortTime = 1000;
  var completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class(view) {
      _classCallCheck(this, _class);
      this.view = view;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.pendingStart = false;
      this.composing = 0 /* CompositionState.None */;
      var _iterator15 = _createForOfIteratorHelper$7(view.state.field(completionState).active),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var active = _step15.value;
          if (active.isPending) this.startQuery(active);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
    }
    return _createClass(_class, [{
      key: "update",
      value: function update(_update2) {
        var _this6 = this;
        var cState = _update2.state.field(completionState);
        var conf = _update2.state.facet(completionConfig);
        if (!_update2.selectionSet && !_update2.docChanged && _update2.startState.field(completionState) == cState) return;
        var doesReset = _update2.transactions.some(function (tr) {
          var type = getUpdateType(tr, conf);
          return type & 8 /* UpdateType.Reset */ || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
        });
        for (var i = 0; i < this.running.length; i++) {
          var query = this.running[i];
          if (doesReset || query.context.abortOnDocChange && _update2.docChanged || query.updates.length + _update2.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
            var _iterator16 = _createForOfIteratorHelper$7(query.context.abortListeners),
              _step16;
            try {
              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var handler = _step16.value;
                try {
                  handler();
                } catch (e) {
                  logException(this.view.state, e);
                }
              }
            } catch (err) {
              _iterator16.e(err);
            } finally {
              _iterator16.f();
            }
            query.context.abortListeners = null;
            this.running.splice(i--, 1);
          } else {
            var _query$updates;
            (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update2.transactions));
          }
        }
        if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
        if (_update2.transactions.some(function (tr) {
          return tr.effects.some(function (e) {
            return e.is(startCompletionEffect);
          });
        })) this.pendingStart = true;
        var delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
        this.debounceUpdate = cState.active.some(function (a) {
          return a.isPending && !_this6.running.some(function (q) {
            return q.active.source == a.source;
          });
        }) ? setTimeout(function () {
          return _this6.startUpdate();
        }, delay) : -1;
        if (this.composing != 0 /* CompositionState.None */) {
          var _iterator17 = _createForOfIteratorHelper$7(_update2.transactions),
            _step17;
          try {
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              var tr = _step17.value;
              if (tr.isUserEvent("input.type")) this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
        }
      }
    }, {
      key: "startUpdate",
      value: function startUpdate() {
        var _this7 = this;
        this.debounceUpdate = -1;
        this.pendingStart = false;
        var state = this.view.state,
          cState = state.field(completionState);
        var _iterator18 = _createForOfIteratorHelper$7(cState.active),
          _step18;
        try {
          var _loop = function _loop() {
            var active = _step18.value;
            if (active.isPending && !_this7.running.some(function (r) {
              return r.active.source == active.source;
            })) _this7.startQuery(active);
          };
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        if (this.running.length && cState.open && cState.open.disabled) this.debounceAccept = setTimeout(function () {
          return _this7.accept();
        }, this.view.state.facet(completionConfig).updateSyncTime);
      }
    }, {
      key: "startQuery",
      value: function startQuery(active) {
        var _this8 = this;
        var state = this.view.state,
          pos = cur(state);
        var context = new CompletionContext(state, pos, active.explicit, this.view);
        var pending = new RunningQuery(active, context);
        this.running.push(pending);
        Promise.resolve(active.source(context)).then(function (result) {
          if (!pending.context.aborted) {
            pending.done = result || null;
            _this8.scheduleAccept();
          }
        }, function (err) {
          _this8.view.dispatch({
            effects: closeCompletionEffect.of(null)
          });
          logException(_this8.view.state, err);
        });
      }
    }, {
      key: "scheduleAccept",
      value: function scheduleAccept() {
        var _this9 = this;
        if (this.running.every(function (q) {
          return q.done !== undefined;
        })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
          return _this9.accept();
        }, this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
    }, {
      key: "accept",
      value: function accept() {
        var _this10 = this;
        var _a;
        if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
        this.debounceAccept = -1;
        var updated = [];
        var conf = this.view.state.facet(completionConfig),
          cState = this.view.state.field(completionState);
        var _loop2 = function _loop2(_i2) {
            var query = _this10.running[_i2];
            if (query.done === undefined) {
              i = _i2;
              return 0;
            } // continue
            _this10.running.splice(_i2--, 1);
            if (query.done) {
              var pos = cur(query.updates.length ? query.updates[0].startState : _this10.view.state);
              var limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
              var active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
              // Replay the transactions that happened since the start of
              // the request and see if that preserves the result
              var _iterator19 = _createForOfIteratorHelper$7(query.updates),
                _step19;
              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var tr = _step19.value;
                  active = active.update(tr, conf);
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
              if (active.hasResult()) {
                updated.push(active);
                i = _i2;
                return 0; // continue
              }
            }
            var current = cState.active.find(function (a) {
              return a.source == query.active.source;
            });
            if (current && current.isPending) {
              if (query.done == null) {
                // Explicitly failed. Should clear the pending status if it
                // hasn't been re-set in the meantime.
                var _active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                var _iterator20 = _createForOfIteratorHelper$7(query.updates),
                  _step20;
                try {
                  for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                    var _tr = _step20.value;
                    _active = _active.update(_tr, conf);
                  }
                } catch (err) {
                  _iterator20.e(err);
                } finally {
                  _iterator20.f();
                }
                if (!_active.isPending) updated.push(_active);
              } else {
                // Cleared by subsequent transactions. Restart.
                _this10.startQuery(current);
              }
            }
            i = _i2;
          },
          _ret;
        for (var i = 0; i < this.running.length; i++) {
          _ret = _loop2(i);
          if (_ret === 0) continue;
        }
        if (updated.length || cState.open && cState.open.disabled) this.view.dispatch({
          effects: setActiveEffect.of(updated)
        });
      }
    }]);
  }(), {
    eventHandlers: {
      blur: function blur(event) {
        var _this11 = this;
        var state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
          var dialog = state.open && getTooltip(this.view, state.open.tooltip);
          if (!dialog || !dialog.dom.contains(event.relatedTarget)) setTimeout(function () {
            return _this11.view.dispatch({
              effects: closeCompletionEffect.of(null)
            });
          }, 10);
        }
      },
      compositionstart: function compositionstart() {
        this.composing = 1 /* CompositionState.Started */;
      },
      compositionend: function compositionend() {
        var _this12 = this;
        if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
          // Safari fires compositionend events synchronously, possibly
          // from inside an update, so dispatch asynchronously to avoid reentrancy
          setTimeout(function () {
            return _this12.view.dispatch({
              effects: startCompletionEffect.of(false)
            });
          }, 20);
        }
        this.composing = 0 /* CompositionState.None */;
      }
    }
  });
  var windows = (typeof navigator === "undefined" ? "undefined" : _typeof$1(navigator)) == "object" && /*@__PURE__*//Win/.test(navigator.platform);
  var commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
    keydown: function keydown(event, view) {
      var field = view.state.field(completionState, false);
      if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey) return false;
      var option = field.open.options[field.open.selected];
      var result = field.active.find(function (a) {
        return a.source == option.source;
      });
      var commitChars = option.completion.commitCharacters || result.result.commitCharacters;
      if (commitChars && commitChars.indexOf(event.key) > -1) applyCompletion(view, option);
      return false;
    }
  }));
  var baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li, & > completion-section": {
          padding: "1px 3px",
          lineHeight: 1.2
        },
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer"
        },
        "& > completion-section": {
          display: "list-item",
          borderBottom: "1px solid silver",
          paddingLeft: "0.5em",
          opacity: 0.7
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"···"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: "".concat(400 /* Info.Width */, "px"),
      boxSizing: "border-box",
      whiteSpace: "pre-line"
    },
    ".cm-completionInfo.cm-completionInfo-left": {
      right: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-right": {
      left: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-left-narrow": {
      right: "".concat(30 /* Info.Margin */, "px")
    },
    ".cm-completionInfo.cm-completionInfo-right-narrow": {
      left: "".concat(30 /* Info.Margin */, "px")
    },
    "&light .cm-snippetField": {
      backgroundColor: "#00000022"
    },
    "&dark .cm-snippetField": {
      backgroundColor: "#ffffff22"
    },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": {
        content: "'ƒ'"
      }
    },
    ".cm-completionIcon-class": {
      "&:after": {
        content: "'○'"
      }
    },
    ".cm-completionIcon-interface": {
      "&:after": {
        content: "'◌'"
      }
    },
    ".cm-completionIcon-variable": {
      "&:after": {
        content: "'𝑥'"
      }
    },
    ".cm-completionIcon-constant": {
      "&:after": {
        content: "'𝐶'"
      }
    },
    ".cm-completionIcon-type": {
      "&:after": {
        content: "'𝑡'"
      }
    },
    ".cm-completionIcon-enum": {
      "&:after": {
        content: "'∪'"
      }
    },
    ".cm-completionIcon-property": {
      "&:after": {
        content: "'□'"
      }
    },
    ".cm-completionIcon-keyword": {
      "&:after": {
        content: "'\uD83D\uDD11\uFE0E'"
      } // Disable emoji rendering
    },
    ".cm-completionIcon-namespace": {
      "&:after": {
        content: "'▢'"
      }
    },
    ".cm-completionIcon-text": {
      "&:after": {
        content: "'abc'",
        fontSize: "50%",
        verticalAlign: "middle"
      }
    }
  });
  var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
    _classCallCheck(this, FieldPos);
    this.field = field;
    this.line = line;
    this.from = from;
    this.to = to;
  });
  var FieldRange = /*#__PURE__*/function () {
    function FieldRange(field, from, to) {
      _classCallCheck(this, FieldRange);
      this.field = field;
      this.from = from;
      this.to = to;
    }
    return _createClass(FieldRange, [{
      key: "map",
      value: function map(changes) {
        var from = changes.mapPos(this.from, -1, MapMode.TrackDel);
        var to = changes.mapPos(this.to, 1, MapMode.TrackDel);
        return from == null || to == null ? null : new FieldRange(this.field, from, to);
      }
    }]);
  }();
  var Snippet = /*#__PURE__*/function () {
    function Snippet(lines, fieldPositions) {
      _classCallCheck(this, Snippet);
      this.lines = lines;
      this.fieldPositions = fieldPositions;
    }
    return _createClass(Snippet, [{
      key: "instantiate",
      value: function instantiate(state, pos) {
        var text = [],
          lineStart = [pos];
        var lineObj = state.doc.lineAt(pos),
          baseIndent = /^\s*/.exec(lineObj.text)[0];
        var _iterator21 = _createForOfIteratorHelper$7(this.lines),
          _step21;
        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var line = _step21.value;
            if (text.length) {
              var indent = baseIndent,
                tabs = /^\t*/.exec(line)[0].length;
              for (var i = 0; i < tabs; i++) indent += state.facet(indentUnit);
              lineStart.push(pos + indent.length - tabs);
              line = indent + line.slice(tabs);
            }
            text.push(line);
            pos += line.length + 1;
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }
        var ranges = this.fieldPositions.map(function (pos) {
          return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
        });
        return {
          text: text,
          ranges: ranges
        };
      }
    }], [{
      key: "parse",
      value: function parse(template) {
        var fields = [];
        var lines = [],
          positions = [],
          m;
        var _iterator22 = _createForOfIteratorHelper$7(template.split(/\r\n?|\n/)),
          _step22;
        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var line = _step22.value;
            while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
              var seq = m[1] ? +m[1] : null,
                rawName = m[2] || m[3] || "",
                found = -1;
              var name = rawName.replace(/\\[{}]/g, function (m) {
                return m[1];
              });
              for (var i = 0; i < fields.length; i++) {
                if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;
              }
              if (found < 0) {
                var _i3 = 0;
                while (_i3 < fields.length && (seq == null || fields[_i3].seq != null && fields[_i3].seq < seq)) _i3++;
                fields.splice(_i3, 0, {
                  seq: seq,
                  name: name
                });
                found = _i3;
                var _iterator23 = _createForOfIteratorHelper$7(positions),
                  _step23;
                try {
                  for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                    var pos = _step23.value;
                    if (pos.field >= found) pos.field++;
                  }
                } catch (err) {
                  _iterator23.e(err);
                } finally {
                  _iterator23.f();
                }
              }
              positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
              line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
            }
            line = line.replace(/\\([{}])/g, function (_, brace, index) {
              var _iterator24 = _createForOfIteratorHelper$7(positions),
                _step24;
              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var _pos = _step24.value;
                  if (_pos.line == lines.length && _pos.from > index) {
                    _pos.from--;
                    _pos.to--;
                  }
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
              return brace;
            });
            lines.push(line);
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
        return new Snippet(lines, positions);
      }
    }]);
  }();
  var fieldMarker = /*@__PURE__*/Decoration.widget({
    widget: /*@__PURE__*/new (/*#__PURE__*/function (_WidgetType) {
      function _class2() {
        _classCallCheck(this, _class2);
        return _callSuper$3(this, _class2, arguments);
      }
      _inherits(_class2, _WidgetType);
      return _createClass(_class2, [{
        key: "toDOM",
        value: function toDOM() {
          var span = document.createElement("span");
          span.className = "cm-snippetFieldPosition";
          return span;
        }
      }, {
        key: "ignoreEvent",
        value: function ignoreEvent() {
          return false;
        }
      }]);
    }(WidgetType))()
  });
  var fieldRange = /*@__PURE__*/Decoration.mark({
    "class": "cm-snippetField"
  });
  var ActiveSnippet = /*#__PURE__*/function () {
    function ActiveSnippet(ranges, active) {
      _classCallCheck(this, ActiveSnippet);
      this.ranges = ranges;
      this.active = active;
      this.deco = Decoration.set(ranges.map(function (r) {
        return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
      }));
    }
    return _createClass(ActiveSnippet, [{
      key: "map",
      value: function map(changes) {
        var ranges = [];
        var _iterator25 = _createForOfIteratorHelper$7(this.ranges),
          _step25;
        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var r = _step25.value;
            var mapped = r.map(changes);
            if (!mapped) return null;
            ranges.push(mapped);
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
        return new ActiveSnippet(ranges, this.active);
      }
    }, {
      key: "selectionInsideField",
      value: function selectionInsideField(sel) {
        var _this13 = this;
        return sel.ranges.every(function (range) {
          return _this13.ranges.some(function (r) {
            return r.field == _this13.active && r.from <= range.from && r.to >= range.to;
          });
        });
      }
    }]);
  }();
  var setActive = /*@__PURE__*/StateEffect.define({
    map: function map(value, changes) {
      return value && value.map(changes);
    }
  });
  var moveToField = /*@__PURE__*/StateEffect.define();
  var snippetState = /*@__PURE__*/StateField.define({
    create: function create() {
      return null;
    },
    update: function update(value, tr) {
      var _iterator26 = _createForOfIteratorHelper$7(tr.effects),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var effect = _step26.value;
          if (effect.is(setActive)) return effect.value;
          if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      if (value && tr.docChanged) value = value.map(tr.changes);
      if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
      return value;
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f, function (val) {
        return val ? val.deco : Decoration.none;
      });
    }
  });
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter(function (r) {
      return r.field == field;
    }).map(function (r) {
      return EditorSelection.range(r.from, r.to);
    }));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:

      "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

  Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.

  When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.

  On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.

  The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.

  To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
    var snippet = Snippet.parse(template);
    return function (editor, completion, from, to) {
      var _snippet$instantiate = snippet.instantiate(editor.state, from),
        text = _snippet$instantiate.text,
        ranges = _snippet$instantiate.ranges;
      var main = editor.state.selection.main;
      var spec = {
        changes: {
          from: from,
          to: to == main.from ? main.to : to,
          insert: Text.of(text)
        },
        scrollIntoView: true,
        annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
      };
      if (ranges.length) spec.selection = fieldSelection(ranges, 0);
      if (ranges.some(function (r) {
        return r.field > 0;
      })) {
        var active = new ActiveSnippet(ranges, 0);
        var effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === undefined) effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$3]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return function (_ref3) {
      var state = _ref3.state,
        dispatch = _ref3.dispatch;
      var active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0) return false;
      var next = active.active + dir,
        last = dir > 0 && !active.ranges.some(function (r) {
          return r.field == next + dir;
        });
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
        scrollIntoView: true
      }));
      return true;
    };
  }
  /**
  A command that clears the active snippet, if any.
  */
  var clearSnippet = function clearSnippet(_ref4) {
    var state = _ref4.state,
      dispatch = _ref4.dispatch;
    var active = state.field(snippetState, false);
    if (!active) return false;
    dispatch(state.update({
      effects: setActive.of(null)
    }));
    return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  var nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  var prevSnippetField = /*@__PURE__*/moveField(-1);
  var defaultSnippetKeymap = [{
    key: "Tab",
    run: nextSnippetField,
    shift: prevSnippetField
  }, {
    key: "Escape",
    run: clearSnippet
  }];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  var snippetKeymap = /*@__PURE__*/Facet.define({
    combine: function combine(maps) {
      return maps.length ? maps[0] : defaultSnippetKeymap;
    }
  });
  var addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], function (state) {
    return state.facet(snippetKeymap);
  }));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), {
      apply: snippet(template)
    });
  }
  var snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
    mousedown: function mousedown(event, view) {
      var active = view.state.field(snippetState, false),
        pos;
      if (!active || (pos = view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      })) == null) return false;
      var match = active.ranges.find(function (r) {
        return r.from <= pos && r.to >= pos;
      });
      if (!match || match.field == active.active) return false;
      view.dispatch({
        selection: fieldSelection(active.ranges, match.field),
        effects: setActive.of(active.ranges.some(function (r) {
          return r.field > match.field;
        }) ? new ActiveSnippet(active.ranges, match.field) : null),
        scrollIntoView: true
      });
      return true;
    }
  });
  var defaults = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  var closeBracketEffect = /*@__PURE__*/StateEffect.define({
    map: function map(value, mapping) {
      var mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? undefined : mapped;
    }
  });
  var closedBracket = /*@__PURE__*/new (/*#__PURE__*/function (_RangeValue) {
    function _class3() {
      _classCallCheck(this, _class3);
      return _callSuper$3(this, _class3, arguments);
    }
    _inherits(_class3, _RangeValue);
    return _createClass(_class3);
  }(RangeValue))();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  var bracketState = /*@__PURE__*/StateField.define({
    create: function create() {
      return RangeSet.empty;
    },
    update: function update(value, tr) {
      value = value.map(tr.changes);
      if (tr.selection) {
        var line = tr.state.doc.lineAt(tr.selection.main.head);
        value = value.update({
          filter: function filter(from) {
            return from >= line.from && from <= line.to;
          }
        });
      }
      var _iterator29 = _createForOfIteratorHelper$7(tr.effects),
        _step29;
      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var effect = _step29.value;
          if (effect.is(closeBracketEffect)) value = value.update({
            add: [closedBracket.range(effect.value, effect.value + 1)]
          });
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
      return value;
    }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
    return [inputHandler, bracketState];
  }
  var definedClosing = "()[]{}<>«»»«［］｛｝";
  function closing(ch) {
    for (var i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  var android$1 = (typeof navigator === "undefined" ? "undefined" : _typeof$1(navigator)) == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  var inputHandler = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, insert) {
    if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
    var sel = view.state.selection.main;
    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
    var tr = insertBracket(view.state, insert);
    if (!tr) return false;
    view.dispatch(tr);
    return true;
  });
  /**
  Command that implements deleting a pair of matching brackets when
  the cursor is between them.
  */
  var deleteBracketPair = function deleteBracketPair(_ref5) {
    var state = _ref5.state,
      dispatch = _ref5.dispatch;
    if (state.readOnly) return false;
    var conf = config(state, state.selection.main.head);
    var tokens = conf.brackets || defaults.brackets;
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (range.empty) {
          var before = prevChar(state.doc, range.head);
          var _iterator30 = _createForOfIteratorHelper$7(tokens),
            _step30;
          try {
            for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
              var token = _step30.value;
              if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0))) return {
                changes: {
                  from: range.head - token.length,
                  to: range.head + token.length
                },
                range: EditorSelection.cursor(range.head - token.length)
              };
            }
          } catch (err) {
            _iterator30.e(err);
          } finally {
            _iterator30.f();
          }
        }
        return {
          range: dont = range
        };
      });
    if (!dont) dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "delete.backward"
    }));
    return !dont;
  };
  /**
  Close-brackets related key bindings. Binds Backspace to
  [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
  */
  var closeBracketsKeymap = [{
    key: "Backspace",
    run: deleteBracketPair
  }];
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
    var conf = config(state, state.selection.main.head);
    var tokens = conf.brackets || defaults.brackets;
    var _iterator31 = _createForOfIteratorHelper$7(tokens),
      _step31;
    try {
      for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
        var tok = _step31.value;
        var closed = closing(codePointAt(tok, 0));
        if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
        if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
      }
    } catch (err) {
      _iterator31.e(err);
    } finally {
      _iterator31.f();
    }
    return null;
  }
  function closedBracketAt(state, pos) {
    var found = false;
    state.field(bracketState).between(0, state.doc.length, function (from) {
      if (from == pos) found = true;
    });
    return found;
  }
  function nextChar(doc, pos) {
    var next = doc.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function prevChar(doc, pos) {
    var prev = doc.sliceString(pos - 2, pos);
    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close, closeBefore) {
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (!range.empty) return {
          changes: [{
            insert: open,
            from: range.from
          }, {
            insert: close,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
        var next = nextChar(state.doc, range.head);
        if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
          changes: {
            insert: open + close,
            from: range.head
          },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleClose(state, _open, close) {
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (range.empty && nextChar(state.doc, range.head) == close) return {
          changes: {
            from: range.head,
            to: range.head + close.length,
            insert: close
          },
          range: EditorSelection.cursor(range.head + close.length)
        };
        return dont = {
          range: range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
    var stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (!range.empty) return {
          changes: [{
            insert: token,
            from: range.from
          }, {
            insert: token,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
        var pos = range.head,
          next = nextChar(state.doc, pos),
          start;
        if (next == token) {
          if (nodeStart(state, pos)) {
            return {
              changes: {
                insert: token + token,
                from: pos
              },
              effects: closeBracketEffect.of(pos + token.length),
              range: EditorSelection.cursor(pos + token.length)
            };
          } else if (closedBracketAt(state, pos)) {
            var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
            var content = isTriple ? token + token + token : token;
            return {
              changes: {
                from: pos,
                to: pos + content.length,
                insert: content
              },
              range: EditorSelection.cursor(pos + content.length)
            };
          }
        } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
          return {
            changes: {
              insert: token + token + token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
          if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        }
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function nodeStart(state, pos) {
    var tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
    var node = syntaxTree(state).resolveInner(pos, -1);
    var maxPrefix = prefixes.reduce(function (m, p) {
      return Math.max(m, p.length);
    }, 0);
    for (var i = 0; i < 5; i++) {
      var start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
      var quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        var first = node.firstChild;
        while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
          first = first.firstChild;
        }
        return true;
      }
      var parent = node.to == pos && node.parent;
      if (!parent) break;
      node = parent;
    }
    return false;
  }
  function canStartStringAt(state, pos, prefixes) {
    var charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word) return pos;
    var _iterator32 = _createForOfIteratorHelper$7(prefixes),
      _step32;
    try {
      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
        var prefix = _step32.value;
        var start = pos - prefix.length;
        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word) return start;
      }
    } catch (err) {
      _iterator32.e(err);
    } finally {
      _iterator32.f();
    }
    return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [commitCharacters, completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme$3];
  }
  /**
  Basic keybindings for autocompletion.

   - Ctrl-Space (and Alt-\` or Alt-i on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  var completionKeymap = [{
    key: "Ctrl-Space",
    run: startCompletion
  }, {
    mac: "Alt-`",
    run: startCompletion
  }, {
    mac: "Alt-i",
    run: startCompletion
  }, {
    key: "Escape",
    run: closeCompletion
  }, {
    key: "ArrowDown",
    run: /*@__PURE__*/moveCompletionSelection(true)
  }, {
    key: "ArrowUp",
    run: /*@__PURE__*/moveCompletionSelection(false)
  }, {
    key: "PageDown",
    run: /*@__PURE__*/moveCompletionSelection(true, "page")
  }, {
    key: "PageUp",
    run: /*@__PURE__*/moveCompletionSelection(false, "page")
  }, {
    key: "Enter",
    run: acceptCompletion
  }];
  var completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], function (state) {
    return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
  }));

  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);
        else if (value != null) elt[name] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add(elt, arguments[i]);
    return elt
  }

  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) ; else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child)
    }
  }

  function _callSuper$2(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$3() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$3() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _createForOfIteratorHelper$6(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$6(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$6(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$6(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$6(r, a) : void 0; } }
  function _arrayLikeToArray$6(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var basicNormalize = typeof String.prototype.normalize == "function" ? function (x) {
    return x.normalize("NFKD");
  } : function (x) {
    return x;
  };
  /**
  A search cursor provides an iterator over text matches in a
  document.
  */
  var SearchCursor = /*#__PURE__*/function () {
    /**
    Create a text cursor. The query is the search string, `from` to
    `to` provides the region to search.
    
    When `normalize` is given, it will be called, on both the query
    string and the content it is matched against, before comparing.
    You can, for example, create a case-insensitive search by
    passing `s => s.toLowerCase()`.
    
    Text is always normalized with
    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
    (when supported).
    */
    function SearchCursor(text, query) {
      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : text.length;
      var normalize = arguments.length > 4 ? arguments[4] : undefined;
      var test = arguments.length > 5 ? arguments[5] : undefined;
      _classCallCheck(this, SearchCursor);
      this.test = test;
      /**
      The current match (only holds a meaningful value after
      [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
      `done` is false).
      */
      this.value = {
        from: 0,
        to: 0
      };
      /**
      Whether the end of the iterated region has been reached.
      */
      this.done = false;
      this.matches = [];
      this.buffer = "";
      this.bufferPos = 0;
      this.iter = text.iterRange(from, to);
      this.bufferStart = from;
      this.normalize = normalize ? function (x) {
        return normalize(basicNormalize(x));
      } : basicNormalize;
      this.query = this.normalize(query);
    }
    return _createClass(SearchCursor, [{
      key: "peek",
      value: function peek() {
        if (this.bufferPos == this.buffer.length) {
          this.bufferStart += this.buffer.length;
          this.iter.next();
          if (this.iter.done) return -1;
          this.bufferPos = 0;
          this.buffer = this.iter.value;
        }
        return codePointAt(this.buffer, this.bufferPos);
      }
      /**
      Look for the next match. Updates the iterator's
      [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
      [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
      at least once before using the cursor.
      */
    }, {
      key: "next",
      value: function next() {
        while (this.matches.length) this.matches.pop();
        return this.nextOverlapping();
      }
      /**
      The `next` method will ignore matches that partially overlap a
      previous match. This method behaves like `next`, but includes
      such matches.
      */
    }, {
      key: "nextOverlapping",
      value: function nextOverlapping() {
        for (;;) {
          var next = this.peek();
          if (next < 0) {
            this.done = true;
            return this;
          }
          var str = fromCodePoint(next),
            start = this.bufferStart + this.bufferPos;
          this.bufferPos += codePointSize(next);
          var norm = this.normalize(str);
          if (norm.length) for (var i = 0, pos = start;; i++) {
            var code = norm.charCodeAt(i);
            var match = this.match(code, pos, this.bufferPos + this.bufferStart);
            if (i == norm.length - 1) {
              if (match) {
                this.value = match;
                return this;
              }
              break;
            }
            if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;
          }
        }
      }
    }, {
      key: "match",
      value: function match(code, pos, end) {
        var match = null;
        for (var i = 0; i < this.matches.length; i += 2) {
          var index = this.matches[i],
            keep = false;
          if (this.query.charCodeAt(index) == code) {
            if (index == this.query.length - 1) {
              match = {
                from: this.matches[i + 1],
                to: end
              };
            } else {
              this.matches[i]++;
              keep = true;
            }
          }
          if (!keep) {
            this.matches.splice(i, 2);
            i -= 2;
          }
        }
        if (this.query.charCodeAt(0) == code) {
          if (this.query.length == 1) match = {
            from: pos,
            to: end
          };else this.matches.push(1, pos);
        }
        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart)) match = null;
        return match;
      }
    }]);
  }();
  if (typeof Symbol != "undefined") SearchCursor.prototype[Symbol.iterator] = function () {
    return this;
  };
  var empty = {
    from: -1,
    to: -1,
    match: /*@__PURE__*//.*/.exec("")
  };
  var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  /**
  This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
  but searches for a regular expression pattern instead of a plain
  string.
  */
  var RegExpCursor = /*#__PURE__*/function () {
    /**
    Create a cursor that will search the given range in the given
    document. `query` should be the raw pattern (as you'd pass it to
    `new RegExp`).
    */
    function RegExpCursor(text, query, options) {
      var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : text.length;
      _classCallCheck(this, RegExpCursor);
      this.text = text;
      this.to = to;
      this.curLine = "";
      /**
      Set to `true` when the cursor has reached the end of the search
      range.
      */
      this.done = false;
      /**
      Will contain an object with the extent of the match and the
      match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
      sucessfully finds a match.
      */
      this.value = empty;
      if (/\\[sWDnr]|\n|\r|\[\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.iter = text.iter();
      var startLine = text.lineAt(from);
      this.curLineStart = startLine.from;
      this.matchPos = toCharEnd(text, from);
      this.getLine(this.curLineStart);
    }
    return _createClass(RegExpCursor, [{
      key: "getLine",
      value: function getLine(skip) {
        this.iter.next(skip);
        if (this.iter.lineBreak) {
          this.curLine = "";
        } else {
          this.curLine = this.iter.value;
          if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
          this.iter.next();
        }
      }
    }, {
      key: "nextLine",
      value: function nextLine() {
        this.curLineStart = this.curLineStart + this.curLine.length + 1;
        if (this.curLineStart > this.to) this.curLine = "";else this.getLine(0);
      }
      /**
      Move to the next match, if there is one.
      */
    }, {
      key: "next",
      value: function next() {
        for (var off = this.matchPos - this.curLineStart;;) {
          this.re.lastIndex = off;
          var match = this.matchPos <= this.to && this.re.exec(this.curLine);
          if (match) {
            var from = this.curLineStart + match.index,
              to = from + match[0].length;
            this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
            if (from == this.curLineStart + this.curLine.length) this.nextLine();
            if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
              this.value = {
                from: from,
                to: to,
                match: match
              };
              return this;
            }
            off = this.matchPos - this.curLineStart;
          } else if (this.curLineStart + this.curLine.length < this.to) {
            this.nextLine();
            off = 0;
          } else {
            this.done = true;
            return this;
          }
        }
      }
    }]);
  }();
  var flattened = /*@__PURE__*/new WeakMap();
  // Reusable (partially) flattened document strings
  var FlattenedDoc = /*#__PURE__*/function () {
    function FlattenedDoc(from, text) {
      _classCallCheck(this, FlattenedDoc);
      this.from = from;
      this.text = text;
    }
    return _createClass(FlattenedDoc, [{
      key: "to",
      get: function get() {
        return this.from + this.text.length;
      }
    }], [{
      key: "get",
      value: function get(doc, from, to) {
        var cached = flattened.get(doc);
        if (!cached || cached.from >= to || cached.to <= from) {
          var flat = new FlattenedDoc(from, doc.sliceString(from, to));
          flattened.set(doc, flat);
          return flat;
        }
        if (cached.from == from && cached.to == to) return cached;
        var text = cached.text,
          cachedFrom = cached.from;
        if (cachedFrom > from) {
          text = doc.sliceString(from, cachedFrom) + text;
          cachedFrom = from;
        }
        if (cached.to < to) text += doc.sliceString(cached.to, to);
        flattened.set(doc, new FlattenedDoc(cachedFrom, text));
        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
      }
    }]);
  }();
  var MultilineRegExpCursor = /*#__PURE__*/function () {
    function MultilineRegExpCursor(text, query, options, from, to) {
      _classCallCheck(this, MultilineRegExpCursor);
      this.text = text;
      this.to = to;
      this.done = false;
      this.value = empty;
      this.matchPos = toCharEnd(text, from);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
    }
    return _createClass(MultilineRegExpCursor, [{
      key: "chunkEnd",
      value: function chunkEnd(pos) {
        return pos >= this.to ? this.to : this.text.lineAt(pos).to;
      }
    }, {
      key: "next",
      value: function next() {
        for (;;) {
          var off = this.re.lastIndex = this.matchPos - this.flat.from;
          var match = this.re.exec(this.flat.text);
          // Skip empty matches directly after the last match
          if (match && !match[0] && match.index == off) {
            this.re.lastIndex = off + 1;
            match = this.re.exec(this.flat.text);
          }
          if (match) {
            var from = this.flat.from + match.index,
              to = from + match[0].length;
            // If a match goes almost to the end of a noncomplete chunk, try
            // again, since it'll likely be able to match more
            if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {
              this.value = {
                from: from,
                to: to,
                match: match
              };
              this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
              return this;
            }
          }
          if (this.flat.to == this.to) {
            this.done = true;
            return this;
          }
          // Grow the flattened doc
          this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
        }
      }
    }]);
  }();
  if (typeof Symbol != "undefined") {
    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function () {
      return this;
    };
  }
  function validRegExp(source) {
    try {
      new RegExp(source, baseFlags);
      return true;
    } catch (_a) {
      return false;
    }
  }
  function toCharEnd(text, pos) {
    if (pos >= text.length) return pos;
    var line = text.lineAt(pos),
      next;
    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000) pos++;
    return pos;
  }
  function createLineDialog(view) {
    var line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
    var input = crelt("input", {
      "class": "cm-textfield",
      name: "line",
      value: line
    });
    var dom = crelt("form", {
      "class": "cm-gotoLine",
      onkeydown: function onkeydown(event) {
        if (event.keyCode == 27) {
          // Escape
          event.preventDefault();
          view.dispatch({
            effects: dialogEffect.of(false)
          });
          view.focus();
        } else if (event.keyCode == 13) {
          // Enter
          event.preventDefault();
          go();
        }
      },
      onsubmit: function onsubmit(event) {
        event.preventDefault();
        go();
      }
    }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", {
      "class": "cm-button",
      type: "submit"
    }, view.state.phrase("go")), crelt("button", {
      name: "close",
      onclick: function onclick() {
        view.dispatch({
          effects: dialogEffect.of(false)
        });
        view.focus();
      },
      "aria-label": view.state.phrase("close"),
      type: "button"
    }, ["×"]));
    function go() {
      var match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
      if (!match) return;
      var state = view.state,
        startLine = state.doc.lineAt(state.selection.main.head);
      var _match = _slicedToArray(match, 5),
        sign = _match[1],
        ln = _match[2],
        cl = _match[3],
        percent = _match[4];
      var col = cl ? +cl.slice(1) : 0;
      var line = ln ? +ln : startLine.number;
      if (ln && percent) {
        var pc = line / 100;
        if (sign) pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
        line = Math.round(state.doc.lines * pc);
      } else if (ln && sign) {
        line = line * (sign == "-" ? -1 : 1) + startLine.number;
      }
      var docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
      var selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
      view.dispatch({
        effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, {
          y: 'center'
        })],
        selection: selection
      });
      view.focus();
    }
    return {
      dom: dom
    };
  }
  var dialogEffect = /*@__PURE__*/StateEffect.define();
  var dialogField = /*@__PURE__*/StateField.define({
    create: function create() {
      return true;
    },
    update: function update(value, tr) {
      var _iterator = _createForOfIteratorHelper$6(tr.effects),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;
          if (e.is(dialogEffect)) value = e.value;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return value;
    },
    provide: function provide(f) {
      return showPanel.from(f, function (val) {
        return val ? createLineDialog : null;
      });
    }
  });
  /**
  Command that shows a dialog asking the user for a line number, and
  when a valid position is provided, moves the cursor to that line.

  Supports line numbers, relative line offsets prefixed with `+` or
  `-`, document percentages suffixed with `%`, and an optional
  column position by adding `:` and a second number after the line
  number.
  */
  var gotoLine = function gotoLine(view) {
    var panel = getPanel(view, createLineDialog);
    if (!panel) {
      var effects = [dialogEffect.of(true)];
      if (view.state.field(dialogField, false) == null) effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
      view.dispatch({
        effects: effects
      });
      panel = getPanel(view, createLineDialog);
    }
    if (panel) panel.dom.querySelector("input").select();
    return true;
  };
  var baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-panel.cm-gotoLine": {
      padding: "2px 6px 4px",
      position: "relative",
      "& label": {
        fontSize: "80%"
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        bottom: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: "0"
      }
    }
  });
  var defaultHighlightOptions = {
    highlightWordAroundCursor: false,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: false
  };
  var highlightConfig = /*@__PURE__*/Facet.define({
    combine: function combine(options) {
      return combineConfig(options, defaultHighlightOptions, {
        highlightWordAroundCursor: function highlightWordAroundCursor(a, b) {
          return a || b;
        },
        minSelectionLength: Math.min,
        maxMatches: Math.min
      });
    }
  });
  /**
  This extension highlights text that matches the selection. It uses
  the `"cm-selectionMatch"` class for the highlighting. When
  `highlightWordAroundCursor` is enabled, the word at the cursor
  itself will be highlighted with `"cm-selectionMatch-main"`.
  */
  function highlightSelectionMatches(options) {
    var ext = [defaultTheme, matchHighlighter];
    return ext;
  }
  var matchDeco = /*@__PURE__*/Decoration.mark({
    "class": "cm-selectionMatch"
  });
  var mainMatchDeco = /*@__PURE__*/Decoration.mark({
    "class": "cm-selectionMatch cm-selectionMatch-main"
  });
  // Whether the characters directly outside the given positions are non-word characters
  function insideWordBoundaries(check, state, from, to) {
    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  // Whether the characters directly at the given positions are word characters
  function insideWord(check, state, from, to) {
    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  var matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class(view) {
      _classCallCheck(this, _class);
      this.decorations = this.getDeco(view);
    }
    return _createClass(_class, [{
      key: "update",
      value: function update(_update) {
        if (_update.selectionSet || _update.docChanged || _update.viewportChanged) this.decorations = this.getDeco(_update.view);
      }
    }, {
      key: "getDeco",
      value: function getDeco(view) {
        var conf = view.state.facet(highlightConfig);
        var state = view.state,
          sel = state.selection;
        if (sel.ranges.length > 1) return Decoration.none;
        var range = sel.main,
          query,
          check = null;
        if (range.empty) {
          if (!conf.highlightWordAroundCursor) return Decoration.none;
          var word = state.wordAt(range.head);
          if (!word) return Decoration.none;
          check = state.charCategorizer(range.head);
          query = state.sliceDoc(word.from, word.to);
        } else {
          var len = range.to - range.from;
          if (len < conf.minSelectionLength || len > 200) return Decoration.none;
          if (conf.wholeWords) {
            query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
            check = state.charCategorizer(range.head);
            if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to))) return Decoration.none;
          } else {
            query = state.sliceDoc(range.from, range.to);
            if (!query) return Decoration.none;
          }
        }
        var deco = [];
        var _iterator2 = _createForOfIteratorHelper$6(view.visibleRanges),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var part = _step2.value;
            var cursor = new SearchCursor(state.doc, query, part.from, part.to);
            while (!cursor.next().done) {
              var _cursor$value = cursor.value,
                from = _cursor$value.from,
                to = _cursor$value.to;
              if (!check || insideWordBoundaries(check, state, from, to)) {
                if (range.empty && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));
                if (deco.length > conf.maxMatches) return Decoration.none;
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return Decoration.set(deco);
      }
    }]);
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });
  var defaultTheme = /*@__PURE__*/EditorView.baseTheme({
    ".cm-selectionMatch": {
      backgroundColor: "#99ff7780"
    },
    ".cm-searchMatch .cm-selectionMatch": {
      backgroundColor: "transparent"
    }
  });
  // Select the words around the cursors.
  var selectWord = function selectWord(_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    var selection = state.selection;
    var newSel = EditorSelection.create(selection.ranges.map(function (range) {
      return state.wordAt(range.head) || EditorSelection.cursor(range.head);
    }), selection.mainIndex);
    if (newSel.eq(selection)) return false;
    dispatch(state.update({
      selection: newSel
    }));
    return true;
  };
  // Find next occurrence of query relative to last cursor. Wrap around
  // the document if there are no more matches.
  function findNextOccurrence(state, query) {
    var _state$selection = state.selection,
      main = _state$selection.main,
      ranges = _state$selection.ranges;
    var word = state.wordAt(main.head),
      fullWord = word && word.from == main.from && word.to == main.to;
    var _loop = function _loop(_cycled, _cursor) {
        _cursor.next();
        if (_cursor.done) {
          if (_cycled) return {
            v: null
          };
          _cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
          _cycled = true;
        } else {
          if (_cycled && ranges.some(function (r) {
            return r.from == _cursor.value.from;
          })) {
            cycled = _cycled, cursor = _cursor;
            return 0;
          } // continue
          if (fullWord) {
            var _word = state.wordAt(_cursor.value.from);
            if (!_word || _word.from != _cursor.value.from || _word.to != _cursor.value.to) {
              cycled = _cycled, cursor = _cursor;
              return 0;
            } // continue
          }
          return {
            v: _cursor.value
          };
        }
        cycled = _cycled, cursor = _cursor;
      },
      _ret;
    for (var cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
      _ret = _loop(cycled, cursor);
      if (_ret === 0) continue;
      if (_ret) return _ret.v;
    }
  }
  /**
  Select next occurrence of the current selection. Expand selection
  to the surrounding word when the selection is empty.
  */
  var selectNextOccurrence = function selectNextOccurrence(_ref2) {
    var state = _ref2.state,
      dispatch = _ref2.dispatch;
    var ranges = state.selection.ranges;
    if (ranges.some(function (sel) {
      return sel.from === sel.to;
    })) return selectWord({
      state: state,
      dispatch: dispatch
    });
    var searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
    if (state.selection.ranges.some(function (r) {
      return state.sliceDoc(r.from, r.to) != searchedText;
    })) return false;
    var range = findNextOccurrence(state, searchedText);
    if (!range) return false;
    dispatch(state.update({
      selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
      effects: EditorView.scrollIntoView(range.to)
    }));
    return true;
  };
  var searchConfigFacet = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        top: false,
        caseSensitive: false,
        literal: false,
        regexp: false,
        wholeWord: false,
        createPanel: function createPanel(view) {
          return new SearchPanel(view);
        },
        scrollToMatch: function scrollToMatch(range) {
          return EditorView.scrollIntoView(range);
        }
      });
    }
  });
  /**
  A search query. Part of the editor's search state.
  */
  var SearchQuery = /*#__PURE__*/function () {
    /**
    Create a query object.
    */
    function SearchQuery(config) {
      _classCallCheck(this, SearchQuery);
      this.search = config.search;
      this.caseSensitive = !!config.caseSensitive;
      this.literal = !!config.literal;
      this.regexp = !!config.regexp;
      this.replace = config.replace || "";
      this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
      this.unquoted = this.unquote(this.search);
      this.wholeWord = !!config.wholeWord;
    }
    /**
    @internal
    */
    return _createClass(SearchQuery, [{
      key: "unquote",
      value: function unquote(text) {
        return this.literal ? text : text.replace(/\\([nrt\\])/g, function (_, ch) {
          return ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\";
        });
      }
      /**
      Compare this query to another query.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
      }
      /**
      @internal
      */
    }, {
      key: "create",
      value: function create() {
        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
      }
      /**
      Get a search cursor for this query, searching through the given
      range in the given state.
      */
    }, {
      key: "getCursor",
      value: function getCursor(state) {
        var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var to = arguments.length > 2 ? arguments[2] : undefined;
        var st = state.doc ? state : EditorState.create({
          doc: state
        });
        if (to == null) to = st.doc.length;
        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
      }
    }]);
  }();
  var QueryType = /*#__PURE__*/_createClass(function QueryType(spec) {
    _classCallCheck(this, QueryType);
    this.spec = spec;
  });
  function stringCursor(spec, state, from, to) {
    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : function (x) {
      return x.toLowerCase();
    }, spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
  }
  function stringWordTest(doc, categorizer) {
    return function (from, to, buf, bufPos) {
      if (bufPos > from || bufPos + buf.length < to) {
        bufPos = Math.max(0, from - 2);
        buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
      }
      return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
    };
  }
  var StringQuery = /*#__PURE__*/function (_QueryType) {
    function StringQuery(spec) {
      _classCallCheck(this, StringQuery);
      return _callSuper$2(this, StringQuery, [spec]);
    }
    _inherits(StringQuery, _QueryType);
    return _createClass(StringQuery, [{
      key: "nextMatch",
      value: function nextMatch(state, curFrom, curTo) {
        var cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
        if (cursor.done) {
          var end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
          cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
        }
        return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
      }
      // Searching in reverse is, rather than implementing an inverted search
      // cursor, done by scanning chunk after chunk forward.
    }, {
      key: "prevMatchInRange",
      value: function prevMatchInRange(state, from, to) {
        for (var pos = to;;) {
          var start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
          var cursor = stringCursor(this.spec, state, start, pos),
            range = null;
          while (!cursor.nextOverlapping().done) range = cursor.value;
          if (range) return range;
          if (start == from) return null;
          pos -= 10000 /* FindPrev.ChunkSize */;
        }
      }
    }, {
      key: "prevMatch",
      value: function prevMatch(state, curFrom, curTo) {
        var found = this.prevMatchInRange(state, 0, curFrom);
        if (!found) found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
        return found && (found.from != curFrom || found.to != curTo) ? found : null;
      }
    }, {
      key: "getReplacement",
      value: function getReplacement(_result) {
        return this.spec.unquote(this.spec.replace);
      }
    }, {
      key: "matchAll",
      value: function matchAll(state, limit) {
        var cursor = stringCursor(this.spec, state, 0, state.doc.length),
          ranges = [];
        while (!cursor.next().done) {
          if (ranges.length >= limit) return null;
          ranges.push(cursor.value);
        }
        return ranges;
      }
    }, {
      key: "highlight",
      value: function highlight(state, from, to, add) {
        var cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
        while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
      }
    }]);
  }(QueryType);
  function regexpCursor(spec, state, from, to) {
    return new RegExpCursor(state.doc, spec.search, {
      ignoreCase: !spec.caseSensitive,
      test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
    }, from, to);
  }
  function charBefore(str, index) {
    return str.slice(findClusterBreak(str, index, false), index);
  }
  function charAfter(str, index) {
    return str.slice(index, findClusterBreak(str, index));
  }
  function regexpWordTest(categorizer) {
    return function (_from, _to, match) {
      return !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
    };
  }
  var RegExpQuery = /*#__PURE__*/function (_QueryType2) {
    function RegExpQuery() {
      _classCallCheck(this, RegExpQuery);
      return _callSuper$2(this, RegExpQuery, arguments);
    }
    _inherits(RegExpQuery, _QueryType2);
    return _createClass(RegExpQuery, [{
      key: "nextMatch",
      value: function nextMatch(state, curFrom, curTo) {
        var cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
        if (cursor.done) cursor = regexpCursor(this.spec, state, 0, curFrom).next();
        return cursor.done ? null : cursor.value;
      }
    }, {
      key: "prevMatchInRange",
      value: function prevMatchInRange(state, from, to) {
        for (var size = 1;; size++) {
          var start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
          var cursor = regexpCursor(this.spec, state, start, to),
            range = null;
          while (!cursor.next().done) range = cursor.value;
          if (range && (start == from || range.from > start + 10)) return range;
          if (start == from) return null;
        }
      }
    }, {
      key: "prevMatch",
      value: function prevMatch(state, curFrom, curTo) {
        return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
      }
    }, {
      key: "getReplacement",
      value: function getReplacement(result) {
        return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, function (m, i) {
          if (i == "&") return result.match[0];
          if (i == "$") return "$";
          for (var l = i.length; l > 0; l--) {
            var n = +i.slice(0, l);
            if (n > 0 && n < result.match.length) return result.match[n] + i.slice(l);
          }
          return m;
        });
      }
    }, {
      key: "matchAll",
      value: function matchAll(state, limit) {
        var cursor = regexpCursor(this.spec, state, 0, state.doc.length),
          ranges = [];
        while (!cursor.next().done) {
          if (ranges.length >= limit) return null;
          ranges.push(cursor.value);
        }
        return ranges;
      }
    }, {
      key: "highlight",
      value: function highlight(state, from, to, add) {
        var cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
        while (!cursor.next().done) add(cursor.value.from, cursor.value.to);
      }
    }]);
  }(QueryType);
  /**
  A state effect that updates the current search query. Note that
  this only has an effect if the search state has been initialized
  (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
  by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
  once).
  */
  var setSearchQuery = /*@__PURE__*/StateEffect.define();
  var togglePanel$1 = /*@__PURE__*/StateEffect.define();
  var searchState = /*@__PURE__*/StateField.define({
    create: function create(state) {
      return new SearchState(defaultQuery(state).create(), null);
    },
    update: function update(value, tr) {
      var _iterator3 = _createForOfIteratorHelper$6(tr.effects),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var effect = _step3.value;
          if (effect.is(setSearchQuery)) value = new SearchState(effect.value.create(), value.panel);else if (effect.is(togglePanel$1)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return value;
    },
    provide: function provide(f) {
      return showPanel.from(f, function (val) {
        return val.panel;
      });
    }
  });
  var SearchState = /*#__PURE__*/_createClass(function SearchState(query, panel) {
    _classCallCheck(this, SearchState);
    this.query = query;
    this.panel = panel;
  });
  var matchMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-searchMatch"
    }),
    selectedMatchMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-searchMatch cm-searchMatch-selected"
    });
  var searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.view = view;
      this.decorations = this.highlight(view.state.field(searchState));
    }
    return _createClass(_class2, [{
      key: "update",
      value: function update(_update2) {
        var state = _update2.state.field(searchState);
        if (state != _update2.startState.field(searchState) || _update2.docChanged || _update2.selectionSet || _update2.viewportChanged) this.decorations = this.highlight(state);
      }
    }, {
      key: "highlight",
      value: function highlight(_ref3) {
        var query = _ref3.query,
          panel = _ref3.panel;
        if (!panel || !query.spec.valid) return Decoration.none;
        var view = this.view;
        var builder = new RangeSetBuilder();
        for (var i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
          var _ranges$i = ranges[i],
            from = _ranges$i.from,
            to = _ranges$i.to;
          while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */) to = ranges[++i].to;
          query.highlight(view.state, from, to, function (from, to) {
            var selected = view.state.selection.ranges.some(function (r) {
              return r.from == from && r.to == to;
            });
            builder.add(from, to, selected ? selectedMatchMark : matchMark);
          });
        }
        return builder.finish();
      }
    }]);
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });
  function searchCommand(f) {
    return function (view) {
      var state = view.state.field(searchState, false);
      return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
    };
  }
  /**
  Open the search panel if it isn't already open, and move the
  selection to the first match after the current main selection.
  Will wrap around to the start of the document when it reaches the
  end.
  */
  var findNext = /*@__PURE__*/searchCommand(function (view, _ref4) {
    var query = _ref4.query;
    var to = view.state.selection.main.to;
    var next = query.nextMatch(view.state, to, to);
    if (!next) return false;
    var selection = EditorSelection.single(next.from, next.to);
    var config = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection: selection,
      effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  /**
  Move the selection to the previous instance of the search query,
  before the current main selection. Will wrap past the start
  of the document to start searching at the end again.
  */
  var findPrevious = /*@__PURE__*/searchCommand(function (view, _ref5) {
    var query = _ref5.query;
    var state = view.state,
      from = state.selection.main.from;
    var prev = query.prevMatch(state, from, from);
    if (!prev) return false;
    var selection = EditorSelection.single(prev.from, prev.to);
    var config = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection: selection,
      effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  /**
  Select all instances of the search query.
  */
  var selectMatches = /*@__PURE__*/searchCommand(function (view, _ref6) {
    var query = _ref6.query;
    var ranges = query.matchAll(view.state, 1000);
    if (!ranges || !ranges.length) return false;
    view.dispatch({
      selection: EditorSelection.create(ranges.map(function (r) {
        return EditorSelection.range(r.from, r.to);
      })),
      userEvent: "select.search.matches"
    });
    return true;
  });
  /**
  Select all instances of the currently selected text.
  */
  var selectSelectionMatches = function selectSelectionMatches(_ref7) {
    var state = _ref7.state,
      dispatch = _ref7.dispatch;
    var sel = state.selection;
    if (sel.ranges.length > 1 || sel.main.empty) return false;
    var _sel$main = sel.main,
      from = _sel$main.from,
      to = _sel$main.to;
    var ranges = [],
      main = 0;
    for (var cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
      if (ranges.length > 1000) return false;
      if (cur.value.from == from) main = ranges.length;
      ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
    }
    dispatch(state.update({
      selection: EditorSelection.create(ranges, main),
      userEvent: "select.search.matches"
    }));
    return true;
  };
  /**
  Replace the current match of the search query.
  */
  var replaceNext = /*@__PURE__*/searchCommand(function (view, _ref8) {
    var query = _ref8.query;
    var state = view.state,
      _state$selection$main = state.selection.main,
      from = _state$selection$main.from,
      to = _state$selection$main.to;
    if (state.readOnly) return false;
    var match = query.nextMatch(state, from, from);
    if (!match) return false;
    var next = match;
    var changes = [],
      selection,
      replacement;
    var effects = [];
    if (next.from == from && next.to == to) {
      replacement = state.toText(query.getReplacement(next));
      changes.push({
        from: next.from,
        to: next.to,
        insert: replacement
      });
      next = query.nextMatch(state, next.from, next.to);
      effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
    }
    var changeSet = view.state.changes(changes);
    if (next) {
      selection = EditorSelection.single(next.from, next.to).map(changeSet);
      effects.push(announceMatch(view, next));
      effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
    }
    view.dispatch({
      changes: changeSet,
      selection: selection,
      effects: effects,
      userEvent: "input.replace"
    });
    return true;
  });
  /**
  Replace all instances of the search query with the given
  replacement.
  */
  var replaceAll = /*@__PURE__*/searchCommand(function (view, _ref9) {
    var query = _ref9.query;
    if (view.state.readOnly) return false;
    var changes = query.matchAll(view.state, 1e9).map(function (match) {
      var from = match.from,
        to = match.to;
      return {
        from: from,
        to: to,
        insert: query.getReplacement(match)
      };
    });
    if (!changes.length) return false;
    var announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
    view.dispatch({
      changes: changes,
      effects: EditorView.announce.of(announceText),
      userEvent: "input.replace.all"
    });
    return true;
  });
  function createSearchPanel(view) {
    return view.state.facet(searchConfigFacet).createPanel(view);
  }
  function defaultQuery(state, fallback) {
    var _a, _b, _c, _d, _e;
    var sel = state.selection.main;
    var selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
    if (fallback && !selText) return fallback;
    var config = state.facet(searchConfigFacet);
    return new SearchQuery({
      search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
      caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
      literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
      regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
      wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
    });
  }
  function getSearchInput(view) {
    var panel = getPanel(view, createSearchPanel);
    return panel && panel.dom.querySelector("[main-field]");
  }
  function selectSearchInput(view) {
    var input = getSearchInput(view);
    if (input && input == view.root.activeElement) input.select();
  }
  /**
  Make sure the search panel is open and focused.
  */
  var openSearchPanel = function openSearchPanel(view) {
    var state = view.state.field(searchState, false);
    if (state && state.panel) {
      var searchInput = getSearchInput(view);
      if (searchInput && searchInput != view.root.activeElement) {
        var query = defaultQuery(view.state, state.query.spec);
        if (query.valid) view.dispatch({
          effects: setSearchQuery.of(query)
        });
        searchInput.focus();
        searchInput.select();
      }
    } else {
      view.dispatch({
        effects: [togglePanel$1.of(true), state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)]
      });
    }
    return true;
  };
  /**
  Close the search panel.
  */
  var closeSearchPanel = function closeSearchPanel(view) {
    var state = view.state.field(searchState, false);
    if (!state || !state.panel) return false;
    var panel = getPanel(view, createSearchPanel);
    if (panel && panel.dom.contains(view.root.activeElement)) view.focus();
    view.dispatch({
      effects: togglePanel$1.of(false)
    });
    return true;
  };
  /**
  Default search-related key bindings.

   - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
   - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
   - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
   - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
   - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
  */
  var searchKeymap = [{
    key: "Mod-f",
    run: openSearchPanel,
    scope: "editor search-panel"
  }, {
    key: "F3",
    run: findNext,
    shift: findPrevious,
    scope: "editor search-panel",
    preventDefault: true
  }, {
    key: "Mod-g",
    run: findNext,
    shift: findPrevious,
    scope: "editor search-panel",
    preventDefault: true
  }, {
    key: "Escape",
    run: closeSearchPanel,
    scope: "editor search-panel"
  }, {
    key: "Mod-Shift-l",
    run: selectSelectionMatches
  }, {
    key: "Mod-Alt-g",
    run: gotoLine
  }, {
    key: "Mod-d",
    run: selectNextOccurrence,
    preventDefault: true
  }];
  var SearchPanel = /*#__PURE__*/function () {
    function SearchPanel(view) {
      var _this = this;
      _classCallCheck(this, SearchPanel);
      this.view = view;
      var query = this.query = view.state.field(searchState).query.spec;
      this.commit = this.commit.bind(this);
      this.searchField = crelt("input", {
        value: query.search,
        placeholder: phrase(view, "Find"),
        "aria-label": phrase(view, "Find"),
        "class": "cm-textfield",
        name: "search",
        form: "",
        "main-field": "true",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.replaceField = crelt("input", {
        value: query.replace,
        placeholder: phrase(view, "Replace"),
        "aria-label": phrase(view, "Replace"),
        "class": "cm-textfield",
        name: "replace",
        form: "",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.caseField = crelt("input", {
        type: "checkbox",
        name: "case",
        form: "",
        checked: query.caseSensitive,
        onchange: this.commit
      });
      this.reField = crelt("input", {
        type: "checkbox",
        name: "re",
        form: "",
        checked: query.regexp,
        onchange: this.commit
      });
      this.wordField = crelt("input", {
        type: "checkbox",
        name: "word",
        form: "",
        checked: query.wholeWord,
        onchange: this.commit
      });
      function button(name, onclick, content) {
        return crelt("button", {
          "class": "cm-button",
          name: name,
          onclick: onclick,
          type: "button"
        }, content);
      }
      this.dom = crelt("div", {
        onkeydown: function onkeydown(e) {
          return _this.keydown(e);
        },
        "class": "cm-search"
      }, [this.searchField, button("next", function () {
        return findNext(view);
      }, [phrase(view, "next")]), button("prev", function () {
        return findPrevious(view);
      }, [phrase(view, "previous")]), button("select", function () {
        return selectMatches(view);
      }, [phrase(view, "all")]), crelt("label", null, [this.caseField, phrase(view, "match case")]), crelt("label", null, [this.reField, phrase(view, "regexp")]), crelt("label", null, [this.wordField, phrase(view, "by word")])].concat(_toConsumableArray(view.state.readOnly ? [] : [crelt("br"), this.replaceField, button("replace", function () {
        return replaceNext(view);
      }, [phrase(view, "replace")]), button("replaceAll", function () {
        return replaceAll(view);
      }, [phrase(view, "replace all")])]), [crelt("button", {
        name: "close",
        onclick: function onclick() {
          return closeSearchPanel(view);
        },
        "aria-label": phrase(view, "close"),
        type: "button"
      }, ["×"])]));
    }
    return _createClass(SearchPanel, [{
      key: "commit",
      value: function commit() {
        var query = new SearchQuery({
          search: this.searchField.value,
          caseSensitive: this.caseField.checked,
          regexp: this.reField.checked,
          wholeWord: this.wordField.checked,
          replace: this.replaceField.value
        });
        if (!query.eq(this.query)) {
          this.query = query;
          this.view.dispatch({
            effects: setSearchQuery.of(query)
          });
        }
      }
    }, {
      key: "keydown",
      value: function keydown(e) {
        if (runScopeHandlers(this.view, e, "search-panel")) {
          e.preventDefault();
        } else if (e.keyCode == 13 && e.target == this.searchField) {
          e.preventDefault();
          (e.shiftKey ? findPrevious : findNext)(this.view);
        } else if (e.keyCode == 13 && e.target == this.replaceField) {
          e.preventDefault();
          replaceNext(this.view);
        }
      }
    }, {
      key: "update",
      value: function update(_update3) {
        var _iterator4 = _createForOfIteratorHelper$6(_update3.transactions),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var tr = _step4.value;
            var _iterator5 = _createForOfIteratorHelper$6(tr.effects),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var effect = _step5.value;
                if (effect.is(setSearchQuery) && !effect.value.eq(this.query)) this.setQuery(effect.value);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "setQuery",
      value: function setQuery(query) {
        this.query = query;
        this.searchField.value = query.search;
        this.replaceField.value = query.replace;
        this.caseField.checked = query.caseSensitive;
        this.reField.checked = query.regexp;
        this.wordField.checked = query.wholeWord;
      }
    }, {
      key: "mount",
      value: function mount() {
        this.searchField.select();
      }
    }, {
      key: "pos",
      get: function get() {
        return 80;
      }
    }, {
      key: "top",
      get: function get() {
        return this.view.state.facet(searchConfigFacet).top;
      }
    }]);
  }();
  function phrase(view, phrase) {
    return view.state.phrase(phrase);
  }
  var AnnounceMargin = 30;
  var Break = /[\s\.,:;?!]/;
  function announceMatch(view, _ref10) {
    var from = _ref10.from,
      to = _ref10.to;
    var line = view.state.doc.lineAt(from),
      lineEnd = view.state.doc.lineAt(to).to;
    var start = Math.max(line.from, from - AnnounceMargin),
      end = Math.min(lineEnd, to + AnnounceMargin);
    var text = view.state.sliceDoc(start, end);
    if (start != line.from) {
      for (var i = 0; i < AnnounceMargin; i++) if (!Break.test(text[i + 1]) && Break.test(text[i])) {
        text = text.slice(i);
        break;
      }
    }
    if (end != lineEnd) {
      for (var _i = text.length - 1; _i > text.length - AnnounceMargin; _i--) if (!Break.test(text[_i - 1]) && Break.test(text[_i])) {
        text = text.slice(0, _i);
        break;
      }
    }
    return EditorView.announce.of("".concat(view.state.phrase("current match"), ". ").concat(text, " ").concat(view.state.phrase("on line"), " ").concat(line.number, "."));
  }
  var baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-panel.cm-search": {
      padding: "2px 6px 4px",
      position: "relative",
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      },
      "& input, & button, & label": {
        margin: ".2em .6em .2em 0"
      },
      "& input[type=checkbox]": {
        marginRight: ".2em"
      },
      "& label": {
        fontSize: "80%",
        whiteSpace: "pre"
      }
    },
    "&light .cm-searchMatch": {
      backgroundColor: "#ffff0054"
    },
    "&dark .cm-searchMatch": {
      backgroundColor: "#00ffff8a"
    },
    "&light .cm-searchMatch-selected": {
      backgroundColor: "#ff6a0054"
    },
    "&dark .cm-searchMatch-selected": {
      backgroundColor: "#ff00ff8a"
    }
  });
  var searchExtensions = [searchState, /*@__PURE__*/Prec.low(searchHighlighter), baseTheme$2];

  function _callSuper$1(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _createForOfIteratorHelper$5(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$5(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$5(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$5(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$5(r, a) : void 0; } }
  function _arrayLikeToArray$5(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var SelectedDiagnostic = /*#__PURE__*/_createClass(function SelectedDiagnostic(from, to, diagnostic) {
    _classCallCheck(this, SelectedDiagnostic);
    this.from = from;
    this.to = to;
    this.diagnostic = diagnostic;
  });
  var LintState = /*#__PURE__*/function () {
    function LintState(diagnostics, panel, selected) {
      _classCallCheck(this, LintState);
      this.diagnostics = diagnostics;
      this.panel = panel;
      this.selected = selected;
    }
    return _createClass(LintState, null, [{
      key: "init",
      value: function init(diagnostics, panel, state) {
        // Filter the list of diagnostics for which to create markers
        var diagnosticFilter = state.facet(lintConfig).markerFilter;
        if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics, state);
        var sorted = diagnostics.slice().sort(function (a, b) {
          return a.from - b.from || a.to - b.to;
        });
        var deco = new RangeSetBuilder(),
          active = [],
          pos = 0;
        var _loop = function _loop(_i) {
          var next = _i == sorted.length ? null : sorted[_i];
          if (!next && !active.length) {
            i = _i;
            return 1;
          } // break
          var from, to;
          if (active.length) {
            from = pos;
            to = active.reduce(function (p, d) {
              return Math.min(p, d.to);
            }, next && next.from > from ? next.from : 1e8);
          } else {
            from = next.from;
            to = next.to;
            active.push(next);
            _i++;
          }
          while (_i < sorted.length) {
            var _next = sorted[_i];
            if (_next.from == from && (_next.to > _next.from || _next.to == from)) {
              active.push(_next);
              _i++;
              to = Math.min(_next.to, to);
            } else {
              to = Math.min(_next.from, to);
              break;
            }
          }
          var sev = maxSeverity(active);
          if (active.some(function (d) {
            return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from;
          })) {
            deco.add(from, from, Decoration.widget({
              widget: new DiagnosticWidget(sev),
              diagnostics: active.slice()
            }));
          } else {
            var markClass = active.reduce(function (c, d) {
              return d.markClass ? c + " " + d.markClass : c;
            }, "");
            deco.add(from, to, Decoration.mark({
              "class": "cm-lintRange cm-lintRange-" + sev + markClass,
              diagnostics: active.slice(),
              inclusiveEnd: active.some(function (a) {
                return a.to > to;
              })
            }));
          }
          pos = to;
          for (var _i2 = 0; _i2 < active.length; _i2++) if (active[_i2].to <= pos) active.splice(_i2--, 1);
          i = _i;
        };
        for (var i = 0;;) {
          if (_loop(i)) break;
        }
        var set = deco.finish();
        return new LintState(set, panel, findDiagnostic(set));
      }
    }]);
  }();
  function findDiagnostic(diagnostics) {
    var diagnostic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var found = null;
    diagnostics.between(after, 1e9, function (from, to, _ref) {
      var spec = _ref.spec;
      if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0) return;
      if (!found) found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);else if (spec.diagnostics.indexOf(found.diagnostic) < 0) return false;else found = new SelectedDiagnostic(found.from, to, found.diagnostic);
    });
    return found;
  }
  function hideTooltip(tr, tooltip) {
    var from = tooltip.pos,
      to = tooltip.end || from;
    var result = tr.state.facet(lintConfig).hideOn(tr, from, to);
    if (result != null) return result;
    var line = tr.startState.doc.lineAt(tooltip.pos);
    return !!(tr.effects.some(function (e) {
      return e.is(setDiagnosticsEffect);
    }) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  function maybeEnableLint(state, effects) {
    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  /**
  Returns a transaction spec which updates the current set of
  diagnostics, and enables the lint extension if if wasn't already
  active.
  */
  function setDiagnostics(state, diagnostics) {
    return {
      effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
    };
  }
  /**
  The state effect that updates the set of active diagnostics. Can
  be useful when writing an extension that needs to track these.
  */
  var setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
  var togglePanel = /*@__PURE__*/StateEffect.define();
  var movePanelSelection = /*@__PURE__*/StateEffect.define();
  var lintState = /*@__PURE__*/StateField.define({
    create: function create() {
      return new LintState(Decoration.none, null, null);
    },
    update: function update(value, tr) {
      if (tr.docChanged && value.diagnostics.size) {
        var mapped = value.diagnostics.map(tr.changes),
          selected = null,
          panel = value.panel;
        if (value.selected) {
          var selPos = tr.changes.mapPos(value.selected.from, 1);
          selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
        }
        if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel) panel = null;
        value = new LintState(mapped, panel, selected);
      }
      var _iterator = _createForOfIteratorHelper$5(tr.effects),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var effect = _step.value;
          if (effect.is(setDiagnosticsEffect)) {
            var _panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
            value = LintState.init(effect.value, _panel, tr.state);
          } else if (effect.is(togglePanel)) {
            value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
          } else if (effect.is(movePanelSelection)) {
            value = new LintState(value.diagnostics, value.panel, effect.value);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return value;
    },
    provide: function provide(f) {
      return [showPanel.from(f, function (val) {
        return val.panel;
      }), EditorView.decorations.from(f, function (s) {
        return s.diagnostics;
      })];
    }
  });
  var activeMark = /*@__PURE__*/Decoration.mark({
    "class": "cm-lintRange cm-lintRange-active"
  });
  function lintTooltip(view, pos, side) {
    var _view$state$field = view.state.field(lintState),
      diagnostics = _view$state$field.diagnostics;
    var found,
      start = -1,
      end = -1;
    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), function (from, to, _ref2) {
      var spec = _ref2.spec;
      if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
        found = spec.diagnostics;
        start = from;
        end = to;
        return false;
      }
    });
    var diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
    if (found && diagnosticFilter) found = diagnosticFilter(found, view.state);
    if (!found) return null;
    return {
      pos: start,
      end: end,
      above: view.state.doc.lineAt(start).to < end,
      create: function create() {
        return {
          dom: diagnosticsTooltip(view, found)
        };
      }
    };
  }
  function diagnosticsTooltip(view, diagnostics) {
    return crelt("ul", {
      "class": "cm-tooltip-lint"
    }, diagnostics.map(function (d) {
      return renderDiagnostic(view, d, false);
    }));
  }
  /**
  Command to open and focus the lint panel.
  */
  var openLintPanel = function openLintPanel(view) {
    var field = view.state.field(lintState, false);
    if (!field || !field.panel) view.dispatch({
      effects: maybeEnableLint(view.state, [togglePanel.of(true)])
    });
    var panel = getPanel(view, LintPanel.open);
    if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
    return true;
  };
  /**
  Command to close the lint panel, when open.
  */
  var closeLintPanel = function closeLintPanel(view) {
    var field = view.state.field(lintState, false);
    if (!field || !field.panel) return false;
    view.dispatch({
      effects: togglePanel.of(false)
    });
    return true;
  };
  /**
  Move the selection to the next diagnostic.
  */
  var nextDiagnostic = function nextDiagnostic(view) {
    var field = view.state.field(lintState, false);
    if (!field) return false;
    var sel = view.state.selection.main,
      next = field.diagnostics.iter(sel.to + 1);
    if (!next.value) {
      next = field.diagnostics.iter(0);
      if (!next.value || next.from == sel.from && next.to == sel.to) return false;
    }
    view.dispatch({
      selection: {
        anchor: next.from,
        head: next.to
      },
      scrollIntoView: true
    });
    return true;
  };
  /**
  A set of default key bindings for the lint functionality.

  - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
  - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
  */
  var lintKeymap = [{
    key: "Mod-Shift-m",
    run: openLintPanel,
    preventDefault: true
  }, {
    key: "F8",
    run: nextDiagnostic
  }];
  var lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class(view) {
      _classCallCheck(this, _class);
      this.view = view;
      this.timeout = -1;
      this.set = true;
      var _view$state$facet = view.state.facet(lintConfig),
        delay = _view$state$facet.delay;
      this.lintTime = Date.now() + delay;
      this.run = this.run.bind(this);
      this.timeout = setTimeout(this.run, delay);
    }
    return _createClass(_class, [{
      key: "run",
      value: function run() {
        var _this = this;
        clearTimeout(this.timeout);
        var now = Date.now();
        if (now < this.lintTime - 10) {
          this.timeout = setTimeout(this.run, this.lintTime - now);
        } else {
          this.set = false;
          var state = this.view.state,
            _state$facet = state.facet(lintConfig),
            sources = _state$facet.sources;
          if (sources.length) batchResults(sources.map(function (s) {
            return Promise.resolve(s(_this.view));
          }), function (annotations) {
            if (_this.view.state.doc == state.doc) _this.view.dispatch(setDiagnostics(_this.view.state, annotations.reduce(function (a, b) {
              return a.concat(b);
            })));
          }, function (error) {
            logException(_this.view.state, error);
          });
        }
      }
    }, {
      key: "update",
      value: function update(_update) {
        var config = _update.state.facet(lintConfig);
        if (_update.docChanged || config != _update.startState.facet(lintConfig) || config.needsRefresh && config.needsRefresh(_update)) {
          this.lintTime = Date.now() + config.delay;
          if (!this.set) {
            this.set = true;
            this.timeout = setTimeout(this.run, config.delay);
          }
        }
      }
    }, {
      key: "force",
      value: function force() {
        if (this.set) {
          this.lintTime = Date.now();
          this.run();
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        clearTimeout(this.timeout);
      }
    }]);
  }());
  function batchResults(promises, sink, error) {
    var collected = [],
      timeout = -1;
    var _iterator2 = _createForOfIteratorHelper$5(promises),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var p = _step2.value;
        p.then(function (value) {
          collected.push(value);
          clearTimeout(timeout);
          if (collected.length == promises.length) sink(collected);else timeout = setTimeout(function () {
            return sink(collected);
          }, 200);
        }, error);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  var lintConfig = /*@__PURE__*/Facet.define({
    combine: function combine(input) {
      return Object.assign({
        sources: input.map(function (i) {
          return i.source;
        }).filter(function (x) {
          return x != null;
        })
      }, combineConfig(input.map(function (i) {
        return i.config;
      }), {
        delay: 750,
        markerFilter: null,
        tooltipFilter: null,
        needsRefresh: null,
        hideOn: function hideOn() {
          return null;
        }
      }, {
        needsRefresh: function needsRefresh(a, b) {
          return !a ? b : !b ? a : function (u) {
            return a(u) || b(u);
          };
        }
      }));
    }
  });
  /**
  Given a diagnostic source, this function returns an extension that
  enables linting with that source. It will be called whenever the
  editor is idle (after its content changed). If `null` is given as
  source, this only configures the lint extension.
  */
  function linter(source) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return [lintConfig.of({
      source: source,
      config: config
    }), lintPlugin, lintExtensions];
  }
  function assignKeys(actions) {
    var assigned = [];
    if (actions) {
      var _iterator3 = _createForOfIteratorHelper$5(actions),
        _step3;
      try {
        actions: for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var name = _step3.value.name;
          var _loop2 = function _loop2() {
            var ch = name[i];
            if (/[a-zA-Z]/.test(ch) && !assigned.some(function (c) {
              return c.toLowerCase() == ch.toLowerCase();
            })) {
              assigned.push(ch);
              return 1; // continue actions
            }
          };
          for (var i = 0; i < name.length; i++) {
            if (_loop2()) continue actions;
          }
          assigned.push("");
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
    return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
    var _a;
    var keys = inPanel ? assignKeys(diagnostic.actions) : [];
    return crelt("li", {
      "class": "cm-diagnostic cm-diagnostic-" + diagnostic.severity
    }, crelt("span", {
      "class": "cm-diagnosticText"
    }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map(function (action, i) {
      var fired = false,
        click = function click(e) {
          e.preventDefault();
          if (fired) return;
          fired = true;
          var found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
          if (found) action.apply(view, found.from, found.to);
        };
      var name = action.name,
        keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
      var nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), crelt("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
      return crelt("button", {
        type: "button",
        "class": "cm-diagnosticAction",
        onclick: click,
        onmousedown: click,
        "aria-label": " Action: ".concat(name).concat(keyIndex < 0 ? "" : " (access key \"".concat(keys[i], ")\""), ".")
      }, nameElt);
    }), diagnostic.source && crelt("div", {
      "class": "cm-diagnosticSource"
    }, diagnostic.source));
  }
  var DiagnosticWidget = /*#__PURE__*/function (_WidgetType) {
    function DiagnosticWidget(sev) {
      var _this2;
      _classCallCheck(this, DiagnosticWidget);
      _this2 = _callSuper$1(this, DiagnosticWidget);
      _this2.sev = sev;
      return _this2;
    }
    _inherits(DiagnosticWidget, _WidgetType);
    return _createClass(DiagnosticWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.sev == this.sev;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        return crelt("span", {
          "class": "cm-lintPoint cm-lintPoint-" + this.sev
        });
      }
    }]);
  }(WidgetType);
  var PanelItem = /*#__PURE__*/_createClass(function PanelItem(view, diagnostic) {
    _classCallCheck(this, PanelItem);
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  });
  var LintPanel = /*#__PURE__*/function () {
    function LintPanel(view) {
      var _this3 = this;
      _classCallCheck(this, LintPanel);
      this.view = view;
      this.items = [];
      var onkeydown = function onkeydown(event) {
        if (event.keyCode == 27) {
          // Escape
          closeLintPanel(_this3.view);
          _this3.view.focus();
        } else if (event.keyCode == 38 || event.keyCode == 33) {
          // ArrowUp, PageUp
          _this3.moveSelection((_this3.selectedIndex - 1 + _this3.items.length) % _this3.items.length);
        } else if (event.keyCode == 40 || event.keyCode == 34) {
          // ArrowDown, PageDown
          _this3.moveSelection((_this3.selectedIndex + 1) % _this3.items.length);
        } else if (event.keyCode == 36) {
          // Home
          _this3.moveSelection(0);
        } else if (event.keyCode == 35) {
          // End
          _this3.moveSelection(_this3.items.length - 1);
        } else if (event.keyCode == 13) {
          // Enter
          _this3.view.focus();
        } else if (event.keyCode >= 65 && event.keyCode <= 90 && _this3.selectedIndex >= 0) {
          // A-Z
          var diagnostic = _this3.items[_this3.selectedIndex].diagnostic,
            keys = assignKeys(diagnostic.actions);
          for (var i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
            var found = findDiagnostic(_this3.view.state.field(lintState).diagnostics, diagnostic);
            if (found) diagnostic.actions[i].apply(view, found.from, found.to);
          }
        } else {
          return;
        }
        event.preventDefault();
      };
      var onclick = function onclick(event) {
        for (var i = 0; i < _this3.items.length; i++) {
          if (_this3.items[i].dom.contains(event.target)) _this3.moveSelection(i);
        }
      };
      this.list = crelt("ul", {
        tabIndex: 0,
        role: "listbox",
        "aria-label": this.view.state.phrase("Diagnostics"),
        onkeydown: onkeydown,
        onclick: onclick
      });
      this.dom = crelt("div", {
        "class": "cm-panel-lint"
      }, this.list, crelt("button", {
        type: "button",
        name: "close",
        "aria-label": this.view.state.phrase("close"),
        onclick: function onclick() {
          return closeLintPanel(_this3.view);
        }
      }, "×"));
      this.update();
    }
    return _createClass(LintPanel, [{
      key: "selectedIndex",
      get: function get() {
        var selected = this.view.state.field(lintState).selected;
        if (!selected) return -1;
        for (var i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;
        return -1;
      }
    }, {
      key: "update",
      value: function update() {
        var _this4 = this;
        var _this$view$state$fiel = this.view.state.field(lintState),
          diagnostics = _this$view$state$fiel.diagnostics,
          selected = _this$view$state$fiel.selected;
        var i = 0,
          needsSync = false,
          newSelectedItem = null;
        var seen = new Set();
        diagnostics.between(0, this.view.state.doc.length, function (_start, _end, _ref3) {
          var spec = _ref3.spec;
          var _iterator4 = _createForOfIteratorHelper$5(spec.diagnostics),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var diagnostic = _step4.value;
              if (seen.has(diagnostic)) continue;
              seen.add(diagnostic);
              var found = -1,
                item = void 0;
              for (var j = i; j < _this4.items.length; j++) if (_this4.items[j].diagnostic == diagnostic) {
                found = j;
                break;
              }
              if (found < 0) {
                item = new PanelItem(_this4.view, diagnostic);
                _this4.items.splice(i, 0, item);
                needsSync = true;
              } else {
                item = _this4.items[found];
                if (found > i) {
                  _this4.items.splice(i, found - i);
                  needsSync = true;
                }
              }
              if (selected && item.diagnostic == selected.diagnostic) {
                if (!item.dom.hasAttribute("aria-selected")) {
                  item.dom.setAttribute("aria-selected", "true");
                  newSelectedItem = item;
                }
              } else if (item.dom.hasAttribute("aria-selected")) {
                item.dom.removeAttribute("aria-selected");
              }
              i++;
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        });
        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
          needsSync = true;
          this.items.pop();
        }
        if (this.items.length == 0) {
          this.items.push(new PanelItem(this.view, {
            from: -1,
            to: -1,
            severity: "info",
            message: this.view.state.phrase("No diagnostics")
          }));
          needsSync = true;
        }
        if (newSelectedItem) {
          this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
          this.view.requestMeasure({
            key: this,
            read: function read() {
              return {
                sel: newSelectedItem.dom.getBoundingClientRect(),
                panel: _this4.list.getBoundingClientRect()
              };
            },
            write: function write(_ref4) {
              var sel = _ref4.sel,
                panel = _ref4.panel;
              var scaleY = panel.height / _this4.list.offsetHeight;
              if (sel.top < panel.top) _this4.list.scrollTop -= (panel.top - sel.top) / scaleY;else if (sel.bottom > panel.bottom) _this4.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
            }
          });
        } else if (this.selectedIndex < 0) {
          this.list.removeAttribute("aria-activedescendant");
        }
        if (needsSync) this.sync();
      }
    }, {
      key: "sync",
      value: function sync() {
        var domPos = this.list.firstChild;
        function rm() {
          var prev = domPos;
          domPos = prev.nextSibling;
          prev.remove();
        }
        var _iterator5 = _createForOfIteratorHelper$5(this.items),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var item = _step5.value;
            if (item.dom.parentNode == this.list) {
              while (domPos != item.dom) rm();
              domPos = item.dom.nextSibling;
            } else {
              this.list.insertBefore(item.dom, domPos);
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        while (domPos) rm();
      }
    }, {
      key: "moveSelection",
      value: function moveSelection(selectedIndex) {
        if (this.selectedIndex < 0) return;
        var field = this.view.state.field(lintState);
        var selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
        if (!selection) return;
        this.view.dispatch({
          selection: {
            anchor: selection.from,
            head: selection.to
          },
          scrollIntoView: true,
          effects: movePanelSelection.of(selection)
        });
      }
    }], [{
      key: "open",
      value: function open(view) {
        return new LintPanel(view);
      }
    }]);
  }();
  function svg(content) {
    var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "viewBox=\"0 0 40 40\"";
    return "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ".concat(attrs, ">").concat(encodeURIComponent(content), "</svg>')");
  }
  function underline(color) {
    return svg("<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"".concat(color, "\" fill=\"none\" stroke-width=\".7\"/>"), "width=\"6\" height=\"3\"");
  }
  var baseTheme = /*@__PURE__*/EditorView.baseTheme({
    ".cm-diagnostic": {
      padding: "3px 6px 3px 8px",
      marginLeft: "-1px",
      display: "block",
      whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": {
      borderLeft: "5px solid #d11"
    },
    ".cm-diagnostic-warning": {
      borderLeft: "5px solid orange"
    },
    ".cm-diagnostic-info": {
      borderLeft: "5px solid #999"
    },
    ".cm-diagnostic-hint": {
      borderLeft: "5px solid #66d"
    },
    ".cm-diagnosticAction": {
      font: "inherit",
      border: "none",
      padding: "2px 4px",
      backgroundColor: "#444",
      color: "white",
      borderRadius: "3px",
      marginLeft: "8px",
      cursor: "pointer"
    },
    ".cm-diagnosticSource": {
      fontSize: "70%",
      opacity: .7
    },
    ".cm-lintRange": {
      backgroundPosition: "left bottom",
      backgroundRepeat: "repeat-x",
      paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": {
      backgroundImage: /*@__PURE__*/underline("#d11")
    },
    ".cm-lintRange-warning": {
      backgroundImage: /*@__PURE__*/underline("orange")
    },
    ".cm-lintRange-info": {
      backgroundImage: /*@__PURE__*/underline("#999")
    },
    ".cm-lintRange-hint": {
      backgroundImage: /*@__PURE__*/underline("#66d")
    },
    ".cm-lintRange-active": {
      backgroundColor: "#ffdd9980"
    },
    ".cm-tooltip-lint": {
      padding: 0,
      margin: 0
    },
    ".cm-lintPoint": {
      position: "relative",
      "&:after": {
        content: '""',
        position: "absolute",
        bottom: 0,
        left: "-2px",
        borderLeft: "3px solid transparent",
        borderRight: "3px solid transparent",
        borderBottom: "4px solid #d11"
      }
    },
    ".cm-lintPoint-warning": {
      "&:after": {
        borderBottomColor: "orange"
      }
    },
    ".cm-lintPoint-info": {
      "&:after": {
        borderBottomColor: "#999"
      }
    },
    ".cm-lintPoint-hint": {
      "&:after": {
        borderBottomColor: "#66d"
      }
    },
    ".cm-panel.cm-panel-lint": {
      position: "relative",
      "& ul": {
        maxHeight: "100px",
        overflowY: "auto",
        "& [aria-selected]": {
          backgroundColor: "#ddd",
          "& u": {
            textDecoration: "underline"
          }
        },
        "&:focus [aria-selected]": {
          background_fallback: "#bdf",
          backgroundColor: "Highlight",
          color_fallback: "white",
          color: "HighlightText"
        },
        "& u": {
          textDecoration: "none"
        },
        padding: 0,
        margin: 0
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "2px",
        background: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      }
    }
  });
  function severityWeight(sev) {
    return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
  }
  function maxSeverity(diagnostics) {
    var sev = "hint",
      weight = 1;
    var _iterator6 = _createForOfIteratorHelper$5(diagnostics),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var d = _step6.value;
        var w = severityWeight(d.severity);
        if (w > weight) {
          weight = w;
          sev = d.severity;
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    return sev;
  }
  var LintGutterMarker = /*#__PURE__*/function (_GutterMarker) {
    function LintGutterMarker(diagnostics) {
      var _this5;
      _classCallCheck(this, LintGutterMarker);
      _this5 = _callSuper$1(this, LintGutterMarker);
      _this5.diagnostics = diagnostics;
      _this5.severity = maxSeverity(diagnostics);
      return _this5;
    }
    _inherits(LintGutterMarker, _GutterMarker);
    return _createClass(LintGutterMarker, [{
      key: "toDOM",
      value: function toDOM(view) {
        var elt = document.createElement("div");
        elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
        var diagnostics = this.diagnostics;
        var diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
        if (diagnosticsFilter) diagnostics = diagnosticsFilter(diagnostics, view.state);
        if (diagnostics.length) elt.onmouseover = function () {
          return gutterMarkerMouseOver(view, elt, diagnostics);
        };
        return elt;
      }
    }]);
  }(GutterMarker);
  function trackHoverOn(view, marker) {
    var _mousemove = function mousemove(event) {
      var rect = marker.getBoundingClientRect();
      if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ && event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */) return;
      for (var target = event.target; target; target = target.parentNode) {
        if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint")) return;
      }
      window.removeEventListener("mousemove", _mousemove);
      if (view.state.field(lintGutterTooltip)) view.dispatch({
        effects: setLintGutterTooltip.of(null)
      });
    };
    window.addEventListener("mousemove", _mousemove);
  }
  function gutterMarkerMouseOver(view, marker, diagnostics) {
    function hovered() {
      var line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
      var linePos = view.coordsAtPos(line.from);
      if (linePos) {
        view.dispatch({
          effects: setLintGutterTooltip.of({
            pos: line.from,
            above: false,
            clip: false,
            create: function create() {
              return {
                dom: diagnosticsTooltip(view, diagnostics),
                getCoords: function getCoords() {
                  return marker.getBoundingClientRect();
                }
              };
            }
          })
        });
      }
      marker.onmouseout = marker.onmousemove = null;
      trackHoverOn(view, marker);
    }
    var _view$state$facet2 = view.state.facet(lintGutterConfig),
      hoverTime = _view$state$facet2.hoverTime;
    var hoverTimeout = setTimeout(hovered, hoverTime);
    marker.onmouseout = function () {
      clearTimeout(hoverTimeout);
      marker.onmouseout = marker.onmousemove = null;
    };
    marker.onmousemove = function () {
      clearTimeout(hoverTimeout);
      hoverTimeout = setTimeout(hovered, hoverTime);
    };
  }
  function markersForDiagnostics(doc, diagnostics) {
    var byLine = Object.create(null);
    var _iterator7 = _createForOfIteratorHelper$5(diagnostics),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var diagnostic = _step7.value;
        var _line = doc.lineAt(diagnostic.from);
        (byLine[_line.from] || (byLine[_line.from] = [])).push(diagnostic);
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    var markers = [];
    for (var line in byLine) {
      markers.push(new LintGutterMarker(byLine[line]).range(+line));
    }
    return RangeSet.of(markers, true);
  }
  var lintGutterExtension = /*@__PURE__*/gutter({
    "class": "cm-gutter-lint",
    markers: function markers(view) {
      return view.state.field(lintGutterMarkers);
    },
    widgetMarker: function widgetMarker(view, widget, block) {
      var diagnostics = [];
      view.state.field(lintGutterMarkers).between(block.from, block.to, function (from, to, value) {
        if (from > block.from && from < block.to) diagnostics.push.apply(diagnostics, _toConsumableArray(value.diagnostics));
      });
      return diagnostics.length ? new LintGutterMarker(diagnostics) : null;
    }
  });
  var lintGutterMarkers = /*@__PURE__*/StateField.define({
    create: function create() {
      return RangeSet.empty;
    },
    update: function update(markers, tr) {
      markers = markers.map(tr.changes);
      var diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
      var _iterator8 = _createForOfIteratorHelper$5(tr.effects),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var effect = _step8.value;
          if (effect.is(setDiagnosticsEffect)) {
            var diagnostics = effect.value;
            if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics || [], tr.state);
            markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return markers;
    }
  });
  var setLintGutterTooltip = /*@__PURE__*/StateEffect.define();
  var lintGutterTooltip = /*@__PURE__*/StateField.define({
    create: function create() {
      return null;
    },
    update: function update(tooltip, tr) {
      if (tooltip && tr.docChanged) tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), {
        pos: tr.changes.mapPos(tooltip.pos)
      });
      return tr.effects.reduce(function (t, e) {
        return e.is(setLintGutterTooltip) ? e.value : t;
      }, tooltip);
    },
    provide: function provide(field) {
      return showTooltip.from(field);
    }
  });
  var lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({
    ".cm-gutter-lint": {
      width: "1.4em",
      "& .cm-gutterElement": {
        padding: ".2em"
      }
    },
    ".cm-lint-marker": {
      width: "1em",
      height: "1em"
    },
    ".cm-lint-marker-info": {
      content: /*@__PURE__*/svg("<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>")
    },
    ".cm-lint-marker-warning": {
      content: /*@__PURE__*/svg("<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>")
    },
    ".cm-lint-marker-error": {
      content: /*@__PURE__*/svg("<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>")
    }
  });
  var lintExtensions = [lintState, /*@__PURE__*/EditorView.decorations.compute([lintState], function (state) {
    var _state$field = state.field(lintState),
      selected = _state$field.selected,
      panel = _state$field.panel;
    return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([activeMark.range(selected.from, selected.to)]);
  }), /*@__PURE__*/hoverTooltip(lintTooltip, {
    hideOn: hideTooltip
  }), baseTheme];
  var lintGutterConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        hoverTime: 300 /* Hover.Time */,
        markerFilter: null,
        tooltipFilter: null
      });
    }
  });
  /**
  Returns an extension that installs a gutter showing markers for
  each line that has diagnostics, which can be hovered over to see
  the diagnostics.
  */
  function lintGutter() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
  }

  class CompositeBlock {
      static create(type, value, from, parentHash, end) {
          let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
          return new CompositeBlock(type, value, from, hash, end, [], []);
      }
      constructor(type, 
      // Used for indentation in list items, markup character in lists
      value, from, hash, end, children, positions) {
          this.type = type;
          this.value = value;
          this.from = from;
          this.hash = hash;
          this.end = end;
          this.children = children;
          this.positions = positions;
          this.hashProp = [[NodeProp.contextHash, hash]];
      }
      addChild(child, pos) {
          if (child.prop(NodeProp.contextHash) != this.hash)
              child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
          this.children.push(child);
          this.positions.push(pos);
      }
      toTree(nodeSet, end = this.end) {
          let last = this.children.length - 1;
          if (last >= 0)
              end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
          return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
              makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
          });
      }
  }
  var Type;
  (function (Type) {
      Type[Type["Document"] = 1] = "Document";
      Type[Type["CodeBlock"] = 2] = "CodeBlock";
      Type[Type["FencedCode"] = 3] = "FencedCode";
      Type[Type["Blockquote"] = 4] = "Blockquote";
      Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
      Type[Type["BulletList"] = 6] = "BulletList";
      Type[Type["OrderedList"] = 7] = "OrderedList";
      Type[Type["ListItem"] = 8] = "ListItem";
      Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
      Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
      Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
      Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
      Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
      Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
      Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
      Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
      Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
      Type[Type["LinkReference"] = 18] = "LinkReference";
      Type[Type["Paragraph"] = 19] = "Paragraph";
      Type[Type["CommentBlock"] = 20] = "CommentBlock";
      Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
      // Inline
      Type[Type["Escape"] = 22] = "Escape";
      Type[Type["Entity"] = 23] = "Entity";
      Type[Type["HardBreak"] = 24] = "HardBreak";
      Type[Type["Emphasis"] = 25] = "Emphasis";
      Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
      Type[Type["Link"] = 27] = "Link";
      Type[Type["Image"] = 28] = "Image";
      Type[Type["InlineCode"] = 29] = "InlineCode";
      Type[Type["HTMLTag"] = 30] = "HTMLTag";
      Type[Type["Comment"] = 31] = "Comment";
      Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
      Type[Type["Autolink"] = 33] = "Autolink";
      // Smaller tokens
      Type[Type["HeaderMark"] = 34] = "HeaderMark";
      Type[Type["QuoteMark"] = 35] = "QuoteMark";
      Type[Type["ListMark"] = 36] = "ListMark";
      Type[Type["LinkMark"] = 37] = "LinkMark";
      Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
      Type[Type["CodeMark"] = 39] = "CodeMark";
      Type[Type["CodeText"] = 40] = "CodeText";
      Type[Type["CodeInfo"] = 41] = "CodeInfo";
      Type[Type["LinkTitle"] = 42] = "LinkTitle";
      Type[Type["LinkLabel"] = 43] = "LinkLabel";
      Type[Type["URL"] = 44] = "URL";
  })(Type || (Type = {}));
  /**
  Data structure used to accumulate a block's content during [leaf
  block parsing](#BlockParser.leaf).
  */
  class LeafBlock {
      /**
      @internal
      */
      constructor(
      /**
      The start position of the block.
      */
      start, 
      /**
      The block's text content.
      */
      content) {
          this.start = start;
          this.content = content;
          /**
          @internal
          */
          this.marks = [];
          /**
          The block parsers active for this block.
          */
          this.parsers = [];
      }
  }
  /**
  Data structure used during block-level per-line parsing.
  */
  class Line {
      constructor() {
          /**
          The line's full text.
          */
          this.text = "";
          /**
          The base indent provided by the composite contexts (that have
          been handled so far).
          */
          this.baseIndent = 0;
          /**
          The string position corresponding to the base indent.
          */
          this.basePos = 0;
          /**
          The number of contexts handled @internal
          */
          this.depth = 0;
          /**
          Any markers (i.e. block quote markers) parsed for the contexts. @internal
          */
          this.markers = [];
          /**
          The position of the next non-whitespace character beyond any
          list, blockquote, or other composite block markers.
          */
          this.pos = 0;
          /**
          The column of the next non-whitespace character.
          */
          this.indent = 0;
          /**
          The character code of the character after `pos`.
          */
          this.next = -1;
      }
      /**
      @internal
      */
      forward() {
          if (this.basePos > this.pos)
              this.forwardInner();
      }
      /**
      @internal
      */
      forwardInner() {
          let newPos = this.skipSpace(this.basePos);
          this.indent = this.countIndent(newPos, this.pos, this.indent);
          this.pos = newPos;
          this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
      }
      /**
      Skip whitespace after the given position, return the position of
      the next non-space character or the end of the line if there's
      only space after `from`.
      */
      skipSpace(from) { return skipSpace(this.text, from); }
      /**
      @internal
      */
      reset(text) {
          this.text = text;
          this.baseIndent = this.basePos = this.pos = this.indent = 0;
          this.forwardInner();
          this.depth = 1;
          while (this.markers.length)
              this.markers.pop();
      }
      /**
      Move the line's base position forward to the given position.
      This should only be called by composite [block
      parsers](#BlockParser.parse) or [markup skipping
      functions](#NodeSpec.composite).
      */
      moveBase(to) {
          this.basePos = to;
          this.baseIndent = this.countIndent(to, this.pos, this.indent);
      }
      /**
      Move the line's base position forward to the given _column_.
      */
      moveBaseColumn(indent) {
          this.baseIndent = indent;
          this.basePos = this.findColumn(indent);
      }
      /**
      Store a composite-block-level marker. Should be called from
      [markup skipping functions](#NodeSpec.composite) when they
      consume any non-whitespace characters.
      */
      addMarker(elt) {
          this.markers.push(elt);
      }
      /**
      Find the column position at `to`, optionally starting at a given
      position and column.
      */
      countIndent(to, from = 0, indent = 0) {
          for (let i = from; i < to; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return indent;
      }
      /**
      Find the position corresponding to the given column.
      */
      findColumn(goal) {
          let i = 0;
          for (let indent = 0; i < this.text.length && indent < goal; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return i;
      }
      /**
      @internal
      */
      scrub() {
          if (!this.baseIndent)
              return this.text;
          let result = "";
          for (let i = 0; i < this.basePos; i++)
              result += " ";
          return result + this.text.slice(this.basePos);
      }
  }
  function skipForList(bl, cx, line) {
      if (line.pos == line.text.length ||
          (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
          return true;
      if (line.indent >= line.baseIndent + 4)
          return false;
      let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
      return size > 0 &&
          (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
          line.text.charCodeAt(line.pos + size - 1) == bl.value;
  }
  const DefaultSkipMarkup = {
      [Type.Blockquote](bl, cx, line) {
          if (line.next != 62 /* '>' */)
              return false;
          line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
          line.moveBase(line.pos + (space$2(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
          bl.end = cx.lineStart + line.text.length;
          return true;
      },
      [Type.ListItem](bl, _cx, line) {
          if (line.indent < line.baseIndent + bl.value && line.next > -1)
              return false;
          line.moveBaseColumn(line.baseIndent + bl.value);
          return true;
      },
      [Type.OrderedList]: skipForList,
      [Type.BulletList]: skipForList,
      [Type.Document]() { return true; }
  };
  function space$2(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
  function skipSpace(line, i = 0) {
      while (i < line.length && space$2(line.charCodeAt(i)))
          i++;
      return i;
  }
  function skipSpaceBack(line, i, to) {
      while (i > to && space$2(line.charCodeAt(i - 1)))
          i--;
      return i;
  }
  function isFencedCode(line) {
      if (line.next != 96 && line.next != 126 /* '`~' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      if (pos < line.pos + 3)
          return -1;
      if (line.next == 96)
          for (let i = pos; i < line.text.length; i++)
              if (line.text.charCodeAt(i) == 96)
                  return -1;
      return pos;
  }
  function isBlockquote(line) {
      return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
  }
  function isHorizontalRule(line, cx, breaking) {
      if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
          return -1;
      let count = 1;
      for (let pos = line.pos + 1; pos < line.text.length; pos++) {
          let ch = line.text.charCodeAt(pos);
          if (ch == line.next)
              count++;
          else if (!space$2(ch))
              return -1;
      }
      // Setext headers take precedence
      if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length &&
          cx.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)
          return -1;
      return count < 3 ? -1 : 1;
  }
  function inList(cx, type) {
      for (let i = cx.stack.length - 1; i >= 0; i--)
          if (cx.stack[i].type == type)
              return true;
      return false;
  }
  function isBulletList(line, cx, breaking) {
      return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
          (line.pos == line.text.length - 1 || space$2(line.text.charCodeAt(line.pos + 1))) &&
          (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
  }
  function isOrderedList(line, cx, breaking) {
      let pos = line.pos, next = line.next;
      for (;;) {
          if (next >= 48 && next <= 57 /* '0-9' */)
              pos++;
          else
              break;
          if (pos == line.text.length)
              return -1;
          next = line.text.charCodeAt(pos);
      }
      if (pos == line.pos || pos > line.pos + 9 ||
          (next != 46 && next != 41 /* '.)' */) ||
          (pos < line.text.length - 1 && !space$2(line.text.charCodeAt(pos + 1))) ||
          breaking && !inList(cx, Type.OrderedList) &&
              (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
          return -1;
      return pos + 1 - line.pos;
  }
  function isAtxHeading(line) {
      if (line.next != 35 /* '#' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
          pos++;
      if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
          return -1;
      let size = pos - line.pos;
      return size > 6 ? -1 : size;
  }
  function isSetextUnderline(line) {
      if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      let end = pos;
      while (pos < line.text.length && space$2(line.text.charCodeAt(pos)))
          pos++;
      return pos == line.text.length ? end : -1;
  }
  const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
  const HTMLBlockStyle = [
      [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
      [/^\s*<!--/, CommentEnd],
      [/^\s*<\?/, ProcessingEnd],
      [/^\s*<![A-Z]/, />/],
      [/^\s*<!\[CDATA\[/, /\]\]>/],
      [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
      [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
  ];
  function isHTMLBlock(line, _cx, breaking) {
      if (line.next != 60 /* '<' */)
          return -1;
      let rest = line.text.slice(line.pos);
      for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
          if (HTMLBlockStyle[i][0].test(rest))
              return i;
      return -1;
  }
  function getListIndent(line, pos) {
      let indentAfter = line.countIndent(pos, line.pos, line.indent);
      let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
      return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
  }
  function addCodeText(marks, from, to) {
      let last = marks.length - 1;
      if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
          marks[last].to = to;
      else
          marks.push(elt(Type.CodeText, from, to));
  }
  // Rules for parsing blocks. A return value of false means the rule
  // doesn't apply here, true means it does. When true is returned and
  // `p.line` has been updated, the rule is assumed to have consumed a
  // leaf block. Otherwise, it is assumed to have opened a context.
  const DefaultBlockParsers = {
      LinkReference: undefined,
      IndentedCode(cx, line) {
          let base = line.baseIndent + 4;
          if (line.indent < base)
              return false;
          let start = line.findColumn(base);
          let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
          let marks = [], pendingMarks = [];
          addCodeText(marks, from, to);
          while (cx.nextLine() && line.depth >= cx.stack.length) {
              if (line.pos == line.text.length) { // Empty
                  addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      pendingMarks.push(m);
              }
              else if (line.indent < base) {
                  break;
              }
              else {
                  if (pendingMarks.length) {
                      for (let m of pendingMarks) {
                          if (m.type == Type.CodeText)
                              addCodeText(marks, m.from, m.to);
                          else
                              marks.push(m);
                      }
                      pendingMarks = [];
                  }
                  addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  to = cx.lineStart + line.text.length;
                  let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                  if (codeStart < to)
                      addCodeText(marks, codeStart, to);
              }
          }
          if (pendingMarks.length) {
              pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
              if (pendingMarks.length)
                  line.markers = pendingMarks.concat(line.markers);
          }
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
          return true;
      },
      FencedCode(cx, line) {
          let fenceEnd = isFencedCode(line);
          if (fenceEnd < 0)
              return false;
          let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
          let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
          let marks = [elt(Type.CodeMark, from, from + len)];
          if (infoFrom < infoTo)
              marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
          for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
              let i = line.pos;
              if (line.indent - line.baseIndent < 4)
                  while (i < line.text.length && line.text.charCodeAt(i) == ch)
                      i++;
              if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                  for (let m of line.markers)
                      marks.push(m);
                  marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                  cx.nextLine();
                  break;
              }
              else {
                  if (!first)
                      addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                  if (textStart < textEnd)
                      addCodeText(marks, textStart, textEnd);
              }
          }
          cx.addNode(cx.buffer.writeElements(marks, -from)
              .finish(Type.FencedCode, cx.prevLineEnd() - from), from);
          return true;
      },
      Blockquote(cx, line) {
          let size = isBlockquote(line);
          if (size < 0)
              return false;
          cx.startContext(Type.Blockquote, line.pos);
          cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
          line.moveBase(line.pos + size);
          return null;
      },
      HorizontalRule(cx, line) {
          if (isHorizontalRule(line, cx, false) < 0)
              return false;
          let from = cx.lineStart + line.pos;
          cx.nextLine();
          cx.addNode(Type.HorizontalRule, from);
          return true;
      },
      BulletList(cx, line) {
          let size = isBulletList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type.BulletList)
              cx.startContext(Type.BulletList, line.basePos, line.next);
          let newBase = getListIndent(line, line.pos + 1);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      OrderedList(cx, line) {
          let size = isOrderedList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type.OrderedList)
              cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
          let newBase = getListIndent(line, line.pos + size);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      ATXHeading(cx, line) {
          let size = isAtxHeading(line);
          if (size < 0)
              return false;
          let off = line.pos, from = cx.lineStart + off;
          let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
          while (after > off && line.text.charCodeAt(after - 1) == line.next)
              after--;
          if (after == endOfSpace || after == off || !space$2(line.text.charCodeAt(after - 1)))
              after = line.text.length;
          let buf = cx.buffer
              .write(Type.HeaderMark, 0, size)
              .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
          if (after < line.text.length)
              buf.write(Type.HeaderMark, after - off, endOfSpace - off);
          let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
          cx.nextLine();
          cx.addNode(node, from);
          return true;
      },
      HTMLBlock(cx, line) {
          let type = isHTMLBlock(line, cx, false);
          if (type < 0)
              return false;
          let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
          let marks = [], trailing = end != EmptyLine;
          while (!end.test(line.text) && cx.nextLine()) {
              if (line.depth < cx.stack.length) {
                  trailing = false;
                  break;
              }
              for (let m of line.markers)
                  marks.push(m);
          }
          if (trailing)
              cx.nextLine();
          let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
          let to = cx.prevLineEnd();
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
          return true;
      },
      SetextHeading: undefined // Specifies relative precedence for block-continue function
  };
  // This implements a state machine that incrementally parses link references. At each
  // next line, it looks ahead to see if the line continues the reference or not. If it
  // doesn't and a valid link is available ending before that line, it finishes that.
  // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
  // creates a link reference if there's a valid reference up to the current point.
  class LinkReferenceParser {
      constructor(leaf) {
          this.stage = 0 /* RefStage.Start */;
          this.elts = [];
          this.pos = 0;
          this.start = leaf.start;
          this.advance(leaf.content);
      }
      nextLine(cx, line, leaf) {
          if (this.stage == -1 /* RefStage.Failed */)
              return false;
          let content = leaf.content + "\n" + line.scrub();
          let finish = this.advance(content);
          if (finish > -1 && finish < content.length)
              return this.complete(cx, leaf, finish);
          return false;
      }
      finish(cx, leaf) {
          if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
              return this.complete(cx, leaf, leaf.content.length);
          return false;
      }
      complete(cx, leaf, len) {
          cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
          return true;
      }
      nextStage(elt) {
          if (elt) {
              this.pos = elt.to - this.start;
              this.elts.push(elt);
              this.stage++;
              return true;
          }
          if (elt === false)
              this.stage = -1 /* RefStage.Failed */;
          return false;
      }
      advance(content) {
          for (;;) {
              if (this.stage == -1 /* RefStage.Failed */) {
                  return -1;
              }
              else if (this.stage == 0 /* RefStage.Start */) {
                  if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                      return -1;
                  if (content.charCodeAt(this.pos) != 58 /* ':' */)
                      return this.stage = -1 /* RefStage.Failed */;
                  this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                  this.pos++;
              }
              else if (this.stage == 1 /* RefStage.Label */) {
                  if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                      return -1;
              }
              else if (this.stage == 2 /* RefStage.Link */) {
                  let skip = skipSpace(content, this.pos), end = 0;
                  if (skip > this.pos) {
                      let title = parseLinkTitle(content, skip, this.start);
                      if (title) {
                          let titleEnd = lineEnd(content, title.to - this.start);
                          if (titleEnd > 0) {
                              this.nextStage(title);
                              end = titleEnd;
                          }
                      }
                  }
                  if (!end)
                      end = lineEnd(content, this.pos);
                  return end > 0 && end < content.length ? end : -1;
              }
              else { // RefStage.Title
                  return lineEnd(content, this.pos);
              }
          }
      }
  }
  function lineEnd(text, pos) {
      for (; pos < text.length; pos++) {
          let next = text.charCodeAt(pos);
          if (next == 10)
              break;
          if (!space$2(next))
              return -1;
      }
      return pos;
  }
  class SetextHeadingParser {
      nextLine(cx, line, leaf) {
          let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
          let next = line.next;
          if (underline < 0)
              return false;
          let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
          cx.nextLine();
          cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
              ...cx.parser.parseInline(leaf.content, leaf.start),
              underlineMark
          ]));
          return true;
      }
      finish() {
          return false;
      }
  }
  const DefaultLeafBlocks = {
      LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
      SetextHeading() { return new SetextHeadingParser; }
  };
  const DefaultEndLeaf = [
      (_, line) => isAtxHeading(line) >= 0,
      (_, line) => isFencedCode(line) >= 0,
      (_, line) => isBlockquote(line) >= 0,
      (p, line) => isBulletList(line, p, true) >= 0,
      (p, line) => isOrderedList(line, p, true) >= 0,
      (p, line) => isHorizontalRule(line, p, true) >= 0,
      (p, line) => isHTMLBlock(line, p, true) >= 0
  ];
  const scanLineResult = { text: "", end: 0 };
  /**
  Block-level parsing functions get access to this context object.
  */
  class BlockContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser configuration used.
      */
      parser, 
      /**
      @internal
      */
      input, fragments, 
      /**
      @internal
      */
      ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.line = new Line();
          this.atEnd = false;
          /**
          For reused nodes on gaps, we can't directly put the original
          node into the tree, since that may be bigger than its parent.
          When this happens, we create a dummy tree that is replaced by
          the proper node in `injectGaps` @internal
          */
          this.reusePlaceholders = new Map;
          this.stoppedAt = null;
          /**
          The range index that absoluteLineStart points into @internal
          */
          this.rangeI = 0;
          this.to = ranges[ranges.length - 1].to;
          this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
          this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
          this.stack = [this.block];
          this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
          this.readLine();
      }
      get parsedPos() {
          return this.absoluteLineStart;
      }
      advance() {
          if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
              return this.finish();
          let { line } = this;
          for (;;) {
              for (let markI = 0;;) {
                  let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
                  while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {
                      let mark = line.markers[markI++];
                      this.addNode(mark.type, mark.from, mark.to);
                  }
                  if (!next)
                      break;
                  this.finishContext();
              }
              if (line.pos < line.text.length)
                  break;
              // Empty line
              if (!this.nextLine())
                  return this.finish();
          }
          if (this.fragments && this.reuseFragment(line.basePos))
              return null;
          start: for (;;) {
              for (let type of this.parser.blockParsers)
                  if (type) {
                      let result = type(this, line);
                      if (result != false) {
                          if (result == true)
                              return null;
                          line.forward();
                          continue start;
                      }
                  }
              break;
          }
          let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
          for (let parse of this.parser.leafBlockParsers)
              if (parse) {
                  let parser = parse(this, leaf);
                  if (parser)
                      leaf.parsers.push(parser);
              }
          lines: while (this.nextLine()) {
              if (line.pos == line.text.length)
                  break;
              if (line.indent < line.baseIndent + 4) {
                  for (let stop of this.parser.endLeafBlock)
                      if (stop(this, line, leaf))
                          break lines;
              }
              for (let parser of leaf.parsers)
                  if (parser.nextLine(this, line, leaf))
                      return null;
              leaf.content += "\n" + line.scrub();
              for (let m of line.markers)
                  leaf.marks.push(m);
          }
          this.finishLeaf(leaf);
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      reuseFragment(start) {
          if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
              !this.fragments.matches(this.block.hash))
              return false;
          let taken = this.fragments.takeNodes(this);
          if (!taken)
              return false;
          this.absoluteLineStart += taken;
          this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
          this.moveRangeI();
          if (this.absoluteLineStart < this.to) {
              this.lineStart++;
              this.absoluteLineStart++;
              this.readLine();
          }
          else {
              this.atEnd = true;
              this.readLine();
          }
          return true;
      }
      /**
      The number of parent blocks surrounding the current block.
      */
      get depth() {
          return this.stack.length;
      }
      /**
      Get the type of the parent block at the given depth. When no
      depth is passed, return the type of the innermost parent.
      */
      parentType(depth = this.depth - 1) {
          return this.parser.nodeSet.types[this.stack[depth].type];
      }
      /**
      Move to the next input line. This should only be called by
      (non-composite) [block parsers](#BlockParser.parse) that consume
      the line directly, or leaf block parser
      [`nextLine`](#LeafBlockParser.nextLine) methods when they
      consume the current line (and return true).
      */
      nextLine() {
          this.lineStart += this.line.text.length;
          if (this.absoluteLineEnd >= this.to) {
              this.absoluteLineStart = this.absoluteLineEnd;
              this.atEnd = true;
              this.readLine();
              return false;
          }
          else {
              this.lineStart++;
              this.absoluteLineStart = this.absoluteLineEnd + 1;
              this.moveRangeI();
              this.readLine();
              return true;
          }
      }
      /**
      Retrieve the text of the line after the current one, without
      actually moving the context's current line forward.
      */
      peekLine() {
          return this.scanLine(this.absoluteLineEnd + 1).text;
      }
      moveRangeI() {
          while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
              this.rangeI++;
              this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
          }
      }
      /**
      @internal
      Collect the text for the next line.
      */
      scanLine(start) {
          let r = scanLineResult;
          r.end = start;
          if (start >= this.to) {
              r.text = "";
          }
          else {
              r.text = this.lineChunkAt(start);
              r.end += r.text.length;
              if (this.ranges.length > 1) {
                  let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                  while (this.ranges[rangeI].to < r.end) {
                      rangeI++;
                      let nextFrom = this.ranges[rangeI].from;
                      let after = this.lineChunkAt(nextFrom);
                      r.end = nextFrom + after.length;
                      r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                      textOffset = r.end - r.text.length;
                  }
              }
          }
          return r;
      }
      /**
      @internal
      Populate this.line with the content of the next line. Skip
      leading characters covered by composite blocks.
      */
      readLine() {
          let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
          this.absoluteLineEnd = end;
          line.reset(text);
          for (; line.depth < this.stack.length; line.depth++) {
              let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
              if (!handler)
                  throw new Error("Unhandled block context " + Type[cx.type]);
              if (!handler(cx, this, line))
                  break;
              line.forward();
          }
      }
      lineChunkAt(pos) {
          let next = this.input.chunk(pos), text;
          if (!this.input.lineChunks) {
              let eol = next.indexOf("\n");
              text = eol < 0 ? next : next.slice(0, eol);
          }
          else {
              text = next == "\n" ? "" : next;
          }
          return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
      }
      /**
      The end position of the previous line.
      */
      prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
      /**
      @internal
      */
      startContext(type, start, value = 0) {
          this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
          this.stack.push(this.block);
      }
      /**
      Start a composite block. Should only be called from [block
      parser functions](#BlockParser.parse) that return null.
      */
      startComposite(type, start, value = 0) {
          this.startContext(this.parser.getNodeType(type), start, value);
      }
      /**
      @internal
      */
      addNode(block, from, to) {
          if (typeof block == "number")
              block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
          this.block.addChild(block, from - this.block.from);
      }
      /**
      Add a block element. Can be called by [block
      parsers](#BlockParser.parse).
      */
      addElement(elt) {
          this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
      }
      /**
      Add a block element from a [leaf parser](#LeafBlockParser). This
      makes sure any extra composite block markup (such as blockquote
      markers) inside the block are also added to the syntax tree.
      */
      addLeafElement(leaf, elt) {
          this.addNode(this.buffer
              .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
              .finish(elt.type, elt.to - elt.from), elt.from);
      }
      /**
      @internal
      */
      finishContext() {
          let cx = this.stack.pop();
          let top = this.stack[this.stack.length - 1];
          top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
          this.block = top;
      }
      finish() {
          while (this.stack.length > 1)
              this.finishContext();
          return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
      }
      addGaps(tree) {
          return this.ranges.length > 1 ?
              injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
      }
      /**
      @internal
      */
      finishLeaf(leaf) {
          for (let parser of leaf.parsers)
              if (parser.finish(this, leaf))
                  return;
          let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
          this.addNode(this.buffer
              .writeElements(inline, -leaf.start)
              .finish(Type.Paragraph, leaf.content.length), leaf.start);
      }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
      /**
      @internal
      */
      get buffer() { return new Buffer(this.parser.nodeSet); }
  }
  function injectGaps(ranges, rangeI, tree, offset, dummies) {
      let rangeEnd = ranges[rangeI].to;
      let children = [], positions = [], start = tree.from + offset;
      function movePastNext(upto, inclusive) {
          while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
              let size = ranges[rangeI + 1].from - rangeEnd;
              offset += size;
              upto += size;
              rangeI++;
              rangeEnd = ranges[rangeI].to;
          }
      }
      for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
          movePastNext(ch.from + offset, true);
          let from = ch.from + offset, node, reuse = dummies.get(ch.tree);
          if (reuse) {
              node = reuse;
          }
          else if (ch.to + offset > rangeEnd) {
              node = injectGaps(ranges, rangeI, ch, offset, dummies);
              movePastNext(ch.to + offset, false);
          }
          else {
              node = ch.toTree();
          }
          children.push(node);
          positions.push(from - start);
      }
      movePastNext(tree.to + offset, false);
      return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
  }
  /**
  A Markdown parser configuration.
  */
  class MarkdownParser extends Parser {
      /**
      @internal
      */
      constructor(
      /**
      The parser's syntax [node
      types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
      */
      nodeSet, 
      /**
      @internal
      */
      blockParsers, 
      /**
      @internal
      */
      leafBlockParsers, 
      /**
      @internal
      */
      blockNames, 
      /**
      @internal
      */
      endLeafBlock, 
      /**
      @internal
      */
      skipContextMarkup, 
      /**
      @internal
      */
      inlineParsers, 
      /**
      @internal
      */
      inlineNames, 
      /**
      @internal
      */
      wrappers) {
          super();
          this.nodeSet = nodeSet;
          this.blockParsers = blockParsers;
          this.leafBlockParsers = leafBlockParsers;
          this.blockNames = blockNames;
          this.endLeafBlock = endLeafBlock;
          this.skipContextMarkup = skipContextMarkup;
          this.inlineParsers = inlineParsers;
          this.inlineNames = inlineNames;
          this.wrappers = wrappers;
          /**
          @internal
          */
          this.nodeTypes = Object.create(null);
          for (let t of nodeSet.types)
              this.nodeTypes[t.name] = t.id;
      }
      createParse(input, fragments, ranges) {
          let parse = new BlockContext(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Reconfigure the parser.
      */
      configure(spec) {
          let config = resolveConfig(spec);
          if (!config)
              return this;
          let { nodeSet, skipContextMarkup } = this;
          let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
          if (nonEmpty(config.defineNodes)) {
              skipContextMarkup = Object.assign({}, skipContextMarkup);
              let nodeTypes = nodeSet.types.slice(), styles;
              for (let s of config.defineNodes) {
                  let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                  if (nodeTypes.some(t => t.name == name))
                      continue;
                  if (composite)
                      skipContextMarkup[nodeTypes.length] =
                          (bl, cx, line) => composite(cx, line, bl.value);
                  let id = nodeTypes.length;
                  let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                      : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                  nodeTypes.push(NodeType.define({
                      id,
                      name,
                      props: group && [[NodeProp.group, group]]
                  }));
                  if (style) {
                      if (!styles)
                          styles = {};
                      if (Array.isArray(style) || style instanceof Tag$1)
                          styles[name] = style;
                      else
                          Object.assign(styles, style);
                  }
              }
              nodeSet = new NodeSet(nodeTypes);
              if (styles)
                  nodeSet = nodeSet.extend(styleTags(styles));
          }
          if (nonEmpty(config.props))
              nodeSet = nodeSet.extend(...config.props);
          if (nonEmpty(config.remove)) {
              for (let rm of config.remove) {
                  let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                  if (block > -1)
                      blockParsers[block] = leafBlockParsers[block] = undefined;
                  if (inline > -1)
                      inlineParsers[inline] = undefined;
              }
          }
          if (nonEmpty(config.parseBlock)) {
              for (let spec of config.parseBlock) {
                  let found = blockNames.indexOf(spec.name);
                  if (found > -1) {
                      blockParsers[found] = spec.parse;
                      leafBlockParsers[found] = spec.leaf;
                  }
                  else {
                      let pos = spec.before ? findName(blockNames, spec.before)
                          : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                      blockParsers.splice(pos, 0, spec.parse);
                      leafBlockParsers.splice(pos, 0, spec.leaf);
                      blockNames.splice(pos, 0, spec.name);
                  }
                  if (spec.endLeaf)
                      endLeafBlock.push(spec.endLeaf);
              }
          }
          if (nonEmpty(config.parseInline)) {
              for (let spec of config.parseInline) {
                  let found = inlineNames.indexOf(spec.name);
                  if (found > -1) {
                      inlineParsers[found] = spec.parse;
                  }
                  else {
                      let pos = spec.before ? findName(inlineNames, spec.before)
                          : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                      inlineParsers.splice(pos, 0, spec.parse);
                      inlineNames.splice(pos, 0, spec.name);
                  }
              }
          }
          if (config.wrap)
              wrappers = wrappers.concat(config.wrap);
          return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
      }
      /**
      @internal
      */
      getNodeType(name) {
          let found = this.nodeTypes[name];
          if (found == null)
              throw new RangeError(`Unknown node type '${name}'`);
          return found;
      }
      /**
      Parse the given piece of inline text at the given offset,
      returning an array of [`Element`](#Element) objects representing
      the inline content.
      */
      parseInline(text, offset) {
          let cx = new InlineContext(this, text, offset);
          outer: for (let pos = offset; pos < cx.end;) {
              let next = cx.char(pos);
              for (let token of this.inlineParsers)
                  if (token) {
                      let result = token(cx, next, pos);
                      if (result >= 0) {
                          pos = result;
                          continue outer;
                      }
                  }
              pos++;
          }
          return cx.resolveMarkers(0);
      }
  }
  function nonEmpty(a) {
      return a != null && a.length > 0;
  }
  function resolveConfig(spec) {
      if (!Array.isArray(spec))
          return spec;
      if (spec.length == 0)
          return null;
      let conf = resolveConfig(spec[0]);
      if (spec.length == 1)
          return conf;
      let rest = resolveConfig(spec.slice(1));
      if (!rest || !conf)
          return conf || rest;
      let conc = (a, b) => (a || none).concat(b || none);
      let wrapA = conf.wrap, wrapB = rest.wrap;
      return {
          props: conc(conf.props, rest.props),
          defineNodes: conc(conf.defineNodes, rest.defineNodes),
          parseBlock: conc(conf.parseBlock, rest.parseBlock),
          parseInline: conc(conf.parseInline, rest.parseInline),
          remove: conc(conf.remove, rest.remove),
          wrap: !wrapA ? wrapB : !wrapB ? wrapA :
              (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
      };
  }
  function findName(names, name) {
      let found = names.indexOf(name);
      if (found < 0)
          throw new RangeError(`Position specified relative to unknown parser ${name}`);
      return found;
  }
  let nodeTypes = [NodeType.none];
  for (let i = 1, name; name = Type[i]; i++) {
      nodeTypes[i] = NodeType.define({
          id: i,
          name,
          props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
          top: name == "Document"
      });
  }
  const none = [];
  class Buffer {
      constructor(nodeSet) {
          this.nodeSet = nodeSet;
          this.content = [];
          this.nodes = [];
      }
      write(type, from, to, children = 0) {
          this.content.push(type, from, to, 4 + children * 4);
          return this;
      }
      writeElements(elts, offset = 0) {
          for (let e of elts)
              e.writeTo(this, offset);
          return this;
      }
      finish(type, length) {
          return Tree.build({
              buffer: this.content,
              nodeSet: this.nodeSet,
              reused: this.nodes,
              topID: type,
              length
          });
      }
  }
  /**
  Elements are used to compose syntax nodes during parsing.
  */
  let Element$2 = class Element {
      /**
      @internal
      */
      constructor(
      /**
      The node's
      [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
      */
      type, 
      /**
      The start of the node, as an offset from the start of the document.
      */
      from, 
      /**
      The end of the node.
      */
      to, 
      /**
      The node's child nodes @internal
      */
      children = none) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.children = children;
      }
      /**
      @internal
      */
      writeTo(buf, offset) {
          let startOff = buf.content.length;
          buf.writeElements(this.children, offset);
          buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
      }
      /**
      @internal
      */
      toTree(nodeSet) {
          return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
      }
  };
  class TreeElement {
      constructor(tree, from) {
          this.tree = tree;
          this.from = from;
      }
      get to() { return this.from + this.tree.length; }
      get type() { return this.tree.type.id; }
      get children() { return none; }
      writeTo(buf, offset) {
          buf.nodes.push(this.tree);
          buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
      }
      toTree() { return this.tree; }
  }
  function elt(type, from, to, children) {
      return new Element$2(type, from, to, children);
  }
  const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
  const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
  const LinkStart = {}, ImageStart = {};
  class InlineDelimiter {
      constructor(type, from, to, side) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.side = side;
      }
  }
  const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
  let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
  try {
      Punctuation = new RegExp("[\\p{S}|\\p{P}]", "u");
  }
  catch (_) { }
  const DefaultInline = {
      Escape(cx, next, start) {
          if (next != 92 /* '\\' */ || start == cx.end - 1)
              return -1;
          let escaped = cx.char(start + 1);
          for (let i = 0; i < Escapable.length; i++)
              if (Escapable.charCodeAt(i) == escaped)
                  return cx.append(elt(Type.Escape, start, start + 2));
          return -1;
      },
      Entity(cx, next, start) {
          if (next != 38 /* '&' */)
              return -1;
          let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
          return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
      },
      InlineCode(cx, next, start) {
          if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
              return -1;
          let pos = start + 1;
          while (pos < cx.end && cx.char(pos) == 96)
              pos++;
          let size = pos - start, curSize = 0;
          for (; pos < cx.end; pos++) {
              if (cx.char(pos) == 96) {
                  curSize++;
                  if (curSize == size && cx.char(pos + 1) != 96)
                      return cx.append(elt(Type.InlineCode, start, pos + 1, [
                          elt(Type.CodeMark, start, start + size),
                          elt(Type.CodeMark, pos + 1 - size, pos + 1)
                      ]));
              }
              else {
                  curSize = 0;
              }
          }
          return -1;
      },
      HTMLTag(cx, next, start) {
          if (next != 60 /* '<' */ || start == cx.end - 1)
              return -1;
          let after = cx.slice(start + 1, cx.end);
          let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
          if (url) {
              return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [
                  elt(Type.LinkMark, start, start + 1),
                  // url[0] includes the closing bracket, so exclude it from this slice
                  elt(Type.URL, start + 1, start + url[0].length),
                  elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)
              ]));
          }
          let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
          if (comment)
              return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
          let procInst = /^\?[^]*?\?>/.exec(after);
          if (procInst)
              return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
          let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
          if (!m)
              return -1;
          return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
      },
      Emphasis(cx, next, start) {
          if (next != 95 && next != 42)
              return -1;
          let pos = start + 1;
          while (cx.char(pos) == next)
              pos++;
          let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
          let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
          let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
          let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
          let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
          return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      },
      HardBreak(cx, next, start) {
          if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
              return cx.append(elt(Type.HardBreak, start, start + 2));
          if (next == 32) {
              let pos = start + 1;
              while (cx.char(pos) == 32)
                  pos++;
              if (cx.char(pos) == 10 && pos >= start + 2)
                  return cx.append(elt(Type.HardBreak, start, pos + 1));
          }
          return -1;
      },
      Link(cx, next, start) {
          return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;
      },
      Image(cx, next, start) {
          return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
              ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;
      },
      LinkEnd(cx, next, start) {
          if (next != 93 /* ']' */)
              return -1;
          // Scanning back to the next link/image start marker
          for (let i = cx.parts.length - 1; i >= 0; i--) {
              let part = cx.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                  // If this one has been set invalid (because it would produce
                  // a nested link) or there's no valid link here ignore both.
                  if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                      cx.parts[i] = null;
                      return -1;
                  }
                  // Finish the content and replace the entire range in
                  // this.parts with the link/image node.
                  let content = cx.takeContent(i);
                  let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
                  // Set any open-link markers before this link to invalid.
                  if (part.type == LinkStart)
                      for (let j = 0; j < i; j++) {
                          let p = cx.parts[j];
                          if (p instanceof InlineDelimiter && p.type == LinkStart)
                              p.side = 0 /* Mark.None */;
                      }
                  return link.to;
              }
          }
          return -1;
      }
  };
  function finishLink(cx, content, type, start, startPos) {
      let { text } = cx, next = cx.char(startPos), endPos = startPos;
      content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
      content.push(elt(Type.LinkMark, startPos - 1, startPos));
      if (next == 40 /* '(' */) {
          let pos = cx.skipSpace(startPos + 1);
          let dest = parseURL(text, pos - cx.offset, cx.offset), title;
          if (dest) {
              pos = cx.skipSpace(dest.to);
              // The destination and title must be separated by whitespace
              if (pos != dest.to) {
                  title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                  if (title)
                      pos = cx.skipSpace(title.to);
              }
          }
          if (cx.char(pos) == 41 /* ')' */) {
              content.push(elt(Type.LinkMark, startPos, startPos + 1));
              endPos = pos + 1;
              if (dest)
                  content.push(dest);
              if (title)
                  content.push(title);
              content.push(elt(Type.LinkMark, pos, endPos));
          }
      }
      else if (next == 91 /* '[' */) {
          let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
          if (label) {
              content.push(label);
              endPos = label.to;
          }
      }
      return elt(type, start, endPos, content);
  }
  // These return `null` when falling off the end of the input, `false`
  // when parsing fails otherwise (for use in the incremental link
  // reference parser).
  function parseURL(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next == 60 /* '<' */) {
          for (let pos = start + 1; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (ch == 62 /* '>' */)
                  return elt(Type.URL, start + offset, pos + 1 + offset);
              if (ch == 60 || ch == 10 /* '<\n' */)
                  return false;
          }
          return null;
      }
      else {
          let depth = 0, pos = start;
          for (let escaped = false; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (space$2(ch)) {
                  break;
              }
              else if (escaped) {
                  escaped = false;
              }
              else if (ch == 40 /* '(' */) {
                  depth++;
              }
              else if (ch == 41 /* ')' */) {
                  if (!depth)
                      break;
                  depth--;
              }
              else if (ch == 92 /* '\\' */) {
                  escaped = true;
              }
          }
          return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
      }
  }
  function parseLinkTitle(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
          return false;
      let end = next == 40 ? 41 : next;
      for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == end)
              return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
          else if (ch == 92 /* '\\' */)
              escaped = true;
      }
      return null;
  }
  function parseLinkLabel(text, start, offset, requireNonWS) {
      for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == 93 /* ']' */)
              return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
          else {
              if (requireNonWS && !space$2(ch))
                  requireNonWS = false;
              if (ch == 91 /* '[' */)
                  return false;
              else if (ch == 92 /* '\\' */)
                  escaped = true;
          }
      }
      return null;
  }
  /**
  Inline parsing functions get access to this context, and use it to
  read the content and emit syntax nodes.
  */
  class InlineContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser that is being used.
      */
      parser, 
      /**
      The text of this inline section.
      */
      text, 
      /**
      The starting offset of the section in the document.
      */
      offset) {
          this.parser = parser;
          this.text = text;
          this.offset = offset;
          /**
          @internal
          */
          this.parts = [];
      }
      /**
      Get the character code at the given (document-relative)
      position.
      */
      char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
      /**
      The position of the end of this inline section.
      */
      get end() { return this.offset + this.text.length; }
      /**
      Get a substring of this inline section. Again uses
      document-relative positions.
      */
      slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
      /**
      @internal
      */
      append(elt) {
          this.parts.push(elt);
          return elt.to;
      }
      /**
      Add a [delimiter](#DelimiterType) at this given position. `open`
      and `close` indicate whether this delimiter is opening, closing,
      or both. Returns the end of the delimiter, for convenient
      returning from [parse functions](#InlineParser.parse).
      */
      addDelimiter(type, from, to, open, close) {
          return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      }
      /**
      Returns true when there is an unmatched link or image opening
      token before the current position.
      */
      get hasOpenLink() {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))
                  return true;
          }
          return false;
      }
      /**
      Add an inline element. Returns the end of the element.
      */
      addElement(elt) {
          return this.append(elt);
      }
      /**
      Resolve markers between this.parts.length and from, wrapping matched markers in the
      appropriate node and updating the content of this.parts. @internal
      */
      resolveMarkers(from) {
          // Scan forward, looking for closing tokens
          for (let i = from; i < this.parts.length; i++) {
              let close = this.parts[i];
              if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))
                  continue;
              let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
              let closeSize = close.to - close.from;
              let open, j = i - 1;
              // Continue scanning for a matching opening token
              for (; j >= from; j--) {
                  let part = this.parts[j];
                  if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&
                      // Ignore emphasis delimiters where the character count doesn't match
                      !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&
                          (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                      open = part;
                      break;
                  }
              }
              if (!open)
                  continue;
              let type = close.type.resolve, content = [];
              let start = open.from, end = close.to;
              // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
              // markers.
              if (emp) {
                  let size = Math.min(2, open.to - open.from, closeSize);
                  start = open.to - size;
                  end = close.from + size;
                  type = size == 1 ? "Emphasis" : "StrongEmphasis";
              }
              // Move the covered region into content, optionally adding marker nodes
              if (open.type.mark)
                  content.push(this.elt(open.type.mark, start, open.to));
              for (let k = j + 1; k < i; k++) {
                  if (this.parts[k] instanceof Element$2)
                      content.push(this.parts[k]);
                  this.parts[k] = null;
              }
              if (close.type.mark)
                  content.push(this.elt(close.type.mark, close.from, end));
              let element = this.elt(type, start, end, content);
              // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
              this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
              let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
              // Insert the new element in this.parts
              if (keep)
                  this.parts.splice(i, 0, element);
              else
                  this.parts[i] = element;
          }
          // Collect the elements remaining in this.parts into an array.
          let result = [];
          for (let i = from; i < this.parts.length; i++) {
              let part = this.parts[i];
              if (part instanceof Element$2)
                  result.push(part);
          }
          return result;
      }
      /**
      Find an opening delimiter of the given type. Returns `null` if
      no delimiter is found, or an index that can be passed to
      [`takeContent`](#InlineContext.takeContent) otherwise.
      */
      findOpeningDelimiter(type) {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && part.type == type)
                  return i;
          }
          return null;
      }
      /**
      Remove all inline elements and delimiters starting from the
      given index (which you should get from
      [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
      resolve delimiters inside of them, and return them as an array
      of elements.
      */
      takeContent(startIndex) {
          let content = this.resolveMarkers(startIndex);
          this.parts.length = startIndex;
          return content;
      }
      /**
      Skip space after the given (document) position, returning either
      the position of the next non-space character or the end of the
      section.
      */
      skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
  }
  function injectMarks(elements, marks) {
      if (!marks.length)
          return elements;
      if (!elements.length)
          return marks;
      let elts = elements.slice(), eI = 0;
      for (let mark of marks) {
          while (eI < elts.length && elts[eI].to < mark.to)
              eI++;
          if (eI < elts.length && elts[eI].from < mark.from) {
              let e = elts[eI];
              if (e instanceof Element$2)
                  elts[eI] = new Element$2(e.type, e.from, e.to, injectMarks(e.children, [mark]));
          }
          else {
              elts.splice(eI++, 0, mark);
          }
      }
      return elts;
  }
  // These are blocks that can span blank lines, and should thus only be
  // reused if their next sibling is also being reused.
  const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
  class FragmentCursor {
      constructor(fragments, input) {
          this.fragments = fragments;
          this.input = input;
          // Index into fragment array
          this.i = 0;
          // Active fragment
          this.fragment = null;
          this.fragmentEnd = -1;
          // Cursor into the current fragment, if any. When `moveTo` returns
          // true, this points at the first block after `pos`.
          this.cursor = null;
          if (fragments.length)
              this.fragment = fragments[this.i++];
      }
      nextFragment() {
          this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
          this.cursor = null;
          this.fragmentEnd = -1;
      }
      moveTo(pos, lineStart) {
          while (this.fragment && this.fragment.to <= pos)
              this.nextFragment();
          if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
              return false;
          if (this.fragmentEnd < 0) {
              let end = this.fragment.to;
              while (end > 0 && this.input.read(end - 1, end) != "\n")
                  end--;
              this.fragmentEnd = end ? end - 1 : 0;
          }
          let c = this.cursor;
          if (!c) {
              c = this.cursor = this.fragment.tree.cursor();
              c.firstChild();
          }
          let rPos = pos + this.fragment.offset;
          while (c.to <= rPos)
              if (!c.parent())
                  return false;
          for (;;) {
              if (c.from >= rPos)
                  return this.fragment.from <= lineStart;
              if (!c.childAfter(rPos))
                  return false;
          }
      }
      matches(hash) {
          let tree = this.cursor.tree;
          return tree && tree.prop(NodeProp.contextHash) == hash;
      }
      takeNodes(cx) {
          let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
          let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
          let prevEnd = end, prevI = blockI;
          for (;;) {
              if (cur.to - off > fragEnd) {
                  if (cur.type.isAnonymous && cur.firstChild())
                      continue;
                  break;
              }
              let pos = toRelative(cur.from - off, cx.ranges);
              if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range
                  cx.addNode(cur.tree, pos);
              }
              else {
                  let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);
                  cx.reusePlaceholders.set(dummy, cur.tree);
                  cx.addNode(dummy, pos);
              }
              // Taken content must always end in a block, because incremental
              // parsing happens on block boundaries. Never stop directly
              // after an indented code block, since those can continue after
              // any number of blank lines.
              if (cur.type.is("Block")) {
                  if (NotLast.indexOf(cur.type.id) < 0) {
                      end = cur.to - off;
                      blockI = cx.block.children.length;
                  }
                  else {
                      end = prevEnd;
                      blockI = prevI;
                      prevEnd = cur.to - off;
                      prevI = cx.block.children.length;
                  }
              }
              if (!cur.nextSibling())
                  break;
          }
          while (cx.block.children.length > blockI) {
              cx.block.children.pop();
              cx.block.positions.pop();
          }
          return end - start;
      }
  }
  // Convert an input-stream-relative position to a
  // Markdown-doc-relative position by subtracting the size of all input
  // gaps before `abs`.
  function toRelative(abs, ranges) {
      let pos = abs;
      for (let i = 1; i < ranges.length; i++) {
          let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;
          if (gapFrom < abs)
              pos -= gapTo - gapFrom;
      }
      return pos;
  }
  const markdownHighlighting = styleTags({
      "Blockquote/...": tags$1.quote,
      HorizontalRule: tags$1.contentSeparator,
      "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
      "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
      "ATXHeading3/...": tags$1.heading3,
      "ATXHeading4/...": tags$1.heading4,
      "ATXHeading5/...": tags$1.heading5,
      "ATXHeading6/...": tags$1.heading6,
      "Comment CommentBlock": tags$1.comment,
      Escape: tags$1.escape,
      Entity: tags$1.character,
      "Emphasis/...": tags$1.emphasis,
      "StrongEmphasis/...": tags$1.strong,
      "Link/... Image/...": tags$1.link,
      "OrderedList/... BulletList/...": tags$1.list,
      "BlockQuote/...": tags$1.quote,
      "InlineCode CodeText": tags$1.monospace,
      "URL Autolink": tags$1.url,
      "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
      "CodeInfo LinkLabel": tags$1.labelName,
      LinkTitle: tags$1.string,
      Paragraph: tags$1.content
  });
  /**
  The default CommonMark parser.
  */
  const parser$4 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

  function leftOverSpace(node, from, to) {
      let ranges = [];
      for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
          let nextPos = n ? n.from : to;
          if (nextPos > pos)
              ranges.push({ from: pos, to: nextPos });
          if (!n)
              break;
          pos = n.to;
      }
      return ranges;
  }
  /**
  Create a Markdown extension to enable nested parsing on code
  blocks and/or embedded HTML.
  */
  function parseCode(config) {
      let { codeParser, htmlParser } = config;
      let wrap = parseMixed((node, input) => {
          let id = node.type.id;
          if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
              let info = "";
              if (id == Type.FencedCode) {
                  let infoNode = node.node.getChild(Type.CodeInfo);
                  if (infoNode)
                      info = input.read(infoNode.from, infoNode.to);
              }
              let parser = codeParser(info);
              if (parser)
                  return { parser, overlay: node => node.type.id == Type.CodeText };
          }
          else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag || id == Type.CommentBlock)) {
              return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
          }
          return null;
      });
      return { wrap };
  }

  const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
  /**
  An extension that implements
  [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
  Strikethrough syntax using `~~` delimiters.
  */
  const Strikethrough = {
      defineNodes: [{
              name: "Strikethrough",
              style: { "Strikethrough/...": tags$1.strikethrough }
          }, {
              name: "StrikethroughMark",
              style: tags$1.processingInstruction
          }],
      parseInline: [{
              name: "Strikethrough",
              parse(cx, next, pos) {
                  if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)
                      return -1;
                  let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);
                  let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
                  let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
                  return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
              },
              after: "Emphasis"
          }]
  };
  // Parse a line as a table row and return the row count. When `elts`
  // is given, push syntax elements for the content onto it.
  function parseRow(cx, line, startI = 0, elts, offset = 0) {
      let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
      let parseCell = () => {
          elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
      };
      for (let i = startI; i < line.length; i++) {
          let next = line.charCodeAt(i);
          if (next == 124 /* '|' */ && !esc) {
              if (!first || cellStart > -1)
                  count++;
              first = false;
              if (elts) {
                  if (cellStart > -1)
                      parseCell();
                  elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
              }
              cellStart = cellEnd = -1;
          }
          else if (esc || next != 32 && next != 9) {
              if (cellStart < 0)
                  cellStart = i;
              cellEnd = i + 1;
          }
          esc = !esc && next == 92;
      }
      if (cellStart > -1) {
          count++;
          if (elts)
              parseCell();
      }
      return count;
  }
  function hasPipe(str, start) {
      for (let i = start; i < str.length; i++) {
          let next = str.charCodeAt(i);
          if (next == 124 /* '|' */)
              return true;
          if (next == 92 /* '\\' */)
              i++;
      }
      return false;
  }
  const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
  class TableParser {
      constructor() {
          // Null means we haven't seen the second line yet, false means this
          // isn't a table, and an array means this is a table and we've
          // parsed the given rows so far.
          this.rows = null;
      }
      nextLine(cx, line, leaf) {
          if (this.rows == null) { // Second line
              this.rows = false;
              let lineText;
              if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                  delimiterLine.test(lineText = line.text.slice(line.pos))) {
                  let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                  if (firstCount == parseRow(cx, lineText, line.pos))
                      this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                          cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
              }
          }
          else if (this.rows) { // Line after the second
              let content = [];
              parseRow(cx, line.text, line.pos, content, cx.lineStart);
              this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
          }
          return false;
      }
      finish(cx, leaf) {
          if (!this.rows)
              return false;
          cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
          return true;
      }
  }
  /**
  This extension provides
  [GFM-style](https://github.github.com/gfm/#tables-extension-)
  tables, using syntax like this:

  ```
  | head 1 | head 2 |
  | ---    | ---    |
  | cell 1 | cell 2 |
  ```
  */
  const Table = {
      defineNodes: [
          { name: "Table", block: true },
          { name: "TableHeader", style: { "TableHeader/...": tags$1.heading } },
          "TableRow",
          { name: "TableCell", style: tags$1.content },
          { name: "TableDelimiter", style: tags$1.processingInstruction },
      ],
      parseBlock: [{
              name: "Table",
              leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
              endLeaf(cx, line, leaf) {
                  if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
                      return false;
                  let next = cx.peekLine();
                  return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
              },
              before: "SetextHeading"
          }]
  };
  class TaskParser {
      nextLine() { return false; }
      finish(cx, leaf) {
          cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
              cx.elt("TaskMarker", leaf.start, leaf.start + 3),
              ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
          ]));
          return true;
      }
  }
  /**
  Extension providing
  [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
  task list items, where list items can be prefixed with `[ ]` or
  `[x]` to add a checkbox.
  */
  const TaskList = {
      defineNodes: [
          { name: "Task", block: true, style: tags$1.list },
          { name: "TaskMarker", style: tags$1.atom }
      ],
      parseBlock: [{
              name: "TaskList",
              leaf(cx, leaf) {
                  return /^\[[ xX]\][ \t]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
              },
              after: "SetextHeading"
          }]
  };
  const autolinkRE = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy;
  const urlRE = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy;
  const lastTwoDomainWords = /[\w-]+\.[\w-]+($|\/)/;
  const emailRE = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy;
  const xmppResourceRE = /\/[a-zA-Z\d@.]+/gy;
  function count(str, from, to, ch) {
      let result = 0;
      for (let i = from; i < to; i++)
          if (str[i] == ch)
              result++;
      return result;
  }
  function autolinkURLEnd(text, from) {
      urlRE.lastIndex = from;
      let m = urlRE.exec(text);
      if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf("_") > -1)
          return -1;
      let end = from + m[0].length;
      for (;;) {
          let last = text[end - 1], m;
          if (/[?!.,:*_~]/.test(last) ||
              last == ")" && count(text, from, end, ")") > count(text, from, end, "("))
              end--;
          else if (last == ";" && (m = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(text.slice(from, end))))
              end = from + m.index;
          else
              break;
      }
      return end;
  }
  function autolinkEmailEnd(text, from) {
      emailRE.lastIndex = from;
      let m = emailRE.exec(text);
      if (!m)
          return -1;
      let last = m[0][m[0].length - 1];
      return last == "_" || last == "-" ? -1 : from + m[0].length - (last == "." ? 1 : 0);
  }
  /**
  Extension that implements autolinking for
  `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email
  addresses.
  */
  const Autolink = {
      parseInline: [{
              name: "Autolink",
              parse(cx, next, absPos) {
                  let pos = absPos - cx.offset;
                  if (pos && /\w/.test(cx.text[pos - 1]))
                      return -1;
                  autolinkRE.lastIndex = pos;
                  let m = autolinkRE.exec(cx.text), end = -1;
                  if (!m)
                      return -1;
                  if (m[1] || m[2]) { // www., http://
                      end = autolinkURLEnd(cx.text, pos + m[0].length);
                      if (end > -1 && cx.hasOpenLink) {
                          let noBracket = /([^\[\]]|\[[^\]]*\])*/.exec(cx.text.slice(pos, end));
                          end = pos + noBracket[0].length;
                      }
                  }
                  else if (m[3]) { // email address
                      end = autolinkEmailEnd(cx.text, pos);
                  }
                  else { // mailto:/xmpp:
                      end = autolinkEmailEnd(cx.text, pos + m[0].length);
                      if (end > -1 && m[0] == "xmpp:") {
                          xmppResourceRE.lastIndex = end;
                          m = xmppResourceRE.exec(cx.text);
                          if (m)
                              end = m.index + m[0].length;
                      }
                  }
                  if (end < 0)
                      return -1;
                  cx.addElement(cx.elt("URL", absPos, end + cx.offset));
                  return end + cx.offset;
              }
          }]
  };
  /**
  Extension bundle containing [`Table`](#Table),
  [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and
  [`Autolink`](#Autolink).
  */
  const GFM = [Table, TaskList, Strikethrough, Autolink];
  function parseSubSuper(ch, node, mark) {
      return (cx, next, pos) => {
          if (next != ch || cx.char(pos + 1) == ch)
              return -1;
          let elts = [cx.elt(mark, pos, pos + 1)];
          for (let i = pos + 1; i < cx.end; i++) {
              let next = cx.char(i);
              if (next == ch)
                  return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
              if (next == 92 /* '\\' */)
                  elts.push(cx.elt("Escape", i, i++ + 2));
              if (space$2(next))
                  break;
          }
          return -1;
      };
  }
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  superscript using `^` markers.
  */
  const Superscript = {
      defineNodes: [
          { name: "Superscript", style: tags$1.special(tags$1.content) },
          { name: "SuperscriptMark", style: tags$1.processingInstruction }
      ],
      parseInline: [{
              name: "Superscript",
              parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
          }]
  };
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  subscript using `~` markers.
  */
  const Subscript = {
      defineNodes: [
          { name: "Subscript", style: tags$1.special(tags$1.content) },
          { name: "SubscriptMark", style: tags$1.processingInstruction }
      ],
      parseInline: [{
              name: "Subscript",
              parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
          }]
  };
  /**
  Extension that parses two colons with only letters, underscores,
  and numbers between them as `Emoji` nodes.
  */
  const Emoji = {
      defineNodes: [{ name: "Emoji", style: tags$1.character }],
      parseInline: [{
              name: "Emoji",
              parse(cx, next, pos) {
                  let match;
                  if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                      return -1;
                  return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
              }
          }]
  };

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const scriptText = 54,
    StartCloseScriptTag = 1,
    styleText = 55,
    StartCloseStyleTag = 2,
    textareaText = 56,
    StartCloseTextareaTag = 3,
    EndTag = 4,
    SelfClosingEndTag = 5,
    StartTag = 6,
    StartScriptTag = 7,
    StartStyleTag = 8,
    StartTextareaTag = 9,
    StartSelfClosingTag = 10,
    StartCloseTag = 11,
    NoMatchStartCloseTag = 12,
    MismatchedStartCloseTag = 13,
    missingCloseTag = 57,
    IncompleteCloseTag = 14,
    commentContent$1 = 58,
    Element$1 = 20,
    TagName = 22,
    Attribute = 23,
    AttributeName = 24,
    AttributeValue = 26,
    UnquotedAttributeValue = 27,
    ScriptText = 28,
    StyleText = 31,
    TextareaText = 34,
    OpenTag = 36,
    CloseTag = 37,
    Dialect_noMatch = 0,
    Dialect_selfClosing = 1;

  /* Hand-written tokenizers for HTML. */

  const selfClosers$1 = {
    area: true, base: true, br: true, col: true, command: true,
    embed: true, frame: true, hr: true, img: true, input: true,
    keygen: true, link: true, meta: true, param: true, source: true,
    track: true, wbr: true, menuitem: true
  };

  const implicitlyClosed = {
    dd: true, li: true, optgroup: true, option: true, p: true,
    rp: true, rt: true, tbody: true, td: true, tfoot: true,
    th: true, tr: true
  };

  const closeOnOpen = {
    dd: {dd: true, dt: true},
    dt: {dd: true, dt: true},
    li: {li: true},
    option: {option: true, optgroup: true},
    optgroup: {optgroup: true},
    p: {
      address: true, article: true, aside: true, blockquote: true, dir: true,
      div: true, dl: true, fieldset: true, footer: true, form: true,
      h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
      header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
      p: true, pre: true, section: true, table: true, ul: true
    },
    rp: {rp: true, rt: true},
    rt: {rp: true, rt: true},
    tbody: {tbody: true, tfoot: true},
    td: {td: true, th: true},
    tfoot: {tbody: true},
    th: {td: true, th: true},
    thead: {tbody: true, tfoot: true},
    tr: {tr: true}
  };

  function nameChar(ch) {
    return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
  }

  function isSpace(ch) {
    return ch == 9 || ch == 10 || ch == 13 || ch == 32
  }

  let cachedName = null, cachedInput = null, cachedPos = 0;
  function tagNameAfter(input, offset) {
    let pos = input.pos + offset;
    if (cachedPos == pos && cachedInput == input) return cachedName
    let next = input.peek(offset);
    while (isSpace(next)) next = input.peek(++offset);
    let name = "";
    for (;;) {
      if (!nameChar(next)) break
      name += String.fromCharCode(next);
      next = input.peek(++offset);
    }
    // Undefined to signal there's a <? or <!, null for just missing
    cachedInput = input; cachedPos = pos;
    return cachedName = name ? name.toLowerCase() : next == question$1 || next == bang ? undefined : null
  }

  const lessThan = 60, greaterThan = 62, slash$1 = 47, question$1 = 63, bang = 33, dash$1 = 45;

  function ElementContext(name, parent) {
    this.name = name;
    this.parent = parent;
  }

  const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];

  const elementContext = new ContextTracker({
    start: null,
    shift(context, term, stack, input) {
      return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
    },
    reduce(context, term) {
      return term == Element$1 && context ? context.parent : context
    },
    reuse(context, node, stack, input) {
      let type = node.type.id;
      return type == StartTag || type == OpenTag
        ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
    },
    strict: false
  });

  const tagStart = new ExternalTokenizer((input, stack) => {
    if (input.next != lessThan) {
      // End of file, close any open tags
      if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
      return
    }
    input.advance();
    let close = input.next == slash$1;
    if (close) input.advance();
    let name = tagNameAfter(input, 0);
    if (name === undefined) return
    if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)

    let parent = stack.context ? stack.context.name : null;
    if (close) {
      if (name == parent) return input.acceptToken(StartCloseTag)
      if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
      if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
      for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
      input.acceptToken(MismatchedStartCloseTag);
    } else {
      if (name == "script") return input.acceptToken(StartScriptTag)
      if (name == "style") return input.acceptToken(StartStyleTag)
      if (name == "textarea") return input.acceptToken(StartTextareaTag)
      if (selfClosers$1.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
      if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
      else input.acceptToken(StartTag);
    }
  }, {contextual: true});

  const commentContent = new ExternalTokenizer(input => {
    for (let dashes = 0, i = 0;; i++) {
      if (input.next < 0) {
        if (i) input.acceptToken(commentContent$1);
        break
      }
      if (input.next == dash$1) {
        dashes++;
      } else if (input.next == greaterThan && dashes >= 2) {
        if (i >= 3) input.acceptToken(commentContent$1, -2);
        break
      } else {
        dashes = 0;
      }
      input.advance();
    }
  });

  function inForeignElement(context) {
    for (; context; context = context.parent)
      if (context.name == "svg" || context.name == "math") return true
    return false
  }

  const endTag = new ExternalTokenizer((input, stack) => {
    if (input.next == slash$1 && input.peek(1) == greaterThan) {
      let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
      input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
    } else if (input.next == greaterThan) {
      input.acceptToken(EndTag, 1);
    }
  });

  function contentTokenizer(tag, textToken, endToken) {
    let lastState = 2 + tag.length;
    return new ExternalTokenizer(input => {
      // state means:
      // - 0 nothing matched
      // - 1 '<' matched
      // - 2 '</' + possibly whitespace matched
      // - 3-(1+tag.length) part of the tag matched
      // - lastState whole tag + possibly whitespace matched
      for (let state = 0, matchedLen = 0, i = 0;; i++) {
        if (input.next < 0) {
          if (i) input.acceptToken(textToken);
          break
        }
        if (state == 0 && input.next == lessThan ||
            state == 1 && input.next == slash$1 ||
            state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
          state++;
          matchedLen++;
        } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
          matchedLen++;
        } else if (state == lastState && input.next == greaterThan) {
          if (i > matchedLen)
            input.acceptToken(textToken, -matchedLen);
          else
            input.acceptToken(endToken, -(matchedLen - 2));
          break
        } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
          input.acceptToken(textToken, 1);
          break
        } else {
          state = matchedLen = 0;
        }
        input.advance();
      }
    })
  }

  const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

  const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

  const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

  const htmlHighlighting = styleTags({
    "Text RawText": tags$1.content,
    "StartTag StartCloseTag SelfClosingEndTag EndTag": tags$1.angleBracket,
    TagName: tags$1.tagName,
    "MismatchedCloseTag/TagName": [tags$1.tagName,  tags$1.invalid],
    AttributeName: tags$1.attributeName,
    "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
    Is: tags$1.definitionOperator,
    "EntityReference CharacterReference": tags$1.character,
    Comment: tags$1.blockComment,
    ProcessingInst: tags$1.processingInstruction,
    DoctypeDecl: tags$1.documentMeta
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const parser$3 = LRParser.deserialize({
    version: 14,
    states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
    stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
    goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
    nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
    maxTerm: 67,
    context: elementContext,
    nodeProps: [
      ["closedBy", -10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],
      ["openedBy", 4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],
      ["group", -9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"],
      ["isolate", -11,21,29,30,32,33,35,36,37,38,41,42,"ltr",-3,26,27,39,""]
    ],
    propSources: [htmlHighlighting],
    skippedNodes: [0],
    repeatNodeCount: 9,
    tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
    tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
    topRules: {"Document":[0,15]},
    dialects: {noMatch: 0, selfClosing: 509},
    tokenPrec: 511
  });

  function getAttrs(openTag, input) {
    let attrs = Object.create(null);
    for (let att of openTag.getChildren(Attribute)) {
      let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
      if (name) attrs[input.read(name.from, name.to)] =
        !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
    }
    return attrs
  }

  function findTagName(openTag, input) {
    let tagNameNode = openTag.getChild(TagName);
    return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " "
  }

  function maybeNest(node, input, tags) {
    let attrs;
    for (let tag of tags) {
      if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
        return {parser: tag.parser}
    }
    return null
  }

  // tags?: {
  //   tag: string,
  //   attrs?: ({[attr: string]: string}) => boolean,
  //   parser: Parser
  // }[]
  // attributes?: {
  //   name: string,
  //   tagName?: string,
  //   parser: Parser
  // }[]
   
  function configureNesting(tags = [], attributes = []) {
    let script = [], style = [], textarea = [], other = [];
    for (let tag of tags) {
      let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
      array.push(tag);
    }
    let attrs = attributes.length ? Object.create(null) : null;
    for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);

    return parseMixed((node, input) => {
      let id = node.type.id;
      if (id == ScriptText) return maybeNest(node, input, script)
      if (id == StyleText) return maybeNest(node, input, style)
      if (id == TextareaText) return maybeNest(node, input, textarea)

      if (id == Element$1 && other.length) {
        let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;
        if (tagName) for (let tag of other) {
          if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(open, input))))) {
            let close = n.lastChild;
            let to = close.type.id == CloseTag ? close.from : n.to;
            if (to > open.to)
              return {parser: tag.parser, overlay: [{from: open.to, to}]}
          }
        }
      }

      if (attrs && id == Attribute) {
        let n = node.node, nameNode;
        if (nameNode = n.firstChild) {
          let matches = attrs[input.read(nameNode.from, nameNode.to)];
          if (matches) for (let attr of matches) {
            if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue
            let value = n.lastChild;
            if (value.type.id == AttributeValue) {
              let from = value.from + 1;
              let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
              if (to > from) return {parser: attr.parser, overlay: [{from, to}]}
            } else if (value.type.id == UnquotedAttributeValue) {
              return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}
            }
          }
        }
      }
      return null
    })
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const descendantOp = 101,
    Unit = 1,
    callee = 102,
    identifier$2 = 103,
    VariableName = 2;

  /* Hand-written tokenizers for CSS tokens that can't be
     expressed by Lezer's built-in tokenizer. */

  const space$1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
  const colon = 58, parenL = 40, underscore = 95, bracketL$1 = 91, dash = 45, period = 46,
        hash = 35, percent = 37, ampersand = 38, backslash = 92, newline$1 = 10;

  function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

  function isDigit(ch) { return ch >= 48 && ch <= 57 }

  const identifiers = new ExternalTokenizer((input, stack) => {
    for (let inside = false, dashes = 0, i = 0;; i++) {
      let {next} = input;
      if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
        if (!inside && (next != dash || i > 0)) inside = true;
        if (dashes === i && next == dash) dashes++;
        input.advance();
      } else if (next == backslash && input.peek(1) != newline$1) {
        input.advance();
        if (input.next > -1) input.advance();
        inside = true;
      } else {
        if (inside)
          input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
        break
      }
    }
  });

  const descendant = new ExternalTokenizer(input => {
    if (space$1.includes(input.peek(-1))) {
      let {next} = input;
      if (isAlpha(next) || next == underscore || next == hash || next == period ||
          next == bracketL$1 || next == colon && isAlpha(input.peek(1)) ||
          next == dash || next == ampersand)
        input.acceptToken(descendantOp);
    }
  });

  const unitToken = new ExternalTokenizer(input => {
    if (!space$1.includes(input.peek(-1))) {
      let {next} = input;
      if (next == percent) { input.advance(); input.acceptToken(Unit); }
      if (isAlpha(next)) {
        do { input.advance(); } while (isAlpha(input.next) || isDigit(input.next))
        input.acceptToken(Unit);
      }
    }
  });

  const cssHighlighting = styleTags({
    "AtKeyword import charset namespace keyframes media supports": tags$1.definitionKeyword,
    "from to selector": tags$1.keyword,
    NamespaceName: tags$1.namespace,
    KeyframeName: tags$1.labelName,
    KeyframeRangeName: tags$1.operatorKeyword,
    TagName: tags$1.tagName,
    ClassName: tags$1.className,
    PseudoClassName: tags$1.constant(tags$1.className),
    IdName: tags$1.labelName,
    "FeatureName PropertyName": tags$1.propertyName,
    AttributeName: tags$1.attributeName,
    NumberLiteral: tags$1.number,
    KeywordQuery: tags$1.keyword,
    UnaryQueryOp: tags$1.operatorKeyword,
    "CallTag ValueName": tags$1.atom,
    VariableName: tags$1.variableName,
    Callee: tags$1.operatorKeyword,
    Unit: tags$1.unit,
    "UniversalSelector NestingSelector": tags$1.definitionOperator,
    MatchOp: tags$1.compareOperator,
    "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
    BinOp: tags$1.arithmeticOperator,
    Important: tags$1.modifier,
    Comment: tags$1.blockComment,
    ColorLiteral: tags$1.color,
    "ParenthesizedContent StringLiteral": tags$1.string,
    ":": tags$1.punctuation,
    "PseudoOp #": tags$1.derefOperator,
    "; ,": tags$1.separator,
    "( )": tags$1.paren,
    "[ ]": tags$1.squareBracket,
    "{ }": tags$1.brace
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_callee = {__proto__:null,lang:34, "nth-child":34, "nth-last-child":34, "nth-of-type":34, "nth-last-of-type":34, dir:34, "host-context":34, url:62, "url-prefix":62, domain:62, regexp:62, selector:140};
  const spec_AtKeyword = {__proto__:null,"@import":120, "@media":144, "@charset":148, "@namespace":152, "@keyframes":158, "@supports":170};
  const spec_identifier$1 = {__proto__:null,not:134, only:134};
  const parser$2 = LRParser.deserialize({
    version: 14,
    states: ":|QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$[QXO'#CaO$fQ[O'#CiO$qQ[O'#DUO$vQ[O'#DXOOQP'#Eo'#EoO${QdO'#DhO%jQ[O'#DuO${QdO'#DwO%{Q[O'#DyO&WQ[O'#D|O&`Q[O'#ESO&nQ[O'#EUOOQS'#En'#EnOOQS'#EX'#EXQYQ[OOO&uQXO'#CdO'jQWO'#DdO'oQWO'#EtO'zQ[O'#EtQOQWOOP(UO#tO'#C_POOO)C@^)C@^OOQP'#Ch'#ChOOQP,59Q,59QO#kQ[O,59QO(aQ[O,59TO$qQ[O,59pO$vQ[O,59sO(lQ[O,59vO(lQ[O,59xO(lQ[O,59yO(lQ[O'#E^O)WQWO,58{O)`Q[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)gQWO,59TO)lQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO)qQ`O,59sOOQS'#Cq'#CqO${QdO'#CrO)yQvO'#CtO+ZQtO,5:SOOQO'#Cy'#CyO)lQWO'#CxO+oQWO'#CzO+tQ[O'#DPOOQS'#Eq'#EqOOQO'#Dk'#DkO+|Q[O'#DrO,[QWO'#EuO&`Q[O'#DpO,jQWO'#DsOOQO'#Ev'#EvO)ZQWO,5:aO,oQpO,5:cOOQS'#D{'#D{O,wQWO,5:eO,|Q[O,5:eOOQO'#EO'#EOO-UQWO,5:hO-ZQWO,5:nO-cQWO,5:pOOQS-E8V-E8VO-kQdO,5:OO-{Q[O'#E`O.YQWO,5;`O.YQWO,5;`POOO'#EW'#EWP.eO#tO,58yPOOO,58y,58yOOQP1G.l1G.lOOQP1G.o1G.oO)gQWO1G.oO)lQWO1G.oOOQP1G/[1G/[O.pQ`O1G/_O/ZQXO1G/bO/qQXO1G/dO0XQXO1G/eO0oQXO,5:xOOQO-E8[-E8[OOQS1G.g1G.gO0yQWO,59}O1OQ[O'#DTO1VQdO'#CpOOQP1G/_1G/_O${QdO1G/_O1^QpO,59^OOQS,59`,59`O${QdO,59bO1fQWO1G/nOOQS,59d,59dO1kQ!bO,59fOOQS'#DQ'#DQOOQS'#EZ'#EZO1vQ[O,59kOOQS,59k,59kO2OQWO'#DkO2ZQWO,5:WO2`QWO,5:^O&`Q[O,5:YO2hQ[O'#EaO3PQWO,5;aO3[QWO,5:[O(lQ[O,5:_OOQS1G/{1G/{OOQS1G/}1G/}OOQS1G0P1G0PO3mQWO1G0PO3rQdO'#EPOOQS1G0S1G0SOOQS1G0Y1G0YOOQS1G0[1G0[O3}QtO1G/jOOQO1G/j1G/jOOQO,5:z,5:zO4eQ[O,5:zOOQO-E8^-E8^O4rQWO1G0zPOOO-E8U-E8UPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO${QdO7+$yOOQS1G/i1G/iO4}QXO'#EsO5XQWO,59oO5^QtO'#EYO6UQdO'#EpO6`QWO,59[O6eQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|OOQS7+%Y7+%YOOQS1G/Q1G/QO6mQWO1G/QOOQS-E8X-E8XOOQS1G/V1G/VO${QdO1G/rOOQO1G/x1G/xOOQO1G/t1G/tO6rQWO,5:{OOQO-E8_-E8_O7QQXO1G/yOOQS7+%k7+%kO7XQYO'#CtOOQO'#ER'#ERO7dQ`O'#EQOOQO'#EQ'#EQO7oQWO'#EbO7wQdO,5:kOOQS,5:k,5:kO8SQtO'#E_O${QdO'#E_O9TQdO7+%UOOQO7+%U7+%UOOQO1G0f1G0fO9hQpO<<HeO9pQ[O'#E]O9zQWO,5;_OOQP1G/Z1G/ZOOQS-E8W-E8WO:SQdO'#E[O:^QWO,5;[OOQT1G.v1G.vOOQP<<He<<HeOOQS7+$l7+$lO:fQdO7+%^OOQO7+%e7+%eOOQO,5:l,5:lO3uQdO'#EcO7oQWO,5:|OOQS,5:|,5:|OOQS-E8`-E8`OOQS1G0V1G0VO:mQtO,5:yOOQS-E8]-E8]OOQO<<Hp<<HpOOQPAN>PAN>PO;nQXO,5:wOOQO-E8Z-E8ZO;xQdO,5:vOOQO-E8Y-E8YOOQO<<Hx<<HxOOQO,5:},5:}OOQO-E8a-E8aOOQS1G0h1G0h",
    stateData: "<[~O#]OS#^QQ~OUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#ZRO~OQfOUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#ZeO~O#W#hP~P!ZO#^jO~O#ZlO~OZnO^oO_oOrqOypO!PrO!StO#XsO~OuuO!UwO~P#pOa}O#YzO#ZyO~O#Z!OO~O#Z!QO~OQ![Oc!TOg![Oi![Oo!YOr!ZO#Y!WO#Z!SO#f!UO~Oc!^O!e!`O!h!aO#Z!]O!U#iP~Oi!fOo!YO#Z!eO~Oi!hO#Z!hO~Oc!^O!e!`O!h!aO#Z!]O~O!Z#iP~P%jOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#XWX~O^!mO~O!Z!nO#W#hX!T#hX~O#W#hX!T#hX~P!ZO#_!qO#`!qO#a!sO~Oa!wO#YzO#ZyO~OUYOXYOZTO^VO_VOrXOyWO#ZRO~OuuO!UwO~O!T#hP~P!ZOc#RO~Oc#SO~Oq#TO}#UO~OP#WOchXkhX!ZhX!ehX!hhX#ZhXbhXQhXghXihXohXrhXuhX!YhX#WhX#YhX#fhXqhX!ThX~Oc!^Ok#XO!e!`O!h!aO#Z!]O!Z#iP~Oc#[O~Oq#`O#Z#]O~Oc!^O!e!`O!h!aO#Z#aO~Ou#eO!c#dO!U#iX!Z#iX~Oc#hO~Ok#XO!Z#jO~O!Z#kO~Oi#lOo!YO~O!U#mO~O!UwO!c#dO~O!UwO!Z#pO~O!Y#rO!Z!Wa#W!Wa!T!Wa~P${O!Z#SX#W#SX!T#SX~P!ZO!Z!nO#W#ha!T#ha~O#_!qO#`!qO#a#xO~Oq#zO}#{O~OZnO^oO_oOrqOypO~Ou!Oi!P!Oi!S!Oi!U!Oi#X!Oib!Oi~P.xOu!Qi!P!Qi!S!Qi!U!Qi#X!Qib!Qi~P.xOu!Ri!P!Ri!S!Ri!U!Ri#X!Rib!Ri~P.xOu#Qa!U#Qa~P#pO!T#|O~Ob#gP~P(lOb#dP~P${Ob$TOk#XO~O!Z$VO~Ob$WOi$XOp$XO~Oq$ZO#Z#]O~O^!aXb!_X!c!_X~O^$[O~Ob$]O!c#dO~Oc!^O!e!`O!h!aO#Z!]Ou#TX!U#TX!Z#TX~Ou#eO!U#ia!Z#ia~O!c#dOu!da!U!da!Z!dab!da~O!Z$bO~O!T$iO#Z$dO#f$cO~Ok#XOu$kO!Y$mO!Z!Wi#W!Wi!T!Wi~P${O!Z#Sa#W#Sa!T#Sa~P!ZO!Z!nO#W#hi!T#hi~Ou$pOb#gX~P#pOb$rO~Ok#XOQ!|Xb!|Xc!|Xg!|Xi!|Xo!|Xr!|Xu!|X#Y!|X#Z!|X#f!|X~Ou$tOb#dX~P${Ob$vO~Ok#XOq$wO~Ob$xO~O!c#dOu#Ta!U#Ta!Z#Ta~Ob$zO~P#pOP#WOuhX!UhX~O#f$cOu!tX!U!tX~Ou$|O!UwO~O!T%QO#Z$dO#f$cO~Ok#XOQ#RXc#RXg#RXi#RXo#RXr#RXu#RX!Y#RX!Z#RX#W#RX#Y#RX#Z#RX#f#RX!T#RX~Ou$kO!Y%TO!Z!Wq#W!Wq!T!Wq~P${Ok#XOq%UO~Ob#PXu#PX~P(lOu$pOb#ga~Ob#OXu#OX~P${Ou$tOb#da~Ob%ZO~P${Ok#XOQ#Rac#Rag#Rai#Rao#Rar#Rau#Ra!Y#Ra!Z#Ra#W#Ra#Y#Ra#Z#Ra#f#Ra!T#Ra~Ob#Pau#Pa~P#pOb#Oau#Oa~P${O#]p#^#fk!S#f~",
    goto: "-o#kPPP#lP#oP#x$YP#xP$j#xPP$pPPP$v%P%PP%cP%PP%P%}&aPPPP%P&yP&}'T#xP'Z#x'aP#xP#x#xPPP'g'|(ZPP#oPP(b(b(l(bP(bP(b(bP#oP#oP#oP(o#oP(r(u(x)P#oP#oP)U)[)k)y*P*V*]*c*i*s*y+PPPPPPPPPPP+V+`,O,RP,w,z-Q-ZRkQ_bOPdhw!n#tmYOPdhrstuw!n#R#h#t$pmSOPdhrstuw!n#R#h#t$pQmTR!tnQ{VR!uoQ!u}Q#Z!XR#y!wq![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%Xp![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%XU$f#m$h$|R${$eq!XZ]!T!m#S#U#X#q#{$Q$[$k$l$t$y%Xp![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%XQ!f^R#l!gT#^!Z#_Q|VR!voQ!u|R#y!vQ!PWR!xpQ!RXR!yqQxUQ#PvQ#i!cQ#o!jQ#p!kQ%O$gR%^$}SgPwQ!phQ#s!nR$n#tZfPhw!n#ta!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$g#m$hR%[$|V$e#m$h$|Q!rjR#w!rQdOShPwU!ldh#tR#t!nQ$Q#SU$s$Q$y%XQ$y$[R%X$tQ#_!ZR$Y#_Q$u$QR%Y$uQ$q#}R%W$qQvUR#OvQ$l#qR%S$lQ!ogS#u!o#vR#v!pQ#f!_R$`#fQ$h#mR%P$hQ$}$gR%]$}_cOPdhw!n#t^UOPdhw!n#tQ!zrQ!{sQ!|tQ!}uQ#}#RQ$a#hR%V$pR$R#SQ!VZQ!d]Q#V!TQ#q!m[$P#S$Q$[$t$y%XQ$S#UQ$U#XS$j#q$lQ$o#{R%R$kR$O#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$^#dR$_#e",
    nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
    maxTerm: 118,
    nodeProps: [
      ["isolate", -2,3,25,""],
      ["openedBy", 18,"(",33,"[",51,"{"],
      ["closedBy", 19,")",34,"]",52,"}"]
    ],
    propSources: [cssHighlighting],
    skippedNodes: [0,3,88],
    repeatNodeCount: 12,
    tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#]~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#]~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#f[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#f[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#f[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#^~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#f[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU^QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS}SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!PQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[!]Qp`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSr^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSq^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUp`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!cQp`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!UUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
    tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup("m~RRYZ[z{a~~g~aO#`~~dP!P!Qg~lO#a~~", 28, 107)],
    topRules: {"StyleSheet":[0,4],"Styles":[1,87]},
    specialized: [{term: 102, get: (value) => spec_callee[value] || -1},{term: 59, get: (value) => spec_AtKeyword[value] || -1},{term: 103, get: (value) => spec_identifier$1[value] || -1}],
    tokenPrec: 1246
  });

  function _createForOfIteratorHelper$4(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$4(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$4(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$4(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$4(r, a) : void 0; } }
  function _arrayLikeToArray$4(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var _properties = null;
  function properties() {
    if (!_properties && (typeof document === "undefined" ? "undefined" : _typeof$1(document)) == "object" && document.body) {
      var style = document.body.style,
        names = [],
        seen = new Set();
      for (var prop in style) if (prop != "cssText" && prop != "cssFloat") {
        if (typeof style[prop] == "string") {
          if (/[A-Z]/.test(prop)) prop = prop.replace(/[A-Z]/g, function (ch) {
            return "-" + ch.toLowerCase();
          });
          if (!seen.has(prop)) {
            names.push(prop);
            seen.add(prop);
          }
        }
      }
      _properties = names.sort().map(function (name) {
        return {
          type: "property",
          label: name,
          apply: name + ": "
        };
      });
    }
    return _properties || [];
  }
  var pseudoClasses = /*@__PURE__*/["active", "after", "any-link", "autofill", "backdrop", "before", "checked", "cue", "default", "defined", "disabled", "empty", "enabled", "file-selector-button", "first", "first-child", "first-letter", "first-line", "first-of-type", "focus", "focus-visible", "focus-within", "fullscreen", "has", "host", "host-context", "hover", "in-range", "indeterminate", "invalid", "is", "lang", "last-child", "last-of-type", "left", "link", "marker", "modal", "not", "nth-child", "nth-last-child", "nth-last-of-type", "nth-of-type", "only-child", "only-of-type", "optional", "out-of-range", "part", "placeholder", "placeholder-shown", "read-only", "read-write", "required", "right", "root", "scope", "selection", "slotted", "target", "target-text", "valid", "visited", "where"].map(function (name) {
    return {
      type: "class",
      label: name
    };
  });
  var values = /*@__PURE__*/["above", "absolute", "activeborder", "additive", "activecaption", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in", "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from", "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide", "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all", "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation", "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic", "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position", "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top", "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin", "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"].map(function (name) {
    return {
      type: "keyword",
      label: name
    };
  }).concat(/*@__PURE__*/["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"].map(function (name) {
    return {
      type: "constant",
      label: name
    };
  }));
  var tags = /*@__PURE__*/["a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer", "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output", "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"].map(function (name) {
    return {
      type: "type",
      label: name
    };
  });
  var atRules = /*@__PURE__*/["@charset", "@color-profile", "@container", "@counter-style", "@font-face", "@font-feature-values", "@font-palette-values", "@import", "@keyframes", "@layer", "@media", "@namespace", "@page", "@position-try", "@property", "@scope", "@starting-style", "@supports", "@view-transition"].map(function (label) {
    return {
      type: "keyword",
      label: label
    };
  });
  var identifier$1 = /^(\w[\w-]*|-\w[\w-]*|)$/,
    variable = /^-(-[\w-]*)?$/;
  function isVarArg(node, doc) {
    var _a;
    if (node.name == "(" || node.type.isError) node = node.parent || node;
    if (node.name != "ArgList") return false;
    var callee = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.firstChild;
    if ((callee === null || callee === void 0 ? void 0 : callee.name) != "Callee") return false;
    return doc.sliceString(callee.from, callee.to) == "var";
  }
  var VariablesByNode = /*@__PURE__*/new NodeWeakMap();
  var declSelector = ["Declaration"];
  function astTop(node) {
    for (var cur = node;;) {
      if (cur.type.isTop) return cur;
      if (!(cur = cur.parent)) return node;
    }
  }
  function variableNames(doc, node, isVariable) {
    if (node.to - node.from > 4096) {
      var known = VariablesByNode.get(node);
      if (known) return known;
      var result = [],
        seen = new Set(),
        cursor = node.cursor(IterMode.IncludeAnonymous);
      if (cursor.firstChild()) do {
        var _iterator = _createForOfIteratorHelper$4(variableNames(doc, cursor.node, isVariable)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var option = _step.value;
            if (!seen.has(option.label)) {
              seen.add(option.label);
              result.push(option);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } while (cursor.nextSibling());
      VariablesByNode.set(node, result);
      return result;
    } else {
      var _result = [],
        _seen = new Set();
      node.cursor().iterate(function (node) {
        var _a;
        if (isVariable(node) && node.matchContext(declSelector) && ((_a = node.node.nextSibling) === null || _a === void 0 ? void 0 : _a.name) == ":") {
          var name = doc.sliceString(node.from, node.to);
          if (!_seen.has(name)) {
            _seen.add(name);
            _result.push({
              label: name,
              type: "variable"
            });
          }
        }
      });
      return _result;
    }
  }
  /**
  Create a completion source for a CSS dialect, providing a
  predicate for determining what kind of syntax node can act as a
  completable variable. This is used by language modes like Sass and
  Less to reuse this package's completion logic.
  */
  var defineCSSCompletionSource = function defineCSSCompletionSource(isVariable) {
    return function (context) {
      var state = context.state,
        pos = context.pos,
        node = syntaxTree(state).resolveInner(pos, -1);
      var isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
      if (node.name == "PropertyName" || (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name)) return {
        from: node.from,
        options: properties(),
        validFor: identifier$1
      };
      if (node.name == "ValueName") return {
        from: node.from,
        options: values,
        validFor: identifier$1
      };
      if (node.name == "PseudoClassName") return {
        from: node.from,
        options: pseudoClasses,
        validFor: identifier$1
      };
      if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc)) return {
        from: isVariable(node) || isDash ? node.from : pos,
        options: variableNames(state.doc, astTop(node), isVariable),
        validFor: variable
      };
      if (node.name == "TagName") {
        for (var parent = node.parent; parent; parent = parent.parent) if (parent.name == "Block") return {
          from: node.from,
          options: properties(),
          validFor: identifier$1
        };
        return {
          from: node.from,
          options: tags,
          validFor: identifier$1
        };
      }
      if (node.name == "AtKeyword") return {
        from: node.from,
        options: atRules,
        validFor: identifier$1
      };
      if (!context.explicit) return null;
      var above = node.resolve(pos),
        before = above.childBefore(pos);
      if (before && before.name == ":" && above.name == "PseudoClassSelector") return {
        from: pos,
        options: pseudoClasses,
        validFor: identifier$1
      };
      if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList") return {
        from: pos,
        options: values,
        validFor: identifier$1
      };
      if (above.name == "Block" || above.name == "Styles") return {
        from: pos,
        options: properties(),
        validFor: identifier$1
      };
      return null;
    };
  };
  /**
  CSS property, variable, and value keyword completion source.
  */
  var cssCompletionSource = /*@__PURE__*/defineCSSCompletionSource(function (n) {
    return n.name == "VariableName";
  });

  /**
  A language provider based on the [Lezer CSS
  parser](https://github.com/lezer-parser/css), extended with
  highlighting and indentation information.
  */
  var cssLanguage = /*@__PURE__*/LRLanguage.define({
    name: "css",
    parser: /*@__PURE__*/parser$2.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        Declaration: /*@__PURE__*/continuedIndent()
      }), /*@__PURE__*/foldNodeProp.add({
        "Block KeyframeList": foldInside
      })]
    }),
    languageData: {
      commentTokens: {
        block: {
          open: "/*",
          close: "*/"
        }
      },
      indentOnInput: /^\s*\}$/,
      wordChars: "-"
    }
  });
  /**
  Language support for CSS.
  */
  function css() {
    return new LanguageSupport(cssLanguage, cssLanguage.data.of({
      autocomplete: cssCompletionSource
    }));
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const noSemi = 315,
    noSemiType = 316,
    incdec = 1,
    incdecPrefix = 2,
    questionDot = 3,
    JSXStartTag = 4,
    insertSemi = 317,
    spaces = 319,
    newline = 320,
    LineComment = 5,
    BlockComment = 6,
    Dialect_jsx = 0;

  /* Hand-written tokenizers for JavaScript tokens that can't be
     expressed by lezer's built-in tokenizer. */

  const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                 8201, 8202, 8232, 8233, 8239, 8287, 12288];

  const braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, lt = 60, comma = 44,
        question = 63, dot = 46, bracketL = 91;

  const trackNewline = new ContextTracker({
    start: false,
    shift(context, term) {
      return term == LineComment || term == BlockComment || term == spaces ? context : term == newline
    },
    strict: false
  });

  const insertSemicolon = new ExternalTokenizer((input, stack) => {
    let {next} = input;
    if (next == braceR || next == -1 || stack.context)
      input.acceptToken(insertSemi);
  }, {contextual: true, fallback: true});

  const noSemicolon = new ExternalTokenizer((input, stack) => {
    let {next} = input, after;
    if (space.indexOf(next) > -1) return
    if (next == slash && ((after = input.peek(1)) == slash || after == star)) return
    if (next != braceR && next != semicolon && next != -1 && !stack.context)
      input.acceptToken(noSemi);
  }, {contextual: true});

  const noSemicolonType = new ExternalTokenizer((input, stack) => {
    if (input.next == bracketL && !stack.context) input.acceptToken(noSemiType);
  }, {contextual: true});

  const operatorToken = new ExternalTokenizer((input, stack) => {
    let {next} = input;
    if (next == plus || next == minus) {
      input.advance();
      if (next == input.next) {
        input.advance();
        let mayPostfix = !stack.context && stack.canShift(incdec);
        input.acceptToken(mayPostfix ? incdec : incdecPrefix);
      }
    } else if (next == question && input.peek(1) == dot) {
      input.advance(); input.advance();
      if (input.next < 48 || input.next > 57) // No digit after
        input.acceptToken(questionDot);
    }
  }, {contextual: true});

  function identifierChar(ch, start) {
    return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||
      !start && ch >= 48 && ch <= 57
  }

  const jsx = new ExternalTokenizer((input, stack) => {
    if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return
    input.advance();
    if (input.next == slash) return
    // Scan for an identifier followed by a comma or 'extends', don't
    // treat this as a start tag if present.
    let back = 0;
    while (space.indexOf(input.next) > -1) { input.advance(); back++; }
    if (identifierChar(input.next, true)) {
      input.advance();
      back++;
      while (identifierChar(input.next, false)) { input.advance(); back++; }
      while (space.indexOf(input.next) > -1) { input.advance(); back++; }
      if (input.next == comma) return
      for (let i = 0;; i++) {
        if (i == 7) {
          if (!identifierChar(input.next, true)) return
          break
        }
        if (input.next != "extends".charCodeAt(i)) break
        input.advance();
        back++;
      }
    }
    input.acceptToken(JSXStartTag, -back);
  });

  const jsHighlight = styleTags({
    "get set async static": tags$1.modifier,
    "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
    "in of await yield void typeof delete instanceof as satisfies": tags$1.operatorKeyword,
    "let var const using function class extends": tags$1.definitionKeyword,
    "import export from": tags$1.moduleKeyword,
    "with debugger new": tags$1.keyword,
    TemplateString: tags$1.special(tags$1.string),
    super: tags$1.atom,
    BooleanLiteral: tags$1.bool,
    this: tags$1.self,
    null: tags$1.null,
    Star: tags$1.modifier,
    VariableName: tags$1.variableName,
    "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
    VariableDefinition: tags$1.definition(tags$1.variableName),
    Label: tags$1.labelName,
    PropertyName: tags$1.propertyName,
    PrivatePropertyName: tags$1.special(tags$1.propertyName),
    "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
    "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
    "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
    "NewExpression/VariableName": tags$1.className,
    PropertyDefinition: tags$1.definition(tags$1.propertyName),
    PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
    UpdateOp: tags$1.updateOperator,
    "LineComment Hashbang": tags$1.lineComment,
    BlockComment: tags$1.blockComment,
    Number: tags$1.number,
    String: tags$1.string,
    Escape: tags$1.escape,
    ArithOp: tags$1.arithmeticOperator,
    LogicOp: tags$1.logicOperator,
    BitOp: tags$1.bitwiseOperator,
    CompareOp: tags$1.compareOperator,
    RegExp: tags$1.regexp,
    Equals: tags$1.definitionOperator,
    Arrow: tags$1.function(tags$1.punctuation),
    ": Spread": tags$1.punctuation,
    "( )": tags$1.paren,
    "[ ]": tags$1.squareBracket,
    "{ }": tags$1.brace,
    "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
    ".": tags$1.derefOperator,
    ", ;": tags$1.separator,
    "@": tags$1.meta,

    TypeName: tags$1.typeName,
    TypeDefinition: tags$1.definition(tags$1.typeName),
    "type enum interface implements namespace module declare": tags$1.definitionKeyword,
    "abstract global Privacy readonly override": tags$1.modifier,
    "is keyof unique infer asserts": tags$1.operatorKeyword,

    JSXAttributeValue: tags$1.attributeValue,
    JSXText: tags$1.content,
    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
    "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName,
    "JSXBuiltin/JSXIdentifier": tags$1.standard(tags$1.tagName)
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier = {__proto__:null,export:20, as:25, from:33, default:36, async:41, function:42, in:52, out:55, const:56, extends:60, this:64, true:72, false:72, null:84, void:88, typeof:92, super:108, new:142, delete:154, yield:163, await:167, class:172, public:235, private:235, protected:235, readonly:237, instanceof:256, satisfies:259, import:292, keyof:349, unique:353, infer:359, asserts:395, is:397, abstract:417, implements:419, type:421, let:424, var:426, using:429, interface:435, enum:439, namespace:445, module:447, declare:451, global:455, for:474, of:483, while:486, with:490, do:494, if:498, else:500, switch:504, case:510, try:516, catch:520, finally:524, return:528, throw:532, break:536, continue:540, debugger:544};
  const spec_word = {__proto__:null,async:129, get:131, set:133, declare:195, public:197, private:197, protected:197, static:199, abstract:201, override:203, readonly:209, accessor:211, new:401};
  const spec_LessThan = {__proto__:null,"<":193};
  const parser$1 = LRParser.deserialize({
    version: 14,
    states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
    stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
    goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
    nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
    maxTerm: 379,
    context: trackNewline,
    nodeProps: [
      ["isolate", -8,5,6,14,37,39,51,53,55,""],
      ["group", -26,9,17,19,68,207,211,215,216,218,221,224,234,236,242,244,246,248,251,257,263,265,267,269,271,273,274,"Statement",-34,13,14,32,35,36,42,51,54,55,57,62,70,72,76,80,82,84,85,110,111,120,121,136,139,141,142,143,144,145,147,148,167,169,171,"Expression",-23,31,33,37,41,43,45,173,175,177,178,180,181,182,184,185,186,188,189,190,201,203,205,206,"Type",-3,88,103,109,"ClassItem"],
      ["openedBy", 23,"<",38,"InterpolationStart",56,"[",60,"{",73,"(",160,"JSXStartCloseTag"],
      ["closedBy", -2,24,168,">",40,"InterpolationEnd",50,"]",61,"}",74,")",165,"JSXEndTag"]
    ],
    propSources: [jsHighlight],
    skippedNodes: [0,5,6,277],
    repeatNodeCount: 37,
    tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
    tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new LocalTokenGroup("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
    topRules: {"Script":[0,7],"SingleExpression":[1,275],"SingleClassItem":[2,276]},
    dialects: {jsx: 0, ts: 15098},
    dynamicPrecedences: {"80":1,"82":1,"94":1,"169":1,"199":1},
    specialized: [{term: 326, get: (value) => spec_identifier[value] || -1},{term: 342, get: (value) => spec_word[value] || -1},{term: 95, get: (value) => spec_LessThan[value] || -1}],
    tokenPrec: 15124
  });

  function _createForOfIteratorHelper$3(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
  function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }

  /**
  A collection of JavaScript-related
  [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
  */
  var snippets = [/*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
    label: "import",
    detail: "named",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
    label: "import",
    detail: "default",
    type: "keyword"
  })];
  /**
  A collection of snippet completions for TypeScript. Includes the
  JavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).
  */
  var typescriptSnippets = /*@__PURE__*/snippets.concat([/*@__PURE__*/snippetCompletion("interface ${name} {\n\t${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("enum ${name} {\n\t${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })]);
  var cache = /*@__PURE__*/new NodeWeakMap();
  var ScopeNodes = /*@__PURE__*/new Set(["Script", "Block", "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration", "ForStatement"]);
  function defID(type) {
    return function (node, def) {
      var id = node.node.getChild("VariableDefinition");
      if (id) def(id, type);
      return true;
    };
  }
  var functionContext = ["FunctionDeclaration"];
  var gatherCompletions = {
    FunctionDeclaration: /*@__PURE__*/defID("function"),
    ClassDeclaration: /*@__PURE__*/defID("class"),
    ClassExpression: function ClassExpression() {
      return true;
    },
    EnumDeclaration: /*@__PURE__*/defID("constant"),
    TypeAliasDeclaration: /*@__PURE__*/defID("type"),
    NamespaceDeclaration: /*@__PURE__*/defID("namespace"),
    VariableDefinition: function VariableDefinition(node, def) {
      if (!node.matchContext(functionContext)) def(node, "variable");
    },
    TypeDefinition: function TypeDefinition(node, def) {
      def(node, "type");
    },
    __proto__: null
  };
  function getScope(doc, node) {
    var cached = cache.get(node);
    if (cached) return cached;
    var completions = [],
      top = true;
    function def(node, type) {
      var name = doc.sliceString(node.from, node.to);
      completions.push({
        label: name,
        type: type
      });
    }
    node.cursor(IterMode.IncludeAnonymous).iterate(function (node) {
      if (top) {
        top = false;
      } else if (node.name) {
        var gather = gatherCompletions[node.name];
        if (gather && gather(node, def) || ScopeNodes.has(node.name)) return false;
      } else if (node.to - node.from > 8192) {
        // Allow caching for bigger internal nodes
        var _iterator = _createForOfIteratorHelper$3(getScope(doc, node.node)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var c = _step.value;
            completions.push(c);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return false;
      }
    });
    cache.set(node, completions);
    return completions;
  }
  var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
  var dontComplete = ["TemplateString", "String", "RegExp", "LineComment", "BlockComment", "VariableDefinition", "TypeDefinition", "Label", "PropertyDefinition", "PropertyName", "PrivatePropertyDefinition", "PrivatePropertyName", "JSXText", "JSXAttributeValue", "JSXOpenTag", "JSXCloseTag", "JSXSelfClosingTag", ".", "?."];
  /**
  Completion source that looks up locally defined names in
  JavaScript code.
  */
  function localCompletionSource(context) {
    var inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (dontComplete.indexOf(inner.name) > -1) return null;
    var isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context.explicit) return null;
    var options = [];
    for (var pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes.has(pos.name)) options = options.concat(getScope(context.state.doc, pos));
    }
    return {
      options: options,
      from: isWord ? inner.from : context.pos,
      validFor: Identifier
    };
  }

  /**
  A language provider based on the [Lezer JavaScript
  parser](https://github.com/lezer-parser/javascript), extended with
  highlighting and indentation information.
  */
  var javascriptLanguage = /*@__PURE__*/LRLanguage.define({
    name: "javascript",
    parser: /*@__PURE__*/parser$1.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        IfStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|else\b)/
        }),
        TryStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|catch\b|finally\b)/
        }),
        LabeledStatement: flatIndent,
        SwitchBody: function SwitchBody(context) {
          var after = context.textAfter,
            closed = /^\s*\}/.test(after),
            isCase = /^\s*(case|default)\b/.test(after);
          return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: /*@__PURE__*/delimitedIndent({
          closing: "}"
        }),
        ArrowFunction: function ArrowFunction(cx) {
          return cx.baseIndent + cx.unit;
        },
        "TemplateString BlockComment": function TemplateString_BlockComment() {
          return null;
        },
        "Statement Property": /*@__PURE__*/continuedIndent({
          except: /^\s*{/
        }),
        JSXElement: function JSXElement(context) {
          var closed = /^\s*<\//.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        JSXEscape: function JSXEscape(context) {
          var closed = /\s*\}/.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        "JSXOpenTag JSXSelfClosingTag": function JSXOpenTag_JSXSelfClosingTag(context) {
          return context.column(context.node.from) + context.unit;
        }
      }), /*@__PURE__*/foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
        BlockComment: function BlockComment(tree) {
          return {
            from: tree.from + 2,
            to: tree.to - 2
          };
        }
      })]
    }),
    languageData: {
      closeBrackets: {
        brackets: ["(", "[", "{", "'", '"', "`"]
      },
      commentTokens: {
        line: "//",
        block: {
          open: "/*",
          close: "*/"
        }
      },
      indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
      wordChars: "$"
    }
  });
  var jsxSublanguage = {
    test: function test(node) {
      return /^JSX/.test(node.name);
    },
    facet: /*@__PURE__*/defineLanguageFacet({
      commentTokens: {
        block: {
          open: "{/*",
          close: "*/}"
        }
      }
    })
  };
  /**
  A language provider for TypeScript.
  */
  var typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "ts"
  }, "typescript");
  /**
  Language provider for JSX.
  */
  var jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "jsx",
    props: [/*@__PURE__*/sublanguageProp.add(function (n) {
      return n.isTop ? [jsxSublanguage] : undefined;
    })]
  });
  /**
  Language provider for JSX + TypeScript.
  */
  var tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "jsx ts",
    props: [/*@__PURE__*/sublanguageProp.add(function (n) {
      return n.isTop ? [jsxSublanguage] : undefined;
    })]
  }, "typescript");
  var kwCompletion = function kwCompletion(name) {
    return {
      label: name,
      type: "keyword"
    };
  };
  var keywords = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
  var typescriptKeywords = /*@__PURE__*/keywords.concat(/*@__PURE__*/["declare", "implements", "private", "protected", "public"].map(kwCompletion));
  /**
  JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
  and local variable completion.
  */
  function javascript() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;
    var completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
    return new LanguageSupport(lang, [javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(completions))
    }), javascriptLanguage.data.of({
      autocomplete: localCompletionSource
    }), config.jsx ? autoCloseTags$1 : []]);
  }
  function findOpenTag(node) {
    for (;;) {
      if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag") return node;
      if (node.name == "JSXEscape" || !node.parent) return null;
      node = node.parent;
    }
  }
  function elementName$1(doc, tree) {
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
    for (var ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
      if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" || ch.name == "JSXMemberExpression") return doc.sliceString(ch.from, Math.min(ch.to, max));
    }
    return "";
  }
  var android = (typeof navigator === "undefined" ? "undefined" : _typeof$1(navigator)) == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  /**
  Extension that will automatically insert JSX close tags when a `>` or
  `/` is typed.
  */
  var autoCloseTags$1 = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, text, defaultInsert) {
    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from, -1)) return false;
    var base = defaultInsert(),
      state = base.state;
    var closeTags = state.changeByRange(function (range) {
      var _a;
      var head = range.head,
        around = syntaxTree(state).resolveInner(head - 1, -1),
        name;
      if (around.name == "JSXStartTag") around = around.parent;
      if (state.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;else if (text == ">" && around.name == "JSXFragmentTag") {
        return {
          range: range,
          changes: {
            from: head,
            insert: "</>"
          }
        };
      } else if (text == "/" && around.name == "JSXStartCloseTag") {
        var empty = around.parent,
          _base = empty.parent;
        if (_base && empty.from == head - 2 && ((name = elementName$1(state.doc, _base.firstChild, head)) || ((_a = _base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "JSXFragmentTag")) {
          var insert = "".concat(name, ">");
          return {
            range: EditorSelection.cursor(head + insert.length, -1),
            changes: {
              from: head,
              insert: insert
            }
          };
        }
      } else if (text == ">") {
        var openTag = findOpenTag(around);
        if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name = elementName$1(state.doc, openTag, head))) return {
          range: range,
          changes: {
            from: head,
            insert: "</".concat(name, ">")
          }
        };
      }
      return {
        range: range
      };
    });
    if (closeTags.changes.empty) return false;
    view.dispatch([base, state.update(closeTags, {
      userEvent: "input.complete",
      scrollIntoView: true
    })]);
    return true;
  });

  function _createForOfIteratorHelper$2(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$2(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }
  function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var Targets = ["_blank", "_self", "_top", "_parent"];
  var Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
  var Methods = ["get", "post", "put", "delete"];
  var Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
  var Bool = ["true", "false"];
  var S = {}; // Empty tag spec
  var Tags = {
    a: {
      attrs: {
        href: null,
        ping: null,
        type: null,
        media: null,
        target: Targets,
        hreflang: null
      }
    },
    abbr: S,
    address: S,
    area: {
      attrs: {
        alt: null,
        coords: null,
        href: null,
        target: null,
        ping: null,
        media: null,
        hreflang: null,
        type: null,
        shape: ["default", "rect", "circle", "poly"]
      }
    },
    article: S,
    aside: S,
    audio: {
      attrs: {
        src: null,
        mediagroup: null,
        crossorigin: ["anonymous", "use-credentials"],
        preload: ["none", "metadata", "auto"],
        autoplay: ["autoplay"],
        loop: ["loop"],
        controls: ["controls"]
      }
    },
    b: S,
    base: {
      attrs: {
        href: null,
        target: Targets
      }
    },
    bdi: S,
    bdo: S,
    blockquote: {
      attrs: {
        cite: null
      }
    },
    body: S,
    br: S,
    button: {
      attrs: {
        form: null,
        formaction: null,
        name: null,
        value: null,
        autofocus: ["autofocus"],
        disabled: ["autofocus"],
        formenctype: Encs,
        formmethod: Methods,
        formnovalidate: ["novalidate"],
        formtarget: Targets,
        type: ["submit", "reset", "button"]
      }
    },
    canvas: {
      attrs: {
        width: null,
        height: null
      }
    },
    caption: S,
    center: S,
    cite: S,
    code: S,
    col: {
      attrs: {
        span: null
      }
    },
    colgroup: {
      attrs: {
        span: null
      }
    },
    command: {
      attrs: {
        type: ["command", "checkbox", "radio"],
        label: null,
        icon: null,
        radiogroup: null,
        command: null,
        title: null,
        disabled: ["disabled"],
        checked: ["checked"]
      }
    },
    data: {
      attrs: {
        value: null
      }
    },
    datagrid: {
      attrs: {
        disabled: ["disabled"],
        multiple: ["multiple"]
      }
    },
    datalist: {
      attrs: {
        data: null
      }
    },
    dd: S,
    del: {
      attrs: {
        cite: null,
        datetime: null
      }
    },
    details: {
      attrs: {
        open: ["open"]
      }
    },
    dfn: S,
    div: S,
    dl: S,
    dt: S,
    em: S,
    embed: {
      attrs: {
        src: null,
        type: null,
        width: null,
        height: null
      }
    },
    eventsource: {
      attrs: {
        src: null
      }
    },
    fieldset: {
      attrs: {
        disabled: ["disabled"],
        form: null,
        name: null
      }
    },
    figcaption: S,
    figure: S,
    footer: S,
    form: {
      attrs: {
        action: null,
        name: null,
        "accept-charset": Charsets,
        autocomplete: ["on", "off"],
        enctype: Encs,
        method: Methods,
        novalidate: ["novalidate"],
        target: Targets
      }
    },
    h1: S,
    h2: S,
    h3: S,
    h4: S,
    h5: S,
    h6: S,
    head: {
      children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
    },
    header: S,
    hgroup: S,
    hr: S,
    html: {
      attrs: {
        manifest: null
      }
    },
    i: S,
    iframe: {
      attrs: {
        src: null,
        srcdoc: null,
        name: null,
        width: null,
        height: null,
        sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
        seamless: ["seamless"]
      }
    },
    img: {
      attrs: {
        alt: null,
        src: null,
        ismap: null,
        usemap: null,
        width: null,
        height: null,
        crossorigin: ["anonymous", "use-credentials"]
      }
    },
    input: {
      attrs: {
        alt: null,
        dirname: null,
        form: null,
        formaction: null,
        height: null,
        list: null,
        max: null,
        maxlength: null,
        min: null,
        name: null,
        pattern: null,
        placeholder: null,
        size: null,
        src: null,
        step: null,
        value: null,
        width: null,
        accept: ["audio/*", "video/*", "image/*"],
        autocomplete: ["on", "off"],
        autofocus: ["autofocus"],
        checked: ["checked"],
        disabled: ["disabled"],
        formenctype: Encs,
        formmethod: Methods,
        formnovalidate: ["novalidate"],
        formtarget: Targets,
        multiple: ["multiple"],
        readonly: ["readonly"],
        required: ["required"],
        type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button"]
      }
    },
    ins: {
      attrs: {
        cite: null,
        datetime: null
      }
    },
    kbd: S,
    keygen: {
      attrs: {
        challenge: null,
        form: null,
        name: null,
        autofocus: ["autofocus"],
        disabled: ["disabled"],
        keytype: ["RSA"]
      }
    },
    label: {
      attrs: {
        "for": null,
        form: null
      }
    },
    legend: S,
    li: {
      attrs: {
        value: null
      }
    },
    link: {
      attrs: {
        href: null,
        type: null,
        hreflang: null,
        media: null,
        sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
      }
    },
    map: {
      attrs: {
        name: null
      }
    },
    mark: S,
    menu: {
      attrs: {
        label: null,
        type: ["list", "context", "toolbar"]
      }
    },
    meta: {
      attrs: {
        content: null,
        charset: Charsets,
        name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
        "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
      }
    },
    meter: {
      attrs: {
        value: null,
        min: null,
        low: null,
        high: null,
        max: null,
        optimum: null
      }
    },
    nav: S,
    noscript: S,
    object: {
      attrs: {
        data: null,
        type: null,
        name: null,
        usemap: null,
        form: null,
        width: null,
        height: null,
        typemustmatch: ["typemustmatch"]
      }
    },
    ol: {
      attrs: {
        reversed: ["reversed"],
        start: null,
        type: ["1", "a", "A", "i", "I"]
      },
      children: ["li", "script", "template", "ul", "ol"]
    },
    optgroup: {
      attrs: {
        disabled: ["disabled"],
        label: null
      }
    },
    option: {
      attrs: {
        disabled: ["disabled"],
        label: null,
        selected: ["selected"],
        value: null
      }
    },
    output: {
      attrs: {
        "for": null,
        form: null,
        name: null
      }
    },
    p: S,
    param: {
      attrs: {
        name: null,
        value: null
      }
    },
    pre: S,
    progress: {
      attrs: {
        value: null,
        max: null
      }
    },
    q: {
      attrs: {
        cite: null
      }
    },
    rp: S,
    rt: S,
    ruby: S,
    samp: S,
    script: {
      attrs: {
        type: ["text/javascript"],
        src: null,
        async: ["async"],
        defer: ["defer"],
        charset: Charsets
      }
    },
    section: S,
    select: {
      attrs: {
        form: null,
        name: null,
        size: null,
        autofocus: ["autofocus"],
        disabled: ["disabled"],
        multiple: ["multiple"]
      }
    },
    slot: {
      attrs: {
        name: null
      }
    },
    small: S,
    source: {
      attrs: {
        src: null,
        type: null,
        media: null
      }
    },
    span: S,
    strong: S,
    style: {
      attrs: {
        type: ["text/css"],
        media: null,
        scoped: null
      }
    },
    sub: S,
    summary: S,
    sup: S,
    table: S,
    tbody: S,
    td: {
      attrs: {
        colspan: null,
        rowspan: null,
        headers: null
      }
    },
    template: S,
    textarea: {
      attrs: {
        dirname: null,
        form: null,
        maxlength: null,
        name: null,
        placeholder: null,
        rows: null,
        cols: null,
        autofocus: ["autofocus"],
        disabled: ["disabled"],
        readonly: ["readonly"],
        required: ["required"],
        wrap: ["soft", "hard"]
      }
    },
    tfoot: S,
    th: {
      attrs: {
        colspan: null,
        rowspan: null,
        headers: null,
        scope: ["row", "col", "rowgroup", "colgroup"]
      }
    },
    thead: S,
    time: {
      attrs: {
        datetime: null
      }
    },
    title: S,
    tr: S,
    track: {
      attrs: {
        src: null,
        label: null,
        "default": null,
        kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
        srclang: null
      }
    },
    ul: {
      children: ["li", "script", "template", "ul", "ol"]
    },
    "var": S,
    video: {
      attrs: {
        src: null,
        poster: null,
        width: null,
        height: null,
        crossorigin: ["anonymous", "use-credentials"],
        preload: ["auto", "metadata", "none"],
        autoplay: ["autoplay"],
        mediagroup: ["movie"],
        muted: ["muted"],
        controls: ["controls"]
      }
    },
    wbr: S
  };
  var GlobalAttrs = {
    accesskey: null,
    "class": null,
    contenteditable: Bool,
    contextmenu: null,
    dir: ["ltr", "rtl", "auto"],
    draggable: ["true", "false", "auto"],
    dropzone: ["copy", "move", "link", "string:", "file:"],
    hidden: ["hidden"],
    id: null,
    inert: ["inert"],
    itemid: null,
    itemprop: null,
    itemref: null,
    itemscope: ["itemscope"],
    itemtype: null,
    lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
    spellcheck: Bool,
    autocorrect: Bool,
    autocapitalize: Bool,
    style: null,
    tabindex: null,
    title: null,
    translate: ["yes", "no"],
    rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
    role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
    "aria-activedescendant": null,
    "aria-atomic": Bool,
    "aria-autocomplete": ["inline", "list", "both", "none"],
    "aria-busy": Bool,
    "aria-checked": ["true", "false", "mixed", "undefined"],
    "aria-controls": null,
    "aria-describedby": null,
    "aria-disabled": Bool,
    "aria-dropeffect": null,
    "aria-expanded": ["true", "false", "undefined"],
    "aria-flowto": null,
    "aria-grabbed": ["true", "false", "undefined"],
    "aria-haspopup": Bool,
    "aria-hidden": Bool,
    "aria-invalid": ["true", "false", "grammar", "spelling"],
    "aria-label": null,
    "aria-labelledby": null,
    "aria-level": null,
    "aria-live": ["off", "polite", "assertive"],
    "aria-multiline": Bool,
    "aria-multiselectable": Bool,
    "aria-owns": null,
    "aria-posinset": null,
    "aria-pressed": ["true", "false", "mixed", "undefined"],
    "aria-readonly": Bool,
    "aria-relevant": null,
    "aria-required": Bool,
    "aria-selected": ["true", "false", "undefined"],
    "aria-setsize": null,
    "aria-sort": ["ascending", "descending", "none", "other"],
    "aria-valuemax": null,
    "aria-valuemin": null,
    "aria-valuenow": null,
    "aria-valuetext": null
  };
  var eventAttributes = /*@__PURE__*/("beforeunload copy cut dragstart dragover dragleave dragenter dragend " + "drag paste focus blur change click load mousedown mouseenter mouseleave " + "mouseup keydown keyup resize scroll unload").split(" ").map(function (n) {
    return "on" + n;
  });
  var _iterator = _createForOfIteratorHelper$2(eventAttributes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var a = _step.value;
      GlobalAttrs[a] = null;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var Schema = /*#__PURE__*/_createClass(function Schema(extraTags, extraAttrs) {
    _classCallCheck(this, Schema);
    this.tags = Object.assign(Object.assign({}, Tags), extraTags);
    this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
    this.allTags = Object.keys(this.tags);
    this.globalAttrNames = Object.keys(this.globalAttrs);
  });
  Schema["default"] = /*@__PURE__*/new Schema();
  function elementName(doc, tree) {
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
    if (!tree) return "";
    var tag = tree.firstChild;
    var name = tag && tag.getChild("TagName");
    return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
  }
  function findParentElement(tree) {
    var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    for (; tree; tree = tree.parent) if (tree.name == "Element") {
      if (skip) skip = false;else return tree;
    }
    return null;
  }
  function allowedChildren(doc, tree, schema) {
    var parentInfo = schema.tags[elementName(doc, findParentElement(tree))];
    return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
  }
  function openTags(doc, tree) {
    var open = [];
    for (var parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
      var tagName = elementName(doc, parent);
      if (tagName && parent.lastChild.name == "CloseTag") break;
      if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to)) open.push(tagName);
    }
    return open;
  }
  var identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
  function completeTag(state, schema, tree, from, to) {
    var end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
    var parent = findParentElement(tree, true);
    return {
      from: from,
      to: to,
      options: allowedChildren(state.doc, parent, schema).map(function (tagName) {
        return {
          label: tagName,
          type: "type"
        };
      }).concat(openTags(state.doc, tree).map(function (tag, i) {
        return {
          label: "/" + tag,
          apply: "/" + tag + end,
          type: "type",
          boost: 99 - i
        };
      })),
      validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
    };
  }
  function completeCloseTag(state, tree, from, to) {
    var end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
    return {
      from: from,
      to: to,
      options: openTags(state.doc, tree).map(function (tag, i) {
        return {
          label: tag,
          apply: tag + end,
          type: "type",
          boost: 99 - i
        };
      }),
      validFor: identifier
    };
  }
  function completeStartTag(state, schema, tree, pos) {
    var options = [],
      level = 0;
    var _iterator2 = _createForOfIteratorHelper$2(allowedChildren(state.doc, tree, schema)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var tagName = _step2.value;
        options.push({
          label: "<" + tagName,
          type: "type"
        });
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var _iterator3 = _createForOfIteratorHelper$2(openTags(state.doc, tree)),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var open = _step3.value;
        options.push({
          label: "</" + open + ">",
          type: "type",
          boost: 99 - level++
        });
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return {
      from: pos,
      to: pos,
      options: options,
      validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
    };
  }
  function completeAttrName(state, schema, tree, from, to) {
    var elt = findParentElement(tree),
      info = elt ? schema.tags[elementName(state.doc, elt)] : null;
    var localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
    var names = info && info.globalAttrs === false ? localAttrs : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
    return {
      from: from,
      to: to,
      options: names.map(function (attrName) {
        return {
          label: attrName,
          type: "property"
        };
      }),
      validFor: identifier
    };
  }
  function completeAttrValue(state, schema, tree, from, to) {
    var _a;
    var nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
    var options = [],
      token = undefined;
    if (nameNode) {
      var attrName = state.sliceDoc(nameNode.from, nameNode.to);
      var attrs = schema.globalAttrs[attrName];
      if (!attrs) {
        var elt = findParentElement(tree),
          info = elt ? schema.tags[elementName(state.doc, elt)] : null;
        attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
      }
      if (attrs) {
        var base = state.sliceDoc(from, to).toLowerCase(),
          quoteStart = '"',
          quoteEnd = '"';
        if (/^['"]/.test(base)) {
          token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
          quoteStart = "";
          quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
          base = base.slice(1);
          from++;
        } else {
          token = /^[^\s<>='"]*$/;
        }
        var _iterator4 = _createForOfIteratorHelper$2(attrs),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var value = _step4.value;
            options.push({
              label: value,
              apply: quoteStart + value + quoteEnd,
              type: "constant"
            });
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
    return {
      from: from,
      to: to,
      options: options,
      validFor: token
    };
  }
  function htmlCompletionFor(schema, context) {
    var state = context.state,
      pos = context.pos,
      tree = syntaxTree(state).resolveInner(pos, -1),
      around = tree.resolve(pos);
    for (var scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
      var last = before.lastChild;
      if (!last || !last.type.isError || last.from < last.to) break;
      around = tree = before;
      scan = last.from;
    }
    if (tree.name == "TagName") {
      return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos) : completeTag(state, schema, tree, tree.from, pos);
    } else if (tree.name == "StartTag") {
      return completeTag(state, schema, tree, pos, pos);
    } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
      return completeCloseTag(state, tree, pos, pos);
    } else if (tree.name == "OpenTag" || tree.name == "SelfClosingTag" || tree.name == "AttributeName") {
      return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
    } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
      return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
    } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
      return completeStartTag(state, schema, tree, pos);
    } else {
      return null;
    }
  }
  /**
  HTML tag completion. Opens and closes tags and attributes in a
  context-aware way.
  */
  function htmlCompletionSource(context) {
    return htmlCompletionFor(Schema["default"], context);
  }
  /**
  Create a completion source for HTML extended with additional tags
  or attributes.
  */
  function htmlCompletionSourceWith(config) {
    var extraTags = config.extraTags,
      extraAttrs = config.extraGlobalAttributes;
    var schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema["default"];
    return function (context) {
      return htmlCompletionFor(schema, context);
    };
  }
  var jsonParser = /*@__PURE__*/javascriptLanguage.parser.configure({
    top: "SingleExpression"
  });
  var defaultNesting = [{
    tag: "script",
    attrs: function attrs(_attrs) {
      return _attrs.type == "text/typescript" || _attrs.lang == "ts";
    },
    parser: typescriptLanguage.parser
  }, {
    tag: "script",
    attrs: function attrs(_attrs2) {
      return _attrs2.type == "text/babel" || _attrs2.type == "text/jsx";
    },
    parser: jsxLanguage.parser
  }, {
    tag: "script",
    attrs: function attrs(_attrs3) {
      return _attrs3.type == "text/typescript-jsx";
    },
    parser: tsxLanguage.parser
  }, {
    tag: "script",
    attrs: function attrs(_attrs4) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(_attrs4.type);
    },
    parser: jsonParser
  }, {
    tag: "script",
    attrs: function attrs(_attrs5) {
      return !_attrs5.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(_attrs5.type);
    },
    parser: javascriptLanguage.parser
  }, {
    tag: "style",
    attrs: function attrs(_attrs6) {
      return (!_attrs6.lang || _attrs6.lang == "css") && (!_attrs6.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(_attrs6.type));
    },
    parser: cssLanguage.parser
  }];
  var defaultAttrs = /*@__PURE__*/[{
    name: "style",
    parser: /*@__PURE__*/cssLanguage.parser.configure({
      top: "Styles"
    })
  }].concat(/*@__PURE__*/eventAttributes.map(function (name) {
    return {
      name: name,
      parser: javascriptLanguage.parser
    };
  }));
  var htmlPlain = /*@__PURE__*/LRLanguage.define({
    name: "html",
    parser: /*@__PURE__*/parser$3.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        Element: function Element(context) {
          var after = /^(\s*)(<\/)?/.exec(context.textAfter);
          if (context.node.to <= context.pos + after[0].length) return context["continue"]();
          return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
        },
        "OpenTag CloseTag SelfClosingTag": function OpenTag_CloseTag_SelfClosingTag(context) {
          return context.column(context.node.from) + context.unit;
        },
        Document: function Document(context) {
          if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to) return context["continue"]();
          var endElt = null,
            close;
          for (var cur = context.node;;) {
            var last = cur.lastChild;
            if (!last || last.name != "Element" || last.to != cur.to) break;
            endElt = cur = last;
          }
          if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag"))) return context.lineIndent(endElt.from) + context.unit;
          return null;
        }
      }), /*@__PURE__*/foldNodeProp.add({
        Element: function Element(node) {
          var first = node.firstChild,
            last = node.lastChild;
          if (!first || first.name != "OpenTag") return null;
          return {
            from: first.to,
            to: last.name == "CloseTag" ? last.from : node.to
          };
        }
      }), /*@__PURE__*/bracketMatchingHandle.add({
        "OpenTag CloseTag": function OpenTag_CloseTag(node) {
          return node.getChild("TagName");
        }
      })]
    }),
    languageData: {
      commentTokens: {
        block: {
          open: "<!--",
          close: "-->"
        }
      },
      indentOnInput: /^\s*<\/\w+\W$/,
      wordChars: "-._"
    }
  });
  /**
  A language provider based on the [Lezer HTML
  parser](https://github.com/lezer-parser/html), extended with the
  JavaScript and CSS parsers to parse the content of `<script>` and
  `<style>` tags.
  */
  var htmlLanguage = /*@__PURE__*/htmlPlain.configure({
    wrap: /*@__PURE__*/configureNesting(defaultNesting, defaultAttrs)
  });
  /**
  Language support for HTML, including
  [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
  CSS support extensions.
  */
  function html() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var dialect = "",
      wrap;
    if (config.matchClosingTags === false) dialect = "noMatch";
    if (config.selfClosingTags === true) dialect = (dialect ? dialect + " " : "") + "selfClosing";
    if (config.nestedLanguages && config.nestedLanguages.length || config.nestedAttributes && config.nestedAttributes.length) wrap = configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));
    var lang = wrap ? htmlPlain.configure({
      wrap: wrap,
      dialect: dialect
    }) : dialect ? htmlLanguage.configure({
      dialect: dialect
    }) : htmlLanguage;
    return new LanguageSupport(lang, [htmlLanguage.data.of({
      autocomplete: htmlCompletionSourceWith(config)
    }), config.autoCloseTags !== false ? autoCloseTags : [], javascript().support, css().support]);
  }
  var selfClosers = /*@__PURE__*/new Set(/*@__PURE__*/"area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
  /**
  Extension that will automatically insert close tags when a `>` or
  `/` is typed.
  */
  var autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, text, insertTransaction) {
    if (view.composing || view.state.readOnly || from != to || text != ">" && text != "/" || !htmlLanguage.isActiveAt(view.state, from, -1)) return false;
    var base = insertTransaction(),
      state = base.state;
    var closeTags = state.changeByRange(function (range) {
      var _a, _b, _c;
      var didType = state.doc.sliceString(range.from - 1, range.to) == text;
      var head = range.head,
        after = syntaxTree(state).resolveInner(head, -1),
        name;
      if (didType && text == ">" && after.name == "EndTag") {
        var tag = after.parent;
        if (((_b = (_a = tag.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" && (name = elementName(state.doc, tag.parent, head)) && !selfClosers.has(name)) {
          var _to = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
          var insert = "</".concat(name, ">");
          return {
            range: range,
            changes: {
              from: head,
              to: _to,
              insert: insert
            }
          };
        }
      } else if (didType && text == "/" && after.name == "IncompleteCloseTag") {
        var _tag = after.parent;
        if (after.from == head - 2 && ((_c = _tag.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name = elementName(state.doc, _tag, head)) && !selfClosers.has(name)) {
          var _to2 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
          var _insert = "".concat(name, ">");
          return {
            range: EditorSelection.cursor(head + _insert.length, -1),
            changes: {
              from: head,
              to: _to2,
              insert: _insert
            }
          };
        }
      }
      return {
        range: range
      };
    });
    if (closeTags.changes.empty) return false;
    view.dispatch([base, state.update(closeTags, {
      userEvent: "input.complete",
      scrollIntoView: true
    })]);
    return true;
  });

  var data = /*@__PURE__*/defineLanguageFacet({
    commentTokens: {
      block: {
        open: "<!--",
        close: "-->"
      }
    }
  });
  var headingProp = /*@__PURE__*/new NodeProp();
  var commonmark = /*@__PURE__*/parser$4.configure({
    props: [/*@__PURE__*/foldNodeProp.add(function (type) {
      return !type.is("Block") || type.is("Document") || isHeading(type) != null || isList(type) ? undefined : function (tree, state) {
        return {
          from: state.doc.lineAt(tree.from).to,
          to: tree.to
        };
      };
    }), /*@__PURE__*/headingProp.add(isHeading), /*@__PURE__*/indentNodeProp.add({
      Document: function Document() {
        return null;
      }
    }), /*@__PURE__*/languageDataProp.add({
      Document: data
    })]
  });
  function isHeading(type) {
    var match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
    return match ? +match[1] : undefined;
  }
  function isList(type) {
    return type.name == "OrderedList" || type.name == "BulletList";
  }
  function findSectionEnd(headerNode, level) {
    var last = headerNode;
    for (;;) {
      var next = last.nextSibling,
        heading = void 0;
      if (!next || (heading = isHeading(next.type)) != null && heading <= level) break;
      last = next;
    }
    return last.to;
  }
  var headerIndent = /*@__PURE__*/foldService.of(function (state, start, end) {
    for (var node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {
      if (node.from < start) break;
      var heading = node.type.prop(headingProp);
      if (heading == null) continue;
      var upto = findSectionEnd(node, heading);
      if (upto > end) return {
        from: end,
        to: upto
      };
    }
    return null;
  });
  function mkLang(parser) {
    return new Language(data, parser, [headerIndent], "markdown");
  }
  /**
  Language support for strict CommonMark.
  */
  var commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);
  var extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {
    props: [/*@__PURE__*/foldNodeProp.add({
      Table: function Table(tree, state) {
        return {
          from: state.doc.lineAt(tree.from).to,
          to: tree.to
        };
      }
    })]
  }]);
  /**
  Language support for [GFM](https://github.github.com/gfm/) plus
  subscript, superscript, and emoji syntax.
  */
  var markdownLanguage = /*@__PURE__*/mkLang(extended);
  function getCodeParser(languages, defaultLanguage) {
    return function (info) {
      if (info && languages) {
        var found = null;
        // Strip anything after whitespace
        info = /\S*/.exec(info)[0];
        if (typeof languages == "function") found = languages(info);else found = LanguageDescription.matchLanguageName(languages, info, true);
        if (found instanceof LanguageDescription) return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());else if (found) return found.parser;
      }
      return defaultLanguage ? defaultLanguage.parser : null;
    };
  }
  var Context = /*#__PURE__*/function () {
    function Context(node, from, to, spaceBefore, spaceAfter, type, item) {
      _classCallCheck(this, Context);
      this.node = node;
      this.from = from;
      this.to = to;
      this.spaceBefore = spaceBefore;
      this.spaceAfter = spaceAfter;
      this.type = type;
      this.item = item;
    }
    return _createClass(Context, [{
      key: "blank",
      value: function blank(maxWidth) {
        var trailing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
        if (maxWidth != null) {
          while (result.length < maxWidth) result += " ";
          return result;
        } else {
          for (var i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--) result += " ";
          return result + (trailing ? this.spaceAfter : "");
        }
      }
    }, {
      key: "marker",
      value: function marker(doc, add) {
        var number = this.node.name == "OrderedList" ? String(+itemNumber(this.item, doc)[2] + add) : "";
        return this.spaceBefore + number + this.type + this.spaceAfter;
      }
    }]);
  }();
  function getContext(node, doc) {
    var nodes = [],
      context = [];
    for (var cur = node; cur; cur = cur.parent) {
      if (cur.name == "FencedCode") return context;
      if (cur.name == "ListItem" || cur.name == "Blockquote") nodes.push(cur);
    }
    for (var i = nodes.length - 1; i >= 0; i--) {
      var _node = nodes[i],
        match = void 0;
      var line = doc.lineAt(_node.from),
        startPos = _node.from - line.from;
      if (_node.name == "Blockquote" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {
        context.push(new Context(_node, startPos, startPos + match[0].length, "", match[1], ">", null));
      } else if (_node.name == "ListItem" && _node.parent.name == "OrderedList" && (match = /^( *)\d+([.)])( *)/.exec(line.text.slice(startPos)))) {
        var after = match[3],
          len = match[0].length;
        if (after.length >= 4) {
          after = after.slice(0, after.length - 4);
          len -= 4;
        }
        context.push(new Context(_node.parent, startPos, startPos + len, match[1], after, match[2], _node));
      } else if (_node.name == "ListItem" && _node.parent.name == "BulletList" && (match = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(line.text.slice(startPos)))) {
        var _after = match[4],
          _len = match[0].length;
        if (_after.length > 4) {
          _after = _after.slice(0, _after.length - 4);
          _len -= 4;
        }
        var type = match[2];
        if (match[3]) type += match[3].replace(/[xX]/, ' ');
        context.push(new Context(_node.parent, startPos, startPos + _len, match[1], _after, type, _node));
      }
    }
    return context;
  }
  function itemNumber(item, doc) {
    return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
  }
  function renumberList(after, doc, changes) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    for (var prev = -1, node = after;;) {
      if (node.name == "ListItem") {
        var m = itemNumber(node, doc);
        var number = +m[2];
        if (prev >= 0) {
          if (number != prev + 1) return;
          changes.push({
            from: node.from + m[1].length,
            to: node.from + m[0].length,
            insert: String(prev + 2 + offset)
          });
        }
        prev = number;
      }
      var next = node.nextSibling;
      if (!next) break;
      node = next;
    }
  }
  function normalizeIndent(content, state) {
    var blank = /^[ \t]*/.exec(content)[0].length;
    if (!blank || state.facet(indentUnit) != "\t") return content;
    var col = countColumn(content, 4, blank);
    var space = "";
    for (var i = col; i > 0;) {
      if (i >= 4) {
        space += "\t";
        i -= 4;
      } else {
        space += " ";
        i--;
      }
    }
    return space + content.slice(blank);
  }
  /**
  This command, when invoked in Markdown context with cursor
  selection(s), will create a new line with the markup for
  blockquotes and lists that were active on the old line. If the
  cursor was directly after the end of the markup for the old line,
  trailing whitespace and list markers are removed from that line.

  The command does nothing in non-Markdown context, so it should
  not be used as the only binding for Enter (even in a Markdown
  document, HTML and code regions might use a different language).
  */
  var insertNewlineContinueMarkup = function insertNewlineContinueMarkup(_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    var tree = syntaxTree(state),
      doc = state.doc;
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, 0)) return dont = {
          range: range
        };
        var pos = range.from,
          line = doc.lineAt(pos);
        var context = getContext(tree.resolveInner(pos, -1), doc);
        while (context.length && context[context.length - 1].from > pos - line.from) context.pop();
        if (!context.length) return dont = {
          range: range
        };
        var inner = context[context.length - 1];
        if (inner.to - inner.spaceAfter.length > pos - line.from) return dont = {
          range: range
        };
        var emptyLine = pos >= inner.to - inner.spaceAfter.length && !/\S/.test(line.text.slice(inner.to));
        // Empty line in list
        if (inner.item && emptyLine) {
          var first = inner.node.firstChild,
            second = inner.node.getChild("ListItem", "ListItem");
          // Not second item or blank line before: delete a level of markup
          if (first.to >= pos || second && second.to < pos || line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
            var next = context.length > 1 ? context[context.length - 2] : null;
            var delTo,
              _insert = "";
            if (next && next.item) {
              // Re-add marker for the list at the next level
              delTo = line.from + next.from;
              _insert = next.marker(doc, 1);
            } else {
              delTo = line.from + (next ? next.to : 0);
            }
            var _changes = [{
              from: delTo,
              to: pos,
              insert: _insert
            }];
            if (inner.node.name == "OrderedList") renumberList(inner.item, doc, _changes, -2);
            if (next && next.node.name == "OrderedList") renumberList(next.item, doc, _changes);
            return {
              range: EditorSelection.cursor(delTo + _insert.length),
              changes: _changes
            };
          } else {
            // Move second item down, making tight two-item list non-tight
            var _insert2 = blankLine(context, state, line);
            return {
              range: EditorSelection.cursor(pos + _insert2.length + 1),
              changes: {
                from: line.from,
                insert: _insert2 + state.lineBreak
              }
            };
          }
        }
        if (inner.node.name == "Blockquote" && emptyLine && line.from) {
          var prevLine = doc.lineAt(line.from - 1),
            quoted = />\s*$/.exec(prevLine.text);
          // Two aligned empty quoted lines in a row
          if (quoted && quoted.index == inner.from) {
            var _changes2 = state.changes([{
              from: prevLine.from + quoted.index,
              to: prevLine.to
            }, {
              from: line.from + inner.from,
              to: line.to
            }]);
            return {
              range: range.map(_changes2),
              changes: _changes2
            };
          }
        }
        var changes = [];
        if (inner.node.name == "OrderedList") renumberList(inner.item, doc, changes);
        var continued = inner.item && inner.item.from < line.from;
        var insert = "";
        // If not dedented
        if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
          for (var i = 0, e = context.length - 1; i <= e; i++) {
            insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);
          }
        }
        var from = pos;
        while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1))) from--;
        insert = normalizeIndent(insert, state);
        if (nonTightList(inner.node, state.doc)) insert = blankLine(context, state, line) + state.lineBreak + insert;
        changes.push({
          from: from,
          to: pos,
          insert: state.lineBreak + insert
        });
        return {
          range: EditorSelection.cursor(from + insert.length + 1),
          changes: changes
        };
      });
    if (dont) return false;
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
  function isMark(node) {
    return node.name == "QuoteMark" || node.name == "ListMark";
  }
  function nonTightList(node, doc) {
    if (node.name != "OrderedList" && node.name != "BulletList") return false;
    var first = node.firstChild,
      second = node.getChild("ListItem", "ListItem");
    if (!second) return false;
    var line1 = doc.lineAt(first.to),
      line2 = doc.lineAt(second.from);
    var empty = /^[\s>]*$/.test(line1.text);
    return line1.number + (empty ? 0 : 1) < line2.number;
  }
  function blankLine(context, state, line) {
    var insert = "";
    for (var i = 0, e = context.length - 2; i <= e; i++) {
      insert += context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);
    }
    return normalizeIndent(insert, state);
  }
  function contextNodeForDelete(tree, pos) {
    var node = tree.resolveInner(pos, -1),
      scan = pos;
    if (isMark(node)) {
      scan = node.from;
      node = node.parent;
    }
    for (var prev; prev = node.childBefore(scan);) {
      if (isMark(prev)) {
        scan = prev.from;
      } else if (prev.name == "OrderedList" || prev.name == "BulletList") {
        node = prev.lastChild;
        scan = node.to;
      } else {
        break;
      }
    }
    return node;
  }
  /**
  This command will, when invoked in a Markdown context with the
  cursor directly after list or blockquote markup, delete one level
  of markup. When the markup is for a list, it will be replaced by
  spaces on the first invocation (a further invocation will delete
  the spaces), to make it easy to continue a list.

  When not after Markdown block markup, this command will return
  false, so it is intended to be bound alongside other deletion
  commands, with a higher precedence than the more generic commands.
  */
  var deleteMarkupBackward = function deleteMarkupBackward(_ref2) {
    var state = _ref2.state,
      dispatch = _ref2.dispatch;
    var tree = syntaxTree(state);
    var dont = null,
      changes = state.changeByRange(function (range) {
        var pos = range.from,
          doc = state.doc;
        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
          var line = doc.lineAt(pos);
          var context = getContext(contextNodeForDelete(tree, pos), doc);
          if (context.length) {
            var inner = context[context.length - 1];
            var spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
            // Delete extra trailing space after markup
            if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from))) return {
              range: EditorSelection.cursor(line.from + spaceEnd),
              changes: {
                from: line.from + spaceEnd,
                to: pos
              }
            };
            if (pos - line.from == spaceEnd && (
            // Only apply this if we're on the line that has the
            // construct's syntax, or there's only indentation in the
            // target range
            !inner.item || line.from <= inner.item.from || !/\S/.test(line.text.slice(0, inner.to)))) {
              var start = line.from + inner.from;
              // Replace a list item marker with blank space
              if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to))) {
                var insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));
                if (start == line.from) insert = normalizeIndent(insert, state);
                return {
                  range: EditorSelection.cursor(start + insert.length),
                  changes: {
                    from: start,
                    to: line.from + inner.to,
                    insert: insert
                  }
                };
              }
              // Delete one level of indentation
              if (start < pos) return {
                range: EditorSelection.cursor(start),
                changes: {
                  from: start,
                  to: pos
                }
              };
            }
          }
        }
        return dont = {
          range: range
        };
      });
    if (dont) return false;
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "delete"
    }));
    return true;
  };

  /**
  A small keymap with Markdown-specific bindings. Binds Enter to
  [`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
  and Backspace to
  [`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
  */
  var markdownKeymap = [{
    key: "Enter",
    run: insertNewlineContinueMarkup
  }, {
    key: "Backspace",
    run: deleteMarkupBackward
  }];
  var htmlNoMatch = /*@__PURE__*/html({
    matchClosingTags: false
  });
  /**
  Markdown language support.
  */
  function markdown() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var codeLanguages = config.codeLanguages,
      defaultCodeLanguage = config.defaultCodeLanguage,
      _config$addKeymap = config.addKeymap,
      addKeymap = _config$addKeymap === void 0 ? true : _config$addKeymap,
      _config$base = config.base,
      _config$base2 = _config$base === void 0 ? commonmarkLanguage : _config$base,
      parser = _config$base2.parser,
      _config$completeHTMLT = config.completeHTMLTags,
      completeHTMLTags = _config$completeHTMLT === void 0 ? true : _config$completeHTMLT,
      _config$htmlTagLangua = config.htmlTagLanguage,
      htmlTagLanguage = _config$htmlTagLangua === void 0 ? htmlNoMatch : _config$htmlTagLangua;
    if (!(parser instanceof MarkdownParser)) throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
    var extensions = config.extensions ? [config.extensions] : [];
    var support = [htmlTagLanguage.support],
      defaultCode;
    if (defaultCodeLanguage instanceof LanguageSupport) {
      support.push(defaultCodeLanguage.support);
      defaultCode = defaultCodeLanguage.language;
    } else if (defaultCodeLanguage) {
      defaultCode = defaultCodeLanguage;
    }
    var codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;
    extensions.push(parseCode({
      codeParser: codeParser,
      htmlParser: htmlTagLanguage.language.parser
    }));
    if (addKeymap) support.push(Prec.high(keymap.of(markdownKeymap)));
    var lang = mkLang(parser.configure(extensions));
    if (completeHTMLTags) support.push(lang.data.of({
      autocomplete: htmlTagCompletion
    }));
    return new LanguageSupport(lang, support);
  }
  function htmlTagCompletion(context) {
    var state = context.state,
      pos = context.pos,
      m = /<[:\-\.\w\u00b7-\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));
    if (!m) return null;
    var tree = syntaxTree(state).resolveInner(pos, -1);
    while (tree && !tree.type.isTop) {
      if (tree.name == "CodeBlock" || tree.name == "FencedCode" || tree.name == "ProcessingInstructionBlock" || tree.name == "CommentBlock" || tree.name == "Link" || tree.name == "Image") return null;
      tree = tree.parent;
    }
    return {
      from: pos - m[0].length,
      to: pos,
      options: htmlTagCompletions(),
      validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
    };
  }
  var _tagCompletions = null;
  function htmlTagCompletions() {
    if (_tagCompletions) return _tagCompletions;
    var result = htmlCompletionSource(new CompletionContext(EditorState.create({
      extensions: htmlNoMatch
    }), 0, true));
    return _tagCompletions = result ? result.options : [];
  }

  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }

  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }

  function _toArray(r) {
    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$c(r) || _nonIterableRest();
  }

  function _isNativeReflectConstruct$1() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() {
      return !!t;
    })();
  }

  function _construct(t, e, r) {
    if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return p;
  }

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var regeneratorRuntime$1 = {exports: {}};

  var _typeof = {exports: {}};

  var hasRequired_typeof;

  function require_typeof () {
  	if (hasRequired_typeof) return _typeof.exports;
  	hasRequired_typeof = 1;
  	(function (module) {
  		function _typeof(o) {
  		  "@babel/helpers - typeof";

  		  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
  		    return typeof o;
  		  } : function (o) {
  		    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  		  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
  		}
  		module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
  	} (_typeof));
  	return _typeof.exports;
  }

  var hasRequiredRegeneratorRuntime;

  function requireRegeneratorRuntime () {
  	if (hasRequiredRegeneratorRuntime) return regeneratorRuntime$1.exports;
  	hasRequiredRegeneratorRuntime = 1;
  	(function (module) {
  		var _typeof = require_typeof()["default"];
  		function _regeneratorRuntime() {
  		  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
  		    return e;
  		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  		  var t,
  		    e = {},
  		    r = Object.prototype,
  		    n = r.hasOwnProperty,
  		    o = Object.defineProperty || function (t, e, r) {
  		      t[e] = r.value;
  		    },
  		    i = "function" == typeof Symbol ? Symbol : {},
  		    a = i.iterator || "@@iterator",
  		    c = i.asyncIterator || "@@asyncIterator",
  		    u = i.toStringTag || "@@toStringTag";
  		  function define(t, e, r) {
  		    return Object.defineProperty(t, e, {
  		      value: r,
  		      enumerable: true,
  		      configurable: true,
  		      writable: true
  		    }), t[e];
  		  }
  		  try {
  		    define({}, "");
  		  } catch (t) {
  		    define = function define(t, e, r) {
  		      return t[e] = r;
  		    };
  		  }
  		  function wrap(t, e, r, n) {
  		    var i = e && e.prototype instanceof Generator ? e : Generator,
  		      a = Object.create(i.prototype),
  		      c = new Context(n || []);
  		    return o(a, "_invoke", {
  		      value: makeInvokeMethod(t, r, c)
  		    }), a;
  		  }
  		  function tryCatch(t, e, r) {
  		    try {
  		      return {
  		        type: "normal",
  		        arg: t.call(e, r)
  		      };
  		    } catch (t) {
  		      return {
  		        type: "throw",
  		        arg: t
  		      };
  		    }
  		  }
  		  e.wrap = wrap;
  		  var h = "suspendedStart",
  		    l = "suspendedYield",
  		    f = "executing",
  		    s = "completed",
  		    y = {};
  		  function Generator() {}
  		  function GeneratorFunction() {}
  		  function GeneratorFunctionPrototype() {}
  		  var p = {};
  		  define(p, a, function () {
  		    return this;
  		  });
  		  var d = Object.getPrototypeOf,
  		    v = d && d(d(values([])));
  		  v && v !== r && n.call(v, a) && (p = v);
  		  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  		  function defineIteratorMethods(t) {
  		    ["next", "throw", "return"].forEach(function (e) {
  		      define(t, e, function (t) {
  		        return this._invoke(e, t);
  		      });
  		    });
  		  }
  		  function AsyncIterator(t, e) {
  		    function invoke(r, o, i, a) {
  		      var c = tryCatch(t[r], t, o);
  		      if ("throw" !== c.type) {
  		        var u = c.arg,
  		          h = u.value;
  		        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
  		          invoke("next", t, i, a);
  		        }, function (t) {
  		          invoke("throw", t, i, a);
  		        }) : e.resolve(h).then(function (t) {
  		          u.value = t, i(u);
  		        }, function (t) {
  		          return invoke("throw", t, i, a);
  		        });
  		      }
  		      a(c.arg);
  		    }
  		    var r;
  		    o(this, "_invoke", {
  		      value: function value(t, n) {
  		        function callInvokeWithMethodAndArg() {
  		          return new e(function (e, r) {
  		            invoke(t, n, e, r);
  		          });
  		        }
  		        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
  		      }
  		    });
  		  }
  		  function makeInvokeMethod(e, r, n) {
  		    var o = h;
  		    return function (i, a) {
  		      if (o === f) throw Error("Generator is already running");
  		      if (o === s) {
  		        if ("throw" === i) throw a;
  		        return {
  		          value: t,
  		          done: true
  		        };
  		      }
  		      for (n.method = i, n.arg = a;;) {
  		        var c = n.delegate;
  		        if (c) {
  		          var u = maybeInvokeDelegate(c, n);
  		          if (u) {
  		            if (u === y) continue;
  		            return u;
  		          }
  		        }
  		        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
  		          if (o === h) throw o = s, n.arg;
  		          n.dispatchException(n.arg);
  		        } else "return" === n.method && n.abrupt("return", n.arg);
  		        o = f;
  		        var p = tryCatch(e, r, n);
  		        if ("normal" === p.type) {
  		          if (o = n.done ? s : l, p.arg === y) continue;
  		          return {
  		            value: p.arg,
  		            done: n.done
  		          };
  		        }
  		        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
  		      }
  		    };
  		  }
  		  function maybeInvokeDelegate(e, r) {
  		    var n = r.method,
  		      o = e.iterator[n];
  		    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
  		    var i = tryCatch(o, e.iterator, r.arg);
  		    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
  		    var a = i.arg;
  		    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  		  }
  		  function pushTryEntry(t) {
  		    var e = {
  		      tryLoc: t[0]
  		    };
  		    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  		  }
  		  function resetTryEntry(t) {
  		    var e = t.completion || {};
  		    e.type = "normal", delete e.arg, t.completion = e;
  		  }
  		  function Context(t) {
  		    this.tryEntries = [{
  		      tryLoc: "root"
  		    }], t.forEach(pushTryEntry, this), this.reset(true);
  		  }
  		  function values(e) {
  		    if (e || "" === e) {
  		      var r = e[a];
  		      if (r) return r.call(e);
  		      if ("function" == typeof e.next) return e;
  		      if (!isNaN(e.length)) {
  		        var o = -1,
  		          i = function next() {
  		            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = false, next;
  		            return next.value = t, next.done = true, next;
  		          };
  		        return i.next = i;
  		      }
  		    }
  		    throw new TypeError(_typeof(e) + " is not iterable");
  		  }
  		  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
  		    value: GeneratorFunctionPrototype,
  		    configurable: true
  		  }), o(GeneratorFunctionPrototype, "constructor", {
  		    value: GeneratorFunction,
  		    configurable: true
  		  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
  		    var e = "function" == typeof t && t.constructor;
  		    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  		  }, e.mark = function (t) {
  		    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  		  }, e.awrap = function (t) {
  		    return {
  		      __await: t
  		    };
  		  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
  		    return this;
  		  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
  		    void 0 === i && (i = Promise);
  		    var a = new AsyncIterator(wrap(t, r, n, o), i);
  		    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
  		      return t.done ? t.value : a.next();
  		    });
  		  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
  		    return this;
  		  }), define(g, "toString", function () {
  		    return "[object Generator]";
  		  }), e.keys = function (t) {
  		    var e = Object(t),
  		      r = [];
  		    for (var n in e) r.push(n);
  		    return r.reverse(), function next() {
  		      for (; r.length;) {
  		        var t = r.pop();
  		        if (t in e) return next.value = t, next.done = false, next;
  		      }
  		      return next.done = true, next;
  		    };
  		  }, e.values = values, Context.prototype = {
  		    constructor: Context,
  		    reset: function reset(e) {
  		      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
  		    },
  		    stop: function stop() {
  		      this.done = true;
  		      var t = this.tryEntries[0].completion;
  		      if ("throw" === t.type) throw t.arg;
  		      return this.rval;
  		    },
  		    dispatchException: function dispatchException(e) {
  		      if (this.done) throw e;
  		      var r = this;
  		      function handle(n, o) {
  		        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
  		      }
  		      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
  		        var i = this.tryEntries[o],
  		          a = i.completion;
  		        if ("root" === i.tryLoc) return handle("end");
  		        if (i.tryLoc <= this.prev) {
  		          var c = n.call(i, "catchLoc"),
  		            u = n.call(i, "finallyLoc");
  		          if (c && u) {
  		            if (this.prev < i.catchLoc) return handle(i.catchLoc, true);
  		            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
  		          } else if (c) {
  		            if (this.prev < i.catchLoc) return handle(i.catchLoc, true);
  		          } else {
  		            if (!u) throw Error("try statement without catch or finally");
  		            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
  		          }
  		        }
  		      }
  		    },
  		    abrupt: function abrupt(t, e) {
  		      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
  		        var o = this.tryEntries[r];
  		        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
  		          var i = o;
  		          break;
  		        }
  		      }
  		      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
  		      var a = i ? i.completion : {};
  		      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
  		    },
  		    complete: function complete(t, e) {
  		      if ("throw" === t.type) throw t.arg;
  		      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
  		    },
  		    finish: function finish(t) {
  		      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
  		        var r = this.tryEntries[e];
  		        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
  		      }
  		    },
  		    "catch": function _catch(t) {
  		      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
  		        var r = this.tryEntries[e];
  		        if (r.tryLoc === t) {
  		          var n = r.completion;
  		          if ("throw" === n.type) {
  		            var o = n.arg;
  		            resetTryEntry(r);
  		          }
  		          return o;
  		        }
  		      }
  		      throw Error("illegal catch attempt");
  		    },
  		    delegateYield: function delegateYield(e, r, n) {
  		      return this.delegate = {
  		        iterator: values(e),
  		        resultName: r,
  		        nextLoc: n
  		      }, "next" === this.method && (this.arg = t), y;
  		    }
  		  }, e;
  		}
  		module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports; 
  	} (regeneratorRuntime$1));
  	return regeneratorRuntime$1.exports;
  }

  var regenerator;
  var hasRequiredRegenerator;

  function requireRegenerator () {
  	if (hasRequiredRegenerator) return regenerator;
  	hasRequiredRegenerator = 1;
  	// TODO(Babel 8): Remove this file.

  	var runtime = requireRegeneratorRuntime()();
  	regenerator = runtime;

  	// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  	try {
  	  regeneratorRuntime = runtime;
  	} catch (accidentalStrictMode) {
  	  if (typeof globalThis === "object") {
  	    globalThis.regeneratorRuntime = runtime;
  	  } else {
  	    Function("r", "regeneratorRuntime = r")(runtime);
  	  }
  	}
  	return regenerator;
  }

  var regeneratorExports = requireRegenerator();
  var _regeneratorRuntime = /*@__PURE__*/getDefaultExportFromCjs(regeneratorExports);

  var _excluded = ["class"],
    _excluded2 = ["class"];
  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(_getAstValues),
    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(formatChildren),
    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(formatInline),
    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(formatTableRow),
    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(formatAttributes),
    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(formatAnnotations),
    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(formatVariable),
    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(formatFunction),
    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(trimStart),
    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(escapeMarkdownCharacters);
  function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
  function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = function __markAsModule(target) {
    return __defProp(target, "__esModule", {
      value: true
    });
  };
  var __commonJS = function __commonJS(cb, mod) {
    return function __require() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = {
        exports: {}
      }).exports, mod), mod.exports;
    };
  };
  var __export = function __export(target, all) {
    __markAsModule(target);
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  };
  var __reExport = function __reExport(target, module, desc) {
    if (module && _typeof$1(module) === "object" || typeof module === "function") {
      var _iterator = _createForOfIteratorHelper$1(__getOwnPropNames(module)),
        _step;
      try {
        var _loop = function _loop() {
          var key = _step.value;
          if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
            get: function get() {
              return module[key];
            },
            enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return target;
  };
  var __toModule = function __toModule(module) {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {
      get: function get() {
        return module["default"];
      },
      enumerable: true
    } : {
      value: module,
      enumerable: true
    })), module);
  };

  // src/grammar/tag.js
  var require_tag = __commonJS({
    "src/grammar/tag.js": function src_grammar_tagJs(exports, module) {

      function peg$subclass(child, parent) {
        function C() {
          this.constructor = child;
        }
        C.prototype = parent.prototype;
        child.prototype = new C();
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function (expected, found, location) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function literal(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          "class": function _class(expectation) {
            var escapedParts = expectation.parts.map(function (part) {
              return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function any() {
            return "any character";
          },
          end: function end() {
            return "end of input";
          },
          other: function other(expectation) {
            return expectation.description;
          },
          not: function not(expectation) {
            return "not " + describeExpectation(expectation.expected);
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s2) {
          return s2.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s2) {
          return s2.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = expected2.map(describeExpectation);
          var i, j;
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};
        var peg$FAILED = {};
        var peg$startRuleFunctions = {
          Top: peg$parseTop
        };
        var peg$startRuleFunction = peg$parseTop;
        var peg$c0 = "/";
        var peg$c1 = ".";
        var peg$c2 = "#";
        var peg$c3 = "=";
        var peg$c4 = "(";
        var peg$c5 = ")";
        var peg$c6 = ",";
        var peg$c7 = "[";
        var peg$c8 = "]";
        var peg$c9 = "null";
        var peg$c10 = "true";
        var peg$c11 = "false";
        var peg$c12 = "{";
        var peg$c13 = "}";
        var peg$c14 = ":";
        var peg$c16 = '"';
        var peg$c17 = "\\";
        var peg$r0 = /^[$@]/;
        var peg$r1 = /^[0-9]/;
        var peg$r2 = /^[^\0-\x1F"\\]/;
        var peg$r3 = /^[a-zA-Z0-9_\-]/;
        var peg$r4 = /^[ \n\t]/;
        var peg$e0 = peg$literalExpectation("/", false);
        var peg$e1 = peg$otherExpectation("tag name");
        var peg$e2 = peg$otherExpectation("class");
        var peg$e3 = peg$otherExpectation("id");
        var peg$e4 = peg$literalExpectation("=", false);
        var peg$e5 = peg$literalExpectation("(", false);
        var peg$e6 = peg$literalExpectation(")", false);
        var peg$e7 = peg$literalExpectation(",", false);
        var peg$e8 = peg$otherExpectation("variable");
        var peg$e9 = peg$otherExpectation("null");
        var peg$e10 = peg$otherExpectation("boolean");
        var peg$e11 = peg$literalExpectation("[", false);
        var peg$e12 = peg$literalExpectation("]", false);
        var peg$e13 = peg$literalExpectation("{", false);
        var peg$e14 = peg$literalExpectation("}", false);
        var peg$e15 = peg$literalExpectation(":", false);
        var peg$e16 = peg$otherExpectation("number");
        var peg$e17 = peg$otherExpectation("string");
        var peg$e18 = peg$otherExpectation("identifier");
        var peg$e19 = peg$otherExpectation("whitespace");
        var peg$f0 = function peg$f0(variable) {
          return {
            type: "variable",
            meta: {
              variable: variable
            }
          };
        };
        var peg$f1 = function peg$f1(attributes) {
          return {
            type: "annotation",
            meta: {
              attributes: attributes
            }
          };
        };
        var peg$f2 = function peg$f2(tag, value) {
          return value;
        };
        var peg$f3 = function peg$f3(tag, primary, attributes, close) {
          if (primary) {
            attributes = attributes || [];
            attributes.unshift({
              type: "attribute",
              name: "primary",
              value: primary
            });
          }
          var _ref = close ? ["tag", 0] : ["tag_open", 1],
            _ref2 = _slicedToArray(_ref, 2),
            type = _ref2[0],
            nesting = _ref2[1];
          return {
            type: type,
            nesting: nesting,
            meta: {
              tag: tag,
              attributes: attributes
            }
          };
        };
        var peg$f4 = function peg$f4(tag) {
          return {
            type: "tag_close",
            nesting: -1,
            meta: {
              tag: tag
            }
          };
        };
        var peg$f5 = function peg$f5(head, tail) {
          return !head ? [] : [head].concat(_toConsumableArray(tail));
        };
        var peg$f6 = function peg$f6(item2) {
          return item2;
        };
        var peg$f7 = function peg$f7(ids) {
          return ids;
        };
        var peg$f8 = function peg$f8(classes) {
          return classes;
        };
        var peg$f9 = function peg$f9(attribute) {
          return attribute;
        };
        var peg$f10 = function peg$f10(name) {
          return {
            type: "class",
            name: name,
            value: true
          };
        };
        var peg$f11 = function peg$f11(value) {
          return {
            type: "attribute",
            name: "id",
            value: value
          };
        };
        var peg$f12 = function peg$f12(name, value) {
          return {
            type: "attribute",
            name: name,
            value: value
          };
        };
        var peg$f13 = function peg$f13(name, head, tail) {
          return head ? [head].concat(_toConsumableArray(tail)) : [];
        };
        var peg$f14 = function peg$f14(name, params) {
          var parameters = {};
          var _iterator2 = _createForOfIteratorHelper$1(params.entries()),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _step2$value = _slicedToArray(_step2.value, 2),
                index = _step2$value[0],
                _step2$value$ = _step2$value[1],
                name2 = _step2$value$.name,
                value = _step2$value$.value;
              parameters[name2 || index] = value;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          return new Function3(name, parameters);
        };
        var peg$f15 = function peg$f15(name) {
          return name;
        };
        var peg$f16 = function peg$f16(name, value) {
          return {
            name: name,
            value: value
          };
        };
        var peg$f17 = function peg$f17(value) {
          return value;
        };
        var peg$f18 = function peg$f18(prefix, head, tail) {
          if (prefix === "@") return [head].concat(_toConsumableArray(tail));
          return new Variable2([head].concat(_toConsumableArray(tail)));
        };
        var peg$f19 = function peg$f19() {
          return null;
        };
        var peg$f20 = function peg$f20() {
          return true;
        };
        var peg$f21 = function peg$f21() {
          return false;
        };
        var peg$f22 = function peg$f22(head, tail) {
          return [head].concat(_toConsumableArray(tail));
        };
        var peg$f23 = function peg$f23(value) {
          return value || [];
        };
        var peg$f24 = function peg$f24(head, tail) {
          return Object.assign.apply(Object, [head].concat(_toConsumableArray(tail)));
        };
        var peg$f25 = function peg$f25(value) {
          return value || {};
        };
        var peg$f26 = function peg$f26(key, value) {
          return key === "$$mdtype" ? {} : _defineProperty({}, key, value);
        };
        var peg$f27 = function peg$f27() {
          return parseFloat(text2());
        };
        var peg$f28 = function peg$f28(value) {
          return value.join("");
        };
        var peg$f29 = function peg$f29(sequence) {
          return sequence;
        };
        var peg$currPos = 0;
        var peg$savedPos = 0;
        var peg$posDetailsCache = [{
          line: 1,
          column: 1
        }];
        var peg$expected = [];
        var peg$silentFails = 0;
        var peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text2() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function peg$literalExpectation(text3, ignoreCase) {
          return {
            type: "literal",
            text: text3,
            ignoreCase: ignoreCase
          };
        }
        function peg$endExpectation() {
          return {
            type: "end"
          };
        }
        function peg$otherExpectation(description) {
          return {
            type: "other",
            description: description
          };
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos];
          var p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
        function peg$computeLocation(startPos, endPos) {
          var loc = {};
          if (peg$VALIDFILENAME) loc.filename = options.filename;
          var startPosDetails = peg$computePosDetails(startPos);
          loc.start = {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          };
          var endPosDetails = peg$computePosDetails(endPos);
          loc.end = {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          };
          return loc;
        }
        function peg$begin() {
          peg$expected.push({
            pos: peg$currPos,
            variants: []
          });
        }
        function peg$expect(expected2) {
          var top = peg$expected[peg$expected.length - 1];
          if (peg$currPos < top.pos) {
            return;
          }
          if (peg$currPos > top.pos) {
            top.pos = peg$currPos;
            top.variants = [];
          }
          top.variants.push(expected2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);
        }
        function peg$buildError() {
          var expected2 = peg$expected[0];
          var failPos = expected2.pos;
          return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));
        }
        function peg$parseTop() {
          var s0;
          s0 = peg$parseTopLevelValue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAnnotation();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTagOpen();
              if (s0 === peg$FAILED) {
                s0 = peg$parseTagClose();
              }
            }
          }
          return s0;
        }
        function peg$parseTopLevelValue() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseVariable();
          if (s1 === peg$FAILED) {
            s1 = peg$parseFunction();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f0(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseAnnotation() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parseTagAttributes();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            peg$savedPos = s0;
            s0 = peg$f1(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTagOpen() {
          var s0, s1, s2, s3, s4, s5, s6;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = peg$parseTagName();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$currPos;
            s4 = peg$parseValue();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              peg$savedPos = s3;
              s3 = peg$f2(s1, s4);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parseTagAttributes();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            rule$expects(peg$e0);
            if (input.charCodeAt(peg$currPos) === 47) {
              s6 = peg$c0;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f3(s1, s3, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTagClose() {
          var s0, s1, s2;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          rule$expects(peg$e0);
          if (input.charCodeAt(peg$currPos) === 47) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTagName();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f4(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTagName() {
          var s0;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e1);
          peg$silentFails++;
          s0 = peg$parseIdentifier();
          peg$silentFails--;
          return s0;
        }
        function peg$parseTagAttributes() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parseTagAttributesItem();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseTagAttributesTail();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseTagAttributesTail();
            }
            peg$savedPos = s0;
            s0 = peg$f5(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTagAttributesTail() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTagAttributesItem();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f6(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTagAttributesItem() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseTagShortcutId();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f7(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTagShortcutClass();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f8(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTagAttribute();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f9(s1);
              }
              s0 = s1;
            }
          }
          return s0;
        }
        function peg$parseTagShortcutClass() {
          var s0, s1, s2;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e2);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f10(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseTagShortcutId() {
          var s0, s1, s2;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e3);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f11(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseTagAttribute() {
          var s0, s1, s2, s3;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = peg$parseIdentifier();
          if (s1 !== peg$FAILED) {
            rule$expects(peg$e4);
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c3;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseValue();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f12(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseFunction() {
          var s0, s1, s2, s3, s4, s5, s6, s7;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = peg$parseIdentifier();
          if (s1 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c4;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$currPos;
              s5 = peg$parseFunctionParameter();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = [];
              s7 = peg$parseFunctionParameterTail();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseFunctionParameterTail();
              }
              peg$savedPos = s4;
              s4 = peg$f13(s1, s5, s6);
              rule$expects(peg$e6);
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c5;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f14(s1, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseFunctionParameter() {
          var s0, s1, s2, s3;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e4);
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s1 = peg$f15(s2);
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$parseValue();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseFunctionParameterTail() {
          var s0, s1, s2, s3, s4;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          rule$expects(peg$e7);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$parseFunctionParameter();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseTrailingComma() {
          var s0, s1, s2;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          rule$expects(peg$e7);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = null;
          }
          return s0;
        }
        function peg$parseVariable() {
          var s0, s1, s2, s3, s4;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e8);
          peg$silentFails++;
          s0 = peg$currPos;
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVariableTail();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVariableTail();
              }
              peg$savedPos = s0;
              s0 = peg$f18(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseVariableTail() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c1;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f15(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c7;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseValueNumber();
              if (s2 === peg$FAILED) {
                s2 = peg$parseValueString();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s3 = peg$c8;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f17(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseValue() {
          var s0;
          s0 = peg$parseValueNull();
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueBoolean();
            if (s0 === peg$FAILED) {
              s0 = peg$parseValueString();
              if (s0 === peg$FAILED) {
                s0 = peg$parseValueNumber();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseValueArray();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseValueHash();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseFunction();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseVariable();
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseValueNull() {
          var s0, s1;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e9);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c9) {
            s1 = peg$c9;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f19();
          }
          s0 = s1;
          peg$silentFails--;
          return s0;
        }
        function peg$parseValueBoolean() {
          var s0, s1;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e10);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c10) {
            s1 = peg$c10;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f20();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c11) {
              s1 = peg$c11;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f21();
            }
            s0 = s1;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseValueArray() {
          var s0, s1, s2, s3, s4, s5, s6;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          rule$expects(peg$e11);
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$currPos;
            s4 = peg$parseValue();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseValueArrayTail();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseValueArrayTail();
              }
              s6 = peg$parseTrailingComma();
              peg$savedPos = s3;
              s3 = peg$f22(s4, s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            rule$expects(peg$e12);
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c8;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f23(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseValueArrayTail() {
          var s0, s1, s2, s3, s4;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          rule$expects(peg$e7);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$parseValue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseValueHash() {
          var s0, s1, s2, s3, s4, s5, s6;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          rule$expects(peg$e13);
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$currPos;
            s4 = peg$parseValueHashItem();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseValueHashTail();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseValueHashTail();
              }
              s6 = peg$parseTrailingComma();
              peg$savedPos = s3;
              s3 = peg$f24(s4, s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            rule$expects(peg$e14);
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f25(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseValueHashTail() {
          var s0, s1, s2, s3, s4;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          rule$expects(peg$e7);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$parseValueHashItem();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f6(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseValueHashItem() {
          var s0, s1, s2, s3, s4;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          s0 = peg$currPos;
          s1 = peg$parseIdentifier();
          if (s1 === peg$FAILED) {
            s1 = peg$parseValueString();
          }
          if (s1 !== peg$FAILED) {
            rule$expects(peg$e15);
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c14;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$parseValue();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f26(s1, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseValueNumber() {
          var s0, s2, s3, s4, s5, s6;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e16);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            peg$currPos++;
          }
          s2 = [];
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c1;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$r1.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f27();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseValueString() {
          var s0, s1, s2, s3;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e17);
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c16;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseValueStringChars();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseValueStringChars();
            }
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c16;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f28(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parseValueStringChars() {
          var s0;
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueStringEscapes();
          }
          return s0;
        }
        function peg$parseValueStringEscapes() {
          var s0, s1, s2;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s2 = peg$c16;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c17;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f29(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseIdentifier() {
          var s0, s1, s2;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e18);
          peg$silentFails++;
          s0 = peg$currPos;
          s1 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          peg$silentFails--;
          return s0;
        }
        function peg$parse_() {
          var s0;
          var rule$expects = function rule$expects(expected2) {
            if (peg$silentFails === 0) peg$expect(expected2);
          };
          rule$expects(peg$e19);
          peg$silentFails++;
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          return s0;
        }
        var _options = options,
          Variable2 = _options.Variable,
          Function3 = _options.Function;
        peg$begin();
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$expect(peg$endExpectation());
          }
          throw peg$buildError();
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // node_modules/entities/lib/maps/entities.json
  var require_entities = __commonJS({
    "node_modules/entities/lib/maps/entities.json": function node_modules_entities_lib_maps_entitiesJson(exports, module) {
      module.exports = {
        Aacute: "\xC1",
        aacute: "\xE1",
        Abreve: "\u0102",
        abreve: "\u0103",
        ac: "\u223E",
        acd: "\u223F",
        acE: "\u223E\u0333",
        Acirc: "\xC2",
        acirc: "\xE2",
        acute: "\xB4",
        Acy: "\u0410",
        acy: "\u0430",
        AElig: "\xC6",
        aelig: "\xE6",
        af: "\u2061",
        Afr: "\uD835\uDD04",
        afr: "\uD835\uDD1E",
        Agrave: "\xC0",
        agrave: "\xE0",
        alefsym: "\u2135",
        aleph: "\u2135",
        Alpha: "\u0391",
        alpha: "\u03B1",
        Amacr: "\u0100",
        amacr: "\u0101",
        amalg: "\u2A3F",
        amp: "&",
        AMP: "&",
        andand: "\u2A55",
        And: "\u2A53",
        and: "\u2227",
        andd: "\u2A5C",
        andslope: "\u2A58",
        andv: "\u2A5A",
        ang: "\u2220",
        ange: "\u29A4",
        angle: "\u2220",
        angmsdaa: "\u29A8",
        angmsdab: "\u29A9",
        angmsdac: "\u29AA",
        angmsdad: "\u29AB",
        angmsdae: "\u29AC",
        angmsdaf: "\u29AD",
        angmsdag: "\u29AE",
        angmsdah: "\u29AF",
        angmsd: "\u2221",
        angrt: "\u221F",
        angrtvb: "\u22BE",
        angrtvbd: "\u299D",
        angsph: "\u2222",
        angst: "\xC5",
        angzarr: "\u237C",
        Aogon: "\u0104",
        aogon: "\u0105",
        Aopf: "\uD835\uDD38",
        aopf: "\uD835\uDD52",
        apacir: "\u2A6F",
        ap: "\u2248",
        apE: "\u2A70",
        ape: "\u224A",
        apid: "\u224B",
        apos: "'",
        ApplyFunction: "\u2061",
        approx: "\u2248",
        approxeq: "\u224A",
        Aring: "\xC5",
        aring: "\xE5",
        Ascr: "\uD835\uDC9C",
        ascr: "\uD835\uDCB6",
        Assign: "\u2254",
        ast: "*",
        asymp: "\u2248",
        asympeq: "\u224D",
        Atilde: "\xC3",
        atilde: "\xE3",
        Auml: "\xC4",
        auml: "\xE4",
        awconint: "\u2233",
        awint: "\u2A11",
        backcong: "\u224C",
        backepsilon: "\u03F6",
        backprime: "\u2035",
        backsim: "\u223D",
        backsimeq: "\u22CD",
        Backslash: "\u2216",
        Barv: "\u2AE7",
        barvee: "\u22BD",
        barwed: "\u2305",
        Barwed: "\u2306",
        barwedge: "\u2305",
        bbrk: "\u23B5",
        bbrktbrk: "\u23B6",
        bcong: "\u224C",
        Bcy: "\u0411",
        bcy: "\u0431",
        bdquo: "\u201E",
        becaus: "\u2235",
        because: "\u2235",
        Because: "\u2235",
        bemptyv: "\u29B0",
        bepsi: "\u03F6",
        bernou: "\u212C",
        Bernoullis: "\u212C",
        Beta: "\u0392",
        beta: "\u03B2",
        beth: "\u2136",
        between: "\u226C",
        Bfr: "\uD835\uDD05",
        bfr: "\uD835\uDD1F",
        bigcap: "\u22C2",
        bigcirc: "\u25EF",
        bigcup: "\u22C3",
        bigodot: "\u2A00",
        bigoplus: "\u2A01",
        bigotimes: "\u2A02",
        bigsqcup: "\u2A06",
        bigstar: "\u2605",
        bigtriangledown: "\u25BD",
        bigtriangleup: "\u25B3",
        biguplus: "\u2A04",
        bigvee: "\u22C1",
        bigwedge: "\u22C0",
        bkarow: "\u290D",
        blacklozenge: "\u29EB",
        blacksquare: "\u25AA",
        blacktriangle: "\u25B4",
        blacktriangledown: "\u25BE",
        blacktriangleleft: "\u25C2",
        blacktriangleright: "\u25B8",
        blank: "\u2423",
        blk12: "\u2592",
        blk14: "\u2591",
        blk34: "\u2593",
        block: "\u2588",
        bne: "=\u20E5",
        bnequiv: "\u2261\u20E5",
        bNot: "\u2AED",
        bnot: "\u2310",
        Bopf: "\uD835\uDD39",
        bopf: "\uD835\uDD53",
        bot: "\u22A5",
        bottom: "\u22A5",
        bowtie: "\u22C8",
        boxbox: "\u29C9",
        boxdl: "\u2510",
        boxdL: "\u2555",
        boxDl: "\u2556",
        boxDL: "\u2557",
        boxdr: "\u250C",
        boxdR: "\u2552",
        boxDr: "\u2553",
        boxDR: "\u2554",
        boxh: "\u2500",
        boxH: "\u2550",
        boxhd: "\u252C",
        boxHd: "\u2564",
        boxhD: "\u2565",
        boxHD: "\u2566",
        boxhu: "\u2534",
        boxHu: "\u2567",
        boxhU: "\u2568",
        boxHU: "\u2569",
        boxminus: "\u229F",
        boxplus: "\u229E",
        boxtimes: "\u22A0",
        boxul: "\u2518",
        boxuL: "\u255B",
        boxUl: "\u255C",
        boxUL: "\u255D",
        boxur: "\u2514",
        boxuR: "\u2558",
        boxUr: "\u2559",
        boxUR: "\u255A",
        boxv: "\u2502",
        boxV: "\u2551",
        boxvh: "\u253C",
        boxvH: "\u256A",
        boxVh: "\u256B",
        boxVH: "\u256C",
        boxvl: "\u2524",
        boxvL: "\u2561",
        boxVl: "\u2562",
        boxVL: "\u2563",
        boxvr: "\u251C",
        boxvR: "\u255E",
        boxVr: "\u255F",
        boxVR: "\u2560",
        bprime: "\u2035",
        breve: "\u02D8",
        Breve: "\u02D8",
        brvbar: "\xA6",
        bscr: "\uD835\uDCB7",
        Bscr: "\u212C",
        bsemi: "\u204F",
        bsim: "\u223D",
        bsime: "\u22CD",
        bsolb: "\u29C5",
        bsol: "\\",
        bsolhsub: "\u27C8",
        bull: "\u2022",
        bullet: "\u2022",
        bump: "\u224E",
        bumpE: "\u2AAE",
        bumpe: "\u224F",
        Bumpeq: "\u224E",
        bumpeq: "\u224F",
        Cacute: "\u0106",
        cacute: "\u0107",
        capand: "\u2A44",
        capbrcup: "\u2A49",
        capcap: "\u2A4B",
        cap: "\u2229",
        Cap: "\u22D2",
        capcup: "\u2A47",
        capdot: "\u2A40",
        CapitalDifferentialD: "\u2145",
        caps: "\u2229\uFE00",
        caret: "\u2041",
        caron: "\u02C7",
        Cayleys: "\u212D",
        ccaps: "\u2A4D",
        Ccaron: "\u010C",
        ccaron: "\u010D",
        Ccedil: "\xC7",
        ccedil: "\xE7",
        Ccirc: "\u0108",
        ccirc: "\u0109",
        Cconint: "\u2230",
        ccups: "\u2A4C",
        ccupssm: "\u2A50",
        Cdot: "\u010A",
        cdot: "\u010B",
        cedil: "\xB8",
        Cedilla: "\xB8",
        cemptyv: "\u29B2",
        cent: "\xA2",
        centerdot: "\xB7",
        CenterDot: "\xB7",
        cfr: "\uD835\uDD20",
        Cfr: "\u212D",
        CHcy: "\u0427",
        chcy: "\u0447",
        check: "\u2713",
        checkmark: "\u2713",
        Chi: "\u03A7",
        chi: "\u03C7",
        circ: "\u02C6",
        circeq: "\u2257",
        circlearrowleft: "\u21BA",
        circlearrowright: "\u21BB",
        circledast: "\u229B",
        circledcirc: "\u229A",
        circleddash: "\u229D",
        CircleDot: "\u2299",
        circledR: "\xAE",
        circledS: "\u24C8",
        CircleMinus: "\u2296",
        CirclePlus: "\u2295",
        CircleTimes: "\u2297",
        cir: "\u25CB",
        cirE: "\u29C3",
        cire: "\u2257",
        cirfnint: "\u2A10",
        cirmid: "\u2AEF",
        cirscir: "\u29C2",
        ClockwiseContourIntegral: "\u2232",
        CloseCurlyDoubleQuote: "\u201D",
        CloseCurlyQuote: "\u2019",
        clubs: "\u2663",
        clubsuit: "\u2663",
        colon: ":",
        Colon: "\u2237",
        Colone: "\u2A74",
        colone: "\u2254",
        coloneq: "\u2254",
        comma: ",",
        commat: "@",
        comp: "\u2201",
        compfn: "\u2218",
        complement: "\u2201",
        complexes: "\u2102",
        cong: "\u2245",
        congdot: "\u2A6D",
        Congruent: "\u2261",
        conint: "\u222E",
        Conint: "\u222F",
        ContourIntegral: "\u222E",
        copf: "\uD835\uDD54",
        Copf: "\u2102",
        coprod: "\u2210",
        Coproduct: "\u2210",
        copy: "\xA9",
        COPY: "\xA9",
        copysr: "\u2117",
        CounterClockwiseContourIntegral: "\u2233",
        crarr: "\u21B5",
        cross: "\u2717",
        Cross: "\u2A2F",
        Cscr: "\uD835\uDC9E",
        cscr: "\uD835\uDCB8",
        csub: "\u2ACF",
        csube: "\u2AD1",
        csup: "\u2AD0",
        csupe: "\u2AD2",
        ctdot: "\u22EF",
        cudarrl: "\u2938",
        cudarrr: "\u2935",
        cuepr: "\u22DE",
        cuesc: "\u22DF",
        cularr: "\u21B6",
        cularrp: "\u293D",
        cupbrcap: "\u2A48",
        cupcap: "\u2A46",
        CupCap: "\u224D",
        cup: "\u222A",
        Cup: "\u22D3",
        cupcup: "\u2A4A",
        cupdot: "\u228D",
        cupor: "\u2A45",
        cups: "\u222A\uFE00",
        curarr: "\u21B7",
        curarrm: "\u293C",
        curlyeqprec: "\u22DE",
        curlyeqsucc: "\u22DF",
        curlyvee: "\u22CE",
        curlywedge: "\u22CF",
        curren: "\xA4",
        curvearrowleft: "\u21B6",
        curvearrowright: "\u21B7",
        cuvee: "\u22CE",
        cuwed: "\u22CF",
        cwconint: "\u2232",
        cwint: "\u2231",
        cylcty: "\u232D",
        dagger: "\u2020",
        Dagger: "\u2021",
        daleth: "\u2138",
        darr: "\u2193",
        Darr: "\u21A1",
        dArr: "\u21D3",
        dash: "\u2010",
        Dashv: "\u2AE4",
        dashv: "\u22A3",
        dbkarow: "\u290F",
        dblac: "\u02DD",
        Dcaron: "\u010E",
        dcaron: "\u010F",
        Dcy: "\u0414",
        dcy: "\u0434",
        ddagger: "\u2021",
        ddarr: "\u21CA",
        DD: "\u2145",
        dd: "\u2146",
        DDotrahd: "\u2911",
        ddotseq: "\u2A77",
        deg: "\xB0",
        Del: "\u2207",
        Delta: "\u0394",
        delta: "\u03B4",
        demptyv: "\u29B1",
        dfisht: "\u297F",
        Dfr: "\uD835\uDD07",
        dfr: "\uD835\uDD21",
        dHar: "\u2965",
        dharl: "\u21C3",
        dharr: "\u21C2",
        DiacriticalAcute: "\xB4",
        DiacriticalDot: "\u02D9",
        DiacriticalDoubleAcute: "\u02DD",
        DiacriticalGrave: "`",
        DiacriticalTilde: "\u02DC",
        diam: "\u22C4",
        diamond: "\u22C4",
        Diamond: "\u22C4",
        diamondsuit: "\u2666",
        diams: "\u2666",
        die: "\xA8",
        DifferentialD: "\u2146",
        digamma: "\u03DD",
        disin: "\u22F2",
        div: "\xF7",
        divide: "\xF7",
        divideontimes: "\u22C7",
        divonx: "\u22C7",
        DJcy: "\u0402",
        djcy: "\u0452",
        dlcorn: "\u231E",
        dlcrop: "\u230D",
        dollar: "$",
        Dopf: "\uD835\uDD3B",
        dopf: "\uD835\uDD55",
        Dot: "\xA8",
        dot: "\u02D9",
        DotDot: "\u20DC",
        doteq: "\u2250",
        doteqdot: "\u2251",
        DotEqual: "\u2250",
        dotminus: "\u2238",
        dotplus: "\u2214",
        dotsquare: "\u22A1",
        doublebarwedge: "\u2306",
        DoubleContourIntegral: "\u222F",
        DoubleDot: "\xA8",
        DoubleDownArrow: "\u21D3",
        DoubleLeftArrow: "\u21D0",
        DoubleLeftRightArrow: "\u21D4",
        DoubleLeftTee: "\u2AE4",
        DoubleLongLeftArrow: "\u27F8",
        DoubleLongLeftRightArrow: "\u27FA",
        DoubleLongRightArrow: "\u27F9",
        DoubleRightArrow: "\u21D2",
        DoubleRightTee: "\u22A8",
        DoubleUpArrow: "\u21D1",
        DoubleUpDownArrow: "\u21D5",
        DoubleVerticalBar: "\u2225",
        DownArrowBar: "\u2913",
        downarrow: "\u2193",
        DownArrow: "\u2193",
        Downarrow: "\u21D3",
        DownArrowUpArrow: "\u21F5",
        DownBreve: "\u0311",
        downdownarrows: "\u21CA",
        downharpoonleft: "\u21C3",
        downharpoonright: "\u21C2",
        DownLeftRightVector: "\u2950",
        DownLeftTeeVector: "\u295E",
        DownLeftVectorBar: "\u2956",
        DownLeftVector: "\u21BD",
        DownRightTeeVector: "\u295F",
        DownRightVectorBar: "\u2957",
        DownRightVector: "\u21C1",
        DownTeeArrow: "\u21A7",
        DownTee: "\u22A4",
        drbkarow: "\u2910",
        drcorn: "\u231F",
        drcrop: "\u230C",
        Dscr: "\uD835\uDC9F",
        dscr: "\uD835\uDCB9",
        DScy: "\u0405",
        dscy: "\u0455",
        dsol: "\u29F6",
        Dstrok: "\u0110",
        dstrok: "\u0111",
        dtdot: "\u22F1",
        dtri: "\u25BF",
        dtrif: "\u25BE",
        duarr: "\u21F5",
        duhar: "\u296F",
        dwangle: "\u29A6",
        DZcy: "\u040F",
        dzcy: "\u045F",
        dzigrarr: "\u27FF",
        Eacute: "\xC9",
        eacute: "\xE9",
        easter: "\u2A6E",
        Ecaron: "\u011A",
        ecaron: "\u011B",
        Ecirc: "\xCA",
        ecirc: "\xEA",
        ecir: "\u2256",
        ecolon: "\u2255",
        Ecy: "\u042D",
        ecy: "\u044D",
        eDDot: "\u2A77",
        Edot: "\u0116",
        edot: "\u0117",
        eDot: "\u2251",
        ee: "\u2147",
        efDot: "\u2252",
        Efr: "\uD835\uDD08",
        efr: "\uD835\uDD22",
        eg: "\u2A9A",
        Egrave: "\xC8",
        egrave: "\xE8",
        egs: "\u2A96",
        egsdot: "\u2A98",
        el: "\u2A99",
        Element: "\u2208",
        elinters: "\u23E7",
        ell: "\u2113",
        els: "\u2A95",
        elsdot: "\u2A97",
        Emacr: "\u0112",
        emacr: "\u0113",
        empty: "\u2205",
        emptyset: "\u2205",
        EmptySmallSquare: "\u25FB",
        emptyv: "\u2205",
        EmptyVerySmallSquare: "\u25AB",
        emsp13: "\u2004",
        emsp14: "\u2005",
        emsp: "\u2003",
        ENG: "\u014A",
        eng: "\u014B",
        ensp: "\u2002",
        Eogon: "\u0118",
        eogon: "\u0119",
        Eopf: "\uD835\uDD3C",
        eopf: "\uD835\uDD56",
        epar: "\u22D5",
        eparsl: "\u29E3",
        eplus: "\u2A71",
        epsi: "\u03B5",
        Epsilon: "\u0395",
        epsilon: "\u03B5",
        epsiv: "\u03F5",
        eqcirc: "\u2256",
        eqcolon: "\u2255",
        eqsim: "\u2242",
        eqslantgtr: "\u2A96",
        eqslantless: "\u2A95",
        Equal: "\u2A75",
        equals: "=",
        EqualTilde: "\u2242",
        equest: "\u225F",
        Equilibrium: "\u21CC",
        equiv: "\u2261",
        equivDD: "\u2A78",
        eqvparsl: "\u29E5",
        erarr: "\u2971",
        erDot: "\u2253",
        escr: "\u212F",
        Escr: "\u2130",
        esdot: "\u2250",
        Esim: "\u2A73",
        esim: "\u2242",
        Eta: "\u0397",
        eta: "\u03B7",
        ETH: "\xD0",
        eth: "\xF0",
        Euml: "\xCB",
        euml: "\xEB",
        euro: "\u20AC",
        excl: "!",
        exist: "\u2203",
        Exists: "\u2203",
        expectation: "\u2130",
        exponentiale: "\u2147",
        ExponentialE: "\u2147",
        fallingdotseq: "\u2252",
        Fcy: "\u0424",
        fcy: "\u0444",
        female: "\u2640",
        ffilig: "\uFB03",
        fflig: "\uFB00",
        ffllig: "\uFB04",
        Ffr: "\uD835\uDD09",
        ffr: "\uD835\uDD23",
        filig: "\uFB01",
        FilledSmallSquare: "\u25FC",
        FilledVerySmallSquare: "\u25AA",
        fjlig: "fj",
        flat: "\u266D",
        fllig: "\uFB02",
        fltns: "\u25B1",
        fnof: "\u0192",
        Fopf: "\uD835\uDD3D",
        fopf: "\uD835\uDD57",
        forall: "\u2200",
        ForAll: "\u2200",
        fork: "\u22D4",
        forkv: "\u2AD9",
        Fouriertrf: "\u2131",
        fpartint: "\u2A0D",
        frac12: "\xBD",
        frac13: "\u2153",
        frac14: "\xBC",
        frac15: "\u2155",
        frac16: "\u2159",
        frac18: "\u215B",
        frac23: "\u2154",
        frac25: "\u2156",
        frac34: "\xBE",
        frac35: "\u2157",
        frac38: "\u215C",
        frac45: "\u2158",
        frac56: "\u215A",
        frac58: "\u215D",
        frac78: "\u215E",
        frasl: "\u2044",
        frown: "\u2322",
        fscr: "\uD835\uDCBB",
        Fscr: "\u2131",
        gacute: "\u01F5",
        Gamma: "\u0393",
        gamma: "\u03B3",
        Gammad: "\u03DC",
        gammad: "\u03DD",
        gap: "\u2A86",
        Gbreve: "\u011E",
        gbreve: "\u011F",
        Gcedil: "\u0122",
        Gcirc: "\u011C",
        gcirc: "\u011D",
        Gcy: "\u0413",
        gcy: "\u0433",
        Gdot: "\u0120",
        gdot: "\u0121",
        ge: "\u2265",
        gE: "\u2267",
        gEl: "\u2A8C",
        gel: "\u22DB",
        geq: "\u2265",
        geqq: "\u2267",
        geqslant: "\u2A7E",
        gescc: "\u2AA9",
        ges: "\u2A7E",
        gesdot: "\u2A80",
        gesdoto: "\u2A82",
        gesdotol: "\u2A84",
        gesl: "\u22DB\uFE00",
        gesles: "\u2A94",
        Gfr: "\uD835\uDD0A",
        gfr: "\uD835\uDD24",
        gg: "\u226B",
        Gg: "\u22D9",
        ggg: "\u22D9",
        gimel: "\u2137",
        GJcy: "\u0403",
        gjcy: "\u0453",
        gla: "\u2AA5",
        gl: "\u2277",
        glE: "\u2A92",
        glj: "\u2AA4",
        gnap: "\u2A8A",
        gnapprox: "\u2A8A",
        gne: "\u2A88",
        gnE: "\u2269",
        gneq: "\u2A88",
        gneqq: "\u2269",
        gnsim: "\u22E7",
        Gopf: "\uD835\uDD3E",
        gopf: "\uD835\uDD58",
        grave: "`",
        GreaterEqual: "\u2265",
        GreaterEqualLess: "\u22DB",
        GreaterFullEqual: "\u2267",
        GreaterGreater: "\u2AA2",
        GreaterLess: "\u2277",
        GreaterSlantEqual: "\u2A7E",
        GreaterTilde: "\u2273",
        Gscr: "\uD835\uDCA2",
        gscr: "\u210A",
        gsim: "\u2273",
        gsime: "\u2A8E",
        gsiml: "\u2A90",
        gtcc: "\u2AA7",
        gtcir: "\u2A7A",
        gt: ">",
        GT: ">",
        Gt: "\u226B",
        gtdot: "\u22D7",
        gtlPar: "\u2995",
        gtquest: "\u2A7C",
        gtrapprox: "\u2A86",
        gtrarr: "\u2978",
        gtrdot: "\u22D7",
        gtreqless: "\u22DB",
        gtreqqless: "\u2A8C",
        gtrless: "\u2277",
        gtrsim: "\u2273",
        gvertneqq: "\u2269\uFE00",
        gvnE: "\u2269\uFE00",
        Hacek: "\u02C7",
        hairsp: "\u200A",
        half: "\xBD",
        hamilt: "\u210B",
        HARDcy: "\u042A",
        hardcy: "\u044A",
        harrcir: "\u2948",
        harr: "\u2194",
        hArr: "\u21D4",
        harrw: "\u21AD",
        Hat: "^",
        hbar: "\u210F",
        Hcirc: "\u0124",
        hcirc: "\u0125",
        hearts: "\u2665",
        heartsuit: "\u2665",
        hellip: "\u2026",
        hercon: "\u22B9",
        hfr: "\uD835\uDD25",
        Hfr: "\u210C",
        HilbertSpace: "\u210B",
        hksearow: "\u2925",
        hkswarow: "\u2926",
        hoarr: "\u21FF",
        homtht: "\u223B",
        hookleftarrow: "\u21A9",
        hookrightarrow: "\u21AA",
        hopf: "\uD835\uDD59",
        Hopf: "\u210D",
        horbar: "\u2015",
        HorizontalLine: "\u2500",
        hscr: "\uD835\uDCBD",
        Hscr: "\u210B",
        hslash: "\u210F",
        Hstrok: "\u0126",
        hstrok: "\u0127",
        HumpDownHump: "\u224E",
        HumpEqual: "\u224F",
        hybull: "\u2043",
        hyphen: "\u2010",
        Iacute: "\xCD",
        iacute: "\xED",
        ic: "\u2063",
        Icirc: "\xCE",
        icirc: "\xEE",
        Icy: "\u0418",
        icy: "\u0438",
        Idot: "\u0130",
        IEcy: "\u0415",
        iecy: "\u0435",
        iexcl: "\xA1",
        iff: "\u21D4",
        ifr: "\uD835\uDD26",
        Ifr: "\u2111",
        Igrave: "\xCC",
        igrave: "\xEC",
        ii: "\u2148",
        iiiint: "\u2A0C",
        iiint: "\u222D",
        iinfin: "\u29DC",
        iiota: "\u2129",
        IJlig: "\u0132",
        ijlig: "\u0133",
        Imacr: "\u012A",
        imacr: "\u012B",
        image: "\u2111",
        ImaginaryI: "\u2148",
        imagline: "\u2110",
        imagpart: "\u2111",
        imath: "\u0131",
        Im: "\u2111",
        imof: "\u22B7",
        imped: "\u01B5",
        Implies: "\u21D2",
        incare: "\u2105",
        "in": "\u2208",
        infin: "\u221E",
        infintie: "\u29DD",
        inodot: "\u0131",
        intcal: "\u22BA",
        "int": "\u222B",
        Int: "\u222C",
        integers: "\u2124",
        Integral: "\u222B",
        intercal: "\u22BA",
        Intersection: "\u22C2",
        intlarhk: "\u2A17",
        intprod: "\u2A3C",
        InvisibleComma: "\u2063",
        InvisibleTimes: "\u2062",
        IOcy: "\u0401",
        iocy: "\u0451",
        Iogon: "\u012E",
        iogon: "\u012F",
        Iopf: "\uD835\uDD40",
        iopf: "\uD835\uDD5A",
        Iota: "\u0399",
        iota: "\u03B9",
        iprod: "\u2A3C",
        iquest: "\xBF",
        iscr: "\uD835\uDCBE",
        Iscr: "\u2110",
        isin: "\u2208",
        isindot: "\u22F5",
        isinE: "\u22F9",
        isins: "\u22F4",
        isinsv: "\u22F3",
        isinv: "\u2208",
        it: "\u2062",
        Itilde: "\u0128",
        itilde: "\u0129",
        Iukcy: "\u0406",
        iukcy: "\u0456",
        Iuml: "\xCF",
        iuml: "\xEF",
        Jcirc: "\u0134",
        jcirc: "\u0135",
        Jcy: "\u0419",
        jcy: "\u0439",
        Jfr: "\uD835\uDD0D",
        jfr: "\uD835\uDD27",
        jmath: "\u0237",
        Jopf: "\uD835\uDD41",
        jopf: "\uD835\uDD5B",
        Jscr: "\uD835\uDCA5",
        jscr: "\uD835\uDCBF",
        Jsercy: "\u0408",
        jsercy: "\u0458",
        Jukcy: "\u0404",
        jukcy: "\u0454",
        Kappa: "\u039A",
        kappa: "\u03BA",
        kappav: "\u03F0",
        Kcedil: "\u0136",
        kcedil: "\u0137",
        Kcy: "\u041A",
        kcy: "\u043A",
        Kfr: "\uD835\uDD0E",
        kfr: "\uD835\uDD28",
        kgreen: "\u0138",
        KHcy: "\u0425",
        khcy: "\u0445",
        KJcy: "\u040C",
        kjcy: "\u045C",
        Kopf: "\uD835\uDD42",
        kopf: "\uD835\uDD5C",
        Kscr: "\uD835\uDCA6",
        kscr: "\uD835\uDCC0",
        lAarr: "\u21DA",
        Lacute: "\u0139",
        lacute: "\u013A",
        laemptyv: "\u29B4",
        lagran: "\u2112",
        Lambda: "\u039B",
        lambda: "\u03BB",
        lang: "\u27E8",
        Lang: "\u27EA",
        langd: "\u2991",
        langle: "\u27E8",
        lap: "\u2A85",
        Laplacetrf: "\u2112",
        laquo: "\xAB",
        larrb: "\u21E4",
        larrbfs: "\u291F",
        larr: "\u2190",
        Larr: "\u219E",
        lArr: "\u21D0",
        larrfs: "\u291D",
        larrhk: "\u21A9",
        larrlp: "\u21AB",
        larrpl: "\u2939",
        larrsim: "\u2973",
        larrtl: "\u21A2",
        latail: "\u2919",
        lAtail: "\u291B",
        lat: "\u2AAB",
        late: "\u2AAD",
        lates: "\u2AAD\uFE00",
        lbarr: "\u290C",
        lBarr: "\u290E",
        lbbrk: "\u2772",
        lbrace: "{",
        lbrack: "[",
        lbrke: "\u298B",
        lbrksld: "\u298F",
        lbrkslu: "\u298D",
        Lcaron: "\u013D",
        lcaron: "\u013E",
        Lcedil: "\u013B",
        lcedil: "\u013C",
        lceil: "\u2308",
        lcub: "{",
        Lcy: "\u041B",
        lcy: "\u043B",
        ldca: "\u2936",
        ldquo: "\u201C",
        ldquor: "\u201E",
        ldrdhar: "\u2967",
        ldrushar: "\u294B",
        ldsh: "\u21B2",
        le: "\u2264",
        lE: "\u2266",
        LeftAngleBracket: "\u27E8",
        LeftArrowBar: "\u21E4",
        leftarrow: "\u2190",
        LeftArrow: "\u2190",
        Leftarrow: "\u21D0",
        LeftArrowRightArrow: "\u21C6",
        leftarrowtail: "\u21A2",
        LeftCeiling: "\u2308",
        LeftDoubleBracket: "\u27E6",
        LeftDownTeeVector: "\u2961",
        LeftDownVectorBar: "\u2959",
        LeftDownVector: "\u21C3",
        LeftFloor: "\u230A",
        leftharpoondown: "\u21BD",
        leftharpoonup: "\u21BC",
        leftleftarrows: "\u21C7",
        leftrightarrow: "\u2194",
        LeftRightArrow: "\u2194",
        Leftrightarrow: "\u21D4",
        leftrightarrows: "\u21C6",
        leftrightharpoons: "\u21CB",
        leftrightsquigarrow: "\u21AD",
        LeftRightVector: "\u294E",
        LeftTeeArrow: "\u21A4",
        LeftTee: "\u22A3",
        LeftTeeVector: "\u295A",
        leftthreetimes: "\u22CB",
        LeftTriangleBar: "\u29CF",
        LeftTriangle: "\u22B2",
        LeftTriangleEqual: "\u22B4",
        LeftUpDownVector: "\u2951",
        LeftUpTeeVector: "\u2960",
        LeftUpVectorBar: "\u2958",
        LeftUpVector: "\u21BF",
        LeftVectorBar: "\u2952",
        LeftVector: "\u21BC",
        lEg: "\u2A8B",
        leg: "\u22DA",
        leq: "\u2264",
        leqq: "\u2266",
        leqslant: "\u2A7D",
        lescc: "\u2AA8",
        les: "\u2A7D",
        lesdot: "\u2A7F",
        lesdoto: "\u2A81",
        lesdotor: "\u2A83",
        lesg: "\u22DA\uFE00",
        lesges: "\u2A93",
        lessapprox: "\u2A85",
        lessdot: "\u22D6",
        lesseqgtr: "\u22DA",
        lesseqqgtr: "\u2A8B",
        LessEqualGreater: "\u22DA",
        LessFullEqual: "\u2266",
        LessGreater: "\u2276",
        lessgtr: "\u2276",
        LessLess: "\u2AA1",
        lesssim: "\u2272",
        LessSlantEqual: "\u2A7D",
        LessTilde: "\u2272",
        lfisht: "\u297C",
        lfloor: "\u230A",
        Lfr: "\uD835\uDD0F",
        lfr: "\uD835\uDD29",
        lg: "\u2276",
        lgE: "\u2A91",
        lHar: "\u2962",
        lhard: "\u21BD",
        lharu: "\u21BC",
        lharul: "\u296A",
        lhblk: "\u2584",
        LJcy: "\u0409",
        ljcy: "\u0459",
        llarr: "\u21C7",
        ll: "\u226A",
        Ll: "\u22D8",
        llcorner: "\u231E",
        Lleftarrow: "\u21DA",
        llhard: "\u296B",
        lltri: "\u25FA",
        Lmidot: "\u013F",
        lmidot: "\u0140",
        lmoustache: "\u23B0",
        lmoust: "\u23B0",
        lnap: "\u2A89",
        lnapprox: "\u2A89",
        lne: "\u2A87",
        lnE: "\u2268",
        lneq: "\u2A87",
        lneqq: "\u2268",
        lnsim: "\u22E6",
        loang: "\u27EC",
        loarr: "\u21FD",
        lobrk: "\u27E6",
        longleftarrow: "\u27F5",
        LongLeftArrow: "\u27F5",
        Longleftarrow: "\u27F8",
        longleftrightarrow: "\u27F7",
        LongLeftRightArrow: "\u27F7",
        Longleftrightarrow: "\u27FA",
        longmapsto: "\u27FC",
        longrightarrow: "\u27F6",
        LongRightArrow: "\u27F6",
        Longrightarrow: "\u27F9",
        looparrowleft: "\u21AB",
        looparrowright: "\u21AC",
        lopar: "\u2985",
        Lopf: "\uD835\uDD43",
        lopf: "\uD835\uDD5D",
        loplus: "\u2A2D",
        lotimes: "\u2A34",
        lowast: "\u2217",
        lowbar: "_",
        LowerLeftArrow: "\u2199",
        LowerRightArrow: "\u2198",
        loz: "\u25CA",
        lozenge: "\u25CA",
        lozf: "\u29EB",
        lpar: "(",
        lparlt: "\u2993",
        lrarr: "\u21C6",
        lrcorner: "\u231F",
        lrhar: "\u21CB",
        lrhard: "\u296D",
        lrm: "\u200E",
        lrtri: "\u22BF",
        lsaquo: "\u2039",
        lscr: "\uD835\uDCC1",
        Lscr: "\u2112",
        lsh: "\u21B0",
        Lsh: "\u21B0",
        lsim: "\u2272",
        lsime: "\u2A8D",
        lsimg: "\u2A8F",
        lsqb: "[",
        lsquo: "\u2018",
        lsquor: "\u201A",
        Lstrok: "\u0141",
        lstrok: "\u0142",
        ltcc: "\u2AA6",
        ltcir: "\u2A79",
        lt: "<",
        LT: "<",
        Lt: "\u226A",
        ltdot: "\u22D6",
        lthree: "\u22CB",
        ltimes: "\u22C9",
        ltlarr: "\u2976",
        ltquest: "\u2A7B",
        ltri: "\u25C3",
        ltrie: "\u22B4",
        ltrif: "\u25C2",
        ltrPar: "\u2996",
        lurdshar: "\u294A",
        luruhar: "\u2966",
        lvertneqq: "\u2268\uFE00",
        lvnE: "\u2268\uFE00",
        macr: "\xAF",
        male: "\u2642",
        malt: "\u2720",
        maltese: "\u2720",
        Map: "\u2905",
        map: "\u21A6",
        mapsto: "\u21A6",
        mapstodown: "\u21A7",
        mapstoleft: "\u21A4",
        mapstoup: "\u21A5",
        marker: "\u25AE",
        mcomma: "\u2A29",
        Mcy: "\u041C",
        mcy: "\u043C",
        mdash: "\u2014",
        mDDot: "\u223A",
        measuredangle: "\u2221",
        MediumSpace: "\u205F",
        Mellintrf: "\u2133",
        Mfr: "\uD835\uDD10",
        mfr: "\uD835\uDD2A",
        mho: "\u2127",
        micro: "\xB5",
        midast: "*",
        midcir: "\u2AF0",
        mid: "\u2223",
        middot: "\xB7",
        minusb: "\u229F",
        minus: "\u2212",
        minusd: "\u2238",
        minusdu: "\u2A2A",
        MinusPlus: "\u2213",
        mlcp: "\u2ADB",
        mldr: "\u2026",
        mnplus: "\u2213",
        models: "\u22A7",
        Mopf: "\uD835\uDD44",
        mopf: "\uD835\uDD5E",
        mp: "\u2213",
        mscr: "\uD835\uDCC2",
        Mscr: "\u2133",
        mstpos: "\u223E",
        Mu: "\u039C",
        mu: "\u03BC",
        multimap: "\u22B8",
        mumap: "\u22B8",
        nabla: "\u2207",
        Nacute: "\u0143",
        nacute: "\u0144",
        nang: "\u2220\u20D2",
        nap: "\u2249",
        napE: "\u2A70\u0338",
        napid: "\u224B\u0338",
        napos: "\u0149",
        napprox: "\u2249",
        natural: "\u266E",
        naturals: "\u2115",
        natur: "\u266E",
        nbsp: "\xA0",
        nbump: "\u224E\u0338",
        nbumpe: "\u224F\u0338",
        ncap: "\u2A43",
        Ncaron: "\u0147",
        ncaron: "\u0148",
        Ncedil: "\u0145",
        ncedil: "\u0146",
        ncong: "\u2247",
        ncongdot: "\u2A6D\u0338",
        ncup: "\u2A42",
        Ncy: "\u041D",
        ncy: "\u043D",
        ndash: "\u2013",
        nearhk: "\u2924",
        nearr: "\u2197",
        neArr: "\u21D7",
        nearrow: "\u2197",
        ne: "\u2260",
        nedot: "\u2250\u0338",
        NegativeMediumSpace: "\u200B",
        NegativeThickSpace: "\u200B",
        NegativeThinSpace: "\u200B",
        NegativeVeryThinSpace: "\u200B",
        nequiv: "\u2262",
        nesear: "\u2928",
        nesim: "\u2242\u0338",
        NestedGreaterGreater: "\u226B",
        NestedLessLess: "\u226A",
        NewLine: "\n",
        nexist: "\u2204",
        nexists: "\u2204",
        Nfr: "\uD835\uDD11",
        nfr: "\uD835\uDD2B",
        ngE: "\u2267\u0338",
        nge: "\u2271",
        ngeq: "\u2271",
        ngeqq: "\u2267\u0338",
        ngeqslant: "\u2A7E\u0338",
        nges: "\u2A7E\u0338",
        nGg: "\u22D9\u0338",
        ngsim: "\u2275",
        nGt: "\u226B\u20D2",
        ngt: "\u226F",
        ngtr: "\u226F",
        nGtv: "\u226B\u0338",
        nharr: "\u21AE",
        nhArr: "\u21CE",
        nhpar: "\u2AF2",
        ni: "\u220B",
        nis: "\u22FC",
        nisd: "\u22FA",
        niv: "\u220B",
        NJcy: "\u040A",
        njcy: "\u045A",
        nlarr: "\u219A",
        nlArr: "\u21CD",
        nldr: "\u2025",
        nlE: "\u2266\u0338",
        nle: "\u2270",
        nleftarrow: "\u219A",
        nLeftarrow: "\u21CD",
        nleftrightarrow: "\u21AE",
        nLeftrightarrow: "\u21CE",
        nleq: "\u2270",
        nleqq: "\u2266\u0338",
        nleqslant: "\u2A7D\u0338",
        nles: "\u2A7D\u0338",
        nless: "\u226E",
        nLl: "\u22D8\u0338",
        nlsim: "\u2274",
        nLt: "\u226A\u20D2",
        nlt: "\u226E",
        nltri: "\u22EA",
        nltrie: "\u22EC",
        nLtv: "\u226A\u0338",
        nmid: "\u2224",
        NoBreak: "\u2060",
        NonBreakingSpace: "\xA0",
        nopf: "\uD835\uDD5F",
        Nopf: "\u2115",
        Not: "\u2AEC",
        not: "\xAC",
        NotCongruent: "\u2262",
        NotCupCap: "\u226D",
        NotDoubleVerticalBar: "\u2226",
        NotElement: "\u2209",
        NotEqual: "\u2260",
        NotEqualTilde: "\u2242\u0338",
        NotExists: "\u2204",
        NotGreater: "\u226F",
        NotGreaterEqual: "\u2271",
        NotGreaterFullEqual: "\u2267\u0338",
        NotGreaterGreater: "\u226B\u0338",
        NotGreaterLess: "\u2279",
        NotGreaterSlantEqual: "\u2A7E\u0338",
        NotGreaterTilde: "\u2275",
        NotHumpDownHump: "\u224E\u0338",
        NotHumpEqual: "\u224F\u0338",
        notin: "\u2209",
        notindot: "\u22F5\u0338",
        notinE: "\u22F9\u0338",
        notinva: "\u2209",
        notinvb: "\u22F7",
        notinvc: "\u22F6",
        NotLeftTriangleBar: "\u29CF\u0338",
        NotLeftTriangle: "\u22EA",
        NotLeftTriangleEqual: "\u22EC",
        NotLess: "\u226E",
        NotLessEqual: "\u2270",
        NotLessGreater: "\u2278",
        NotLessLess: "\u226A\u0338",
        NotLessSlantEqual: "\u2A7D\u0338",
        NotLessTilde: "\u2274",
        NotNestedGreaterGreater: "\u2AA2\u0338",
        NotNestedLessLess: "\u2AA1\u0338",
        notni: "\u220C",
        notniva: "\u220C",
        notnivb: "\u22FE",
        notnivc: "\u22FD",
        NotPrecedes: "\u2280",
        NotPrecedesEqual: "\u2AAF\u0338",
        NotPrecedesSlantEqual: "\u22E0",
        NotReverseElement: "\u220C",
        NotRightTriangleBar: "\u29D0\u0338",
        NotRightTriangle: "\u22EB",
        NotRightTriangleEqual: "\u22ED",
        NotSquareSubset: "\u228F\u0338",
        NotSquareSubsetEqual: "\u22E2",
        NotSquareSuperset: "\u2290\u0338",
        NotSquareSupersetEqual: "\u22E3",
        NotSubset: "\u2282\u20D2",
        NotSubsetEqual: "\u2288",
        NotSucceeds: "\u2281",
        NotSucceedsEqual: "\u2AB0\u0338",
        NotSucceedsSlantEqual: "\u22E1",
        NotSucceedsTilde: "\u227F\u0338",
        NotSuperset: "\u2283\u20D2",
        NotSupersetEqual: "\u2289",
        NotTilde: "\u2241",
        NotTildeEqual: "\u2244",
        NotTildeFullEqual: "\u2247",
        NotTildeTilde: "\u2249",
        NotVerticalBar: "\u2224",
        nparallel: "\u2226",
        npar: "\u2226",
        nparsl: "\u2AFD\u20E5",
        npart: "\u2202\u0338",
        npolint: "\u2A14",
        npr: "\u2280",
        nprcue: "\u22E0",
        nprec: "\u2280",
        npreceq: "\u2AAF\u0338",
        npre: "\u2AAF\u0338",
        nrarrc: "\u2933\u0338",
        nrarr: "\u219B",
        nrArr: "\u21CF",
        nrarrw: "\u219D\u0338",
        nrightarrow: "\u219B",
        nRightarrow: "\u21CF",
        nrtri: "\u22EB",
        nrtrie: "\u22ED",
        nsc: "\u2281",
        nsccue: "\u22E1",
        nsce: "\u2AB0\u0338",
        Nscr: "\uD835\uDCA9",
        nscr: "\uD835\uDCC3",
        nshortmid: "\u2224",
        nshortparallel: "\u2226",
        nsim: "\u2241",
        nsime: "\u2244",
        nsimeq: "\u2244",
        nsmid: "\u2224",
        nspar: "\u2226",
        nsqsube: "\u22E2",
        nsqsupe: "\u22E3",
        nsub: "\u2284",
        nsubE: "\u2AC5\u0338",
        nsube: "\u2288",
        nsubset: "\u2282\u20D2",
        nsubseteq: "\u2288",
        nsubseteqq: "\u2AC5\u0338",
        nsucc: "\u2281",
        nsucceq: "\u2AB0\u0338",
        nsup: "\u2285",
        nsupE: "\u2AC6\u0338",
        nsupe: "\u2289",
        nsupset: "\u2283\u20D2",
        nsupseteq: "\u2289",
        nsupseteqq: "\u2AC6\u0338",
        ntgl: "\u2279",
        Ntilde: "\xD1",
        ntilde: "\xF1",
        ntlg: "\u2278",
        ntriangleleft: "\u22EA",
        ntrianglelefteq: "\u22EC",
        ntriangleright: "\u22EB",
        ntrianglerighteq: "\u22ED",
        Nu: "\u039D",
        nu: "\u03BD",
        num: "#",
        numero: "\u2116",
        numsp: "\u2007",
        nvap: "\u224D\u20D2",
        nvdash: "\u22AC",
        nvDash: "\u22AD",
        nVdash: "\u22AE",
        nVDash: "\u22AF",
        nvge: "\u2265\u20D2",
        nvgt: ">\u20D2",
        nvHarr: "\u2904",
        nvinfin: "\u29DE",
        nvlArr: "\u2902",
        nvle: "\u2264\u20D2",
        nvlt: "<\u20D2",
        nvltrie: "\u22B4\u20D2",
        nvrArr: "\u2903",
        nvrtrie: "\u22B5\u20D2",
        nvsim: "\u223C\u20D2",
        nwarhk: "\u2923",
        nwarr: "\u2196",
        nwArr: "\u21D6",
        nwarrow: "\u2196",
        nwnear: "\u2927",
        Oacute: "\xD3",
        oacute: "\xF3",
        oast: "\u229B",
        Ocirc: "\xD4",
        ocirc: "\xF4",
        ocir: "\u229A",
        Ocy: "\u041E",
        ocy: "\u043E",
        odash: "\u229D",
        Odblac: "\u0150",
        odblac: "\u0151",
        odiv: "\u2A38",
        odot: "\u2299",
        odsold: "\u29BC",
        OElig: "\u0152",
        oelig: "\u0153",
        ofcir: "\u29BF",
        Ofr: "\uD835\uDD12",
        ofr: "\uD835\uDD2C",
        ogon: "\u02DB",
        Ograve: "\xD2",
        ograve: "\xF2",
        ogt: "\u29C1",
        ohbar: "\u29B5",
        ohm: "\u03A9",
        oint: "\u222E",
        olarr: "\u21BA",
        olcir: "\u29BE",
        olcross: "\u29BB",
        oline: "\u203E",
        olt: "\u29C0",
        Omacr: "\u014C",
        omacr: "\u014D",
        Omega: "\u03A9",
        omega: "\u03C9",
        Omicron: "\u039F",
        omicron: "\u03BF",
        omid: "\u29B6",
        ominus: "\u2296",
        Oopf: "\uD835\uDD46",
        oopf: "\uD835\uDD60",
        opar: "\u29B7",
        OpenCurlyDoubleQuote: "\u201C",
        OpenCurlyQuote: "\u2018",
        operp: "\u29B9",
        oplus: "\u2295",
        orarr: "\u21BB",
        Or: "\u2A54",
        or: "\u2228",
        ord: "\u2A5D",
        order: "\u2134",
        orderof: "\u2134",
        ordf: "\xAA",
        ordm: "\xBA",
        origof: "\u22B6",
        oror: "\u2A56",
        orslope: "\u2A57",
        orv: "\u2A5B",
        oS: "\u24C8",
        Oscr: "\uD835\uDCAA",
        oscr: "\u2134",
        Oslash: "\xD8",
        oslash: "\xF8",
        osol: "\u2298",
        Otilde: "\xD5",
        otilde: "\xF5",
        otimesas: "\u2A36",
        Otimes: "\u2A37",
        otimes: "\u2297",
        Ouml: "\xD6",
        ouml: "\xF6",
        ovbar: "\u233D",
        OverBar: "\u203E",
        OverBrace: "\u23DE",
        OverBracket: "\u23B4",
        OverParenthesis: "\u23DC",
        para: "\xB6",
        parallel: "\u2225",
        par: "\u2225",
        parsim: "\u2AF3",
        parsl: "\u2AFD",
        part: "\u2202",
        PartialD: "\u2202",
        Pcy: "\u041F",
        pcy: "\u043F",
        percnt: "%",
        period: ".",
        permil: "\u2030",
        perp: "\u22A5",
        pertenk: "\u2031",
        Pfr: "\uD835\uDD13",
        pfr: "\uD835\uDD2D",
        Phi: "\u03A6",
        phi: "\u03C6",
        phiv: "\u03D5",
        phmmat: "\u2133",
        phone: "\u260E",
        Pi: "\u03A0",
        pi: "\u03C0",
        pitchfork: "\u22D4",
        piv: "\u03D6",
        planck: "\u210F",
        planckh: "\u210E",
        plankv: "\u210F",
        plusacir: "\u2A23",
        plusb: "\u229E",
        pluscir: "\u2A22",
        plus: "+",
        plusdo: "\u2214",
        plusdu: "\u2A25",
        pluse: "\u2A72",
        PlusMinus: "\xB1",
        plusmn: "\xB1",
        plussim: "\u2A26",
        plustwo: "\u2A27",
        pm: "\xB1",
        Poincareplane: "\u210C",
        pointint: "\u2A15",
        popf: "\uD835\uDD61",
        Popf: "\u2119",
        pound: "\xA3",
        prap: "\u2AB7",
        Pr: "\u2ABB",
        pr: "\u227A",
        prcue: "\u227C",
        precapprox: "\u2AB7",
        prec: "\u227A",
        preccurlyeq: "\u227C",
        Precedes: "\u227A",
        PrecedesEqual: "\u2AAF",
        PrecedesSlantEqual: "\u227C",
        PrecedesTilde: "\u227E",
        preceq: "\u2AAF",
        precnapprox: "\u2AB9",
        precneqq: "\u2AB5",
        precnsim: "\u22E8",
        pre: "\u2AAF",
        prE: "\u2AB3",
        precsim: "\u227E",
        prime: "\u2032",
        Prime: "\u2033",
        primes: "\u2119",
        prnap: "\u2AB9",
        prnE: "\u2AB5",
        prnsim: "\u22E8",
        prod: "\u220F",
        Product: "\u220F",
        profalar: "\u232E",
        profline: "\u2312",
        profsurf: "\u2313",
        prop: "\u221D",
        Proportional: "\u221D",
        Proportion: "\u2237",
        propto: "\u221D",
        prsim: "\u227E",
        prurel: "\u22B0",
        Pscr: "\uD835\uDCAB",
        pscr: "\uD835\uDCC5",
        Psi: "\u03A8",
        psi: "\u03C8",
        puncsp: "\u2008",
        Qfr: "\uD835\uDD14",
        qfr: "\uD835\uDD2E",
        qint: "\u2A0C",
        qopf: "\uD835\uDD62",
        Qopf: "\u211A",
        qprime: "\u2057",
        Qscr: "\uD835\uDCAC",
        qscr: "\uD835\uDCC6",
        quaternions: "\u210D",
        quatint: "\u2A16",
        quest: "?",
        questeq: "\u225F",
        quot: '"',
        QUOT: '"',
        rAarr: "\u21DB",
        race: "\u223D\u0331",
        Racute: "\u0154",
        racute: "\u0155",
        radic: "\u221A",
        raemptyv: "\u29B3",
        rang: "\u27E9",
        Rang: "\u27EB",
        rangd: "\u2992",
        range: "\u29A5",
        rangle: "\u27E9",
        raquo: "\xBB",
        rarrap: "\u2975",
        rarrb: "\u21E5",
        rarrbfs: "\u2920",
        rarrc: "\u2933",
        rarr: "\u2192",
        Rarr: "\u21A0",
        rArr: "\u21D2",
        rarrfs: "\u291E",
        rarrhk: "\u21AA",
        rarrlp: "\u21AC",
        rarrpl: "\u2945",
        rarrsim: "\u2974",
        Rarrtl: "\u2916",
        rarrtl: "\u21A3",
        rarrw: "\u219D",
        ratail: "\u291A",
        rAtail: "\u291C",
        ratio: "\u2236",
        rationals: "\u211A",
        rbarr: "\u290D",
        rBarr: "\u290F",
        RBarr: "\u2910",
        rbbrk: "\u2773",
        rbrace: "}",
        rbrack: "]",
        rbrke: "\u298C",
        rbrksld: "\u298E",
        rbrkslu: "\u2990",
        Rcaron: "\u0158",
        rcaron: "\u0159",
        Rcedil: "\u0156",
        rcedil: "\u0157",
        rceil: "\u2309",
        rcub: "}",
        Rcy: "\u0420",
        rcy: "\u0440",
        rdca: "\u2937",
        rdldhar: "\u2969",
        rdquo: "\u201D",
        rdquor: "\u201D",
        rdsh: "\u21B3",
        real: "\u211C",
        realine: "\u211B",
        realpart: "\u211C",
        reals: "\u211D",
        Re: "\u211C",
        rect: "\u25AD",
        reg: "\xAE",
        REG: "\xAE",
        ReverseElement: "\u220B",
        ReverseEquilibrium: "\u21CB",
        ReverseUpEquilibrium: "\u296F",
        rfisht: "\u297D",
        rfloor: "\u230B",
        rfr: "\uD835\uDD2F",
        Rfr: "\u211C",
        rHar: "\u2964",
        rhard: "\u21C1",
        rharu: "\u21C0",
        rharul: "\u296C",
        Rho: "\u03A1",
        rho: "\u03C1",
        rhov: "\u03F1",
        RightAngleBracket: "\u27E9",
        RightArrowBar: "\u21E5",
        rightarrow: "\u2192",
        RightArrow: "\u2192",
        Rightarrow: "\u21D2",
        RightArrowLeftArrow: "\u21C4",
        rightarrowtail: "\u21A3",
        RightCeiling: "\u2309",
        RightDoubleBracket: "\u27E7",
        RightDownTeeVector: "\u295D",
        RightDownVectorBar: "\u2955",
        RightDownVector: "\u21C2",
        RightFloor: "\u230B",
        rightharpoondown: "\u21C1",
        rightharpoonup: "\u21C0",
        rightleftarrows: "\u21C4",
        rightleftharpoons: "\u21CC",
        rightrightarrows: "\u21C9",
        rightsquigarrow: "\u219D",
        RightTeeArrow: "\u21A6",
        RightTee: "\u22A2",
        RightTeeVector: "\u295B",
        rightthreetimes: "\u22CC",
        RightTriangleBar: "\u29D0",
        RightTriangle: "\u22B3",
        RightTriangleEqual: "\u22B5",
        RightUpDownVector: "\u294F",
        RightUpTeeVector: "\u295C",
        RightUpVectorBar: "\u2954",
        RightUpVector: "\u21BE",
        RightVectorBar: "\u2953",
        RightVector: "\u21C0",
        ring: "\u02DA",
        risingdotseq: "\u2253",
        rlarr: "\u21C4",
        rlhar: "\u21CC",
        rlm: "\u200F",
        rmoustache: "\u23B1",
        rmoust: "\u23B1",
        rnmid: "\u2AEE",
        roang: "\u27ED",
        roarr: "\u21FE",
        robrk: "\u27E7",
        ropar: "\u2986",
        ropf: "\uD835\uDD63",
        Ropf: "\u211D",
        roplus: "\u2A2E",
        rotimes: "\u2A35",
        RoundImplies: "\u2970",
        rpar: ")",
        rpargt: "\u2994",
        rppolint: "\u2A12",
        rrarr: "\u21C9",
        Rrightarrow: "\u21DB",
        rsaquo: "\u203A",
        rscr: "\uD835\uDCC7",
        Rscr: "\u211B",
        rsh: "\u21B1",
        Rsh: "\u21B1",
        rsqb: "]",
        rsquo: "\u2019",
        rsquor: "\u2019",
        rthree: "\u22CC",
        rtimes: "\u22CA",
        rtri: "\u25B9",
        rtrie: "\u22B5",
        rtrif: "\u25B8",
        rtriltri: "\u29CE",
        RuleDelayed: "\u29F4",
        ruluhar: "\u2968",
        rx: "\u211E",
        Sacute: "\u015A",
        sacute: "\u015B",
        sbquo: "\u201A",
        scap: "\u2AB8",
        Scaron: "\u0160",
        scaron: "\u0161",
        Sc: "\u2ABC",
        sc: "\u227B",
        sccue: "\u227D",
        sce: "\u2AB0",
        scE: "\u2AB4",
        Scedil: "\u015E",
        scedil: "\u015F",
        Scirc: "\u015C",
        scirc: "\u015D",
        scnap: "\u2ABA",
        scnE: "\u2AB6",
        scnsim: "\u22E9",
        scpolint: "\u2A13",
        scsim: "\u227F",
        Scy: "\u0421",
        scy: "\u0441",
        sdotb: "\u22A1",
        sdot: "\u22C5",
        sdote: "\u2A66",
        searhk: "\u2925",
        searr: "\u2198",
        seArr: "\u21D8",
        searrow: "\u2198",
        sect: "\xA7",
        semi: ";",
        seswar: "\u2929",
        setminus: "\u2216",
        setmn: "\u2216",
        sext: "\u2736",
        Sfr: "\uD835\uDD16",
        sfr: "\uD835\uDD30",
        sfrown: "\u2322",
        sharp: "\u266F",
        SHCHcy: "\u0429",
        shchcy: "\u0449",
        SHcy: "\u0428",
        shcy: "\u0448",
        ShortDownArrow: "\u2193",
        ShortLeftArrow: "\u2190",
        shortmid: "\u2223",
        shortparallel: "\u2225",
        ShortRightArrow: "\u2192",
        ShortUpArrow: "\u2191",
        shy: "\xAD",
        Sigma: "\u03A3",
        sigma: "\u03C3",
        sigmaf: "\u03C2",
        sigmav: "\u03C2",
        sim: "\u223C",
        simdot: "\u2A6A",
        sime: "\u2243",
        simeq: "\u2243",
        simg: "\u2A9E",
        simgE: "\u2AA0",
        siml: "\u2A9D",
        simlE: "\u2A9F",
        simne: "\u2246",
        simplus: "\u2A24",
        simrarr: "\u2972",
        slarr: "\u2190",
        SmallCircle: "\u2218",
        smallsetminus: "\u2216",
        smashp: "\u2A33",
        smeparsl: "\u29E4",
        smid: "\u2223",
        smile: "\u2323",
        smt: "\u2AAA",
        smte: "\u2AAC",
        smtes: "\u2AAC\uFE00",
        SOFTcy: "\u042C",
        softcy: "\u044C",
        solbar: "\u233F",
        solb: "\u29C4",
        sol: "/",
        Sopf: "\uD835\uDD4A",
        sopf: "\uD835\uDD64",
        spades: "\u2660",
        spadesuit: "\u2660",
        spar: "\u2225",
        sqcap: "\u2293",
        sqcaps: "\u2293\uFE00",
        sqcup: "\u2294",
        sqcups: "\u2294\uFE00",
        Sqrt: "\u221A",
        sqsub: "\u228F",
        sqsube: "\u2291",
        sqsubset: "\u228F",
        sqsubseteq: "\u2291",
        sqsup: "\u2290",
        sqsupe: "\u2292",
        sqsupset: "\u2290",
        sqsupseteq: "\u2292",
        square: "\u25A1",
        Square: "\u25A1",
        SquareIntersection: "\u2293",
        SquareSubset: "\u228F",
        SquareSubsetEqual: "\u2291",
        SquareSuperset: "\u2290",
        SquareSupersetEqual: "\u2292",
        SquareUnion: "\u2294",
        squarf: "\u25AA",
        squ: "\u25A1",
        squf: "\u25AA",
        srarr: "\u2192",
        Sscr: "\uD835\uDCAE",
        sscr: "\uD835\uDCC8",
        ssetmn: "\u2216",
        ssmile: "\u2323",
        sstarf: "\u22C6",
        Star: "\u22C6",
        star: "\u2606",
        starf: "\u2605",
        straightepsilon: "\u03F5",
        straightphi: "\u03D5",
        strns: "\xAF",
        sub: "\u2282",
        Sub: "\u22D0",
        subdot: "\u2ABD",
        subE: "\u2AC5",
        sube: "\u2286",
        subedot: "\u2AC3",
        submult: "\u2AC1",
        subnE: "\u2ACB",
        subne: "\u228A",
        subplus: "\u2ABF",
        subrarr: "\u2979",
        subset: "\u2282",
        Subset: "\u22D0",
        subseteq: "\u2286",
        subseteqq: "\u2AC5",
        SubsetEqual: "\u2286",
        subsetneq: "\u228A",
        subsetneqq: "\u2ACB",
        subsim: "\u2AC7",
        subsub: "\u2AD5",
        subsup: "\u2AD3",
        succapprox: "\u2AB8",
        succ: "\u227B",
        succcurlyeq: "\u227D",
        Succeeds: "\u227B",
        SucceedsEqual: "\u2AB0",
        SucceedsSlantEqual: "\u227D",
        SucceedsTilde: "\u227F",
        succeq: "\u2AB0",
        succnapprox: "\u2ABA",
        succneqq: "\u2AB6",
        succnsim: "\u22E9",
        succsim: "\u227F",
        SuchThat: "\u220B",
        sum: "\u2211",
        Sum: "\u2211",
        sung: "\u266A",
        sup1: "\xB9",
        sup2: "\xB2",
        sup3: "\xB3",
        sup: "\u2283",
        Sup: "\u22D1",
        supdot: "\u2ABE",
        supdsub: "\u2AD8",
        supE: "\u2AC6",
        supe: "\u2287",
        supedot: "\u2AC4",
        Superset: "\u2283",
        SupersetEqual: "\u2287",
        suphsol: "\u27C9",
        suphsub: "\u2AD7",
        suplarr: "\u297B",
        supmult: "\u2AC2",
        supnE: "\u2ACC",
        supne: "\u228B",
        supplus: "\u2AC0",
        supset: "\u2283",
        Supset: "\u22D1",
        supseteq: "\u2287",
        supseteqq: "\u2AC6",
        supsetneq: "\u228B",
        supsetneqq: "\u2ACC",
        supsim: "\u2AC8",
        supsub: "\u2AD4",
        supsup: "\u2AD6",
        swarhk: "\u2926",
        swarr: "\u2199",
        swArr: "\u21D9",
        swarrow: "\u2199",
        swnwar: "\u292A",
        szlig: "\xDF",
        Tab: "	",
        target: "\u2316",
        Tau: "\u03A4",
        tau: "\u03C4",
        tbrk: "\u23B4",
        Tcaron: "\u0164",
        tcaron: "\u0165",
        Tcedil: "\u0162",
        tcedil: "\u0163",
        Tcy: "\u0422",
        tcy: "\u0442",
        tdot: "\u20DB",
        telrec: "\u2315",
        Tfr: "\uD835\uDD17",
        tfr: "\uD835\uDD31",
        there4: "\u2234",
        therefore: "\u2234",
        Therefore: "\u2234",
        Theta: "\u0398",
        theta: "\u03B8",
        thetasym: "\u03D1",
        thetav: "\u03D1",
        thickapprox: "\u2248",
        thicksim: "\u223C",
        ThickSpace: "\u205F\u200A",
        ThinSpace: "\u2009",
        thinsp: "\u2009",
        thkap: "\u2248",
        thksim: "\u223C",
        THORN: "\xDE",
        thorn: "\xFE",
        tilde: "\u02DC",
        Tilde: "\u223C",
        TildeEqual: "\u2243",
        TildeFullEqual: "\u2245",
        TildeTilde: "\u2248",
        timesbar: "\u2A31",
        timesb: "\u22A0",
        times: "\xD7",
        timesd: "\u2A30",
        tint: "\u222D",
        toea: "\u2928",
        topbot: "\u2336",
        topcir: "\u2AF1",
        top: "\u22A4",
        Topf: "\uD835\uDD4B",
        topf: "\uD835\uDD65",
        topfork: "\u2ADA",
        tosa: "\u2929",
        tprime: "\u2034",
        trade: "\u2122",
        TRADE: "\u2122",
        triangle: "\u25B5",
        triangledown: "\u25BF",
        triangleleft: "\u25C3",
        trianglelefteq: "\u22B4",
        triangleq: "\u225C",
        triangleright: "\u25B9",
        trianglerighteq: "\u22B5",
        tridot: "\u25EC",
        trie: "\u225C",
        triminus: "\u2A3A",
        TripleDot: "\u20DB",
        triplus: "\u2A39",
        trisb: "\u29CD",
        tritime: "\u2A3B",
        trpezium: "\u23E2",
        Tscr: "\uD835\uDCAF",
        tscr: "\uD835\uDCC9",
        TScy: "\u0426",
        tscy: "\u0446",
        TSHcy: "\u040B",
        tshcy: "\u045B",
        Tstrok: "\u0166",
        tstrok: "\u0167",
        twixt: "\u226C",
        twoheadleftarrow: "\u219E",
        twoheadrightarrow: "\u21A0",
        Uacute: "\xDA",
        uacute: "\xFA",
        uarr: "\u2191",
        Uarr: "\u219F",
        uArr: "\u21D1",
        Uarrocir: "\u2949",
        Ubrcy: "\u040E",
        ubrcy: "\u045E",
        Ubreve: "\u016C",
        ubreve: "\u016D",
        Ucirc: "\xDB",
        ucirc: "\xFB",
        Ucy: "\u0423",
        ucy: "\u0443",
        udarr: "\u21C5",
        Udblac: "\u0170",
        udblac: "\u0171",
        udhar: "\u296E",
        ufisht: "\u297E",
        Ufr: "\uD835\uDD18",
        ufr: "\uD835\uDD32",
        Ugrave: "\xD9",
        ugrave: "\xF9",
        uHar: "\u2963",
        uharl: "\u21BF",
        uharr: "\u21BE",
        uhblk: "\u2580",
        ulcorn: "\u231C",
        ulcorner: "\u231C",
        ulcrop: "\u230F",
        ultri: "\u25F8",
        Umacr: "\u016A",
        umacr: "\u016B",
        uml: "\xA8",
        UnderBar: "_",
        UnderBrace: "\u23DF",
        UnderBracket: "\u23B5",
        UnderParenthesis: "\u23DD",
        Union: "\u22C3",
        UnionPlus: "\u228E",
        Uogon: "\u0172",
        uogon: "\u0173",
        Uopf: "\uD835\uDD4C",
        uopf: "\uD835\uDD66",
        UpArrowBar: "\u2912",
        uparrow: "\u2191",
        UpArrow: "\u2191",
        Uparrow: "\u21D1",
        UpArrowDownArrow: "\u21C5",
        updownarrow: "\u2195",
        UpDownArrow: "\u2195",
        Updownarrow: "\u21D5",
        UpEquilibrium: "\u296E",
        upharpoonleft: "\u21BF",
        upharpoonright: "\u21BE",
        uplus: "\u228E",
        UpperLeftArrow: "\u2196",
        UpperRightArrow: "\u2197",
        upsi: "\u03C5",
        Upsi: "\u03D2",
        upsih: "\u03D2",
        Upsilon: "\u03A5",
        upsilon: "\u03C5",
        UpTeeArrow: "\u21A5",
        UpTee: "\u22A5",
        upuparrows: "\u21C8",
        urcorn: "\u231D",
        urcorner: "\u231D",
        urcrop: "\u230E",
        Uring: "\u016E",
        uring: "\u016F",
        urtri: "\u25F9",
        Uscr: "\uD835\uDCB0",
        uscr: "\uD835\uDCCA",
        utdot: "\u22F0",
        Utilde: "\u0168",
        utilde: "\u0169",
        utri: "\u25B5",
        utrif: "\u25B4",
        uuarr: "\u21C8",
        Uuml: "\xDC",
        uuml: "\xFC",
        uwangle: "\u29A7",
        vangrt: "\u299C",
        varepsilon: "\u03F5",
        varkappa: "\u03F0",
        varnothing: "\u2205",
        varphi: "\u03D5",
        varpi: "\u03D6",
        varpropto: "\u221D",
        varr: "\u2195",
        vArr: "\u21D5",
        varrho: "\u03F1",
        varsigma: "\u03C2",
        varsubsetneq: "\u228A\uFE00",
        varsubsetneqq: "\u2ACB\uFE00",
        varsupsetneq: "\u228B\uFE00",
        varsupsetneqq: "\u2ACC\uFE00",
        vartheta: "\u03D1",
        vartriangleleft: "\u22B2",
        vartriangleright: "\u22B3",
        vBar: "\u2AE8",
        Vbar: "\u2AEB",
        vBarv: "\u2AE9",
        Vcy: "\u0412",
        vcy: "\u0432",
        vdash: "\u22A2",
        vDash: "\u22A8",
        Vdash: "\u22A9",
        VDash: "\u22AB",
        Vdashl: "\u2AE6",
        veebar: "\u22BB",
        vee: "\u2228",
        Vee: "\u22C1",
        veeeq: "\u225A",
        vellip: "\u22EE",
        verbar: "|",
        Verbar: "\u2016",
        vert: "|",
        Vert: "\u2016",
        VerticalBar: "\u2223",
        VerticalLine: "|",
        VerticalSeparator: "\u2758",
        VerticalTilde: "\u2240",
        VeryThinSpace: "\u200A",
        Vfr: "\uD835\uDD19",
        vfr: "\uD835\uDD33",
        vltri: "\u22B2",
        vnsub: "\u2282\u20D2",
        vnsup: "\u2283\u20D2",
        Vopf: "\uD835\uDD4D",
        vopf: "\uD835\uDD67",
        vprop: "\u221D",
        vrtri: "\u22B3",
        Vscr: "\uD835\uDCB1",
        vscr: "\uD835\uDCCB",
        vsubnE: "\u2ACB\uFE00",
        vsubne: "\u228A\uFE00",
        vsupnE: "\u2ACC\uFE00",
        vsupne: "\u228B\uFE00",
        Vvdash: "\u22AA",
        vzigzag: "\u299A",
        Wcirc: "\u0174",
        wcirc: "\u0175",
        wedbar: "\u2A5F",
        wedge: "\u2227",
        Wedge: "\u22C0",
        wedgeq: "\u2259",
        weierp: "\u2118",
        Wfr: "\uD835\uDD1A",
        wfr: "\uD835\uDD34",
        Wopf: "\uD835\uDD4E",
        wopf: "\uD835\uDD68",
        wp: "\u2118",
        wr: "\u2240",
        wreath: "\u2240",
        Wscr: "\uD835\uDCB2",
        wscr: "\uD835\uDCCC",
        xcap: "\u22C2",
        xcirc: "\u25EF",
        xcup: "\u22C3",
        xdtri: "\u25BD",
        Xfr: "\uD835\uDD1B",
        xfr: "\uD835\uDD35",
        xharr: "\u27F7",
        xhArr: "\u27FA",
        Xi: "\u039E",
        xi: "\u03BE",
        xlarr: "\u27F5",
        xlArr: "\u27F8",
        xmap: "\u27FC",
        xnis: "\u22FB",
        xodot: "\u2A00",
        Xopf: "\uD835\uDD4F",
        xopf: "\uD835\uDD69",
        xoplus: "\u2A01",
        xotime: "\u2A02",
        xrarr: "\u27F6",
        xrArr: "\u27F9",
        Xscr: "\uD835\uDCB3",
        xscr: "\uD835\uDCCD",
        xsqcup: "\u2A06",
        xuplus: "\u2A04",
        xutri: "\u25B3",
        xvee: "\u22C1",
        xwedge: "\u22C0",
        Yacute: "\xDD",
        yacute: "\xFD",
        YAcy: "\u042F",
        yacy: "\u044F",
        Ycirc: "\u0176",
        ycirc: "\u0177",
        Ycy: "\u042B",
        ycy: "\u044B",
        yen: "\xA5",
        Yfr: "\uD835\uDD1C",
        yfr: "\uD835\uDD36",
        YIcy: "\u0407",
        yicy: "\u0457",
        Yopf: "\uD835\uDD50",
        yopf: "\uD835\uDD6A",
        Yscr: "\uD835\uDCB4",
        yscr: "\uD835\uDCCE",
        YUcy: "\u042E",
        yucy: "\u044E",
        yuml: "\xFF",
        Yuml: "\u0178",
        Zacute: "\u0179",
        zacute: "\u017A",
        Zcaron: "\u017D",
        zcaron: "\u017E",
        Zcy: "\u0417",
        zcy: "\u0437",
        Zdot: "\u017B",
        zdot: "\u017C",
        zeetrf: "\u2128",
        ZeroWidthSpace: "\u200B",
        Zeta: "\u0396",
        zeta: "\u03B6",
        zfr: "\uD835\uDD37",
        Zfr: "\u2128",
        ZHcy: "\u0416",
        zhcy: "\u0436",
        zigrarr: "\u21DD",
        zopf: "\uD835\uDD6B",
        Zopf: "\u2124",
        Zscr: "\uD835\uDCB5",
        zscr: "\uD835\uDCCF",
        zwj: "\u200D",
        zwnj: "\u200C"
      };
    }
  });

  // node_modules/markdown-it/lib/common/entities.js
  var require_entities2 = __commonJS({
    "node_modules/markdown-it/lib/common/entities.js": function node_modules_markdownIt_lib_common_entitiesJs(exports, module) {

      module.exports = require_entities();
    }
  });

  // node_modules/uc.micro/categories/P/regex.js
  var require_regex = __commonJS({
    "node_modules/uc.micro/categories/P/regex.js": function node_modules_ucMicro_categories_P_regexJs(exports, module) {
      module.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
    }
  });

  // node_modules/mdurl/encode.js
  var require_encode = __commonJS({
    "node_modules/mdurl/encode.js": function node_modules_mdurl_encodeJs(exports, module) {

      var encodeCache = {};
      function getEncodeCache(exclude) {
        var i,
          ch,
          cache = encodeCache[exclude];
        if (cache) {
          return cache;
        }
        cache = encodeCache[exclude] = [];
        for (i = 0; i < 128; i++) {
          ch = String.fromCharCode(i);
          if (/^[0-9a-z]$/i.test(ch)) {
            cache.push(ch);
          } else {
            cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
          }
        }
        for (i = 0; i < exclude.length; i++) {
          cache[exclude.charCodeAt(i)] = exclude[i];
        }
        return cache;
      }
      function encode(string, exclude, keepEscaped) {
        var i,
          l,
          code2,
          nextCode,
          cache,
          result = "";
        if (typeof exclude !== "string") {
          keepEscaped = exclude;
          exclude = encode.defaultChars;
        }
        if (typeof keepEscaped === "undefined") {
          keepEscaped = true;
        }
        cache = getEncodeCache(exclude);
        for (i = 0, l = string.length; i < l; i++) {
          code2 = string.charCodeAt(i);
          if (keepEscaped && code2 === 37 && i + 2 < l) {
            if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
              result += string.slice(i, i + 3);
              i += 2;
              continue;
            }
          }
          if (code2 < 128) {
            result += cache[code2];
            continue;
          }
          if (code2 >= 55296 && code2 <= 57343) {
            if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {
              nextCode = string.charCodeAt(i + 1);
              if (nextCode >= 56320 && nextCode <= 57343) {
                result += encodeURIComponent(string[i] + string[i + 1]);
                i++;
                continue;
              }
            }
            result += "%EF%BF%BD";
            continue;
          }
          result += encodeURIComponent(string[i]);
        }
        return result;
      }
      encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
      encode.componentChars = "-_.!~*'()";
      module.exports = encode;
    }
  });

  // node_modules/mdurl/decode.js
  var require_decode = __commonJS({
    "node_modules/mdurl/decode.js": function node_modules_mdurl_decodeJs(exports, module) {

      var decodeCache = {};
      function getDecodeCache(exclude) {
        var i,
          ch,
          cache = decodeCache[exclude];
        if (cache) {
          return cache;
        }
        cache = decodeCache[exclude] = [];
        for (i = 0; i < 128; i++) {
          ch = String.fromCharCode(i);
          cache.push(ch);
        }
        for (i = 0; i < exclude.length; i++) {
          ch = exclude.charCodeAt(i);
          cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
        }
        return cache;
      }
      function decode(string, exclude) {
        var cache;
        if (typeof exclude !== "string") {
          exclude = decode.defaultChars;
        }
        cache = getDecodeCache(exclude);
        return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
          var i,
            l,
            b1,
            b2,
            b3,
            b4,
            chr,
            result = "";
          for (i = 0, l = seq.length; i < l; i += 3) {
            b1 = parseInt(seq.slice(i + 1, i + 3), 16);
            if (b1 < 128) {
              result += cache[b1];
              continue;
            }
            if ((b1 & 224) === 192 && i + 3 < l) {
              b2 = parseInt(seq.slice(i + 4, i + 6), 16);
              if ((b2 & 192) === 128) {
                chr = b1 << 6 & 1984 | b2 & 63;
                if (chr < 128) {
                  result += "\uFFFD\uFFFD";
                } else {
                  result += String.fromCharCode(chr);
                }
                i += 3;
                continue;
              }
            }
            if ((b1 & 240) === 224 && i + 6 < l) {
              b2 = parseInt(seq.slice(i + 4, i + 6), 16);
              b3 = parseInt(seq.slice(i + 7, i + 9), 16);
              if ((b2 & 192) === 128 && (b3 & 192) === 128) {
                chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
                if (chr < 2048 || chr >= 55296 && chr <= 57343) {
                  result += "\uFFFD\uFFFD\uFFFD";
                } else {
                  result += String.fromCharCode(chr);
                }
                i += 6;
                continue;
              }
            }
            if ((b1 & 248) === 240 && i + 9 < l) {
              b2 = parseInt(seq.slice(i + 4, i + 6), 16);
              b3 = parseInt(seq.slice(i + 7, i + 9), 16);
              b4 = parseInt(seq.slice(i + 10, i + 12), 16);
              if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
                chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
                if (chr < 65536 || chr > 1114111) {
                  result += "\uFFFD\uFFFD\uFFFD\uFFFD";
                } else {
                  chr -= 65536;
                  result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
                }
                i += 9;
                continue;
              }
            }
            result += "\uFFFD";
          }
          return result;
        });
      }
      decode.defaultChars = ";/?:@&=+$,#";
      decode.componentChars = "";
      module.exports = decode;
    }
  });

  // node_modules/mdurl/format.js
  var require_format = __commonJS({
    "node_modules/mdurl/format.js": function node_modules_mdurl_formatJs(exports, module) {

      module.exports = function format2(url) {
        var result = "";
        result += url.protocol || "";
        result += url.slashes ? "//" : "";
        result += url.auth ? url.auth + "@" : "";
        if (url.hostname && url.hostname.indexOf(":") !== -1) {
          result += "[" + url.hostname + "]";
        } else {
          result += url.hostname || "";
        }
        result += url.port ? ":" + url.port : "";
        result += url.pathname || "";
        result += url.search || "";
        result += url.hash || "";
        return result;
      };
    }
  });

  // node_modules/mdurl/parse.js
  var require_parse = __commonJS({
    "node_modules/mdurl/parse.js": function node_modules_mdurl_parseJs(exports, module) {

      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.pathname = null;
      }
      var protocolPattern = /^([a-z0-9.+-]+:)/i;
      var portPattern = /:[0-9]*$/;
      var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
      var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
      var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
      var autoEscape = ["'"].concat(unwise);
      var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
      var hostEndingChars = ["/", "?", "#"];
      var hostnameMaxLen = 255;
      var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
      var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
      var hostlessProtocol = {
        "javascript": true,
        "javascript:": true
      };
      var slashedProtocol = {
        "http": true,
        "https": true,
        "ftp": true,
        "gopher": true,
        "file": true,
        "http:": true,
        "https:": true,
        "ftp:": true,
        "gopher:": true,
        "file:": true
      };
      function urlParse(url, slashesDenoteHost) {
        if (url && url instanceof Url) {
          return url;
        }
        var u = new Url();
        u.parse(url, slashesDenoteHost);
        return u;
      }
      Url.prototype.parse = function (url, slashesDenoteHost) {
        var i,
          l,
          lowerProto,
          hec,
          slashes,
          rest = url;
        rest = rest.trim();
        if (!slashesDenoteHost && url.split("#").length === 1) {
          var simplePath = simplePathPattern.exec(rest);
          if (simplePath) {
            this.pathname = simplePath[1];
            if (simplePath[2]) {
              this.search = simplePath[2];
            }
            return this;
          }
        }
        var proto = protocolPattern.exec(rest);
        if (proto) {
          proto = proto[0];
          lowerProto = proto.toLowerCase();
          this.protocol = proto;
          rest = rest.substr(proto.length);
        }
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          slashes = rest.substr(0, 2) === "//";
          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }
        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
          var hostEnd = -1;
          for (i = 0; i < hostEndingChars.length; i++) {
            hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          var auth, atSign;
          if (hostEnd === -1) {
            atSign = rest.lastIndexOf("@");
          } else {
            atSign = rest.lastIndexOf("@", hostEnd);
          }
          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = auth;
          }
          hostEnd = -1;
          for (i = 0; i < nonHostChars.length; i++) {
            hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          if (hostEnd === -1) {
            hostEnd = rest.length;
          }
          if (rest[hostEnd - 1] === ":") {
            hostEnd--;
          }
          var host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);
          this.parseHost(host);
          this.hostname = this.hostname || "";
          var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for (i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) {
                continue;
              }
              if (!part.match(hostnamePartPattern)) {
                var newpart = "";
                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    newpart += "x";
                  } else {
                    newpart += part[j];
                  }
                }
                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);
                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }
                  if (notHost.length) {
                    rest = notHost.join(".") + rest;
                  }
                  this.hostname = validParts.join(".");
                  break;
                }
              }
            }
          }
          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = "";
          }
          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          }
        }
        var hash = rest.indexOf("#");
        if (hash !== -1) {
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf("?");
        if (qm !== -1) {
          this.search = rest.substr(qm);
          rest = rest.slice(0, qm);
        }
        if (rest) {
          this.pathname = rest;
        }
        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = "";
        }
        return this;
      };
      Url.prototype.parseHost = function (host) {
        var port = portPattern.exec(host);
        if (port) {
          port = port[0];
          if (port !== ":") {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host) {
          this.hostname = host;
        }
      };
      module.exports = urlParse;
    }
  });

  // node_modules/mdurl/index.js
  var require_mdurl = __commonJS({
    "node_modules/mdurl/index.js": function node_modules_mdurl_indexJs(exports, module) {

      module.exports.encode = require_encode();
      module.exports.decode = require_decode();
      module.exports.format = require_format();
      module.exports.parse = require_parse();
    }
  });

  // node_modules/uc.micro/properties/Any/regex.js
  var require_regex2 = __commonJS({
    "node_modules/uc.micro/properties/Any/regex.js": function node_modules_ucMicro_properties_Any_regexJs(exports, module) {
      module.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    }
  });

  // node_modules/uc.micro/categories/Cc/regex.js
  var require_regex3 = __commonJS({
    "node_modules/uc.micro/categories/Cc/regex.js": function node_modules_ucMicro_categories_Cc_regexJs(exports, module) {
      module.exports = /[\0-\x1F\x7F-\x9F]/;
    }
  });

  // node_modules/uc.micro/categories/Cf/regex.js
  var require_regex4 = __commonJS({
    "node_modules/uc.micro/categories/Cf/regex.js": function node_modules_ucMicro_categories_Cf_regexJs(exports, module) {
      module.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
    }
  });

  // node_modules/uc.micro/categories/Z/regex.js
  var require_regex5 = __commonJS({
    "node_modules/uc.micro/categories/Z/regex.js": function node_modules_ucMicro_categories_Z_regexJs(exports, module) {
      module.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    }
  });

  // node_modules/uc.micro/index.js
  var require_uc = __commonJS({
    "node_modules/uc.micro/index.js": function node_modules_ucMicro_indexJs(exports) {

      exports.Any = require_regex2();
      exports.Cc = require_regex3();
      exports.Cf = require_regex4();
      exports.P = require_regex();
      exports.Z = require_regex5();
    }
  });

  // node_modules/markdown-it/lib/common/utils.js
  var require_utils = __commonJS({
    "node_modules/markdown-it/lib/common/utils.js": function node_modules_markdownIt_lib_common_utilsJs(exports) {

      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      function isString(obj) {
        return _class(obj) === "[object String]";
      }
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      function has(object, key) {
        return _hasOwnProperty.call(object, key);
      }
      function assign(obj) {
        var sources = Array.prototype.slice.call(arguments, 1);
        sources.forEach(function (source) {
          if (!source) {
            return;
          }
          if (_typeof$1(source) !== "object") {
            throw new TypeError(source + "must be object");
          }
          Object.keys(source).forEach(function (key) {
            obj[key] = source[key];
          });
        });
        return obj;
      }
      function arrayReplaceAt(src, pos, newElements) {
        return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
      }
      function isValidEntityCode(c) {
        if (c >= 55296 && c <= 57343) {
          return false;
        }
        if (c >= 64976 && c <= 65007) {
          return false;
        }
        if ((c & 65535) === 65535 || (c & 65535) === 65534) {
          return false;
        }
        if (c >= 0 && c <= 8) {
          return false;
        }
        if (c === 11) {
          return false;
        }
        if (c >= 14 && c <= 31) {
          return false;
        }
        if (c >= 127 && c <= 159) {
          return false;
        }
        if (c > 1114111) {
          return false;
        }
        return true;
      }
      function fromCodePoint(c) {
        if (c > 65535) {
          c -= 65536;
          var surrogate1 = 55296 + (c >> 10),
            surrogate2 = 56320 + (c & 1023);
          return String.fromCharCode(surrogate1, surrogate2);
        }
        return String.fromCharCode(c);
      }
      var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
      var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
      var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
      var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
      var entities = require_entities2();
      function replaceEntityPattern(match, name) {
        var code2 = 0;
        if (has(entities, name)) {
          return entities[name];
        }
        if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
          code2 = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
          if (isValidEntityCode(code2)) {
            return fromCodePoint(code2);
          }
        }
        return match;
      }
      function unescapeMd(str) {
        if (str.indexOf("\\") < 0) {
          return str;
        }
        return str.replace(UNESCAPE_MD_RE, "$1");
      }
      function unescapeAll(str) {
        if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
          return str;
        }
        return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
          if (escaped) {
            return escaped;
          }
          return replaceEntityPattern(match, entity);
        });
      }
      var HTML_ESCAPE_TEST_RE = /[&<>"]/;
      var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
      var HTML_REPLACEMENTS = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;"
      };
      function replaceUnsafeChar(ch) {
        return HTML_REPLACEMENTS[ch];
      }
      function escapeHtml2(str) {
        if (HTML_ESCAPE_TEST_RE.test(str)) {
          return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
        }
        return str;
      }
      var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
      function escapeRE(str) {
        return str.replace(REGEXP_ESCAPE_RE, "\\$&");
      }
      function isSpace(code2) {
        switch (code2) {
          case 9:
          case 32:
            return true;
        }
        return false;
      }
      function isWhiteSpace(code2) {
        if (code2 >= 8192 && code2 <= 8202) {
          return true;
        }
        switch (code2) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 160:
          case 5760:
          case 8239:
          case 8287:
          case 12288:
            return true;
        }
        return false;
      }
      var UNICODE_PUNCT_RE = require_regex();
      function isPunctChar(ch) {
        return UNICODE_PUNCT_RE.test(ch);
      }
      function isMdAsciiPunct(ch) {
        switch (ch) {
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 123:
          case 124:
          case 125:
          case 126:
            return true;
          default:
            return false;
        }
      }
      function normalizeReference(str) {
        str = str.trim().replace(/\s+/g, " ");
        if ("\u1E9E".toLowerCase() === "\u1E7E") {
          str = str.replace(/ẞ/g, "\xDF");
        }
        return str.toLowerCase().toUpperCase();
      }
      exports.lib = {};
      exports.lib.mdurl = require_mdurl();
      exports.lib.ucmicro = require_uc();
      exports.assign = assign;
      exports.isString = isString;
      exports.has = has;
      exports.unescapeMd = unescapeMd;
      exports.unescapeAll = unescapeAll;
      exports.isValidEntityCode = isValidEntityCode;
      exports.fromCodePoint = fromCodePoint;
      exports.escapeHtml = escapeHtml2;
      exports.arrayReplaceAt = arrayReplaceAt;
      exports.isSpace = isSpace;
      exports.isWhiteSpace = isWhiteSpace;
      exports.isMdAsciiPunct = isMdAsciiPunct;
      exports.isPunctChar = isPunctChar;
      exports.escapeRE = escapeRE;
      exports.normalizeReference = normalizeReference;
    }
  });

  // node_modules/markdown-it/lib/helpers/parse_link_label.js
  var require_parse_link_label = __commonJS({
    "node_modules/markdown-it/lib/helpers/parse_link_label.js": function node_modules_markdownIt_lib_helpers_parse_link_labelJs(exports, module) {

      module.exports = function parseLinkLabel(state, start, disableNested) {
        var level,
          found,
          marker,
          prevPos,
          labelEnd = -1,
          max2 = state.posMax,
          oldPos = state.pos;
        state.pos = start + 1;
        level = 1;
        while (state.pos < max2) {
          marker = state.src.charCodeAt(state.pos);
          if (marker === 93) {
            level--;
            if (level === 0) {
              found = true;
              break;
            }
          }
          prevPos = state.pos;
          state.md.inline.skipToken(state);
          if (marker === 91) {
            if (prevPos === state.pos - 1) {
              level++;
            } else if (disableNested) {
              state.pos = oldPos;
              return -1;
            }
          }
        }
        if (found) {
          labelEnd = state.pos;
        }
        state.pos = oldPos;
        return labelEnd;
      };
    }
  });

  // node_modules/markdown-it/lib/helpers/parse_link_destination.js
  var require_parse_link_destination = __commonJS({
    "node_modules/markdown-it/lib/helpers/parse_link_destination.js": function node_modules_markdownIt_lib_helpers_parse_link_destinationJs(exports, module) {

      var unescapeAll = require_utils().unescapeAll;
      module.exports = function parseLinkDestination(str, pos, max2) {
        var code2,
          level,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ""
          };
        if (str.charCodeAt(pos) === 60) {
          pos++;
          while (pos < max2) {
            code2 = str.charCodeAt(pos);
            if (code2 === 10) {
              return result;
            }
            if (code2 === 60) {
              return result;
            }
            if (code2 === 62) {
              result.pos = pos + 1;
              result.str = unescapeAll(str.slice(start + 1, pos));
              result.ok = true;
              return result;
            }
            if (code2 === 92 && pos + 1 < max2) {
              pos += 2;
              continue;
            }
            pos++;
          }
          return result;
        }
        level = 0;
        while (pos < max2) {
          code2 = str.charCodeAt(pos);
          if (code2 === 32) {
            break;
          }
          if (code2 < 32 || code2 === 127) {
            break;
          }
          if (code2 === 92 && pos + 1 < max2) {
            if (str.charCodeAt(pos + 1) === 32) {
              break;
            }
            pos += 2;
            continue;
          }
          if (code2 === 40) {
            level++;
            if (level > 32) {
              return result;
            }
          }
          if (code2 === 41) {
            if (level === 0) {
              break;
            }
            level--;
          }
          pos++;
        }
        if (start === pos) {
          return result;
        }
        if (level !== 0) {
          return result;
        }
        result.str = unescapeAll(str.slice(start, pos));
        result.lines = lines;
        result.pos = pos;
        result.ok = true;
        return result;
      };
    }
  });

  // node_modules/markdown-it/lib/helpers/parse_link_title.js
  var require_parse_link_title = __commonJS({
    "node_modules/markdown-it/lib/helpers/parse_link_title.js": function node_modules_markdownIt_lib_helpers_parse_link_titleJs(exports, module) {

      var unescapeAll = require_utils().unescapeAll;
      module.exports = function parseLinkTitle(str, pos, max2) {
        var code2,
          marker,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ""
          };
        if (pos >= max2) {
          return result;
        }
        marker = str.charCodeAt(pos);
        if (marker !== 34 && marker !== 39 && marker !== 40) {
          return result;
        }
        pos++;
        if (marker === 40) {
          marker = 41;
        }
        while (pos < max2) {
          code2 = str.charCodeAt(pos);
          if (code2 === marker) {
            result.pos = pos + 1;
            result.lines = lines;
            result.str = unescapeAll(str.slice(start + 1, pos));
            result.ok = true;
            return result;
          } else if (code2 === 40 && marker === 41) {
            return result;
          } else if (code2 === 10) {
            lines++;
          } else if (code2 === 92 && pos + 1 < max2) {
            pos++;
            if (str.charCodeAt(pos) === 10) {
              lines++;
            }
          }
          pos++;
        }
        return result;
      };
    }
  });

  // node_modules/markdown-it/lib/helpers/index.js
  var require_helpers = __commonJS({
    "node_modules/markdown-it/lib/helpers/index.js": function node_modules_markdownIt_lib_helpers_indexJs(exports) {

      exports.parseLinkLabel = require_parse_link_label();
      exports.parseLinkDestination = require_parse_link_destination();
      exports.parseLinkTitle = require_parse_link_title();
    }
  });

  // node_modules/markdown-it/lib/renderer.js
  var require_renderer = __commonJS({
    "node_modules/markdown-it/lib/renderer.js": function node_modules_markdownIt_lib_rendererJs(exports, module) {

      var assign = require_utils().assign;
      var unescapeAll = require_utils().unescapeAll;
      var escapeHtml2 = require_utils().escapeHtml;
      var default_rules = {};
      default_rules.code_inline = function (tokens, idx, options, env, slf) {
        var token = tokens[idx];
        return "<code" + slf.renderAttrs(token) + ">" + escapeHtml2(tokens[idx].content) + "</code>";
      };
      default_rules.code_block = function (tokens, idx, options, env, slf) {
        var token = tokens[idx];
        return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml2(tokens[idx].content) + "</code></pre>\n";
      };
      default_rules.fence = function (tokens, idx, options, env, slf) {
        var token = tokens[idx],
          info = token.info ? unescapeAll(token.info).trim() : "",
          langName = "",
          langAttrs = "",
          highlighted,
          i,
          arr,
          tmpAttrs,
          tmpToken;
        if (info) {
          arr = info.split(/(\s+)/g);
          langName = arr[0];
          langAttrs = arr.slice(2).join("");
        }
        if (options.highlight) {
          highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);
        } else {
          highlighted = escapeHtml2(token.content);
        }
        if (highlighted.indexOf("<pre") === 0) {
          return highlighted + "\n";
        }
        if (info) {
          i = token.attrIndex("class");
          tmpAttrs = token.attrs ? token.attrs.slice() : [];
          if (i < 0) {
            tmpAttrs.push(["class", options.langPrefix + langName]);
          } else {
            tmpAttrs[i] = tmpAttrs[i].slice();
            tmpAttrs[i][1] += " " + options.langPrefix + langName;
          }
          tmpToken = {
            attrs: tmpAttrs
          };
          return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
        }
        return "<pre><code" + slf.renderAttrs(token) + ">" + highlighted + "</code></pre>\n";
      };
      default_rules.image = function (tokens, idx, options, env, slf) {
        var token = tokens[idx];
        token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
        return slf.renderToken(tokens, idx, options);
      };
      default_rules.hardbreak = function (tokens, idx, options) {
        return options.xhtmlOut ? "<br />\n" : "<br>\n";
      };
      default_rules.softbreak = function (tokens, idx, options) {
        return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
      };
      default_rules.text = function (tokens, idx) {
        return escapeHtml2(tokens[idx].content);
      };
      default_rules.html_block = function (tokens, idx) {
        return tokens[idx].content;
      };
      default_rules.html_inline = function (tokens, idx) {
        return tokens[idx].content;
      };
      function Renderer() {
        this.rules = assign({}, default_rules);
      }
      Renderer.prototype.renderAttrs = function renderAttrs(token) {
        var i, l, result;
        if (!token.attrs) {
          return "";
        }
        result = "";
        for (i = 0, l = token.attrs.length; i < l; i++) {
          result += " " + escapeHtml2(token.attrs[i][0]) + '="' + escapeHtml2(token.attrs[i][1]) + '"';
        }
        return result;
      };
      Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
        var nextToken,
          result = "",
          needLf = false,
          token = tokens[idx];
        if (token.hidden) {
          return "";
        }
        if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
          result += "\n";
        }
        result += (token.nesting === -1 ? "</" : "<") + token.tag;
        result += this.renderAttrs(token);
        if (token.nesting === 0 && options.xhtmlOut) {
          result += " /";
        }
        if (token.block) {
          needLf = true;
          if (token.nesting === 1) {
            if (idx + 1 < tokens.length) {
              nextToken = tokens[idx + 1];
              if (nextToken.type === "inline" || nextToken.hidden) {
                needLf = false;
              } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
                needLf = false;
              }
            }
          }
        }
        result += needLf ? ">\n" : ">";
        return result;
      };
      Renderer.prototype.renderInline = function (tokens, options, env) {
        var type,
          result = "",
          rules = this.rules;
        for (var i = 0, len = tokens.length; i < len; i++) {
          type = tokens[i].type;
          if (typeof rules[type] !== "undefined") {
            result += rules[type](tokens, i, options, env, this);
          } else {
            result += this.renderToken(tokens, i, options);
          }
        }
        return result;
      };
      Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
        var result = "";
        for (var i = 0, len = tokens.length; i < len; i++) {
          if (tokens[i].type === "text") {
            result += tokens[i].content;
          } else if (tokens[i].type === "image") {
            result += this.renderInlineAsText(tokens[i].children, options, env);
          } else if (tokens[i].type === "softbreak") {
            result += "\n";
          }
        }
        return result;
      };
      Renderer.prototype.render = function (tokens, options, env) {
        var i,
          len,
          type,
          result = "",
          rules = this.rules;
        for (i = 0, len = tokens.length; i < len; i++) {
          type = tokens[i].type;
          if (type === "inline") {
            result += this.renderInline(tokens[i].children, options, env);
          } else if (typeof rules[type] !== "undefined") {
            result += rules[tokens[i].type](tokens, i, options, env, this);
          } else {
            result += this.renderToken(tokens, i, options, env);
          }
        }
        return result;
      };
      module.exports = Renderer;
    }
  });

  // node_modules/markdown-it/lib/ruler.js
  var require_ruler = __commonJS({
    "node_modules/markdown-it/lib/ruler.js": function node_modules_markdownIt_lib_rulerJs(exports, module) {

      function Ruler() {
        this.__rules__ = [];
        this.__cache__ = null;
      }
      Ruler.prototype.__find__ = function (name) {
        for (var i = 0; i < this.__rules__.length; i++) {
          if (this.__rules__[i].name === name) {
            return i;
          }
        }
        return -1;
      };
      Ruler.prototype.__compile__ = function () {
        var self = this;
        var chains = [""];
        self.__rules__.forEach(function (rule) {
          if (!rule.enabled) {
            return;
          }
          rule.alt.forEach(function (altName) {
            if (chains.indexOf(altName) < 0) {
              chains.push(altName);
            }
          });
        });
        self.__cache__ = {};
        chains.forEach(function (chain) {
          self.__cache__[chain] = [];
          self.__rules__.forEach(function (rule) {
            if (!rule.enabled) {
              return;
            }
            if (chain && rule.alt.indexOf(chain) < 0) {
              return;
            }
            self.__cache__[chain].push(rule.fn);
          });
        });
      };
      Ruler.prototype.at = function (name, fn, options) {
        var index = this.__find__(name);
        var opt = options || {};
        if (index === -1) {
          throw new Error("Parser rule not found: " + name);
        }
        this.__rules__[index].fn = fn;
        this.__rules__[index].alt = opt.alt || [];
        this.__cache__ = null;
      };
      Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
        var index = this.__find__(beforeName);
        var opt = options || {};
        if (index === -1) {
          throw new Error("Parser rule not found: " + beforeName);
        }
        this.__rules__.splice(index, 0, {
          name: ruleName,
          enabled: true,
          fn: fn,
          alt: opt.alt || []
        });
        this.__cache__ = null;
      };
      Ruler.prototype.after = function (afterName, ruleName, fn, options) {
        var index = this.__find__(afterName);
        var opt = options || {};
        if (index === -1) {
          throw new Error("Parser rule not found: " + afterName);
        }
        this.__rules__.splice(index + 1, 0, {
          name: ruleName,
          enabled: true,
          fn: fn,
          alt: opt.alt || []
        });
        this.__cache__ = null;
      };
      Ruler.prototype.push = function (ruleName, fn, options) {
        var opt = options || {};
        this.__rules__.push({
          name: ruleName,
          enabled: true,
          fn: fn,
          alt: opt.alt || []
        });
        this.__cache__ = null;
      };
      Ruler.prototype.enable = function (list2, ignoreInvalid) {
        if (!Array.isArray(list2)) {
          list2 = [list2];
        }
        var result = [];
        list2.forEach(function (name) {
          var idx = this.__find__(name);
          if (idx < 0) {
            if (ignoreInvalid) {
              return;
            }
            throw new Error("Rules manager: invalid rule name " + name);
          }
          this.__rules__[idx].enabled = true;
          result.push(name);
        }, this);
        this.__cache__ = null;
        return result;
      };
      Ruler.prototype.enableOnly = function (list2, ignoreInvalid) {
        if (!Array.isArray(list2)) {
          list2 = [list2];
        }
        this.__rules__.forEach(function (rule) {
          rule.enabled = false;
        });
        this.enable(list2, ignoreInvalid);
      };
      Ruler.prototype.disable = function (list2, ignoreInvalid) {
        if (!Array.isArray(list2)) {
          list2 = [list2];
        }
        var result = [];
        list2.forEach(function (name) {
          var idx = this.__find__(name);
          if (idx < 0) {
            if (ignoreInvalid) {
              return;
            }
            throw new Error("Rules manager: invalid rule name " + name);
          }
          this.__rules__[idx].enabled = false;
          result.push(name);
        }, this);
        this.__cache__ = null;
        return result;
      };
      Ruler.prototype.getRules = function (chainName) {
        if (this.__cache__ === null) {
          this.__compile__();
        }
        return this.__cache__[chainName] || [];
      };
      module.exports = Ruler;
    }
  });

  // node_modules/markdown-it/lib/rules_core/normalize.js
  var require_normalize = __commonJS({
    "node_modules/markdown-it/lib/rules_core/normalize.js": function node_modules_markdownIt_lib_rules_core_normalizeJs(exports, module) {

      var NEWLINES_RE = /\r\n?|\n/g;
      var NULL_RE = /\0/g;
      module.exports = function normalize(state) {
        var str;
        str = state.src.replace(NEWLINES_RE, "\n");
        str = str.replace(NULL_RE, "\uFFFD");
        state.src = str;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_core/block.js
  var require_block = __commonJS({
    "node_modules/markdown-it/lib/rules_core/block.js": function node_modules_markdownIt_lib_rules_core_blockJs(exports, module) {

      module.exports = function block4(state) {
        var token;
        if (state.inlineMode) {
          token = new state.Token("inline", "", 0);
          token.content = state.src;
          token.map = [0, 1];
          token.children = [];
          state.tokens.push(token);
        } else {
          state.md.block.parse(state.src, state.md, state.env, state.tokens);
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_core/inline.js
  var require_inline = __commonJS({
    "node_modules/markdown-it/lib/rules_core/inline.js": function node_modules_markdownIt_lib_rules_core_inlineJs(exports, module) {

      module.exports = function inline4(state) {
        var tokens = state.tokens,
          tok,
          i,
          l;
        for (i = 0, l = tokens.length; i < l; i++) {
          tok = tokens[i];
          if (tok.type === "inline") {
            state.md.inline.parse(tok.content, state.md, state.env, tok.children);
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_core/linkify.js
  var require_linkify = __commonJS({
    "node_modules/markdown-it/lib/rules_core/linkify.js": function node_modules_markdownIt_lib_rules_core_linkifyJs(exports, module) {

      var arrayReplaceAt = require_utils().arrayReplaceAt;
      function isLinkOpen(str) {
        return /^<a[>\s]/i.test(str);
      }
      function isLinkClose(str) {
        return /^<\/a\s*>/i.test(str);
      }
      module.exports = function linkify(state) {
        var i,
          j,
          l,
          tokens,
          token,
          currentToken,
          nodes,
          ln,
          text2,
          pos,
          lastPos,
          level,
          htmlLinkLevel,
          url,
          fullUrl,
          urlText,
          blockTokens = state.tokens,
          links;
        if (!state.md.options.linkify) {
          return;
        }
        for (j = 0, l = blockTokens.length; j < l; j++) {
          if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) {
            continue;
          }
          tokens = blockTokens[j].children;
          htmlLinkLevel = 0;
          for (i = tokens.length - 1; i >= 0; i--) {
            currentToken = tokens[i];
            if (currentToken.type === "link_close") {
              i--;
              while (tokens[i].level !== currentToken.level && tokens[i].type !== "link_open") {
                i--;
              }
              continue;
            }
            if (currentToken.type === "html_inline") {
              if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
                htmlLinkLevel--;
              }
              if (isLinkClose(currentToken.content)) {
                htmlLinkLevel++;
              }
            }
            if (htmlLinkLevel > 0) {
              continue;
            }
            if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
              text2 = currentToken.content;
              links = state.md.linkify.match(text2);
              nodes = [];
              level = currentToken.level;
              lastPos = 0;
              for (ln = 0; ln < links.length; ln++) {
                url = links[ln].url;
                fullUrl = state.md.normalizeLink(url);
                if (!state.md.validateLink(fullUrl)) {
                  continue;
                }
                urlText = links[ln].text;
                if (!links[ln].schema) {
                  urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
                } else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
                  urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
                } else {
                  urlText = state.md.normalizeLinkText(urlText);
                }
                pos = links[ln].index;
                if (pos > lastPos) {
                  token = new state.Token("text", "", 0);
                  token.content = text2.slice(lastPos, pos);
                  token.level = level;
                  nodes.push(token);
                }
                token = new state.Token("link_open", "a", 1);
                token.attrs = [["href", fullUrl]];
                token.level = level++;
                token.markup = "linkify";
                token.info = "auto";
                nodes.push(token);
                token = new state.Token("text", "", 0);
                token.content = urlText;
                token.level = level;
                nodes.push(token);
                token = new state.Token("link_close", "a", -1);
                token.level = --level;
                token.markup = "linkify";
                token.info = "auto";
                nodes.push(token);
                lastPos = links[ln].lastIndex;
              }
              if (lastPos < text2.length) {
                token = new state.Token("text", "", 0);
                token.content = text2.slice(lastPos);
                token.level = level;
                nodes.push(token);
              }
              blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
            }
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_core/replacements.js
  var require_replacements = __commonJS({
    "node_modules/markdown-it/lib/rules_core/replacements.js": function node_modules_markdownIt_lib_rules_core_replacementsJs(exports, module) {

      var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
      var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
      var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
      var SCOPED_ABBR = {
        c: "\xA9",
        r: "\xAE",
        p: "\xA7",
        tm: "\u2122"
      };
      function replaceFn(match, name) {
        return SCOPED_ABBR[name.toLowerCase()];
      }
      function replace_scoped(inlineTokens) {
        var i,
          token,
          inside_autolink = 0;
        for (i = inlineTokens.length - 1; i >= 0; i--) {
          token = inlineTokens[i];
          if (token.type === "text" && !inside_autolink) {
            token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
          }
          if (token.type === "link_open" && token.info === "auto") {
            inside_autolink--;
          }
          if (token.type === "link_close" && token.info === "auto") {
            inside_autolink++;
          }
        }
      }
      function replace_rare(inlineTokens) {
        var i,
          token,
          inside_autolink = 0;
        for (i = inlineTokens.length - 1; i >= 0; i--) {
          token = inlineTokens[i];
          if (token.type === "text" && !inside_autolink) {
            if (RARE_RE.test(token.content)) {
              token.content = token.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
            }
          }
          if (token.type === "link_open" && token.info === "auto") {
            inside_autolink--;
          }
          if (token.type === "link_close" && token.info === "auto") {
            inside_autolink++;
          }
        }
      }
      module.exports = function replace(state) {
        var blkIdx;
        if (!state.md.options.typographer) {
          return;
        }
        for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
          if (state.tokens[blkIdx].type !== "inline") {
            continue;
          }
          if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
            replace_scoped(state.tokens[blkIdx].children);
          }
          if (RARE_RE.test(state.tokens[blkIdx].content)) {
            replace_rare(state.tokens[blkIdx].children);
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_core/smartquotes.js
  var require_smartquotes = __commonJS({
    "node_modules/markdown-it/lib/rules_core/smartquotes.js": function node_modules_markdownIt_lib_rules_core_smartquotesJs(exports, module) {

      var isWhiteSpace = require_utils().isWhiteSpace;
      var isPunctChar = require_utils().isPunctChar;
      var isMdAsciiPunct = require_utils().isMdAsciiPunct;
      var QUOTE_TEST_RE = /['"]/;
      var QUOTE_RE = /['"]/g;
      var APOSTROPHE = "\u2019";
      function replaceAt(str, index, ch) {
        return str.substr(0, index) + ch + str.substr(index + 1);
      }
      function process_inlines(tokens, state) {
        var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
        stack = [];
        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          thisLevel = tokens[i].level;
          for (j = stack.length - 1; j >= 0; j--) {
            if (stack[j].level <= thisLevel) {
              break;
            }
          }
          stack.length = j + 1;
          if (token.type !== "text") {
            continue;
          }
          text2 = token.content;
          pos = 0;
          max2 = text2.length;
          OUTER: while (pos < max2) {
            QUOTE_RE.lastIndex = pos;
            t = QUOTE_RE.exec(text2);
            if (!t) {
              break;
            }
            canOpen = canClose = true;
            pos = t.index + 1;
            isSingle = t[0] === "'";
            lastChar = 32;
            if (t.index - 1 >= 0) {
              lastChar = text2.charCodeAt(t.index - 1);
            } else {
              for (j = i - 1; j >= 0; j--) {
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak") break;
                if (!tokens[j].content) continue;
                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
                break;
              }
            }
            nextChar = 32;
            if (pos < max2) {
              nextChar = text2.charCodeAt(pos);
            } else {
              for (j = i + 1; j < tokens.length; j++) {
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak") break;
                if (!tokens[j].content) continue;
                nextChar = tokens[j].content.charCodeAt(0);
                break;
              }
            }
            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
            isLastWhiteSpace = isWhiteSpace(lastChar);
            isNextWhiteSpace = isWhiteSpace(nextChar);
            if (isNextWhiteSpace) {
              canOpen = false;
            } else if (isNextPunctChar) {
              if (!(isLastWhiteSpace || isLastPunctChar)) {
                canOpen = false;
              }
            }
            if (isLastWhiteSpace) {
              canClose = false;
            } else if (isLastPunctChar) {
              if (!(isNextWhiteSpace || isNextPunctChar)) {
                canClose = false;
              }
            }
            if (nextChar === 34 && t[0] === '"') {
              if (lastChar >= 48 && lastChar <= 57) {
                canClose = canOpen = false;
              }
            }
            if (canOpen && canClose) {
              canOpen = isLastPunctChar;
              canClose = isNextPunctChar;
            }
            if (!canOpen && !canClose) {
              if (isSingle) {
                token.content = replaceAt(token.content, t.index, APOSTROPHE);
              }
              continue;
            }
            if (canClose) {
              for (j = stack.length - 1; j >= 0; j--) {
                item2 = stack[j];
                if (stack[j].level < thisLevel) {
                  break;
                }
                if (item2.single === isSingle && stack[j].level === thisLevel) {
                  item2 = stack[j];
                  if (isSingle) {
                    openQuote = state.md.options.quotes[2];
                    closeQuote = state.md.options.quotes[3];
                  } else {
                    openQuote = state.md.options.quotes[0];
                    closeQuote = state.md.options.quotes[1];
                  }
                  token.content = replaceAt(token.content, t.index, closeQuote);
                  tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);
                  pos += closeQuote.length - 1;
                  if (item2.token === i) {
                    pos += openQuote.length - 1;
                  }
                  text2 = token.content;
                  max2 = text2.length;
                  stack.length = j;
                  continue OUTER;
                }
              }
            }
            if (canOpen) {
              stack.push({
                token: i,
                pos: t.index,
                single: isSingle,
                level: thisLevel
              });
            } else if (canClose && isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }
          }
        }
      }
      module.exports = function smartquotes(state) {
        var blkIdx;
        if (!state.md.options.typographer) {
          return;
        }
        for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
          if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
            continue;
          }
          process_inlines(state.tokens[blkIdx].children, state);
        }
      };
    }
  });

  // node_modules/markdown-it/lib/token.js
  var require_token = __commonJS({
    "node_modules/markdown-it/lib/token.js": function node_modules_markdownIt_lib_tokenJs(exports, module) {

      function Token(type, tag, nesting) {
        this.type = type;
        this.tag = tag;
        this.attrs = null;
        this.map = null;
        this.nesting = nesting;
        this.level = 0;
        this.children = null;
        this.content = "";
        this.markup = "";
        this.info = "";
        this.meta = null;
        this.block = false;
        this.hidden = false;
      }
      Token.prototype.attrIndex = function attrIndex(name) {
        var attrs, i, len;
        if (!this.attrs) {
          return -1;
        }
        attrs = this.attrs;
        for (i = 0, len = attrs.length; i < len; i++) {
          if (attrs[i][0] === name) {
            return i;
          }
        }
        return -1;
      };
      Token.prototype.attrPush = function attrPush(attrData) {
        if (this.attrs) {
          this.attrs.push(attrData);
        } else {
          this.attrs = [attrData];
        }
      };
      Token.prototype.attrSet = function attrSet(name, value) {
        var idx = this.attrIndex(name),
          attrData = [name, value];
        if (idx < 0) {
          this.attrPush(attrData);
        } else {
          this.attrs[idx] = attrData;
        }
      };
      Token.prototype.attrGet = function attrGet(name) {
        var idx = this.attrIndex(name),
          value = null;
        if (idx >= 0) {
          value = this.attrs[idx][1];
        }
        return value;
      };
      Token.prototype.attrJoin = function attrJoin(name, value) {
        var idx = this.attrIndex(name);
        if (idx < 0) {
          this.attrPush([name, value]);
        } else {
          this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
        }
      };
      module.exports = Token;
    }
  });

  // node_modules/markdown-it/lib/rules_core/state_core.js
  var require_state_core = __commonJS({
    "node_modules/markdown-it/lib/rules_core/state_core.js": function node_modules_markdownIt_lib_rules_core_state_coreJs(exports, module) {

      var Token = require_token();
      function StateCore(src, md, env) {
        this.src = src;
        this.env = env;
        this.tokens = [];
        this.inlineMode = false;
        this.md = md;
      }
      StateCore.prototype.Token = Token;
      module.exports = StateCore;
    }
  });

  // node_modules/markdown-it/lib/parser_core.js
  var require_parser_core = __commonJS({
    "node_modules/markdown-it/lib/parser_core.js": function node_modules_markdownIt_lib_parser_coreJs(exports, module) {

      var Ruler = require_ruler();
      var _rules = [["normalize", require_normalize()], ["block", require_block()], ["inline", require_inline()], ["linkify", require_linkify()], ["replacements", require_replacements()], ["smartquotes", require_smartquotes()]];
      function Core() {
        this.ruler = new Ruler();
        for (var i = 0; i < _rules.length; i++) {
          this.ruler.push(_rules[i][0], _rules[i][1]);
        }
      }
      Core.prototype.process = function (state) {
        var i, l, rules;
        rules = this.ruler.getRules("");
        for (i = 0, l = rules.length; i < l; i++) {
          rules[i](state);
        }
      };
      Core.prototype.State = require_state_core();
      module.exports = Core;
    }
  });

  // node_modules/markdown-it/lib/rules_block/table.js
  var require_table = __commonJS({
    "node_modules/markdown-it/lib/rules_block/table.js": function node_modules_markdownIt_lib_rules_block_tableJs(exports, module) {

      var isSpace = require_utils().isSpace;
      function getLine2(state, line) {
        var pos = state.bMarks[line] + state.tShift[line],
          max2 = state.eMarks[line];
        return state.src.substr(pos, max2 - pos);
      }
      function escapedSplit(str) {
        var result = [],
          pos = 0,
          max2 = str.length,
          ch,
          isEscaped = false,
          lastPos = 0,
          current = "";
        ch = str.charCodeAt(pos);
        while (pos < max2) {
          if (ch === 124) {
            if (!isEscaped) {
              result.push(current + str.substring(lastPos, pos));
              current = "";
              lastPos = pos + 1;
            } else {
              current += str.substring(lastPos, pos - 1);
              lastPos = pos;
            }
          }
          isEscaped = ch === 92;
          pos++;
          ch = str.charCodeAt(pos);
        }
        result.push(current + str.substring(lastPos));
        return result;
      }
      module.exports = function table3(state, startLine, endLine, silent) {
        var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
        if (startLine + 2 > endLine) {
          return false;
        }
        nextLine = startLine + 1;
        if (state.sCount[nextLine] < state.blkIndent) {
          return false;
        }
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
          return false;
        }
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        if (pos >= state.eMarks[nextLine]) {
          return false;
        }
        firstCh = state.src.charCodeAt(pos++);
        if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
          return false;
        }
        if (pos >= state.eMarks[nextLine]) {
          return false;
        }
        secondCh = state.src.charCodeAt(pos++);
        if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
          return false;
        }
        if (firstCh === 45 && isSpace(secondCh)) {
          return false;
        }
        while (pos < state.eMarks[nextLine]) {
          ch = state.src.charCodeAt(pos);
          if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {
            return false;
          }
          pos++;
        }
        lineText = getLine2(state, startLine + 1);
        columns = lineText.split("|");
        aligns = [];
        for (i = 0; i < columns.length; i++) {
          t = columns[i].trim();
          if (!t) {
            if (i === 0 || i === columns.length - 1) {
              continue;
            } else {
              return false;
            }
          }
          if (!/^:?-+:?$/.test(t)) {
            return false;
          }
          if (t.charCodeAt(t.length - 1) === 58) {
            aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
          } else if (t.charCodeAt(0) === 58) {
            aligns.push("left");
          } else {
            aligns.push("");
          }
        }
        lineText = getLine2(state, startLine).trim();
        if (lineText.indexOf("|") === -1) {
          return false;
        }
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === "") columns.shift();
        if (columns.length && columns[columns.length - 1] === "") columns.pop();
        columnCount = columns.length;
        if (columnCount === 0 || columnCount !== aligns.length) {
          return false;
        }
        if (silent) {
          return true;
        }
        oldParentType = state.parentType;
        state.parentType = "table";
        terminatorRules = state.md.block.ruler.getRules("blockquote");
        token = state.push("table_open", "table", 1);
        token.map = tableLines = [startLine, 0];
        token = state.push("thead_open", "thead", 1);
        token.map = [startLine, startLine + 1];
        token = state.push("tr_open", "tr", 1);
        token.map = [startLine, startLine + 1];
        for (i = 0; i < columns.length; i++) {
          token = state.push("th_open", "th", 1);
          if (aligns[i]) {
            token.attrs = [["style", "text-align:" + aligns[i]]];
          }
          token = state.push("inline", "", 0);
          token.content = columns[i].trim();
          token.children = [];
          token = state.push("th_close", "th", -1);
        }
        token = state.push("tr_close", "tr", -1);
        token = state.push("thead_close", "thead", -1);
        for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
          lineText = getLine2(state, nextLine).trim();
          if (!lineText) {
            break;
          }
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
            break;
          }
          columns = escapedSplit(lineText);
          if (columns.length && columns[0] === "") columns.shift();
          if (columns.length && columns[columns.length - 1] === "") columns.pop();
          if (nextLine === startLine + 2) {
            token = state.push("tbody_open", "tbody", 1);
            token.map = tbodyLines = [startLine + 2, 0];
          }
          token = state.push("tr_open", "tr", 1);
          token.map = [nextLine, nextLine + 1];
          for (i = 0; i < columnCount; i++) {
            token = state.push("td_open", "td", 1);
            if (aligns[i]) {
              token.attrs = [["style", "text-align:" + aligns[i]]];
            }
            token = state.push("inline", "", 0);
            token.content = columns[i] ? columns[i].trim() : "";
            token.children = [];
            token = state.push("td_close", "td", -1);
          }
          token = state.push("tr_close", "tr", -1);
        }
        if (tbodyLines) {
          token = state.push("tbody_close", "tbody", -1);
          tbodyLines[1] = nextLine;
        }
        token = state.push("table_close", "table", -1);
        tableLines[1] = nextLine;
        state.parentType = oldParentType;
        state.line = nextLine;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/code.js
  var require_code = __commonJS({
    "node_modules/markdown-it/lib/rules_block/code.js": function node_modules_markdownIt_lib_rules_block_codeJs(exports, module) {

      module.exports = function code2(state, startLine, endLine) {
        if (state.md.options.allowIndentation) {
          return false;
        }
        var nextLine, last, token;
        if (state.sCount[startLine] - state.blkIndent < 4) {
          return false;
        }
        last = nextLine = startLine + 1;
        while (nextLine < endLine) {
          if (state.isEmpty(nextLine)) {
            nextLine++;
            continue;
          }
          if (state.sCount[nextLine] - state.blkIndent >= 4) {
            nextLine++;
            last = nextLine;
            continue;
          }
          break;
        }
        state.line = last;
        token = state.push("code_block", "code", 0);
        token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
        token.map = [startLine, state.line];
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/fence.js
  var require_fence = __commonJS({
    "node_modules/markdown-it/lib/rules_block/fence.js": function node_modules_markdownIt_lib_rules_block_fenceJs(exports, module) {

      module.exports = function fence3(state, startLine, endLine, silent) {
        var marker,
          len,
          params,
          nextLine,
          mem,
          token,
          markup,
          haveEndMarker = false,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine];
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        if (pos + 3 > max2) {
          return false;
        }
        marker = state.src.charCodeAt(pos);
        if (marker !== 126 && marker !== 96) {
          return false;
        }
        mem = pos;
        pos = state.skipChars(pos, marker);
        len = pos - mem;
        if (len < 3) {
          return false;
        }
        markup = state.src.slice(mem, pos);
        params = state.src.slice(pos, max2);
        if (marker === 96) {
          if (params.indexOf(String.fromCharCode(marker)) >= 0) {
            return false;
          }
        }
        if (silent) {
          return true;
        }
        nextLine = startLine;
        for (;;) {
          nextLine++;
          if (nextLine >= endLine) {
            break;
          }
          pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          if (state.src.charCodeAt(pos) !== marker) {
            continue;
          }
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
            continue;
          }
          pos = state.skipChars(pos, marker);
          if (pos - mem < len) {
            continue;
          }
          pos = state.skipSpaces(pos);
          if (pos < max2) {
            continue;
          }
          haveEndMarker = true;
          break;
        }
        len = state.sCount[startLine];
        state.line = nextLine + (haveEndMarker ? 1 : 0);
        token = state.push("fence", "code", 0);
        token.info = params;
        token.content = state.getLines(startLine + 1, nextLine, len, true);
        token.markup = markup;
        token.map = [startLine, state.line];
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/blockquote.js
  var require_blockquote = __commonJS({
    "node_modules/markdown-it/lib/rules_block/blockquote.js": function node_modules_markdownIt_lib_rules_block_blockquoteJs(exports, module) {

      var isSpace = require_utils().isSpace;
      module.exports = function blockquote2(state, startLine, endLine, silent) {
        var adjustTab,
          ch,
          i,
          initial,
          l,
          lastLineEmpty,
          lines,
          nextLine,
          offset,
          oldBMarks,
          oldBSCount,
          oldIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          spaceAfterMarker,
          terminate,
          terminatorRules,
          token,
          isOutdented,
          oldLineMax = state.lineMax,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine];
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        if (state.src.charCodeAt(pos++) !== 62) {
          return false;
        }
        if (silent) {
          return true;
        }
        initial = offset = state.sCount[startLine] + 1;
        if (state.src.charCodeAt(pos) === 32) {
          pos++;
          initial++;
          offset++;
          adjustTab = false;
          spaceAfterMarker = true;
        } else if (state.src.charCodeAt(pos) === 9) {
          spaceAfterMarker = true;
          if ((state.bsCount[startLine] + offset) % 4 === 3) {
            pos++;
            initial++;
            offset++;
            adjustTab = false;
          } else {
            adjustTab = true;
          }
        } else {
          spaceAfterMarker = false;
        }
        oldBMarks = [state.bMarks[startLine]];
        state.bMarks[startLine] = pos;
        while (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (isSpace(ch)) {
            if (ch === 9) {
              offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
            } else {
              offset++;
            }
          } else {
            break;
          }
          pos++;
        }
        oldBSCount = [state.bsCount[startLine]];
        state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
        lastLineEmpty = pos >= max2;
        oldSCount = [state.sCount[startLine]];
        state.sCount[startLine] = offset - initial;
        oldTShift = [state.tShift[startLine]];
        state.tShift[startLine] = pos - state.bMarks[startLine];
        terminatorRules = state.md.block.ruler.getRules("blockquote");
        oldParentType = state.parentType;
        state.parentType = "blockquote";
        for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
          isOutdented = state.sCount[nextLine] < state.blkIndent;
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          if (pos >= max2) {
            break;
          }
          if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
            initial = offset = state.sCount[nextLine] + 1;
            if (state.src.charCodeAt(pos) === 32) {
              pos++;
              initial++;
              offset++;
              adjustTab = false;
              spaceAfterMarker = true;
            } else if (state.src.charCodeAt(pos) === 9) {
              spaceAfterMarker = true;
              if ((state.bsCount[nextLine] + offset) % 4 === 3) {
                pos++;
                initial++;
                offset++;
                adjustTab = false;
              } else {
                adjustTab = true;
              }
            } else {
              spaceAfterMarker = false;
            }
            oldBMarks.push(state.bMarks[nextLine]);
            state.bMarks[nextLine] = pos;
            while (pos < max2) {
              ch = state.src.charCodeAt(pos);
              if (isSpace(ch)) {
                if (ch === 9) {
                  offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
                } else {
                  offset++;
                }
              } else {
                break;
              }
              pos++;
            }
            lastLineEmpty = pos >= max2;
            oldBSCount.push(state.bsCount[nextLine]);
            state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] = offset - initial;
            oldTShift.push(state.tShift[nextLine]);
            state.tShift[nextLine] = pos - state.bMarks[nextLine];
            continue;
          }
          if (lastLineEmpty) {
            break;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            state.lineMax = nextLine;
            if (state.blkIndent !== 0) {
              oldBMarks.push(state.bMarks[nextLine]);
              oldBSCount.push(state.bsCount[nextLine]);
              oldTShift.push(state.tShift[nextLine]);
              oldSCount.push(state.sCount[nextLine]);
              state.sCount[nextLine] -= state.blkIndent;
            }
            break;
          }
          oldBMarks.push(state.bMarks[nextLine]);
          oldBSCount.push(state.bsCount[nextLine]);
          oldTShift.push(state.tShift[nextLine]);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = -1;
        }
        oldIndent = state.blkIndent;
        state.blkIndent = 0;
        token = state.push("blockquote_open", "blockquote", 1);
        token.markup = ">";
        token.map = lines = [startLine, 0];
        state.md.block.tokenize(state, startLine, nextLine);
        token = state.push("blockquote_close", "blockquote", -1);
        token.markup = ">";
        state.lineMax = oldLineMax;
        state.parentType = oldParentType;
        lines[1] = state.line;
        for (i = 0; i < oldTShift.length; i++) {
          state.bMarks[i + startLine] = oldBMarks[i];
          state.tShift[i + startLine] = oldTShift[i];
          state.sCount[i + startLine] = oldSCount[i];
          state.bsCount[i + startLine] = oldBSCount[i];
        }
        state.blkIndent = oldIndent;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/hr.js
  var require_hr = __commonJS({
    "node_modules/markdown-it/lib/rules_block/hr.js": function node_modules_markdownIt_lib_rules_block_hrJs(exports, module) {

      var isSpace = require_utils().isSpace;
      module.exports = function hr2(state, startLine, endLine, silent) {
        var marker,
          cnt,
          ch,
          token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine];
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        marker = state.src.charCodeAt(pos++);
        if (marker !== 42 && marker !== 45 && marker !== 95) {
          return false;
        }
        cnt = 1;
        while (pos < max2) {
          ch = state.src.charCodeAt(pos++);
          if (ch !== marker && !isSpace(ch)) {
            return false;
          }
          if (ch === marker) {
            cnt++;
          }
        }
        if (cnt < 3) {
          return false;
        }
        if (silent) {
          return true;
        }
        state.line = startLine + 1;
        token = state.push("hr", "hr", 0);
        token.map = [startLine, state.line];
        token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/list.js
  var require_list = __commonJS({
    "node_modules/markdown-it/lib/rules_block/list.js": function node_modules_markdownIt_lib_rules_block_listJs(exports, module) {

      var isSpace = require_utils().isSpace;
      function skipBulletListMarker(state, startLine) {
        var marker, pos, max2, ch;
        pos = state.bMarks[startLine] + state.tShift[startLine];
        max2 = state.eMarks[startLine];
        marker = state.src.charCodeAt(pos++);
        if (marker !== 42 && marker !== 45 && marker !== 43) {
          return -1;
        }
        if (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (!isSpace(ch)) {
            return -1;
          }
        }
        return pos;
      }
      function skipOrderedListMarker(state, startLine) {
        var ch,
          start = state.bMarks[startLine] + state.tShift[startLine],
          pos = start,
          max2 = state.eMarks[startLine];
        if (pos + 1 >= max2) {
          return -1;
        }
        ch = state.src.charCodeAt(pos++);
        if (ch < 48 || ch > 57) {
          return -1;
        }
        for (;;) {
          if (pos >= max2) {
            return -1;
          }
          ch = state.src.charCodeAt(pos++);
          if (ch >= 48 && ch <= 57) {
            if (pos - start >= 10) {
              return -1;
            }
            continue;
          }
          if (ch === 41 || ch === 46) {
            break;
          }
          return -1;
        }
        if (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (!isSpace(ch)) {
            return -1;
          }
        }
        return pos;
      }
      function markTightParagraphs(state, idx) {
        var i,
          l,
          level = state.level + 2;
        for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
          if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
            state.tokens[i + 2].hidden = true;
            state.tokens[i].hidden = true;
            i += 2;
          }
        }
      }
      module.exports = function list2(state, startLine, endLine, silent) {
        var ch,
          contentStart,
          i,
          indent,
          indentAfterMarker,
          initial,
          isOrdered,
          itemLines,
          l,
          listLines,
          listTokIdx,
          markerCharCode,
          markerValue,
          max2,
          nextLine,
          offset,
          oldListIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          oldTight,
          pos,
          posAfterMarker,
          prevEmptyEnd,
          start,
          terminate,
          terminatorRules,
          token,
          isTerminatingParagraph = false,
          tight = true;
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
          return false;
        }
        if (silent && state.parentType === "paragraph") {
          if (state.sCount[startLine] >= state.blkIndent) {
            isTerminatingParagraph = true;
          }
        }
        if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
          isOrdered = true;
          start = state.bMarks[startLine] + state.tShift[startLine];
          markerValue = Number(state.src.slice(start, posAfterMarker - 1));
          if (isTerminatingParagraph && markerValue !== 1) return false;
        } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
          isOrdered = false;
        } else {
          return false;
        }
        if (isTerminatingParagraph) {
          if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
        }
        markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
        if (silent) {
          return true;
        }
        listTokIdx = state.tokens.length;
        if (isOrdered) {
          token = state.push("ordered_list_open", "ol", 1);
          if (markerValue !== 1) {
            token.attrs = [["start", markerValue]];
          }
        } else {
          token = state.push("bullet_list_open", "ul", 1);
        }
        token.map = listLines = [startLine, 0];
        token.markup = String.fromCharCode(markerCharCode);
        nextLine = startLine;
        prevEmptyEnd = false;
        terminatorRules = state.md.block.ruler.getRules("list");
        oldParentType = state.parentType;
        state.parentType = "list";
        while (nextLine < endLine) {
          pos = posAfterMarker;
          max2 = state.eMarks[nextLine];
          initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (ch === 9) {
              offset += 4 - (offset + state.bsCount[nextLine]) % 4;
            } else if (ch === 32) {
              offset++;
            } else {
              break;
            }
            pos++;
          }
          contentStart = pos;
          if (contentStart >= max2) {
            indentAfterMarker = 1;
          } else {
            indentAfterMarker = offset - initial;
          }
          if (!state.md.options.allowIndentation && indentAfterMarker > 4) {
            indentAfterMarker = 1;
          }
          indent = initial + indentAfterMarker;
          token = state.push("list_item_open", "li", 1);
          token.markup = String.fromCharCode(markerCharCode);
          token.map = itemLines = [startLine, 0];
          if (isOrdered) {
            token.info = state.src.slice(start, posAfterMarker - 1);
          }
          oldTight = state.tight;
          oldTShift = state.tShift[startLine];
          oldSCount = state.sCount[startLine];
          oldListIndent = state.listIndent;
          state.listIndent = state.blkIndent;
          state.blkIndent = indent;
          state.tight = true;
          state.tShift[startLine] = contentStart - state.bMarks[startLine];
          state.sCount[startLine] = offset;
          if (contentStart >= max2 && state.isEmpty(startLine + 1)) {
            state.line = Math.min(state.line + 2, endLine);
          } else {
            state.md.block.tokenize(state, startLine, endLine, true);
          }
          if (!state.tight || prevEmptyEnd) {
            tight = false;
          }
          prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
          state.blkIndent = state.listIndent;
          state.listIndent = oldListIndent;
          state.tShift[startLine] = oldTShift;
          state.sCount[startLine] = oldSCount;
          state.tight = oldTight;
          token = state.push("list_item_close", "li", -1);
          token.markup = String.fromCharCode(markerCharCode);
          nextLine = startLine = state.line;
          itemLines[1] = nextLine;
          contentStart = state.bMarks[startLine];
          if (nextLine >= endLine) {
            break;
          }
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
            break;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
          if (isOrdered) {
            posAfterMarker = skipOrderedListMarker(state, nextLine);
            if (posAfterMarker < 0) {
              break;
            }
            start = state.bMarks[nextLine] + state.tShift[nextLine];
          } else {
            posAfterMarker = skipBulletListMarker(state, nextLine);
            if (posAfterMarker < 0) {
              break;
            }
          }
          if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
            break;
          }
        }
        if (isOrdered) {
          token = state.push("ordered_list_close", "ol", -1);
        } else {
          token = state.push("bullet_list_close", "ul", -1);
        }
        token.markup = String.fromCharCode(markerCharCode);
        listLines[1] = nextLine;
        state.line = nextLine;
        state.parentType = oldParentType;
        if (tight) {
          markTightParagraphs(state, listTokIdx);
        }
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/reference.js
  var require_reference = __commonJS({
    "node_modules/markdown-it/lib/rules_block/reference.js": function node_modules_markdownIt_lib_rules_block_referenceJs(exports, module) {

      var normalizeReference = require_utils().normalizeReference;
      var isSpace = require_utils().isSpace;
      module.exports = function reference(state, startLine, _endLine, silent) {
        var ch,
          destEndPos,
          destEndLineNo,
          endLine,
          href,
          i,
          l,
          label,
          labelEnd,
          oldParentType,
          res,
          start,
          str,
          terminate,
          terminatorRules,
          title,
          lines = 0,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine],
          nextLine = startLine + 1;
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        if (state.src.charCodeAt(pos) !== 91) {
          return false;
        }
        while (++pos < max2) {
          if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
            if (pos + 1 === max2) {
              return false;
            }
            if (state.src.charCodeAt(pos + 1) !== 58) {
              return false;
            }
            break;
          }
        }
        endLine = state.lineMax;
        terminatorRules = state.md.block.ruler.getRules("reference");
        oldParentType = state.parentType;
        state.parentType = "reference";
        for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
            continue;
          }
          if (state.sCount[nextLine] < 0) {
            continue;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
        }
        str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
        max2 = str.length;
        for (pos = 1; pos < max2; pos++) {
          ch = str.charCodeAt(pos);
          if (ch === 91) {
            return false;
          } else if (ch === 93) {
            labelEnd = pos;
            break;
          } else if (ch === 10) {
            lines++;
          } else if (ch === 92) {
            pos++;
            if (pos < max2 && str.charCodeAt(pos) === 10) {
              lines++;
            }
          }
        }
        if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
          return false;
        }
        for (pos = labelEnd + 2; pos < max2; pos++) {
          ch = str.charCodeAt(pos);
          if (ch === 10) {
            lines++;
          } else if (isSpace(ch)) ; else {
            break;
          }
        }
        res = state.md.helpers.parseLinkDestination(str, pos, max2);
        if (!res.ok) {
          return false;
        }
        href = state.md.normalizeLink(res.str);
        if (!state.md.validateLink(href)) {
          return false;
        }
        pos = res.pos;
        lines += res.lines;
        destEndPos = pos;
        destEndLineNo = lines;
        start = pos;
        for (; pos < max2; pos++) {
          ch = str.charCodeAt(pos);
          if (ch === 10) {
            lines++;
          } else if (isSpace(ch)) ; else {
            break;
          }
        }
        res = state.md.helpers.parseLinkTitle(str, pos, max2);
        if (pos < max2 && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos;
          lines += res.lines;
        } else {
          title = "";
          pos = destEndPos;
          lines = destEndLineNo;
        }
        while (pos < max2) {
          ch = str.charCodeAt(pos);
          if (!isSpace(ch)) {
            break;
          }
          pos++;
        }
        if (pos < max2 && str.charCodeAt(pos) !== 10) {
          if (title) {
            title = "";
            pos = destEndPos;
            lines = destEndLineNo;
            while (pos < max2) {
              ch = str.charCodeAt(pos);
              if (!isSpace(ch)) {
                break;
              }
              pos++;
            }
          }
        }
        if (pos < max2 && str.charCodeAt(pos) !== 10) {
          return false;
        }
        label = normalizeReference(str.slice(1, labelEnd));
        if (!label) {
          return false;
        }
        if (silent) {
          return true;
        }
        if (typeof state.env.references === "undefined") {
          state.env.references = {};
        }
        if (typeof state.env.references[label] === "undefined") {
          state.env.references[label] = {
            title: title,
            href: href
          };
        }
        state.parentType = oldParentType;
        state.line = startLine + lines + 1;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/common/html_blocks.js
  var require_html_blocks = __commonJS({
    "node_modules/markdown-it/lib/common/html_blocks.js": function node_modules_markdownIt_lib_common_html_blocksJs(exports, module) {

      module.exports = ["address", "article", "aside", "base", "basefont", "blockquote", "body", "caption", "center", "col", "colgroup", "dd", "details", "dialog", "dir", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "iframe", "legend", "li", "link", "main", "menu", "menuitem", "nav", "noframes", "ol", "optgroup", "option", "p", "param", "section", "source", "summary", "table", "tbody", "td", "tfoot", "th", "thead", "title", "tr", "track", "ul"];
    }
  });

  // node_modules/markdown-it/lib/common/html_re.js
  var require_html_re = __commonJS({
    "node_modules/markdown-it/lib/common/html_re.js": function node_modules_markdownIt_lib_common_html_reJs(exports, module) {

      var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
      var unquoted = "[^\"'=<>`\\x00-\\x20]+";
      var single_quoted = "'[^']*'";
      var double_quoted = '"[^"]*"';
      var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
      var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
      var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
      var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
      var comment2 = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
      var processing = "<[?][\\s\\S]*?[?]>";
      var declaration = "<![A-Z]+\\s+[^>]*>";
      var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
      var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment2 + "|" + processing + "|" + declaration + "|" + cdata + ")");
      var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
      module.exports.HTML_TAG_RE = HTML_TAG_RE;
      module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;
    }
  });

  // node_modules/markdown-it/lib/rules_block/html_block.js
  var require_html_block = __commonJS({
    "node_modules/markdown-it/lib/rules_block/html_block.js": function node_modules_markdownIt_lib_rules_block_html_blockJs(exports, module) {

      var block_names = require_html_blocks();
      var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;
      var HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]];
      module.exports = function html_block(state, startLine, endLine, silent) {
        var i,
          nextLine,
          token,
          lineText,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine];
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        if (!state.md.options.html) {
          return false;
        }
        if (state.src.charCodeAt(pos) !== 60) {
          return false;
        }
        lineText = state.src.slice(pos, max2);
        for (i = 0; i < HTML_SEQUENCES.length; i++) {
          if (HTML_SEQUENCES[i][0].test(lineText)) {
            break;
          }
        }
        if (i === HTML_SEQUENCES.length) {
          return false;
        }
        if (silent) {
          return HTML_SEQUENCES[i][2];
        }
        nextLine = startLine + 1;
        if (!HTML_SEQUENCES[i][1].test(lineText)) {
          for (; nextLine < endLine; nextLine++) {
            if (state.sCount[nextLine] < state.blkIndent) {
              break;
            }
            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max2 = state.eMarks[nextLine];
            lineText = state.src.slice(pos, max2);
            if (HTML_SEQUENCES[i][1].test(lineText)) {
              if (lineText.length !== 0) {
                nextLine++;
              }
              break;
            }
          }
        }
        state.line = nextLine;
        token = state.push("html_block", "", 0);
        token.map = [startLine, nextLine];
        token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/heading.js
  var require_heading = __commonJS({
    "node_modules/markdown-it/lib/rules_block/heading.js": function node_modules_markdownIt_lib_rules_block_headingJs(exports, module) {

      var isSpace = require_utils().isSpace;
      module.exports = function heading2(state, startLine, endLine, silent) {
        var ch,
          level,
          tmp,
          token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max2 = state.eMarks[startLine];
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        ch = state.src.charCodeAt(pos);
        if (ch !== 35 || pos >= max2) {
          return false;
        }
        level = 1;
        ch = state.src.charCodeAt(++pos);
        while (ch === 35 && pos < max2 && level <= 6) {
          level++;
          ch = state.src.charCodeAt(++pos);
        }
        if (level > 6 || pos < max2 && !isSpace(ch)) {
          return false;
        }
        if (silent) {
          return true;
        }
        max2 = state.skipSpacesBack(max2, pos);
        tmp = state.skipCharsBack(max2, 35, pos);
        if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
          max2 = tmp;
        }
        state.line = startLine + 1;
        token = state.push("heading_open", "h" + String(level), 1);
        token.markup = "########".slice(0, level);
        token.map = [startLine, state.line];
        token = state.push("inline", "", 0);
        token.content = state.src.slice(pos, max2).trim();
        token.map = [startLine, state.line];
        token.children = [];
        token = state.push("heading_close", "h" + String(level), -1);
        token.markup = "########".slice(0, level);
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/lheading.js
  var require_lheading = __commonJS({
    "node_modules/markdown-it/lib/rules_block/lheading.js": function node_modules_markdownIt_lib_rules_block_lheadingJs(exports, module) {

      module.exports = function lheading(state, startLine, endLine) {
        var content,
          terminate,
          i,
          l,
          token,
          pos,
          max2,
          level,
          marker,
          nextLine = startLine + 1,
          oldParentType,
          terminatorRules = state.md.block.ruler.getRules("paragraph");
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          return false;
        }
        oldParentType = state.parentType;
        state.parentType = "paragraph";
        for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
            continue;
          }
          if (state.sCount[nextLine] >= state.blkIndent) {
            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max2 = state.eMarks[nextLine];
            if (pos < max2) {
              marker = state.src.charCodeAt(pos);
              if (marker === 45 || marker === 61) {
                pos = state.skipChars(pos, marker);
                pos = state.skipSpaces(pos);
                if (pos >= max2) {
                  level = marker === 61 ? 1 : 2;
                  break;
                }
              }
            }
          }
          if (state.sCount[nextLine] < 0) {
            continue;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
        }
        if (!level) {
          return false;
        }
        content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
        state.line = nextLine + 1;
        token = state.push("heading_open", "h" + String(level), 1);
        token.markup = String.fromCharCode(marker);
        token.map = [startLine, state.line];
        token = state.push("inline", "", 0);
        token.content = content;
        token.map = [startLine, state.line - 1];
        token.children = [];
        token = state.push("heading_close", "h" + String(level), -1);
        token.markup = String.fromCharCode(marker);
        state.parentType = oldParentType;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/paragraph.js
  var require_paragraph = __commonJS({
    "node_modules/markdown-it/lib/rules_block/paragraph.js": function node_modules_markdownIt_lib_rules_block_paragraphJs(exports, module) {

      module.exports = function paragraph2(state, startLine) {
        var content,
          terminate,
          i,
          l,
          token,
          oldParentType,
          nextLine = startLine + 1,
          terminatorRules = state.md.block.ruler.getRules("paragraph"),
          endLine = state.lineMax;
        oldParentType = state.parentType;
        state.parentType = "paragraph";
        for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
          if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
            continue;
          }
          if (state.sCount[nextLine] < 0) {
            continue;
          }
          terminate = false;
          for (i = 0, l = terminatorRules.length; i < l; i++) {
            if (terminatorRules[i](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
        }
        content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
        state.line = nextLine;
        token = state.push("paragraph_open", "p", 1);
        token.map = [startLine, state.line];
        token = state.push("inline", "", 0);
        token.content = content;
        token.map = [startLine, state.line];
        token.children = [];
        token = state.push("paragraph_close", "p", -1);
        state.parentType = oldParentType;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_block/state_block.js
  var require_state_block = __commonJS({
    "node_modules/markdown-it/lib/rules_block/state_block.js": function node_modules_markdownIt_lib_rules_block_state_blockJs(exports, module) {

      var Token = require_token();
      var isSpace = require_utils().isSpace;
      function StateBlock(src, md, env, tokens) {
        var ch, s2, start, pos, len, indent, offset, indent_found;
        this.src = src;
        this.md = md;
        this.env = env;
        this.tokens = tokens;
        this.bMarks = [];
        this.eMarks = [];
        this.tShift = [];
        this.sCount = [];
        this.bsCount = [];
        this.blkIndent = 0;
        this.line = 0;
        this.lineMax = 0;
        this.tight = false;
        this.ddIndent = -1;
        this.listIndent = -1;
        this.parentType = "root";
        this.level = 0;
        this.result = "";
        s2 = this.src;
        indent_found = false;
        for (start = pos = indent = offset = 0, len = s2.length; pos < len; pos++) {
          ch = s2.charCodeAt(pos);
          if (!indent_found) {
            if (isSpace(ch)) {
              indent++;
              if (ch === 9) {
                offset += 4 - offset % 4;
              } else {
                offset++;
              }
              continue;
            } else {
              indent_found = true;
            }
          }
          if (ch === 10 || pos === len - 1) {
            if (ch !== 10) {
              pos++;
            }
            this.bMarks.push(start);
            this.eMarks.push(pos);
            this.tShift.push(indent);
            this.sCount.push(offset);
            this.bsCount.push(0);
            indent_found = false;
            indent = 0;
            offset = 0;
            start = pos + 1;
          }
        }
        this.bMarks.push(s2.length);
        this.eMarks.push(s2.length);
        this.tShift.push(0);
        this.sCount.push(0);
        this.bsCount.push(0);
        this.lineMax = this.bMarks.length - 1;
      }
      StateBlock.prototype.push = function (type, tag, nesting) {
        var token = new Token(type, tag, nesting);
        token.block = true;
        if (nesting < 0) this.level--;
        token.level = this.level;
        if (nesting > 0) this.level++;
        this.tokens.push(token);
        return token;
      };
      StateBlock.prototype.isEmpty = function isEmpty(line) {
        return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
      };
      StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
        for (var max2 = this.lineMax; from < max2; from++) {
          if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
            break;
          }
        }
        return from;
      };
      StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
        var ch;
        for (var max2 = this.src.length; pos < max2; pos++) {
          ch = this.src.charCodeAt(pos);
          if (!isSpace(ch)) {
            break;
          }
        }
        return pos;
      };
      StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
        if (pos <= min) {
          return pos;
        }
        while (pos > min) {
          if (!isSpace(this.src.charCodeAt(--pos))) {
            return pos + 1;
          }
        }
        return pos;
      };
      StateBlock.prototype.skipChars = function skipChars(pos, code2) {
        for (var max2 = this.src.length; pos < max2; pos++) {
          if (this.src.charCodeAt(pos) !== code2) {
            break;
          }
        }
        return pos;
      };
      StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {
        if (pos <= min) {
          return pos;
        }
        while (pos > min) {
          if (code2 !== this.src.charCodeAt(--pos)) {
            return pos + 1;
          }
        }
        return pos;
      };
      StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
        var i,
          lineIndent,
          ch,
          first,
          last,
          queue,
          lineStart,
          line = begin;
        if (begin >= end) {
          return "";
        }
        queue = new Array(end - begin);
        for (i = 0; line < end; line++, i++) {
          lineIndent = 0;
          lineStart = first = this.bMarks[line];
          if (line + 1 < end || keepLastLF) {
            last = this.eMarks[line] + 1;
          } else {
            last = this.eMarks[line];
          }
          while (first < last && lineIndent < indent) {
            ch = this.src.charCodeAt(first);
            if (isSpace(ch)) {
              if (ch === 9) {
                lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
              } else {
                lineIndent++;
              }
            } else if (first - lineStart < this.tShift[line]) {
              lineIndent++;
            } else {
              break;
            }
            first++;
          }
          if (lineIndent > indent) {
            queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
          } else {
            queue[i] = this.src.slice(first, last);
          }
        }
        return queue.join("");
      };
      StateBlock.prototype.Token = Token;
      module.exports = StateBlock;
    }
  });

  // node_modules/markdown-it/lib/parser_block.js
  var require_parser_block = __commonJS({
    "node_modules/markdown-it/lib/parser_block.js": function node_modules_markdownIt_lib_parser_blockJs(exports, module) {

      var Ruler = require_ruler();
      var _rules = [["table", require_table(), ["paragraph", "reference"]], ["code", require_code()], ["fence", require_fence(), ["paragraph", "reference", "blockquote", "list"]], ["blockquote", require_blockquote(), ["paragraph", "reference", "blockquote", "list"]], ["hr", require_hr(), ["paragraph", "reference", "blockquote", "list"]], ["list", require_list(), ["paragraph", "reference", "blockquote"]], ["reference", require_reference()], ["html_block", require_html_block(), ["paragraph", "reference", "blockquote"]], ["heading", require_heading(), ["paragraph", "reference", "blockquote"]], ["lheading", require_lheading()], ["paragraph", require_paragraph()]];
      function ParserBlock() {
        this.ruler = new Ruler();
        for (var i = 0; i < _rules.length; i++) {
          this.ruler.push(_rules[i][0], _rules[i][1], {
            alt: (_rules[i][2] || []).slice()
          });
        }
      }
      ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
        var ok,
          i,
          rules = this.ruler.getRules(""),
          len = rules.length,
          line = startLine,
          hasEmptyLines = false,
          maxNesting = state.md.options.maxNesting;
        while (line < endLine) {
          state.line = line = state.skipEmptyLines(line);
          if (line >= endLine) {
            break;
          }
          if (state.sCount[line] < state.blkIndent) {
            break;
          }
          if (state.level >= maxNesting) {
            state.line = endLine;
            break;
          }
          for (i = 0; i < len; i++) {
            ok = rules[i](state, line, endLine, false);
            if (ok) {
              break;
            }
          }
          state.tight = !hasEmptyLines;
          if (state.isEmpty(state.line - 1)) {
            hasEmptyLines = true;
          }
          line = state.line;
          if (line < endLine && state.isEmpty(line)) {
            hasEmptyLines = true;
            line++;
            state.line = line;
          }
        }
      };
      ParserBlock.prototype.parse = function (src, md, env, outTokens) {
        var state;
        if (!src) {
          return;
        }
        state = new this.State(src, md, env, outTokens);
        this.tokenize(state, state.line, state.lineMax);
      };
      ParserBlock.prototype.State = require_state_block();
      module.exports = ParserBlock;
    }
  });

  // node_modules/markdown-it/lib/rules_inline/text.js
  var require_text = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/text.js": function node_modules_markdownIt_lib_rules_inline_textJs(exports, module) {

      function isTerminatorChar(ch) {
        switch (ch) {
          case 10:
          case 33:
          case 35:
          case 36:
          case 37:
          case 38:
          case 42:
          case 43:
          case 45:
          case 58:
          case 60:
          case 61:
          case 62:
          case 64:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 123:
          case 125:
          case 126:
            return true;
          default:
            return false;
        }
      }
      module.exports = function text2(state, silent) {
        var pos = state.pos;
        while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
          pos++;
        }
        if (pos === state.pos) {
          return false;
        }
        if (!silent) {
          state.pending += state.src.slice(state.pos, pos);
        }
        state.pos = pos;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/newline.js
  var require_newline = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/newline.js": function node_modules_markdownIt_lib_rules_inline_newlineJs(exports, module) {

      var isSpace = require_utils().isSpace;
      module.exports = function newline(state, silent) {
        var pmax,
          max2,
          ws,
          pos = state.pos;
        if (state.src.charCodeAt(pos) !== 10) {
          return false;
        }
        pmax = state.pending.length - 1;
        max2 = state.posMax;
        if (!silent) {
          if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
            if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
              ws = pmax - 1;
              while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32) ws--;
              state.pending = state.pending.slice(0, ws);
              state.push("hardbreak", "br", 0);
            } else {
              state.pending = state.pending.slice(0, -1);
              state.push("softbreak", "br", 0);
            }
          } else {
            state.push("softbreak", "br", 0);
          }
        }
        pos++;
        while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {
          pos++;
        }
        state.pos = pos;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/escape.js
  var require_escape = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/escape.js": function node_modules_markdownIt_lib_rules_inline_escapeJs(exports, module) {

      var isSpace = require_utils().isSpace;
      var ESCAPED = [];
      for (i = 0; i < 256; i++) {
        ESCAPED.push(0);
      }
      var i;
      "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function (ch) {
        ESCAPED[ch.charCodeAt(0)] = 1;
      });
      module.exports = function escape(state, silent) {
        var ch,
          pos = state.pos,
          max2 = state.posMax;
        if (state.src.charCodeAt(pos) !== 92) {
          return false;
        }
        pos++;
        if (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (ch < 256 && ESCAPED[ch] !== 0) {
            if (!silent) {
              state.pending += state.src[pos];
            }
            state.pos += 2;
            return true;
          }
          if (ch === 10) {
            if (!silent) {
              state.push("hardbreak", "br", 0);
            }
            pos++;
            while (pos < max2) {
              ch = state.src.charCodeAt(pos);
              if (!isSpace(ch)) {
                break;
              }
              pos++;
            }
            state.pos = pos;
            return true;
          }
        }
        if (!silent) {
          state.pending += "\\";
        }
        state.pos++;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/backticks.js
  var require_backticks = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/backticks.js": function node_modules_markdownIt_lib_rules_inline_backticksJs(exports, module) {

      module.exports = function backtick(state, silent) {
        var start,
          max2,
          marker,
          token,
          matchStart,
          matchEnd,
          openerLength,
          closerLength,
          pos = state.pos,
          ch = state.src.charCodeAt(pos);
        if (ch !== 96) {
          return false;
        }
        start = pos;
        pos++;
        max2 = state.posMax;
        while (pos < max2 && state.src.charCodeAt(pos) === 96) {
          pos++;
        }
        marker = state.src.slice(start, pos);
        openerLength = marker.length;
        if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
          if (!silent) state.pending += marker;
          state.pos += openerLength;
          return true;
        }
        matchStart = matchEnd = pos;
        while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
          matchEnd = matchStart + 1;
          while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
            matchEnd++;
          }
          closerLength = matchEnd - matchStart;
          if (closerLength === openerLength) {
            if (!silent) {
              token = state.push("code_inline", "code", 0);
              token.markup = marker;
              token.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
            }
            state.pos = matchEnd;
            return true;
          }
          state.backticks[closerLength] = matchStart;
        }
        state.backticksScanned = true;
        if (!silent) state.pending += marker;
        state.pos += openerLength;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/strikethrough.js
  var require_strikethrough = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/strikethrough.js": function node_modules_markdownIt_lib_rules_inline_strikethroughJs(exports, module) {

      module.exports.tokenize = function strikethrough(state, silent) {
        var i,
          scanned,
          token,
          len,
          ch,
          start = state.pos,
          marker = state.src.charCodeAt(start);
        if (silent) {
          return false;
        }
        if (marker !== 126) {
          return false;
        }
        scanned = state.scanDelims(state.pos, true);
        len = scanned.length;
        ch = String.fromCharCode(marker);
        if (len < 2) {
          return false;
        }
        if (len % 2) {
          token = state.push("text", "", 0);
          token.content = ch;
          len--;
        }
        for (i = 0; i < len; i += 2) {
          token = state.push("text", "", 0);
          token.content = ch + ch;
          state.delimiters.push({
            marker: marker,
            length: 0,
            token: state.tokens.length - 1,
            end: -1,
            open: scanned.can_open,
            close: scanned.can_close
          });
        }
        state.pos += scanned.length;
        return true;
      };
      function postProcess(state, delimiters) {
        var i,
          j,
          startDelim,
          endDelim,
          token,
          loneMarkers = [],
          max2 = delimiters.length;
        for (i = 0; i < max2; i++) {
          startDelim = delimiters[i];
          if (startDelim.marker !== 126) {
            continue;
          }
          if (startDelim.end === -1) {
            continue;
          }
          endDelim = delimiters[startDelim.end];
          token = state.tokens[startDelim.token];
          token.type = "s_open";
          token.tag = "s";
          token.nesting = 1;
          token.markup = "~~";
          token.content = "";
          token = state.tokens[endDelim.token];
          token.type = "s_close";
          token.tag = "s";
          token.nesting = -1;
          token.markup = "~~";
          token.content = "";
          if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
            loneMarkers.push(endDelim.token - 1);
          }
        }
        while (loneMarkers.length) {
          i = loneMarkers.pop();
          j = i + 1;
          while (j < state.tokens.length && state.tokens[j].type === "s_close") {
            j++;
          }
          j--;
          if (i !== j) {
            token = state.tokens[j];
            state.tokens[j] = state.tokens[i];
            state.tokens[i] = token;
          }
        }
      }
      module.exports.postProcess = function strikethrough(state) {
        var curr,
          tokens_meta = state.tokens_meta,
          max2 = state.tokens_meta.length;
        postProcess(state, state.delimiters);
        for (curr = 0; curr < max2; curr++) {
          if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
            postProcess(state, tokens_meta[curr].delimiters);
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/emphasis.js
  var require_emphasis = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/emphasis.js": function node_modules_markdownIt_lib_rules_inline_emphasisJs(exports, module) {

      module.exports.tokenize = function emphasis(state, silent) {
        var i,
          scanned,
          token,
          start = state.pos,
          marker = state.src.charCodeAt(start);
        if (silent) {
          return false;
        }
        if (marker !== 95 && marker !== 42) {
          return false;
        }
        scanned = state.scanDelims(state.pos, marker === 42);
        for (i = 0; i < scanned.length; i++) {
          token = state.push("text", "", 0);
          token.content = String.fromCharCode(marker);
          state.delimiters.push({
            marker: marker,
            length: scanned.length,
            token: state.tokens.length - 1,
            end: -1,
            open: scanned.can_open,
            close: scanned.can_close
          });
        }
        state.pos += scanned.length;
        return true;
      };
      function postProcess(state, delimiters) {
        var i,
          startDelim,
          endDelim,
          token,
          ch,
          isStrong,
          max2 = delimiters.length;
        for (i = max2 - 1; i >= 0; i--) {
          startDelim = delimiters[i];
          if (startDelim.marker !== 95 && startDelim.marker !== 42) {
            continue;
          }
          if (startDelim.end === -1) {
            continue;
          }
          endDelim = delimiters[startDelim.end];
          isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
          ch = String.fromCharCode(startDelim.marker);
          token = state.tokens[startDelim.token];
          token.type = isStrong ? "strong_open" : "em_open";
          token.tag = isStrong ? "strong" : "em";
          token.nesting = 1;
          token.markup = isStrong ? ch + ch : ch;
          token.content = "";
          token = state.tokens[endDelim.token];
          token.type = isStrong ? "strong_close" : "em_close";
          token.tag = isStrong ? "strong" : "em";
          token.nesting = -1;
          token.markup = isStrong ? ch + ch : ch;
          token.content = "";
          if (isStrong) {
            state.tokens[delimiters[i - 1].token].content = "";
            state.tokens[delimiters[startDelim.end + 1].token].content = "";
            i--;
          }
        }
      }
      module.exports.postProcess = function emphasis(state) {
        var curr,
          tokens_meta = state.tokens_meta,
          max2 = state.tokens_meta.length;
        postProcess(state, state.delimiters);
        for (curr = 0; curr < max2; curr++) {
          if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
            postProcess(state, tokens_meta[curr].delimiters);
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/link.js
  var require_link = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/link.js": function node_modules_markdownIt_lib_rules_inline_linkJs(exports, module) {

      var normalizeReference = require_utils().normalizeReference;
      var isSpace = require_utils().isSpace;
      module.exports = function link2(state, silent) {
        var attrs,
          code2,
          label,
          labelEnd,
          labelStart,
          pos,
          res,
          ref,
          token,
          href = "",
          title = "",
          oldPos = state.pos,
          max2 = state.posMax,
          start = state.pos,
          parseReference = true;
        if (state.src.charCodeAt(state.pos) !== 91) {
          return false;
        }
        labelStart = state.pos + 1;
        labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
        if (labelEnd < 0) {
          return false;
        }
        pos = labelEnd + 1;
        if (pos < max2 && state.src.charCodeAt(pos) === 40) {
          parseReference = false;
          pos++;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          if (pos >= max2) {
            return false;
          }
          start = pos;
          res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
          if (res.ok) {
            href = state.md.normalizeLink(res.str);
            if (state.md.validateLink(href)) {
              pos = res.pos;
            } else {
              href = "";
            }
            start = pos;
            for (; pos < max2; pos++) {
              code2 = state.src.charCodeAt(pos);
              if (!isSpace(code2) && code2 !== 10) {
                break;
              }
            }
            res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
            if (pos < max2 && start !== pos && res.ok) {
              title = res.str;
              pos = res.pos;
              for (; pos < max2; pos++) {
                code2 = state.src.charCodeAt(pos);
                if (!isSpace(code2) && code2 !== 10) {
                  break;
                }
              }
            }
          }
          if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
            parseReference = true;
          }
          pos++;
        }
        if (parseReference) {
          if (typeof state.env.references === "undefined") {
            return false;
          }
          if (pos < max2 && state.src.charCodeAt(pos) === 91) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);
            if (pos >= 0) {
              label = state.src.slice(start, pos++);
            } else {
              pos = labelEnd + 1;
            }
          } else {
            pos = labelEnd + 1;
          }
          if (!label) {
            label = state.src.slice(labelStart, labelEnd);
          }
          ref = state.env.references[normalizeReference(label)];
          if (!ref) {
            state.pos = oldPos;
            return false;
          }
          href = ref.href;
          title = ref.title;
        }
        if (!silent) {
          state.pos = labelStart;
          state.posMax = labelEnd;
          token = state.push("link_open", "a", 1);
          token.attrs = attrs = [["href", href]];
          if (title) {
            attrs.push(["title", title]);
          }
          state.md.inline.tokenize(state);
          token = state.push("link_close", "a", -1);
        }
        state.pos = pos;
        state.posMax = max2;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/image.js
  var require_image = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/image.js": function node_modules_markdownIt_lib_rules_inline_imageJs(exports, module) {

      var normalizeReference = require_utils().normalizeReference;
      var isSpace = require_utils().isSpace;
      module.exports = function image2(state, silent) {
        var attrs,
          code2,
          content,
          label,
          labelEnd,
          labelStart,
          pos,
          ref,
          res,
          title,
          token,
          tokens,
          start,
          href = "",
          oldPos = state.pos,
          max2 = state.posMax;
        if (state.src.charCodeAt(state.pos) !== 33) {
          return false;
        }
        if (state.src.charCodeAt(state.pos + 1) !== 91) {
          return false;
        }
        labelStart = state.pos + 2;
        labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
        if (labelEnd < 0) {
          return false;
        }
        pos = labelEnd + 1;
        if (pos < max2 && state.src.charCodeAt(pos) === 40) {
          pos++;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          if (pos >= max2) {
            return false;
          }
          start = pos;
          res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
          if (res.ok) {
            href = state.md.normalizeLink(res.str);
            if (state.md.validateLink(href)) {
              pos = res.pos;
            } else {
              href = "";
            }
          }
          start = pos;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
          if (pos < max2 && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
            for (; pos < max2; pos++) {
              code2 = state.src.charCodeAt(pos);
              if (!isSpace(code2) && code2 !== 10) {
                break;
              }
            }
          } else {
            title = "";
          }
          if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
            state.pos = oldPos;
            return false;
          }
          pos++;
        } else {
          if (typeof state.env.references === "undefined") {
            return false;
          }
          if (pos < max2 && state.src.charCodeAt(pos) === 91) {
            start = pos + 1;
            pos = state.md.helpers.parseLinkLabel(state, pos);
            if (pos >= 0) {
              label = state.src.slice(start, pos++);
            } else {
              pos = labelEnd + 1;
            }
          } else {
            pos = labelEnd + 1;
          }
          if (!label) {
            label = state.src.slice(labelStart, labelEnd);
          }
          ref = state.env.references[normalizeReference(label)];
          if (!ref) {
            state.pos = oldPos;
            return false;
          }
          href = ref.href;
          title = ref.title;
        }
        if (!silent) {
          content = state.src.slice(labelStart, labelEnd);
          state.md.inline.parse(content, state.md, state.env, tokens = []);
          token = state.push("image", "img", 0);
          token.attrs = attrs = [["src", href], ["alt", ""]];
          token.children = tokens;
          token.content = content;
          if (title) {
            attrs.push(["title", title]);
          }
        }
        state.pos = pos;
        state.posMax = max2;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/autolink.js
  var require_autolink = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/autolink.js": function node_modules_markdownIt_lib_rules_inline_autolinkJs(exports, module) {

      var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
      var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
      module.exports = function autolink(state, silent) {
        var url,
          fullUrl,
          token,
          ch,
          start,
          max2,
          pos = state.pos;
        if (state.src.charCodeAt(pos) !== 60) {
          return false;
        }
        start = state.pos;
        max2 = state.posMax;
        for (;;) {
          if (++pos >= max2) return false;
          ch = state.src.charCodeAt(pos);
          if (ch === 60) return false;
          if (ch === 62) break;
        }
        url = state.src.slice(start + 1, pos);
        if (AUTOLINK_RE.test(url)) {
          fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) {
            return false;
          }
          if (!silent) {
            token = state.push("link_open", "a", 1);
            token.attrs = [["href", fullUrl]];
            token.markup = "autolink";
            token.info = "auto";
            token = state.push("text", "", 0);
            token.content = state.md.normalizeLinkText(url);
            token = state.push("link_close", "a", -1);
            token.markup = "autolink";
            token.info = "auto";
          }
          state.pos += url.length + 2;
          return true;
        }
        if (EMAIL_RE.test(url)) {
          fullUrl = state.md.normalizeLink("mailto:" + url);
          if (!state.md.validateLink(fullUrl)) {
            return false;
          }
          if (!silent) {
            token = state.push("link_open", "a", 1);
            token.attrs = [["href", fullUrl]];
            token.markup = "autolink";
            token.info = "auto";
            token = state.push("text", "", 0);
            token.content = state.md.normalizeLinkText(url);
            token = state.push("link_close", "a", -1);
            token.markup = "autolink";
            token.info = "auto";
          }
          state.pos += url.length + 2;
          return true;
        }
        return false;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/html_inline.js
  var require_html_inline = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/html_inline.js": function node_modules_markdownIt_lib_rules_inline_html_inlineJs(exports, module) {

      var HTML_TAG_RE = require_html_re().HTML_TAG_RE;
      function isLetter(ch) {
        var lc = ch | 32;
        return lc >= 97 && lc <= 122;
      }
      module.exports = function html_inline(state, silent) {
        var ch,
          match,
          max2,
          token,
          pos = state.pos;
        if (!state.md.options.html) {
          return false;
        }
        max2 = state.posMax;
        if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {
          return false;
        }
        ch = state.src.charCodeAt(pos + 1);
        if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
          return false;
        }
        match = state.src.slice(pos).match(HTML_TAG_RE);
        if (!match) {
          return false;
        }
        if (!silent) {
          token = state.push("html_inline", "", 0);
          token.content = state.src.slice(pos, pos + match[0].length);
        }
        state.pos += match[0].length;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/entity.js
  var require_entity = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/entity.js": function node_modules_markdownIt_lib_rules_inline_entityJs(exports, module) {

      var entities = require_entities2();
      var has = require_utils().has;
      var isValidEntityCode = require_utils().isValidEntityCode;
      var fromCodePoint = require_utils().fromCodePoint;
      var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
      var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
      module.exports = function entity(state, silent) {
        var ch,
          code2,
          match,
          pos = state.pos,
          max2 = state.posMax;
        if (state.src.charCodeAt(pos) !== 38) {
          return false;
        }
        if (pos + 1 < max2) {
          ch = state.src.charCodeAt(pos + 1);
          if (ch === 35) {
            match = state.src.slice(pos).match(DIGITAL_RE);
            if (match) {
              if (!silent) {
                code2 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
                state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);
              }
              state.pos += match[0].length;
              return true;
            }
          } else {
            match = state.src.slice(pos).match(NAMED_RE);
            if (match) {
              if (has(entities, match[1])) {
                if (!silent) {
                  state.pending += entities[match[1]];
                }
                state.pos += match[0].length;
                return true;
              }
            }
          }
        }
        if (!silent) {
          state.pending += "&";
        }
        state.pos++;
        return true;
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/balance_pairs.js
  var require_balance_pairs = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/balance_pairs.js": function node_modules_markdownIt_lib_rules_inline_balance_pairsJs(exports, module) {

      function processDelimiters(state, delimiters) {
        var closerIdx,
          openerIdx,
          closer,
          opener,
          minOpenerIdx,
          newMinOpenerIdx,
          isOddMatch,
          lastJump,
          openersBottom = {},
          max2 = delimiters.length;
        if (!max2) return;
        var headerIdx = 0;
        var lastTokenIdx = -2;
        var jumps = [];
        for (closerIdx = 0; closerIdx < max2; closerIdx++) {
          closer = delimiters[closerIdx];
          jumps.push(0);
          if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
            headerIdx = closerIdx;
          }
          lastTokenIdx = closer.token;
          closer.length = closer.length || 0;
          if (!closer.close) continue;
          if (!openersBottom.hasOwnProperty(closer.marker)) {
            openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
          }
          minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
          openerIdx = headerIdx - jumps[headerIdx] - 1;
          newMinOpenerIdx = openerIdx;
          for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
            opener = delimiters[openerIdx];
            if (opener.marker !== closer.marker) continue;
            if (opener.open && opener.end < 0) {
              isOddMatch = false;
              if (opener.close || closer.open) {
                if ((opener.length + closer.length) % 3 === 0) {
                  if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                    isOddMatch = true;
                  }
                }
              }
              if (!isOddMatch) {
                lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
                jumps[closerIdx] = closerIdx - openerIdx + lastJump;
                jumps[openerIdx] = lastJump;
                closer.open = false;
                opener.end = closerIdx;
                opener.close = false;
                newMinOpenerIdx = -1;
                lastTokenIdx = -2;
                break;
              }
            }
          }
          if (newMinOpenerIdx !== -1) {
            openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
          }
        }
      }
      module.exports = function link_pairs(state) {
        var curr,
          tokens_meta = state.tokens_meta,
          max2 = state.tokens_meta.length;
        processDelimiters(state, state.delimiters);
        for (curr = 0; curr < max2; curr++) {
          if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
            processDelimiters(state, tokens_meta[curr].delimiters);
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/text_collapse.js
  var require_text_collapse = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/text_collapse.js": function node_modules_markdownIt_lib_rules_inline_text_collapseJs(exports, module) {

      module.exports = function text_collapse(state) {
        var curr,
          last,
          level = 0,
          tokens = state.tokens,
          max2 = state.tokens.length;
        for (curr = last = 0; curr < max2; curr++) {
          if (tokens[curr].nesting < 0) level--;
          tokens[curr].level = level;
          if (tokens[curr].nesting > 0) level++;
          if (tokens[curr].type === "text" && curr + 1 < max2 && tokens[curr + 1].type === "text") {
            tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
          } else {
            if (curr !== last) {
              tokens[last] = tokens[curr];
            }
            last++;
          }
        }
        if (curr !== last) {
          tokens.length = last;
        }
      };
    }
  });

  // node_modules/markdown-it/lib/rules_inline/state_inline.js
  var require_state_inline = __commonJS({
    "node_modules/markdown-it/lib/rules_inline/state_inline.js": function node_modules_markdownIt_lib_rules_inline_state_inlineJs(exports, module) {

      var Token = require_token();
      var isWhiteSpace = require_utils().isWhiteSpace;
      var isPunctChar = require_utils().isPunctChar;
      var isMdAsciiPunct = require_utils().isMdAsciiPunct;
      function StateInline(src, md, env, outTokens) {
        this.src = src;
        this.env = env;
        this.md = md;
        this.tokens = outTokens;
        this.tokens_meta = Array(outTokens.length);
        this.pos = 0;
        this.posMax = this.src.length;
        this.level = 0;
        this.pending = "";
        this.pendingLevel = 0;
        this.cache = {};
        this.delimiters = [];
        this._prev_delimiters = [];
        this.backticks = {};
        this.backticksScanned = false;
      }
      StateInline.prototype.pushPending = function () {
        var token = new Token("text", "", 0);
        token.content = this.pending;
        token.level = this.pendingLevel;
        this.tokens.push(token);
        this.pending = "";
        return token;
      };
      StateInline.prototype.push = function (type, tag, nesting) {
        if (this.pending) {
          this.pushPending();
        }
        var token = new Token(type, tag, nesting);
        var token_meta = null;
        if (nesting < 0) {
          this.level--;
          this.delimiters = this._prev_delimiters.pop();
        }
        token.level = this.level;
        if (nesting > 0) {
          this.level++;
          this._prev_delimiters.push(this.delimiters);
          this.delimiters = [];
          token_meta = {
            delimiters: this.delimiters
          };
        }
        this.pendingLevel = this.level;
        this.tokens.push(token);
        this.tokens_meta.push(token_meta);
        return token;
      };
      StateInline.prototype.scanDelims = function (start, canSplitWord) {
        var pos = start,
          lastChar,
          nextChar,
          count,
          can_open,
          can_close,
          isLastWhiteSpace,
          isLastPunctChar,
          isNextWhiteSpace,
          isNextPunctChar,
          left_flanking = true,
          right_flanking = true,
          max2 = this.posMax,
          marker = this.src.charCodeAt(start);
        lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;
        while (pos < max2 && this.src.charCodeAt(pos) === marker) {
          pos++;
        }
        count = pos - start;
        nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;
        isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
        isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
        isLastWhiteSpace = isWhiteSpace(lastChar);
        isNextWhiteSpace = isWhiteSpace(nextChar);
        if (isNextWhiteSpace) {
          left_flanking = false;
        } else if (isNextPunctChar) {
          if (!(isLastWhiteSpace || isLastPunctChar)) {
            left_flanking = false;
          }
        }
        if (isLastWhiteSpace) {
          right_flanking = false;
        } else if (isLastPunctChar) {
          if (!(isNextWhiteSpace || isNextPunctChar)) {
            right_flanking = false;
          }
        }
        if (!canSplitWord) {
          can_open = left_flanking && (!right_flanking || isLastPunctChar);
          can_close = right_flanking && (!left_flanking || isNextPunctChar);
        } else {
          can_open = left_flanking;
          can_close = right_flanking;
        }
        return {
          can_open: can_open,
          can_close: can_close,
          length: count
        };
      };
      StateInline.prototype.Token = Token;
      module.exports = StateInline;
    }
  });

  // node_modules/markdown-it/lib/parser_inline.js
  var require_parser_inline = __commonJS({
    "node_modules/markdown-it/lib/parser_inline.js": function node_modules_markdownIt_lib_parser_inlineJs(exports, module) {

      var Ruler = require_ruler();
      var _rules = [["text", require_text()], ["newline", require_newline()], ["escape", require_escape()], ["backticks", require_backticks()], ["strikethrough", require_strikethrough().tokenize], ["emphasis", require_emphasis().tokenize], ["link", require_link()], ["image", require_image()], ["autolink", require_autolink()], ["html_inline", require_html_inline()], ["entity", require_entity()]];
      var _rules2 = [["balance_pairs", require_balance_pairs()], ["strikethrough", require_strikethrough().postProcess], ["emphasis", require_emphasis().postProcess], ["text_collapse", require_text_collapse()]];
      function ParserInline() {
        var i;
        this.ruler = new Ruler();
        for (i = 0; i < _rules.length; i++) {
          this.ruler.push(_rules[i][0], _rules[i][1]);
        }
        this.ruler2 = new Ruler();
        for (i = 0; i < _rules2.length; i++) {
          this.ruler2.push(_rules2[i][0], _rules2[i][1]);
        }
      }
      ParserInline.prototype.skipToken = function (state) {
        var ok,
          i,
          pos = state.pos,
          rules = this.ruler.getRules(""),
          len = rules.length,
          maxNesting = state.md.options.maxNesting,
          cache = state.cache;
        if (typeof cache[pos] !== "undefined") {
          state.pos = cache[pos];
          return;
        }
        if (state.level < maxNesting) {
          for (i = 0; i < len; i++) {
            state.level++;
            ok = rules[i](state, true);
            state.level--;
            if (ok) {
              break;
            }
          }
        } else {
          state.pos = state.posMax;
        }
        if (!ok) {
          state.pos++;
        }
        cache[pos] = state.pos;
      };
      ParserInline.prototype.tokenize = function (state) {
        var ok,
          i,
          rules = this.ruler.getRules(""),
          len = rules.length,
          end = state.posMax,
          maxNesting = state.md.options.maxNesting;
        while (state.pos < end) {
          if (state.level < maxNesting) {
            for (i = 0; i < len; i++) {
              ok = rules[i](state, false);
              if (ok) {
                break;
              }
            }
          }
          if (ok) {
            if (state.pos >= end) {
              break;
            }
            continue;
          }
          state.pending += state.src[state.pos++];
        }
        if (state.pending) {
          state.pushPending();
        }
      };
      ParserInline.prototype.parse = function (str, md, env, outTokens) {
        var i, rules, len;
        var state = new this.State(str, md, env, outTokens);
        this.tokenize(state);
        rules = this.ruler2.getRules("");
        len = rules.length;
        for (i = 0; i < len; i++) {
          rules[i](state);
        }
      };
      ParserInline.prototype.State = require_state_inline();
      module.exports = ParserInline;
    }
  });

  // node_modules/linkify-it/lib/re.js
  var require_re = __commonJS({
    "node_modules/linkify-it/lib/re.js": function node_modules_linkifyIt_lib_reJs(exports, module) {

      module.exports = function (opts) {
        var re = {};
        re.src_Any = require_regex2().source;
        re.src_Cc = require_regex3().source;
        re.src_Z = require_regex5().source;
        re.src_P = require_regex().source;
        re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
        re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
        var text_separators = "[><\uFF5C]";
        re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
        re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
        re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
        re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
        re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
        re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + "|[()[\\]{}.,\"'?!\\-;]).|\\[(?:(?!" + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + "|[\"]).)+\\\"|\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re.src_ZCc + ").|;(?!" + re.src_ZCc + ").|\\!+(?!" + re.src_ZCc + "|[!]).|\\?(?!" + re.src_ZCc + "|[?]).)+|\\/)?";
        re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
        re.src_xn = "xn--[a-z0-9\\-]{1,59}";
        re.src_domain_root = "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
        re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
        re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
        re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
        re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
        re.src_host_strict = re.src_host + re.src_host_terminator;
        re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
        re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
        re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
        re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
        re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
        re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
        re.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
        re.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
        return re;
      };
    }
  });

  // node_modules/linkify-it/index.js
  var require_linkify_it = __commonJS({
    "node_modules/linkify-it/index.js": function node_modules_linkifyIt_indexJs(exports, module) {

      function assign(obj) {
        var sources = Array.prototype.slice.call(arguments, 1);
        sources.forEach(function (source) {
          if (!source) {
            return;
          }
          Object.keys(source).forEach(function (key) {
            obj[key] = source[key];
          });
        });
        return obj;
      }
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      function isString(obj) {
        return _class(obj) === "[object String]";
      }
      function isObject(obj) {
        return _class(obj) === "[object Object]";
      }
      function isRegExp(obj) {
        return _class(obj) === "[object RegExp]";
      }
      function isFunction2(obj) {
        return _class(obj) === "[object Function]";
      }
      function escapeRE(str) {
        return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
      }
      var defaultOptions = {
        fuzzyLink: true,
        fuzzyEmail: true,
        fuzzyIP: false
      };
      function isOptionsObj(obj) {
        return Object.keys(obj || {}).reduce(function (acc, k) {
          return acc || defaultOptions.hasOwnProperty(k);
        }, false);
      }
      var defaultSchemas = {
        "http:": {
          validate: function validate(text2, pos, self) {
            var tail = text2.slice(pos);
            if (!self.re.http) {
              self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
            }
            if (self.re.http.test(tail)) {
              return tail.match(self.re.http)[0].length;
            }
            return 0;
          }
        },
        "https:": "http:",
        "ftp:": "http:",
        "//": {
          validate: function validate(text2, pos, self) {
            var tail = text2.slice(pos);
            if (!self.re.no_http) {
              self.re.no_http = new RegExp("^" + self.re.src_auth + "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
            }
            if (self.re.no_http.test(tail)) {
              if (pos >= 3 && text2[pos - 3] === ":") {
                return 0;
              }
              if (pos >= 3 && text2[pos - 3] === "/") {
                return 0;
              }
              return tail.match(self.re.no_http)[0].length;
            }
            return 0;
          }
        },
        "mailto:": {
          validate: function validate(text2, pos, self) {
            var tail = text2.slice(pos);
            if (!self.re.mailto) {
              self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
            }
            if (self.re.mailto.test(tail)) {
              return tail.match(self.re.mailto)[0].length;
            }
            return 0;
          }
        }
      };
      var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
      var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
      function resetScanCache(self) {
        self.__index__ = -1;
        self.__text_cache__ = "";
      }
      function createValidator(re) {
        return function (text2, pos) {
          var tail = text2.slice(pos);
          if (re.test(tail)) {
            return tail.match(re)[0].length;
          }
          return 0;
        };
      }
      function createNormalizer() {
        return function (match, self) {
          self.normalize(match);
        };
      }
      function compile(self) {
        var re = self.re = require_re()(self.__opts__);
        var tlds = self.__tlds__.slice();
        self.onCompile();
        if (!self.__tlds_replaced__) {
          tlds.push(tlds_2ch_src_re);
        }
        tlds.push(re.src_xn);
        re.src_tlds = tlds.join("|");
        function untpl(tpl) {
          return tpl.replace("%TLDS%", re.src_tlds);
        }
        re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
        re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
        re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
        re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
        var aliases = [];
        self.__compiled__ = {};
        function schemaError(name, val) {
          throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
        }
        Object.keys(self.__schemas__).forEach(function (name) {
          var val = self.__schemas__[name];
          if (val === null) {
            return;
          }
          var compiled = {
            validate: null,
            link: null
          };
          self.__compiled__[name] = compiled;
          if (isObject(val)) {
            if (isRegExp(val.validate)) {
              compiled.validate = createValidator(val.validate);
            } else if (isFunction2(val.validate)) {
              compiled.validate = val.validate;
            } else {
              schemaError(name, val);
            }
            if (isFunction2(val.normalize)) {
              compiled.normalize = val.normalize;
            } else if (!val.normalize) {
              compiled.normalize = createNormalizer();
            } else {
              schemaError(name, val);
            }
            return;
          }
          if (isString(val)) {
            aliases.push(name);
            return;
          }
          schemaError(name, val);
        });
        aliases.forEach(function (alias) {
          if (!self.__compiled__[self.__schemas__[alias]]) {
            return;
          }
          self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
          self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
        });
        self.__compiled__[""] = {
          validate: null,
          normalize: createNormalizer()
        };
        var slist = Object.keys(self.__compiled__).filter(function (name) {
          return name.length > 0 && self.__compiled__[name];
        }).map(escapeRE).join("|");
        self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "i");
        self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
        self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
        resetScanCache(self);
      }
      function Match(self, shift) {
        var start = self.__index__,
          end = self.__last_index__,
          text2 = self.__text_cache__.slice(start, end);
        this.schema = self.__schema__.toLowerCase();
        this.index = start + shift;
        this.lastIndex = end + shift;
        this.raw = text2;
        this.text = text2;
        this.url = text2;
      }
      function createMatch(self, shift) {
        var match = new Match(self, shift);
        self.__compiled__[match.schema].normalize(match, self);
        return match;
      }
      function LinkifyIt(schemas, options) {
        if (!(this instanceof LinkifyIt)) {
          return new LinkifyIt(schemas, options);
        }
        if (!options) {
          if (isOptionsObj(schemas)) {
            options = schemas;
            schemas = {};
          }
        }
        this.__opts__ = assign({}, defaultOptions, options);
        this.__index__ = -1;
        this.__last_index__ = -1;
        this.__schema__ = "";
        this.__text_cache__ = "";
        this.__schemas__ = assign({}, defaultSchemas, schemas);
        this.__compiled__ = {};
        this.__tlds__ = tlds_default;
        this.__tlds_replaced__ = false;
        this.re = {};
        compile(this);
      }
      LinkifyIt.prototype.add = function add(schema, definition) {
        this.__schemas__[schema] = definition;
        compile(this);
        return this;
      };
      LinkifyIt.prototype.set = function set(options) {
        this.__opts__ = assign(this.__opts__, options);
        return this;
      };
      LinkifyIt.prototype.test = function test(text2) {
        this.__text_cache__ = text2;
        this.__index__ = -1;
        if (!text2.length) {
          return false;
        }
        var m, ml, me, len, shift, next, re, tld_pos, at_pos;
        if (this.re.schema_test.test(text2)) {
          re = this.re.schema_search;
          re.lastIndex = 0;
          while ((m = re.exec(text2)) !== null) {
            len = this.testSchemaAt(text2, m[2], re.lastIndex);
            if (len) {
              this.__schema__ = m[2];
              this.__index__ = m.index + m[1].length;
              this.__last_index__ = m.index + m[0].length + len;
              break;
            }
          }
        }
        if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
          tld_pos = text2.search(this.re.host_fuzzy_test);
          if (tld_pos >= 0) {
            if (this.__index__ < 0 || tld_pos < this.__index__) {
              if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
                shift = ml.index + ml[1].length;
                if (this.__index__ < 0 || shift < this.__index__) {
                  this.__schema__ = "";
                  this.__index__ = shift;
                  this.__last_index__ = ml.index + ml[0].length;
                }
              }
            }
          }
        }
        if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
          at_pos = text2.indexOf("@");
          if (at_pos >= 0) {
            if ((me = text2.match(this.re.email_fuzzy)) !== null) {
              shift = me.index + me[1].length;
              next = me.index + me[0].length;
              if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
                this.__schema__ = "mailto:";
                this.__index__ = shift;
                this.__last_index__ = next;
              }
            }
          }
        }
        return this.__index__ >= 0;
      };
      LinkifyIt.prototype.pretest = function pretest(text2) {
        return this.re.pretest.test(text2);
      };
      LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {
        if (!this.__compiled__[schema.toLowerCase()]) {
          return 0;
        }
        return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);
      };
      LinkifyIt.prototype.match = function match(text2) {
        var shift = 0,
          result = [];
        if (this.__index__ >= 0 && this.__text_cache__ === text2) {
          result.push(createMatch(this, shift));
          shift = this.__last_index__;
        }
        var tail = shift ? text2.slice(shift) : text2;
        while (this.test(tail)) {
          result.push(createMatch(this, shift));
          tail = tail.slice(this.__last_index__);
          shift += this.__last_index__;
        }
        if (result.length) {
          return result;
        }
        return null;
      };
      LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {
        list2 = Array.isArray(list2) ? list2 : [list2];
        if (!keepOld) {
          this.__tlds__ = list2.slice();
          this.__tlds_replaced__ = true;
          compile(this);
          return this;
        }
        this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function (el, idx, arr) {
          return el !== arr[idx - 1];
        }).reverse();
        compile(this);
        return this;
      };
      LinkifyIt.prototype.normalize = function normalize(match) {
        if (!match.schema) {
          match.url = "http://" + match.url;
        }
        if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) {
          match.url = "mailto:" + match.url;
        }
      };
      LinkifyIt.prototype.onCompile = function onCompile() {};
      module.exports = LinkifyIt;
    }
  });

  // node_modules/punycode/punycode.js
  var require_punycode = __commonJS({
    "node_modules/punycode/punycode.js": function node_modules_punycode_punycodeJs(exports, module) {

      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error2(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = function ucs2encode(array) {
        return String.fromCodePoint.apply(String, _toConsumableArray(array));
      };
      var basicToDigit = function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var decode = function decode(input) {
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;
        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (var j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error2("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
          var oldi = i;
          for (var w = 1, k = base;; k += base) {
            if (index >= inputLength) {
              error2("invalid-input");
            }
            var digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error2("overflow");
            }
            i += digit * w;
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            var baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error2("overflow");
            }
            w *= baseMinusT;
          }
          var out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error2("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return String.fromCodePoint.apply(String, output);
      };
      var encode = function encode(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var _iterator3 = _createForOfIteratorHelper$1(input),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _currentValue2 = _step3.value;
            if (_currentValue2 < 128) {
              output.push(stringFromCharCode(_currentValue2));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          var _iterator4 = _createForOfIteratorHelper$1(input),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var currentValue = _step4.value;
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error2("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          var _iterator5 = _createForOfIteratorHelper$1(input),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _currentValue = _step5.value;
              if (_currentValue < n && ++delta > maxInt) {
                error2("overflow");
              }
              if (_currentValue == n) {
                var q = delta;
                for (var k = base;; k += base) {
                  var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  var qMinusT = q - t;
                  var baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
          ++delta;
          ++n;
        }
        return output.join("");
      };
      var toUnicode = function toUnicode(input) {
        return mapDomain(input, function (string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      var toASCII = function toASCII(input) {
        return mapDomain(input, function (string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      var punycode = {
        "version": "2.1.0",
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      module.exports = punycode;
    }
  });

  // node_modules/markdown-it/lib/presets/default.js
  var require_default = __commonJS({
    "node_modules/markdown-it/lib/presets/default.js": function node_modules_markdownIt_lib_presets_defaultJs(exports, module) {

      module.exports = {
        options: {
          html: false,
          xhtmlOut: false,
          breaks: false,
          langPrefix: "language-",
          linkify: false,
          typographer: false,
          quotes: "\u201C\u201D\u2018\u2019",
          highlight: null,
          maxNesting: 100
        },
        components: {
          core: {},
          block: {},
          inline: {}
        }
      };
    }
  });

  // node_modules/markdown-it/lib/presets/zero.js
  var require_zero = __commonJS({
    "node_modules/markdown-it/lib/presets/zero.js": function node_modules_markdownIt_lib_presets_zeroJs(exports, module) {

      module.exports = {
        options: {
          html: false,
          xhtmlOut: false,
          breaks: false,
          langPrefix: "language-",
          linkify: false,
          typographer: false,
          quotes: "\u201C\u201D\u2018\u2019",
          highlight: null,
          maxNesting: 20
        },
        components: {
          core: {
            rules: ["normalize", "block", "inline"]
          },
          block: {
            rules: ["paragraph"]
          },
          inline: {
            rules: ["text"],
            rules2: ["balance_pairs", "text_collapse"]
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/presets/commonmark.js
  var require_commonmark = __commonJS({
    "node_modules/markdown-it/lib/presets/commonmark.js": function node_modules_markdownIt_lib_presets_commonmarkJs(exports, module) {

      module.exports = {
        options: {
          html: true,
          xhtmlOut: true,
          breaks: false,
          langPrefix: "language-",
          linkify: false,
          typographer: false,
          quotes: "\u201C\u201D\u2018\u2019",
          highlight: null,
          maxNesting: 20
        },
        components: {
          core: {
            rules: ["normalize", "block", "inline"]
          },
          block: {
            rules: ["blockquote", "code", "fence", "heading", "hr", "html_block", "lheading", "list", "reference", "paragraph"]
          },
          inline: {
            rules: ["autolink", "backticks", "emphasis", "entity", "escape", "html_inline", "image", "link", "newline", "text"],
            rules2: ["balance_pairs", "emphasis", "text_collapse"]
          }
        }
      };
    }
  });

  // node_modules/markdown-it/lib/index.js
  var require_lib = __commonJS({
    "node_modules/markdown-it/lib/index.js": function node_modules_markdownIt_lib_indexJs(exports, module) {

      var utils = require_utils();
      var helpers = require_helpers();
      var Renderer = require_renderer();
      var ParserCore = require_parser_core();
      var ParserBlock = require_parser_block();
      var ParserInline = require_parser_inline();
      var LinkifyIt = require_linkify_it();
      var mdurl = require_mdurl();
      var punycode = require_punycode();
      var config = {
        "default": require_default(),
        zero: require_zero(),
        commonmark: require_commonmark()
      };
      var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
      var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
      function validateLink(url) {
        var str = url.trim().toLowerCase();
        return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
      }
      var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
      function normalizeLink(url) {
        var parsed = mdurl.parse(url, true);
        if (parsed.hostname) {
          if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
            try {
              parsed.hostname = punycode.toASCII(parsed.hostname);
            } catch (er) {}
          }
        }
        return mdurl.encode(mdurl.format(parsed));
      }
      function normalizeLinkText(url) {
        var parsed = mdurl.parse(url, true);
        if (parsed.hostname) {
          if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
            try {
              parsed.hostname = punycode.toUnicode(parsed.hostname);
            } catch (er) {}
          }
        }
        return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
      }
      function MarkdownIt3(presetName, options) {
        if (!(this instanceof MarkdownIt3)) {
          return new MarkdownIt3(presetName, options);
        }
        if (!options) {
          if (!utils.isString(presetName)) {
            options = presetName || {};
            presetName = "default";
          }
        }
        this.inline = new ParserInline();
        this.block = new ParserBlock();
        this.core = new ParserCore();
        this.renderer = new Renderer();
        this.linkify = new LinkifyIt();
        this.validateLink = validateLink;
        this.normalizeLink = normalizeLink;
        this.normalizeLinkText = normalizeLinkText;
        this.utils = utils;
        this.helpers = utils.assign({}, helpers);
        this.options = {};
        this.configure(presetName);
        if (options) {
          this.set(options);
        }
      }
      MarkdownIt3.prototype.set = function (options) {
        utils.assign(this.options, options);
        return this;
      };
      MarkdownIt3.prototype.configure = function (presets) {
        var self = this,
          presetName;
        if (utils.isString(presets)) {
          presetName = presets;
          presets = config[presetName];
          if (!presets) {
            throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
          }
        }
        if (!presets) {
          throw new Error("Wrong `markdown-it` preset, can't be empty");
        }
        if (presets.options) {
          self.set(presets.options);
        }
        if (presets.components) {
          Object.keys(presets.components).forEach(function (name) {
            if (presets.components[name].rules) {
              self[name].ruler.enableOnly(presets.components[name].rules);
            }
            if (presets.components[name].rules2) {
              self[name].ruler2.enableOnly(presets.components[name].rules2);
            }
          });
        }
        return this;
      };
      MarkdownIt3.prototype.enable = function (list2, ignoreInvalid) {
        var result = [];
        if (!Array.isArray(list2)) {
          list2 = [list2];
        }
        ["core", "block", "inline"].forEach(function (chain) {
          result = result.concat(this[chain].ruler.enable(list2, true));
        }, this);
        result = result.concat(this.inline.ruler2.enable(list2, true));
        var missed = list2.filter(function (name) {
          return result.indexOf(name) < 0;
        });
        if (missed.length && !ignoreInvalid) {
          throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
        }
        return this;
      };
      MarkdownIt3.prototype.disable = function (list2, ignoreInvalid) {
        var result = [];
        if (!Array.isArray(list2)) {
          list2 = [list2];
        }
        ["core", "block", "inline"].forEach(function (chain) {
          result = result.concat(this[chain].ruler.disable(list2, true));
        }, this);
        result = result.concat(this.inline.ruler2.disable(list2, true));
        var missed = list2.filter(function (name) {
          return result.indexOf(name) < 0;
        });
        if (missed.length && !ignoreInvalid) {
          throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
        }
        return this;
      };
      MarkdownIt3.prototype.use = function (plugin4) {
        var args = [this].concat(Array.prototype.slice.call(arguments, 1));
        plugin4.apply(plugin4, args);
        return this;
      };
      MarkdownIt3.prototype.parse = function (src, env) {
        if (typeof src !== "string") {
          throw new Error("Input data should be a String");
        }
        var state = new this.core.State(src, this, env);
        this.core.process(state);
        return state.tokens;
      };
      MarkdownIt3.prototype.render = function (src, env) {
        env = env || {};
        return this.renderer.render(this.parse(src, env), this.options, env);
      };
      MarkdownIt3.prototype.parseInline = function (src, env) {
        var state = new this.core.State(src, this, env);
        state.inlineMode = true;
        this.core.process(state);
        return state.tokens;
      };
      MarkdownIt3.prototype.renderInline = function (src, env) {
        env = env || {};
        return this.renderer.render(this.parseInline(src, env), this.options, env);
      };
      module.exports = MarkdownIt3;
    }
  });

  // node_modules/markdown-it/index.js
  var require_markdown_it = __commonJS({
    "node_modules/markdown-it/index.js": function node_modules_markdownIt_indexJs(exports, module) {

      module.exports = require_lib();
    }
  });

  // src/ast/base.ts
  var base_exports = {};
  __export(base_exports, {
    getAstValues: function getAstValues() {
      return _getAstValues;
    },
    isAst: function isAst() {
      return _isAst;
    },
    isFunction: function isFunction() {
      return _isFunction;
    },
    isVariable: function isVariable() {
      return _isVariable;
    },
    resolve: function resolve() {
      return _resolve;
    }
  });
  function _isAst(value) {
    return !!(value !== null && value !== void 0 && value.$$mdtype);
  }
  function _isFunction(value) {
    return !!((value === null || value === void 0 ? void 0 : value.$$mdtype) === "Function");
  }
  function _isVariable(value) {
    return !!((value === null || value === void 0 ? void 0 : value.$$mdtype) === "Variable");
  }
  function _getAstValues(value) {
    var _iterator6, _step6, v, _i, _Object$values, _v;
    return _regeneratorRuntime.wrap(function _getAstValues$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(value == null || _typeof$1(value) !== "object")) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return");
        case 2:
          if (!Array.isArray(value)) {
            _context.next = 19;
            break;
          }
          _iterator6 = _createForOfIteratorHelper$1(value);
          _context.prev = 4;
          _iterator6.s();
        case 6:
          if ((_step6 = _iterator6.n()).done) {
            _context.next = 11;
            break;
          }
          v = _step6.value;
          return _context.delegateYield(_getAstValues(v), "t0", 9);
        case 9:
          _context.next = 6;
          break;
        case 11:
          _context.next = 16;
          break;
        case 13:
          _context.prev = 13;
          _context.t1 = _context["catch"](4);
          _iterator6.e(_context.t1);
        case 16:
          _context.prev = 16;
          _iterator6.f();
          return _context.finish(16);
        case 19:
          if (!_isAst(value)) {
            _context.next = 22;
            break;
          }
          _context.next = 22;
          return value;
        case 22:
          if (!(Object.getPrototypeOf(value) !== Object.prototype)) {
            _context.next = 24;
            break;
          }
          return _context.abrupt("return");
        case 24:
          _i = 0, _Object$values = Object.values(value);
        case 25:
          if (!(_i < _Object$values.length)) {
            _context.next = 31;
            break;
          }
          _v = _Object$values[_i];
          return _context.delegateYield(_getAstValues(_v), "t2", 28);
        case 28:
          _i++;
          _context.next = 25;
          break;
        case 31:
        case "end":
          return _context.stop();
      }
    }, _marked, null, [[4, 13, 16, 19]]);
  }
  function _resolve(value) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (value == null || _typeof$1(value) !== "object") return value;
    if (Array.isArray(value)) return value.map(function (item2) {
      return _resolve(item2, config);
    });
    if (_isAst(value) && (value === null || value === void 0 ? void 0 : value.resolve) instanceof Function) return value.resolve(config);
    if (Object.getPrototypeOf(value) !== Object.prototype) return value;
    var output = {};
    for (var _i2 = 0, _Object$entries = Object.entries(value); _i2 < _Object$entries.length; _i2++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
        k = _Object$entries$_i[0],
        v = _Object$entries$_i[1];
      output[k] = _resolve(v, config);
    }
    return output;
  }

  // src/tag.ts
  var Tag = /*#__PURE__*/_createClass(function Tag() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "div";
    var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    _classCallCheck(this, Tag);
    this.$$mdtype = "Tag";
    this.name = name;
    this.attributes = attributes;
    this.children = children;
  });
  Tag.isTag = function (tag) {
    return !!((tag === null || tag === void 0 ? void 0 : tag.$$mdtype) === "Tag");
  };

  // src/schema-types/class.ts
  var Class = /*#__PURE__*/function () {
    function Class() {
      _classCallCheck(this, Class);
    }
    return _createClass(Class, [{
      key: "validate",
      value: function validate(value) {
        if (typeof value === "string" || _typeof$1(value) === "object") return [];
        return [{
          id: "attribute-type-invalid",
          level: "error",
          message: "Attribute 'class' must be type 'string | object'"
        }];
      }
    }, {
      key: "transform",
      value: function transform(value) {
        if (!value || typeof value === "string") return value;
        var classes = [];
        for (var _i3 = 0, _Object$entries2 = Object.entries(value !== null && value !== void 0 ? value : {}); _i3 < _Object$entries2.length; _i3++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
            k = _Object$entries2$_i[0],
            v = _Object$entries2$_i[1];
          if (v) classes.push(k);
        }
        return classes.join(" ");
      }
    }]);
  }();

  // src/schema-types/id.ts
  var Id = /*#__PURE__*/function () {
    function Id() {
      _classCallCheck(this, Id);
    }
    return _createClass(Id, [{
      key: "validate",
      value: function validate(value) {
        if (typeof value === "string" && value.match(/^[a-zA-Z]/)) return [];
        return [{
          id: "attribute-value-invalid",
          level: "error",
          message: "The 'id' attribute must start with a letter"
        }];
      }
    }]);
  }();

  // src/utils.ts
  var import_tag = __toModule(require_tag());

  // src/ast/variable.ts
  var Variable = /*#__PURE__*/function () {
    function Variable() {
      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      _classCallCheck(this, Variable);
      this.$$mdtype = "Variable";
      this.path = path;
    }
    return _createClass(Variable, [{
      key: "resolve",
      value: function resolve() {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          variables = _ref4.variables;
        return variables instanceof Function ? variables(this.path) : this.path.reduce(function () {
          var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var key = arguments.length > 1 ? arguments[1] : undefined;
          return obj[key];
        }, variables);
      }
    }]);
  }();

  // src/ast/function.ts
  var Function2 = /*#__PURE__*/function () {
    function Function2(name, parameters) {
      _classCallCheck(this, Function2);
      this.$$mdtype = "Function";
      this.name = name;
      this.parameters = parameters;
    }
    return _createClass(Function2, [{
      key: "resolve",
      value: function resolve() {
        var _config$functions, _fn$transform;
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var fn = config === null || config === void 0 || (_config$functions = config.functions) === null || _config$functions === void 0 ? void 0 : _config$functions[this.name];
        if (!fn) return null;
        var parameters = _resolve(this.parameters, config);
        return (_fn$transform = fn.transform) === null || _fn$transform === void 0 ? void 0 : _fn$transform.call(fn, parameters, config);
      }
    }]);
  }();

  // src/utils.ts
  var STATES;
  (function (STATES2) {
    STATES2[STATES2["normal"] = 0] = "normal";
    STATES2[STATES2["string"] = 1] = "string";
    STATES2[STATES2["escape"] = 2] = "escape";
  })(STATES || (STATES = {}));
  var OPEN = "{%";
  var CLOSE = "%}";
  var IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;
  function isIdentifier(s2) {
    return typeof s2 === "string" && IDENTIFIER_REGEX.test(s2);
  }
  function isPromise(a) {
    return a && _typeof$1(a) === "object" && typeof a.then === "function";
  }
  function findTagEnd(content) {
    var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var state = 0;
    for (var pos = start; pos < content.length; pos++) {
      var _char = content[pos];
      switch (state) {
        case 1:
          switch (_char) {
            case '"':
              state = 0;
              break;
            case "\\":
              state = 2;
              break;
          }
          break;
        case 2:
          state = 1;
          break;
        case 0:
          if (_char === '"') state = 1;else if (content.startsWith(CLOSE, pos)) return pos;
      }
    }
    return null;
  }
  function parseTag(content, line, contentStart) {
    try {
      return (0, import_tag.parse)(content, {
        Variable: Variable,
        Function: Function2
      });
    } catch (error2) {
      if (!(error2 instanceof import_tag.SyntaxError)) throw error2;
      var message = error2.message,
        _error2$location = error2.location,
        start = _error2$location.start,
        end = _error2$location.end;
      var location = {
        start: {
          line: line,
          character: start.offset + contentStart
        },
        end: {
          line: line + 1,
          character: end.offset + contentStart
        }
      };
      return {
        type: "error",
        meta: {
          error: {
            message: message,
            location: location
          }
        }
      };
    }
  }
  function parseTags(content) {
    var firstLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var line = firstLine + 1;
    var output = [];
    var start = 0;
    for (var pos = 0; pos < content.length; pos++) {
      if (content[pos] === "\n") {
        line++;
        continue;
      }
      if (!content.startsWith(OPEN, pos)) continue;
      var end = findTagEnd(content, pos);
      if (end == null) {
        pos = pos + OPEN.length;
        continue;
      }
      var text2 = content.slice(pos, end + CLOSE.length);
      var inner = content.slice(pos + OPEN.length, end);
      var lineStart = content.lastIndexOf("\n", pos);
      var lineEnd = content.indexOf("\n", end);
      var lineContent = content.slice(lineStart, lineEnd);
      var tag = parseTag(inner.trim(), line, pos - lineStart);
      var precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;
      var precedingText = content.slice(start, precedingTextEnd);
      output.push({
        type: "text",
        start: start,
        end: pos - 1,
        content: precedingText
      });
      output.push(_objectSpread$1({
        map: [line, line + 1],
        position: {
          start: pos - lineStart,
          end: pos - lineStart + text2.length
        },
        start: pos,
        end: pos + text2.length - 1,
        info: text2
      }, tag));
      start = end + CLOSE.length;
      pos = start - 1;
    }
    output.push({
      type: "text",
      start: start,
      end: content.length - 1,
      content: content.slice(start)
    });
    return output;
  }

  // src/transformer.ts
  var globalAttributes = {
    "class": {
      type: Class,
      render: true
    },
    id: {
      type: Id,
      render: true
    }
  };
  var transformer_default = {
    findSchema: function findSchema(node2) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref5$nodes = _ref5.nodes,
        nodes = _ref5$nodes === void 0 ? {} : _ref5$nodes,
        _ref5$tags = _ref5.tags,
        tags = _ref5$tags === void 0 ? {} : _ref5$tags;
      return node2.tag ? tags[node2.tag] : nodes[node2.type];
    },
    attributes: function attributes(node2) {
      var _this$findSchema;
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var schema = (_this$findSchema = this.findSchema(node2, config)) !== null && _this$findSchema !== void 0 ? _this$findSchema : {};
      var output = {};
      var attrs = _objectSpread$1(_objectSpread$1({}, globalAttributes), schema.attributes);
      for (var _i4 = 0, _Object$entries3 = Object.entries(attrs); _i4 < _Object$entries3.length; _i4++) {
        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i4], 2),
          key = _Object$entries3$_i[0],
          attr = _Object$entries3$_i[1];
        if (attr.render == false) continue;
        var name = typeof attr.render === "string" ? attr.render : key;
        var value = node2.attributes[key];
        if (typeof attr.type === "function") {
          var instance = new attr.type();
          if (instance.transform) {
            value = instance.transform(value, config);
          }
        }
        value = value === void 0 ? attr["default"] : value;
        if (value === void 0) continue;
        output[name] = value;
      }
      return output;
    },
    children: function children(node2) {
      var _this = this;
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var children = node2.children.flatMap(function (child) {
        return _this.node(child, config);
      });
      if (children.some(isPromise)) {
        return Promise.all(children);
      }
      return children;
    },
    node: function node(node2) {
      var _this$findSchema2;
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var schema = (_this$findSchema2 = this.findSchema(node2, config)) !== null && _this$findSchema2 !== void 0 ? _this$findSchema2 : {};
      if (schema && schema.transform instanceof Function) return schema.transform(node2, config);
      var children = this.children(node2, config);
      if (!schema || !schema.render) return children;
      var attributes = this.attributes(node2, config);
      if (isPromise(attributes) || isPromise(children)) {
        return Promise.all([attributes, children]).then(function (values) {
          return _construct(Tag, [schema.render].concat(_toConsumableArray(values)));
        });
      }
      return new Tag(schema.render, attributes, children);
    }
  };

  // src/ast/node.ts
  var _Node = /*#__PURE__*/function () {
    function Node() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "node";
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var tag = arguments.length > 3 ? arguments[3] : undefined;
      _classCallCheck(this, Node);
      this.$$mdtype = "Node";
      this.errors = [];
      this.lines = [];
      this.inline = false;
      this.attributes = attributes;
      this.children = children;
      this.type = type;
      this.tag = tag;
      this.annotations = [];
    }
    return _createClass(Node, [{
      key: "walk",
      value: /*#__PURE__*/_regeneratorRuntime.mark(function walk() {
        var _iterator7, _step7, child;
        return _regeneratorRuntime.wrap(function walk$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _iterator7 = _createForOfIteratorHelper$1(this.children);
              _context2.prev = 1;
              _iterator7.s();
            case 3:
              if ((_step7 = _iterator7.n()).done) {
                _context2.next = 10;
                break;
              }
              child = _step7.value;
              _context2.next = 7;
              return child;
            case 7:
              return _context2.delegateYield(child.walk(), "t0", 8);
            case 8:
              _context2.next = 3;
              break;
            case 10:
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t1 = _context2["catch"](1);
              _iterator7.e(_context2.t1);
            case 15:
              _context2.prev = 15;
              _iterator7.f();
              return _context2.finish(15);
            case 18:
            case "end":
              return _context2.stop();
          }
        }, walk, this, [[1, 12, 15, 18]]);
      })
    }, {
      key: "push",
      value: function push(node2) {
        this.children.push(node2);
      }
    }, {
      key: "resolve",
      value: function resolve() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return Object.assign(new _Node(), this, {
          children: this.children.map(function (child) {
            return child.resolve(config);
          }),
          attributes: _resolve(this.attributes, config)
        });
      }
    }, {
      key: "findSchema",
      value: function findSchema() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return transformer_default.findSchema(this, config);
      }
    }, {
      key: "transformAttributes",
      value: function transformAttributes() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return transformer_default.attributes(this, config);
      }
    }, {
      key: "transformChildren",
      value: function transformChildren(config) {
        return transformer_default.children(this, config);
      }
    }, {
      key: "transform",
      value: function transform(config) {
        return transformer_default.node(this, config);
      }
    }]);
  }();

  // src/ast/index.ts
  var AstTypes = {
    Function: Function2,
    Node: _Node,
    Variable: Variable
  };
  function reviver(_, value) {
    if (!value) return value;
    var klass = AstTypes[value.$$mdtype];
    return klass ? Object.assign(new klass(), value) : value;
  }
  function fromJSON(text2) {
    return JSON.parse(text2, reviver);
  }
  var ast_default = _objectSpread$1(_objectSpread$1(_objectSpread$1({}, AstTypes), base_exports), {}, {
    fromJSON: fromJSON
  });

  // src/formatter.ts
  var SPACE = " ";
  var SEP = ", ";
  var NL = "\n";
  var OL = "1. ";
  var UL = "- ";
  var MAX_TAG_OPENING_WIDTH = 80;
  var WRAPPING_TYPES = ["strong", "em", "s"];
  var max = function max(a, b) {
    return Math.max(a, b);
  };
  var increment = function increment(o) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    return _objectSpread$1(_objectSpread$1({}, o), {}, {
      indent: (o.indent || 0) + n
    });
  };
  function formatChildren(a, options) {
    var _iterator8, _step8, child;
    return _regeneratorRuntime.wrap(function formatChildren$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _iterator8 = _createForOfIteratorHelper$1(a.children);
          _context3.prev = 1;
          _iterator8.s();
        case 3:
          if ((_step8 = _iterator8.n()).done) {
            _context3.next = 8;
            break;
          }
          child = _step8.value;
          return _context3.delegateYield(formatValue(child, options), "t0", 6);
        case 6:
          _context3.next = 3;
          break;
        case 8:
          _context3.next = 13;
          break;
        case 10:
          _context3.prev = 10;
          _context3.t1 = _context3["catch"](1);
          _iterator8.e(_context3.t1);
        case 13:
          _context3.prev = 13;
          _iterator8.f();
          return _context3.finish(13);
        case 16:
        case "end":
          return _context3.stop();
      }
    }, _marked2, null, [[1, 10, 13, 16]]);
  }
  function formatInline(g) {
    return _regeneratorRuntime.wrap(function formatInline$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return _toConsumableArray(g).join("").trim();
        case 2:
        case "end":
          return _context4.stop();
      }
    }, _marked3);
  }
  function formatTableRow(items) {
    return _regeneratorRuntime.wrap(function formatTableRow$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return "| ".concat(items.join(" | "), " |");
        case 2:
        case "end":
          return _context5.stop();
      }
    }, _marked4);
  }
  function formatScalar(v) {
    if (ast_default.isAst(v)) {
      return format(v);
    }
    if (v === null) {
      return "null";
    }
    if (Array.isArray(v)) {
      return "[" + v.map(formatScalar).join(SEP) + "]";
    }
    if (_typeof$1(v) === "object") {
      return "{" + Object.entries(v).map(function (_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2),
          key = _ref7[0],
          value = _ref7[1];
        return "".concat(isIdentifier(key) ? key : "\"".concat(key, "\""), ": ").concat(formatScalar(value));
      }).join(SEP) + "}";
    }
    return JSON.stringify(v);
  }
  function formatAnnotationValue(a) {
    if (a.name === "primary") return formatScalar(a.value);
    if (a.name === "id" && typeof a.value === "string" && isIdentifier(a.value)) return "#" + a.value;
    if (a.type === "class" && isIdentifier(a.name)) return "." + a.name;
    return "".concat(a.name, "=").concat(formatScalar(a.value));
  }
  function formatAttributes(n) {
    var _i5, _Object$entries4, _Object$entries4$_i, key, value, _i6, _Object$keys, name;
    return _regeneratorRuntime.wrap(function formatAttributes$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _i5 = 0, _Object$entries4 = Object.entries(n.attributes);
        case 1:
          if (!(_i5 < _Object$entries4.length)) {
            _context6.next = 19;
            break;
          }
          _Object$entries4$_i = _slicedToArray(_Object$entries4[_i5], 2), key = _Object$entries4$_i[0], value = _Object$entries4$_i[1];
          if (!(key === "class" && _typeof$1(value) === "object" && !ast_default.isAst(value))) {
            _context6.next = 14;
            break;
          }
          _i6 = 0, _Object$keys = Object.keys(value);
        case 5:
          if (!(_i6 < _Object$keys.length)) {
            _context6.next = 12;
            break;
          }
          name = _Object$keys[_i6];
          _context6.next = 9;
          return formatAnnotationValue({
            type: "class",
            name: name,
            value: value
          });
        case 9:
          _i6++;
          _context6.next = 5;
          break;
        case 12:
          _context6.next = 16;
          break;
        case 14:
          _context6.next = 16;
          return formatAnnotationValue({
            type: "attribute",
            name: key,
            value: value
          });
        case 16:
          _i5++;
          _context6.next = 1;
          break;
        case 19:
        case "end":
          return _context6.stop();
      }
    }, _marked5);
  }
  function formatAnnotations(n) {
    return _regeneratorRuntime.wrap(function formatAnnotations$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          if (!n.annotations.length) {
            _context7.next = 7;
            break;
          }
          _context7.next = 3;
          return OPEN + SPACE;
        case 3:
          _context7.next = 5;
          return n.annotations.map(formatAnnotationValue).join(SPACE);
        case 5:
          _context7.next = 7;
          return SPACE + CLOSE;
        case 7:
        case "end":
          return _context7.stop();
      }
    }, _marked6);
  }
  function formatVariable(v) {
    return _regeneratorRuntime.wrap(function formatVariable$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return "$";
        case 2:
          _context8.next = 4;
          return v.path.map(function (p, i) {
            if (i === 0) return p;
            if (isIdentifier(p)) return "." + p;
            if (typeof p === "number") return "[".concat(p, "]");
            return "[\"".concat(p, "\"]");
          }).join("");
        case 4:
        case "end":
          return _context8.stop();
      }
    }, _marked7);
  }
  function formatFunction(f) {
    return _regeneratorRuntime.wrap(function formatFunction$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return f.name;
        case 2:
          _context9.next = 4;
          return "(";
        case 4:
          _context9.next = 6;
          return Object.values(f.parameters).map(formatScalar).join(SEP);
        case 6:
          _context9.next = 8;
          return ")";
        case 8:
        case "end":
          return _context9.stop();
      }
    }, _marked8);
  }
  function trimStart(g) {
    var n, _g$next, value, done;
    return _regeneratorRuntime.wrap(function trimStart$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          _g$next = g.next(), value = _g$next.value, done = _g$next.done;
          if (!done) {
            _context10.next = 3;
            break;
          }
          return _context10.abrupt("return");
        case 3:
          n = value.trimStart();
        case 4:
          if (!n.length) {
            _context10.next = 0;
            break;
          }
        case 5:
          _context10.next = 7;
          return n;
        case 7:
          return _context10.delegateYield(g, "t0", 8);
        case 8:
        case "end":
          return _context10.stop();
      }
    }, _marked9);
  }
  function escapeMarkdownCharacters(s2, characters) {
    return _regeneratorRuntime.wrap(function escapeMarkdownCharacters$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          _context11.next = 2;
          return s2.replace(characters, "\\$&").replace(new RegExp("\xA0", "g"), "&nbsp;");
        case 2:
        case "end":
          return _context11.stop();
      }
    }, _marked10);
  }
  function formatNode(n) {
    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var no, indent, content, prefix, innerFence, innerFenceLength, boundary, open, tag, inlineTag, isLongTagOpening, _prefix, _iterator9, _step9, child, d, i, table3, _i7, row, _iterator10, _step10, _d, _table, head, rows, ml, _iterator11, _step11, _row, _ref8, _head;
      return _regeneratorRuntime.wrap(function _callee$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            no = _objectSpread$1(_objectSpread$1({}, o), {}, {
              parent: n
            });
            indent = SPACE.repeat(no.indent || 0);
            _context12.t0 = n.type;
            _context12.next = _context12.t0 === "document" ? 5 : _context12.t0 === "heading" ? 10 : _context12.t0 === "paragraph" ? 23 : _context12.t0 === "inline" ? 30 : _context12.t0 === "image" ? 34 : _context12.t0 === "link" ? 50 : _context12.t0 === "text" ? 64 : _context12.t0 === "blockquote" ? 79 : _context12.t0 === "hr" ? 83 : _context12.t0 === "fence" ? 92 : _context12.t0 === "tag" ? 119 : _context12.t0 === "list" ? 141 : _context12.t0 === "item" ? 163 : _context12.t0 === "strong" ? 172 : _context12.t0 === "em" ? 178 : _context12.t0 === "code" ? 184 : _context12.t0 === "s" ? 190 : _context12.t0 === "hardbreak" ? 196 : _context12.t0 === "softbreak" ? 201 : _context12.t0 === "table" ? 206 : _context12.t0 === "thead" ? 277 : _context12.t0 === "tr" ? 281 : _context12.t0 === "td" ? 284 : _context12.t0 === "th" ? 284 : _context12.t0 === "tbody" ? 287 : _context12.t0 === "comment" ? 289 : _context12.t0 === "error" ? 292 : _context12.t0 === "node" ? 292 : 293;
            break;
          case 5:
            if (!(n.attributes.frontmatter && n.attributes.frontmatter.length)) {
              _context12.next = 8;
              break;
            }
            _context12.next = 8;
            return "---" + NL + n.attributes.frontmatter + NL + "---" + NL + NL;
          case 8:
            return _context12.delegateYield(trimStart(formatChildren(n, no)), "t1", 9);
          case 9:
            return _context12.abrupt("break", 293);
          case 10:
            _context12.next = 12;
            return NL;
          case 12:
            _context12.next = 14;
            return indent;
          case 14:
            _context12.next = 16;
            return "#".repeat(n.attributes.level || 1);
          case 16:
            _context12.next = 18;
            return SPACE;
          case 18:
            return _context12.delegateYield(trimStart(formatChildren(n, no)), "t2", 19);
          case 19:
            return _context12.delegateYield(formatAnnotations(n), "t3", 20);
          case 20:
            _context12.next = 22;
            return NL;
          case 22:
            return _context12.abrupt("break", 293);
          case 23:
            _context12.next = 25;
            return NL;
          case 25:
            return _context12.delegateYield(formatChildren(n, no), "t4", 26);
          case 26:
            return _context12.delegateYield(formatAnnotations(n), "t5", 27);
          case 27:
            _context12.next = 29;
            return NL;
          case 29:
            return _context12.abrupt("break", 293);
          case 30:
            _context12.next = 32;
            return indent;
          case 32:
            return _context12.delegateYield(formatChildren(n, no), "t6", 33);
          case 33:
            return _context12.abrupt("break", 293);
          case 34:
            _context12.next = 36;
            return "!";
          case 36:
            _context12.next = 38;
            return "[";
          case 38:
            return _context12.delegateYield(formatValue(n.attributes.alt, no), "t7", 39);
          case 39:
            _context12.next = 41;
            return "]";
          case 41:
            _context12.next = 43;
            return "(";
          case 43:
            return _context12.delegateYield(typeof n.attributes.src === "string" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no), "t8", 44);
          case 44:
            if (!n.attributes.title) {
              _context12.next = 47;
              break;
            }
            _context12.next = 47;
            return SPACE + "\"".concat(n.attributes.title, "\"");
          case 47:
            _context12.next = 49;
            return ")";
          case 49:
            return _context12.abrupt("break", 293);
          case 50:
            _context12.next = 52;
            return "[";
          case 52:
            return _context12.delegateYield(formatChildren(n, no), "t9", 53);
          case 53:
            _context12.next = 55;
            return "]";
          case 55:
            _context12.next = 57;
            return "(";
          case 57:
            return _context12.delegateYield(typeof n.attributes.href === "string" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no), "t10", 58);
          case 58:
            if (!n.attributes.title) {
              _context12.next = 61;
              break;
            }
            _context12.next = 61;
            return SPACE + "\"".concat(n.attributes.title, "\"");
          case 61:
            _context12.next = 63;
            return ")";
          case 63:
            return _context12.abrupt("break", 293);
          case 64:
            content = n.attributes.content;
            if (!ast_default.isAst(content)) {
              _context12.next = 73;
              break;
            }
            _context12.next = 68;
            return OPEN + SPACE;
          case 68:
            return _context12.delegateYield(formatValue(content, no), "t11", 69);
          case 69:
            _context12.next = 71;
            return SPACE + CLOSE;
          case 71:
            _context12.next = 78;
            break;
          case 73:
            if (!(o.parent && WRAPPING_TYPES.includes(o.parent.type))) {
              _context12.next = 77;
              break;
            }
            return _context12.delegateYield(escapeMarkdownCharacters(content, /[*_~]/g), "t12", 75);
          case 75:
            _context12.next = 78;
            break;
          case 77:
            return _context12.delegateYield(escapeMarkdownCharacters(content, /^[*>#]/), "t13", 78);
          case 78:
            return _context12.abrupt("break", 293);
          case 79:
            prefix = ">" + SPACE;
            _context12.next = 82;
            return n.children.map(function (child) {
              return format(child, no).trimStart();
            }).map(function (d) {
              return NL + indent + prefix + d;
            }).join(indent + prefix);
          case 82:
            return _context12.abrupt("break", 293);
          case 83:
            _context12.next = 85;
            return NL;
          case 85:
            _context12.next = 87;
            return indent;
          case 87:
            _context12.next = 89;
            return "---";
          case 89:
            _context12.next = 91;
            return NL;
          case 91:
            return _context12.abrupt("break", 293);
          case 92:
            _context12.next = 94;
            return NL;
          case 94:
            _context12.next = 96;
            return indent;
          case 96:
            innerFence = n.attributes.content.match(/`{3,}/g) || [];
            innerFenceLength = innerFence.map(function (s2) {
              return s2.length;
            }).reduce(max, 0);
            boundary = "`".repeat(innerFenceLength ? innerFenceLength + 1 : 3);
            _context12.next = 101;
            return boundary;
          case 101:
            if (!n.attributes.language) {
              _context12.next = 104;
              break;
            }
            _context12.next = 104;
            return n.attributes.language;
          case 104:
            if (!n.annotations.length) {
              _context12.next = 107;
              break;
            }
            _context12.next = 107;
            return SPACE;
          case 107:
            return _context12.delegateYield(formatAnnotations(n), "t14", 108);
          case 108:
            _context12.next = 110;
            return NL;
          case 110:
            _context12.next = 112;
            return indent;
          case 112:
            _context12.next = 114;
            return n.attributes.content.split(NL).join(NL + indent);
          case 114:
            _context12.next = 116;
            return boundary;
          case 116:
            _context12.next = 118;
            return NL;
          case 118:
            return _context12.abrupt("break", 293);
          case 119:
            if (n.inline) {
              _context12.next = 124;
              break;
            }
            _context12.next = 122;
            return NL;
          case 122:
            _context12.next = 124;
            return indent;
          case 124:
            open = OPEN + SPACE;
            tag = [open + n.tag].concat(_toConsumableArray(formatAttributes(n)));
            inlineTag = tag.join(SPACE);
            isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);
            _context12.next = 130;
            return (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? "" : "/") + CLOSE;
          case 130:
            if (!n.children.length) {
              _context12.next = 137;
              break;
            }
            return _context12.delegateYield(formatChildren(n, no.allowIndentation ? increment(no) : no), "t15", 132);
          case 132:
            if (n.inline) {
              _context12.next = 135;
              break;
            }
            _context12.next = 135;
            return indent;
          case 135:
            _context12.next = 137;
            return OPEN + SPACE + "/" + n.tag + SPACE + CLOSE;
          case 137:
            if (n.inline) {
              _context12.next = 140;
              break;
            }
            _context12.next = 140;
            return NL;
          case 140:
            return _context12.abrupt("break", 293);
          case 141:
            _prefix = n.attributes.ordered ? OL : UL;
            _iterator9 = _createForOfIteratorHelper$1(n.children);
            _context12.prev = 143;
            _iterator9.s();
          case 145:
            if ((_step9 = _iterator9.n()).done) {
              _context12.next = 152;
              break;
            }
            child = _step9.value;
            d = format(child, increment(no, _prefix.length)).trim();
            _context12.next = 150;
            return NL + indent + _prefix + d;
          case 150:
            _context12.next = 145;
            break;
          case 152:
            _context12.next = 157;
            break;
          case 154:
            _context12.prev = 154;
            _context12.t16 = _context12["catch"](143);
            _iterator9.e(_context12.t16);
          case 157:
            _context12.prev = 157;
            _iterator9.f();
            return _context12.finish(157);
          case 160:
            _context12.next = 162;
            return NL;
          case 162:
            return _context12.abrupt("break", 293);
          case 163:
            i = 0;
          case 164:
            if (!(i < n.children.length)) {
              _context12.next = 171;
              break;
            }
            return _context12.delegateYield(formatValue(n.children[i], no), "t17", 166);
          case 166:
            if (!(i === 0)) {
              _context12.next = 168;
              break;
            }
            return _context12.delegateYield(formatAnnotations(n), "t18", 168);
          case 168:
            i++;
            _context12.next = 164;
            break;
          case 171:
            return _context12.abrupt("break", 293);
          case 172:
            _context12.next = 174;
            return "**";
          case 174:
            return _context12.delegateYield(formatInline(formatChildren(n, no)), "t19", 175);
          case 175:
            _context12.next = 177;
            return "**";
          case 177:
            return _context12.abrupt("break", 293);
          case 178:
            _context12.next = 180;
            return "_";
          case 180:
            return _context12.delegateYield(formatInline(formatChildren(n, no)), "t20", 181);
          case 181:
            _context12.next = 183;
            return "_";
          case 183:
            return _context12.abrupt("break", 293);
          case 184:
            _context12.next = 186;
            return "`";
          case 186:
            return _context12.delegateYield(formatInline(formatValue(n.attributes.content, no)), "t21", 187);
          case 187:
            _context12.next = 189;
            return "`";
          case 189:
            return _context12.abrupt("break", 293);
          case 190:
            _context12.next = 192;
            return "~~";
          case 192:
            return _context12.delegateYield(formatInline(formatChildren(n, no)), "t22", 193);
          case 193:
            _context12.next = 195;
            return "~~";
          case 195:
            return _context12.abrupt("break", 293);
          case 196:
            _context12.next = 198;
            return "\\" + NL;
          case 198:
            _context12.next = 200;
            return indent;
          case 200:
            return _context12.abrupt("break", 293);
          case 201:
            _context12.next = 203;
            return NL;
          case 203:
            _context12.next = 205;
            return indent;
          case 205:
            return _context12.abrupt("break", 293);
          case 206:
            table3 = _toConsumableArray(formatChildren(n, increment(no)));
            if (!(o.parent && o.parent.type === "tag" && o.parent.tag === "table")) {
              _context12.next = 248;
              break;
            }
            _i7 = 0;
          case 209:
            if (!(_i7 < table3.length)) {
              _context12.next = 244;
              break;
            }
            row = table3[_i7];
            if (!(typeof row === "string")) {
              _context12.next = 219;
              break;
            }
            if (!row.trim().length) {
              _context12.next = 217;
              break;
            }
            _context12.next = 215;
            return NL;
          case 215:
            _context12.next = 217;
            return row;
          case 217:
            _context12.next = 241;
            break;
          case 219:
            if (!(_i7 !== 0)) {
              _context12.next = 224;
              break;
            }
            _context12.next = 222;
            return NL;
          case 222:
            _context12.next = 224;
            return indent + "---";
          case 224:
            _iterator10 = _createForOfIteratorHelper$1(row);
            _context12.prev = 225;
            _iterator10.s();
          case 227:
            if ((_step10 = _iterator10.n()).done) {
              _context12.next = 233;
              break;
            }
            _d = _step10.value;
            _context12.next = 231;
            return NL + indent + UL + _d;
          case 231:
            _context12.next = 227;
            break;
          case 233:
            _context12.next = 238;
            break;
          case 235:
            _context12.prev = 235;
            _context12.t23 = _context12["catch"](225);
            _iterator10.e(_context12.t23);
          case 238:
            _context12.prev = 238;
            _iterator10.f();
            return _context12.finish(238);
          case 241:
            _i7++;
            _context12.next = 209;
            break;
          case 244:
            _context12.next = 246;
            return NL;
          case 246:
            _context12.next = 276;
            break;
          case 248:
            _context12.next = 250;
            return NL;
          case 250:
            _table = _toArray(table3), head = _table[0], rows = _table.slice(1);
            ml = table3.map(function (arr) {
              return arr.map(function (s2) {
                return s2.length;
              }).reduce(max);
            }).reduce(max);
            return _context12.delegateYield(formatTableRow(head.map(function (h) {
              return h + SPACE.repeat(ml - h.length);
            })), "t24", 253);
          case 253:
            _context12.next = 255;
            return NL;
          case 255:
            return _context12.delegateYield(formatTableRow(head.map(function () {
              return "-".repeat(ml);
            })), "t25", 256);
          case 256:
            _context12.next = 258;
            return NL;
          case 258:
            _iterator11 = _createForOfIteratorHelper$1(rows);
            _context12.prev = 259;
            _iterator11.s();
          case 261:
            if ((_step11 = _iterator11.n()).done) {
              _context12.next = 268;
              break;
            }
            _row = _step11.value;
            return _context12.delegateYield(formatTableRow(_row.map(function (r) {
              return r + SPACE.repeat(ml - r.length);
            })), "t26", 264);
          case 264:
            _context12.next = 266;
            return NL;
          case 266:
            _context12.next = 261;
            break;
          case 268:
            _context12.next = 273;
            break;
          case 270:
            _context12.prev = 270;
            _context12.t27 = _context12["catch"](259);
            _iterator11.e(_context12.t27);
          case 273:
            _context12.prev = 273;
            _iterator11.f();
            return _context12.finish(273);
          case 276:
            return _context12.abrupt("break", 293);
          case 277:
            _ref8 = _toConsumableArray(formatChildren(n, no)), _head = _ref8[0];
            _context12.next = 280;
            return _head || [];
          case 280:
            return _context12.abrupt("break", 293);
          case 281:
            _context12.next = 283;
            return _toConsumableArray(formatChildren(n, no));
          case 283:
            return _context12.abrupt("break", 293);
          case 284:
            _context12.next = 286;
            return [].concat(_toConsumableArray(formatChildren(n, no)), _toConsumableArray(formatAnnotations(n))).join("").trim();
          case 286:
            return _context12.abrupt("break", 293);
          case 287:
            return _context12.delegateYield(formatChildren(n, no), "t28", 288);
          case 288:
            return _context12.abrupt("break", 293);
          case 289:
            _context12.next = 291;
            return "<!-- " + n.attributes.content + " -->\n";
          case 291:
            return _context12.abrupt("break", 293);
          case 292:
            return _context12.abrupt("break", 293);
          case 293:
          case "end":
            return _context12.stop();
        }
      }, _callee, null, [[143, 154, 157, 160], [225, 235, 238, 241], [259, 270, 273, 276]]);
    })();
  }
  function formatValue(v) {
    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _iterator12, _step12, n;
      return _regeneratorRuntime.wrap(function _callee2$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            _context13.t0 = _typeof$1(v);
            _context13.next = _context13.t0 === "undefined" ? 3 : _context13.t0 === "boolean" ? 4 : _context13.t0 === "number" ? 4 : _context13.t0 === "string" ? 4 : _context13.t0 === "object" ? 7 : 38;
            break;
          case 3:
            return _context13.abrupt("break", 38);
          case 4:
            _context13.next = 6;
            return v.toString();
          case 6:
            return _context13.abrupt("break", 38);
          case 7:
            if (!(v === null)) {
              _context13.next = 9;
              break;
            }
            return _context13.abrupt("break", 38);
          case 9:
            if (!Array.isArray(v)) {
              _context13.next = 27;
              break;
            }
            _iterator12 = _createForOfIteratorHelper$1(v);
            _context13.prev = 11;
            _iterator12.s();
          case 13:
            if ((_step12 = _iterator12.n()).done) {
              _context13.next = 18;
              break;
            }
            n = _step12.value;
            return _context13.delegateYield(formatValue(n, o), "t1", 16);
          case 16:
            _context13.next = 13;
            break;
          case 18:
            _context13.next = 23;
            break;
          case 20:
            _context13.prev = 20;
            _context13.t2 = _context13["catch"](11);
            _iterator12.e(_context13.t2);
          case 23:
            _context13.prev = 23;
            _iterator12.f();
            return _context13.finish(23);
          case 26:
            return _context13.abrupt("break", 38);
          case 27:
            _context13.t3 = v.$$mdtype;
            _context13.next = _context13.t3 === "Function" ? 30 : _context13.t3 === "Node" ? 32 : _context13.t3 === "Variable" ? 34 : 36;
            break;
          case 30:
            return _context13.delegateYield(formatFunction(v), "t4", 31);
          case 31:
            return _context13.abrupt("break", 37);
          case 32:
            return _context13.delegateYield(formatNode(v, o), "t5", 33);
          case 33:
            return _context13.abrupt("break", 37);
          case 34:
            return _context13.delegateYield(formatVariable(v), "t6", 35);
          case 35:
            return _context13.abrupt("break", 37);
          case 36:
            throw new Error("Unimplemented: \"".concat(v.$$mdtype, "\""));
          case 37:
            return _context13.abrupt("break", 38);
          case 38:
          case "end":
            return _context13.stop();
        }
      }, _callee2, null, [[11, 20, 23, 26]]);
    })();
  }
  function format(v, options) {
    var doc = "";
    var _iterator13 = _createForOfIteratorHelper$1(formatValue(v, options)),
      _step13;
    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var s2 = _step13.value;
        doc += s2;
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }
    return doc.trimStart();
  }

  // src/tags/conditional.ts
  function truthy(value) {
    return value !== false && value !== void 0 && value !== null;
  }
  function renderConditions(node2) {
    var conditions = [{
      condition: node2.attributes.primary,
      children: []
    }];
    var _iterator14 = _createForOfIteratorHelper$1(node2.children),
      _step14;
    try {
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        var child = _step14.value;
        if (child.type === "tag" && child.tag === "else") conditions.push({
          condition: "primary" in child.attributes ? child.attributes.primary : true,
          children: []
        });else conditions[conditions.length - 1].children.push(child);
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
    return conditions;
  }
  var tagIf = {
    attributes: {
      primary: {
        type: Object,
        render: false
      }
    },
    transform: function transform(node2, config) {
      var conditions = renderConditions(node2);
      var _iterator15 = _createForOfIteratorHelper$1(conditions),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var _step15$value = _step15.value,
            condition = _step15$value.condition,
            children = _step15$value.children;
          if (truthy(condition)) {
            var nodes = children.flatMap(function (child) {
              return child.transform(config);
            });
            if (nodes.some(isPromise)) {
              return Promise.all(nodes).then(function (nodes2) {
                return nodes2.flat();
              });
            }
            return nodes;
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      return [];
    }
  };
  var tagElse = {
    selfClosing: true,
    attributes: {
      primary: {
        type: Object,
        render: false
      }
    }
  };

  // src/functions/index.ts
  var and = {
    transform: function transform(parameters) {
      return Object.values(parameters).every(function (x) {
        return truthy(x);
      });
    }
  };
  var or = {
    transform: function transform(parameters) {
      return Object.values(parameters).find(function (x) {
        return truthy(x);
      }) !== void 0;
    }
  };
  var not = {
    parameters: {
      0: {
        required: true
      }
    },
    transform: function transform(parameters) {
      return !truthy(parameters[0]);
    }
  };
  var equals = {
    transform: function transform(parameters) {
      var values = Object.values(parameters);
      return values.every(function (v) {
        return v === values[0];
      });
    }
  };
  var debug = {
    transform: function transform(parameters) {
      return JSON.stringify(parameters[0], null, 2);
    }
  };
  var defaultFn = {
    transform: function transform(parameters) {
      return parameters[0] === void 0 ? parameters[1] : parameters[0];
    }
  };
  var functions_default = {
    and: and,
    or: or,
    not: not,
    equals: equals,
    "default": defaultFn,
    debug: debug
  };

  // src/transforms/table.ts
  function convertToRow(node2) {
    var cellType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "td";
    node2.type = "tr";
    node2.attributes = {};
    var _iterator16 = _createForOfIteratorHelper$1(node2.children),
      _step16;
    try {
      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
        var cell = _step16.value;
        cell.type = cellType;
      }
    } catch (err) {
      _iterator16.e(err);
    } finally {
      _iterator16.f();
    }
    return node2;
  }
  function transform(document2) {
    var _iterator17 = _createForOfIteratorHelper$1(document2.walk()),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var node2 = _step17.value;
        if (node2.type !== "tag" || node2.tag !== "table") continue;
        var _node2$children = _toArray(node2.children),
          first = _node2$children[0],
          rest = _node2$children.slice(1);
        if (!first || first.type === "table") continue;
        var table3 = new ast_default.Node("table", node2.attributes, [new ast_default.Node("thead"), new ast_default.Node("tbody")]);
        var _table3$children = _slicedToArray(table3.children, 2),
          thead2 = _table3$children[0],
          tbody2 = _table3$children[1];
        if (first.type === "list") thead2.push(convertToRow(first, "th"));
        var _iterator18 = _createForOfIteratorHelper$1(rest),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var row = _step18.value;
            if (row.type === "list") convertToRow(row);else if (row.type === "tag" && row.tag === "if") {
              var children = [];
              var _iterator19 = _createForOfIteratorHelper$1(row.children),
                _step19;
              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var child = _step19.value;
                  if (child.type === "hr") continue;
                  if (child.type === "list") convertToRow(child);
                  children.push(child);
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
              row.children = children;
            } else continue;
            tbody2.push(row);
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        node2.children = [table3];
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
  }

  // src/transforms/index.ts
  var transforms_default = [transform];

  // src/parser.ts
  var mappings = {
    ordered_list: "list",
    bullet_list: "list",
    code_inline: "code",
    list_item: "item",
    variable: "text"
  };
  function annotate(node2, attributes) {
    var _iterator20 = _createForOfIteratorHelper$1(attributes),
      _step20;
    try {
      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
        var attribute = _step20.value;
        node2.annotations.push(attribute);
        var name = attribute.name,
          value = attribute.value,
          type = attribute.type;
        if (type === "attribute") node2.attributes[name] = value;else if (type === "class") if (node2.attributes["class"]) node2.attributes["class"][name] = value;else node2.attributes["class"] = _defineProperty({}, name, value);
      }
    } catch (err) {
      _iterator20.e(err);
    } finally {
      _iterator20.f();
    }
  }
  function handleAttrs(token, type) {
    switch (type) {
      case "heading":
        return {
          level: Number(token.tag.replace("h", ""))
        };
      case "list":
        return {
          ordered: token.type.startsWith("ordered")
        };
      case "link":
        {
          var attrs = Object.fromEntries(token.attrs);
          return attrs.title ? {
            href: attrs.href,
            title: attrs.title
          } : {
            href: attrs.href
          };
        }
      case "image":
        {
          var _attrs = Object.fromEntries(token.attrs);
          return _attrs.title ? {
            alt: token.content,
            src: _attrs.src,
            title: _attrs.title
          } : {
            alt: token.content,
            src: _attrs.src
          };
        }
      case "text":
      case "code":
      case "comment":
        return {
          content: (token.meta || {}).variable || token.content
        };
      case "fence":
        {
          var _token$info$split = token.info.split(" ", 1),
            _token$info$split2 = _slicedToArray(_token$info$split, 1),
            language = _token$info$split2[0];
          return language === "" || language === OPEN ? {
            content: token.content
          } : {
            content: token.content,
            language: language
          };
        }
      case "td":
      case "th":
        {
          if (token.attrs) {
            var _attrs2 = Object.fromEntries(token.attrs);
            var align;
            if (_attrs2.style) {
              if (_attrs2.style.includes("left")) {
                align = "left";
              } else if (_attrs2.style.includes("center")) {
                align = "center";
              } else if (_attrs2.style.includes("right")) {
                align = "right";
              }
            }
            if (align) {
              return {
                align: align
              };
            }
          }
          return {};
        }
      default:
        return {};
    }
  }
  function handleToken(token, nodes, file, inlineParent) {
    if (token.type === "frontmatter") {
      nodes[0].attributes.frontmatter = token.content;
      return;
    }
    if (token.hidden || token.type === "text" && token.content === "") return;
    var errors = token.errors || [];
    var parent = nodes[nodes.length - 1];
    var _ref9 = token.meta || {},
      tag = _ref9.tag,
      attributes = _ref9.attributes,
      error2 = _ref9.error;
    if (token.type === "annotation") {
      if (inlineParent) return annotate(inlineParent, attributes);
      return parent.errors.push({
        id: "no-inline-annotations",
        level: "error",
        message: "Can't apply inline annotations to '".concat(parent.type, "'")
      });
    }
    var typeName = token.type.replace(/_(open|close)$/, "");
    if (mappings[typeName]) typeName = mappings[typeName];
    if (typeName === "error") {
      var message = error2.message,
        location = error2.location;
      errors.push({
        id: "parse-error",
        level: "critical",
        message: message,
        location: location
      });
    }
    if (token.nesting < 0) {
      if (parent.type === typeName) {
        var _parent$lines;
        if (parent.lines && token.map) (_parent$lines = parent.lines).push.apply(_parent$lines, _toConsumableArray(token.map));
        return nodes.pop();
      }
      errors.push({
        id: "missing-opening",
        level: "critical",
        message: "Node '".concat(typeName, "' is missing opening")
      });
    }
    var attrs = handleAttrs(token, typeName);
    var node2 = new _Node(typeName, attrs, void 0, tag || void 0);
    var _token$position = token.position,
      position = _token$position === void 0 ? {} : _token$position;
    node2.errors = errors;
    node2.lines = token.map || parent.lines || [];
    node2.location = {
      file: file,
      start: {
        line: node2.lines[0],
        character: position.start
      },
      end: {
        line: node2.lines[1],
        character: position.end
      }
    };
    if (inlineParent) node2.inline = true;
    if (attributes && ["tag", "fence", "image"].includes(typeName)) annotate(node2, attributes);
    parent.push(node2);
    if (token.nesting > 0) nodes.push(node2);
    if (!Array.isArray(token.children)) return;
    inlineParent = parent;
    nodes.push(node2);
    var isLeafNode = typeName === "image";
    if (!isLeafNode) {
      var _iterator21 = _createForOfIteratorHelper$1(token.children),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var child = _step21.value;
          handleToken(child, nodes, file, inlineParent);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
    }
    nodes.pop();
  }
  function parser(tokens, file) {
    var doc = new _Node("document");
    var nodes = [doc];
    var _iterator22 = _createForOfIteratorHelper$1(tokens),
      _step22;
    try {
      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
        var token = _step22.value;
        handleToken(token, nodes, file);
      }
    } catch (err) {
      _iterator22.e(err);
    } finally {
      _iterator22.f();
    }
    if (nodes.length > 1) {
      var _iterator23 = _createForOfIteratorHelper$1(nodes.slice(1)),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var node2 = _step23.value;
          node2.errors.push({
            id: "missing-closing",
            level: "critical",
            message: "Node '".concat(node2.tag || node2.type, "' is missing closing")
          });
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
    }
    var _iterator24 = _createForOfIteratorHelper$1(transforms_default),
      _step24;
    try {
      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
        var transform3 = _step24.value;
        transform3(doc);
      }
    } catch (err) {
      _iterator24.e(err);
    } finally {
      _iterator24.f();
    }
    return doc;
  }

  // src/schema.ts
  var schema_exports = {};
  __export(schema_exports, {
    blockquote: function blockquote() {
      return _blockquote;
    },
    code: function code() {
      return _code;
    },
    comment: function comment() {
      return _comment;
    },
    document: function document() {
      return _document;
    },
    em: function em() {
      return _em;
    },
    error: function error() {
      return _error;
    },
    fence: function fence() {
      return _fence;
    },
    hardbreak: function hardbreak() {
      return _hardbreak;
    },
    heading: function heading() {
      return _heading;
    },
    hr: function hr() {
      return _hr;
    },
    image: function image() {
      return _image;
    },
    inline: function inline() {
      return _inline;
    },
    item: function item() {
      return _item;
    },
    link: function link() {
      return _link;
    },
    list: function list() {
      return _list;
    },
    node: function node() {
      return _node;
    },
    paragraph: function paragraph() {
      return _paragraph;
    },
    s: function s() {
      return _s;
    },
    softbreak: function softbreak() {
      return _softbreak;
    },
    strong: function strong() {
      return _strong;
    },
    table: function table() {
      return _table2;
    },
    tbody: function tbody() {
      return _tbody;
    },
    td: function td() {
      return _td;
    },
    text: function text() {
      return _text;
    },
    th: function th() {
      return _th;
    },
    thead: function thead() {
      return _thead;
    },
    tr: function tr() {
      return _tr;
    }
  });
  var _document = {
    render: "article",
    children: ["heading", "paragraph", "image", "table", "tag", "fence", "blockquote", "comment", "list", "hr"],
    attributes: {
      frontmatter: {
        render: false
      }
    }
  };
  var _heading = {
    children: ["inline"],
    attributes: {
      level: {
        type: Number,
        render: false,
        required: true
      }
    },
    transform: function transform(node2, config) {
      return new Tag("h".concat(node2.attributes["level"]), node2.transformAttributes(config), node2.transformChildren(config));
    }
  };
  var _paragraph = {
    render: "p",
    children: ["inline"]
  };
  var _image = {
    render: "img",
    attributes: {
      src: {
        type: String,
        required: true
      },
      alt: {
        type: String
      },
      title: {
        type: String
      }
    }
  };
  var _fence = {
    render: "pre",
    attributes: {
      content: {
        type: String,
        render: false,
        required: true
      },
      language: {
        type: String,
        render: "data-language"
      },
      process: {
        type: Boolean,
        render: false,
        "default": true
      }
    },
    transform: function transform(node2, config) {
      var attributes = node2.transformAttributes(config);
      var children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];
      return new Tag("pre", attributes, children);
    }
  };
  var _blockquote = {
    render: "blockquote",
    children: ["heading", "paragraph", "image", "table", "tag", "fence", "blockquote", "list", "hr"]
  };
  var _item = {
    render: "li",
    children: ["inline", "heading", "paragraph", "image", "table", "tag", "fence", "blockquote", "list", "hr"]
  };
  var _list = {
    children: ["item"],
    attributes: {
      ordered: {
        type: Boolean,
        render: false,
        required: true
      }
    },
    transform: function transform(node2, config) {
      return new Tag(node2.attributes.ordered ? "ol" : "ul", node2.transformAttributes(config), node2.transformChildren(config));
    }
  };
  var _hr = {
    render: "hr"
  };
  var _table2 = {
    render: "table"
  };
  var _td = {
    render: "td",
    children: ["inline", "heading", "paragraph", "image", "table", "tag", "fence", "blockquote", "list", "hr"],
    attributes: {
      colspan: {
        type: Number
      },
      rowspan: {
        type: Number
      },
      align: {
        type: String
      }
    }
  };
  var _th = {
    render: "th",
    attributes: {
      width: {
        type: Number
      },
      align: {
        type: String
      }
    }
  };
  var _tr = {
    render: "tr",
    children: ["th", "td"]
  };
  var _tbody = {
    render: "tbody",
    children: ["tr", "tag"]
  };
  var _thead = {
    render: "thead",
    children: ["tr"]
  };
  var _strong = {
    render: "strong",
    children: ["em", "s", "link", "code", "text", "tag"]
  };
  var _em = {
    render: "em",
    children: ["strong", "s", "link", "code", "text", "tag"]
  };
  var _s = {
    render: "s",
    children: ["strong", "em", "link", "code", "text", "tag"]
  };
  var _inline = {
    children: ["strong", "em", "s", "code", "text", "tag", "link", "image", "hardbreak", "softbreak", "comment"]
  };
  var _link = {
    render: "a",
    children: ["strong", "em", "s", "code", "text", "tag"],
    attributes: {
      href: {
        type: String,
        required: true
      },
      title: {
        type: String
      }
    }
  };
  var _code = {
    render: "code",
    attributes: {
      content: {
        type: String,
        render: false,
        required: true
      }
    },
    transform: function transform(node2, config) {
      var attributes = node2.transformAttributes(config);
      return new Tag("code", attributes, [node2.attributes.content]);
    }
  };
  var _text = {
    attributes: {
      content: {
        type: String,
        required: true
      }
    },
    transform: function transform(node2) {
      return node2.attributes.content;
    }
  };
  var _hardbreak = {
    render: "br"
  };
  var _softbreak = {
    transform: function transform() {
      return " ";
    }
  };
  var _comment = {
    attributes: {
      content: {
        type: String,
        required: true
      }
    }
  };
  var _error = {};
  var _node = {};

  // src/renderers/html.ts
  var import_markdown_it = __toModule(require_markdown_it());
  var escapeHtml = (0, import_markdown_it["default"])().utils.escapeHtml;
  var voidElements = new Set(["area", "base", "br", "col", "embed", "hr", "img", "input", "link", "meta", "param", "source", "track", "wbr"]);
  function render(node2) {
    if (typeof node2 === "string" || typeof node2 === "number") return escapeHtml(String(node2));
    if (Array.isArray(node2)) return node2.map(render).join("");
    if (node2 === null || _typeof$1(node2) !== "object" || !Tag.isTag(node2)) return "";
    var name = node2.name,
      attributes = node2.attributes,
      _node2$children2 = node2.children,
      children = _node2$children2 === void 0 ? [] : _node2$children2;
    if (!name) return render(children);
    var output = "<".concat(name);
    for (var _i8 = 0, _Object$entries5 = Object.entries(attributes !== null && attributes !== void 0 ? attributes : {}); _i8 < _Object$entries5.length; _i8++) {
      var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i8], 2),
        k = _Object$entries5$_i[0],
        v = _Object$entries5$_i[1];
      output += " ".concat(k, "=\"").concat(escapeHtml(String(v)), "\"");
    }
    output += ">";
    if (voidElements.has(name)) return output;
    if (children.length) output += render(children);
    output += "</".concat(name, ">");
    return output;
  }

  // src/renderers/react/react.ts
  function tagName(name, components) {
    return typeof name !== "string" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
  }
  function dynamic(node2, React) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref3$components = _ref3.components,
      components = _ref3$components === void 0 ? {} : _ref3$components;
    function deepRender2(value) {
      if (value == null || _typeof$1(value) !== "object") return value;
      if (Array.isArray(value)) return value.map(function (item2) {
        return deepRender2(item2);
      });
      if (value.$$mdtype === "Tag") return render3(value);
      if (_typeof$1(value) !== "object") return value;
      var output = {};
      for (var _i9 = 0, _Object$entries6 = Object.entries(value); _i9 < _Object$entries6.length; _i9++) {
        var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i9], 2),
          k = _Object$entries6$_i[0],
          v = _Object$entries6$_i[1];
        output[k] = deepRender2(v);
      }
      return output;
    }
    function render3(node3) {
      if (Array.isArray(node3)) return React.createElement.apply(React, [React.Fragment, null].concat(_toConsumableArray(node3.map(render3))));
      if (node3 === null || _typeof$1(node3) !== "object" || !Tag.isTag(node3)) return node3;
      var name = node3.name,
        _node3$attributes = node3.attributes,
        _node3$attributes2 = _node3$attributes === void 0 ? {} : _node3$attributes,
        className = _node3$attributes2["class"],
        attrs = _objectWithoutProperties(_node3$attributes2, _excluded),
        _node3$children = node3.children,
        children = _node3$children === void 0 ? [] : _node3$children;
      if (className) attrs.className = className;
      return React.createElement.apply(React, [tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs)].concat(_toConsumableArray(children.map(render3))));
    }
    return render3(node2);
  }

  // src/renderers/react/static.ts
  function tagName2(name, components) {
    return typeof name !== "string" ? "Fragment" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
  }
  function renderArray(children) {
    return children.map(render2).join(", ");
  }
  function deepRender(value) {
    if (value == null || _typeof$1(value) !== "object") return JSON.stringify(value);
    if (Array.isArray(value)) return "[".concat(value.map(function (item2) {
      return deepRender(item2);
    }).join(", "), "]");
    if (value.$$mdtype === "Tag") return render2(value);
    if (_typeof$1(value) !== "object") return JSON.stringify(value);
    var object = Object.entries(value).map(function (_ref10) {
      var _ref11 = _slicedToArray(_ref10, 2),
        k = _ref11[0],
        v = _ref11[1];
      return [JSON.stringify(k), deepRender(v)].join(": ");
    }).join(", ");
    return "{".concat(object, "}");
  }
  function render2(node2) {
    if (Array.isArray(node2)) return "React.createElement(React.Fragment, null, ".concat(renderArray(node2), ")");
    if (node2 === null || _typeof$1(node2) !== "object" || !Tag.isTag(node2)) return JSON.stringify(node2);
    var name = node2.name,
      _node2$attributes = node2.attributes,
      _node2$attributes2 = _node2$attributes === void 0 ? {} : _node2$attributes,
      className = _node2$attributes2["class"],
      attrs = _objectWithoutProperties(_node2$attributes2, _excluded2),
      _node2$children3 = node2.children,
      children = _node2$children3 === void 0 ? [] : _node2$children3;
    if (className) attrs.className = className;
    return "React.createElement(\n    tagName(".concat(JSON.stringify(name), ", components),\n    ").concat(Object.keys(attrs).length == 0 ? "null" : deepRender(attrs), ",\n    ").concat(renderArray(children), ")");
  }
  function reactStatic(node2) {
    return "\n  (({components = {}} = {}) => {\n    ".concat(tagName2, "\n    return ").concat(render2(node2), ";\n  })\n");
  }

  // src/renderers/index.ts
  var renderers_default = {
    html: render,
    react: dynamic,
    reactStatic: reactStatic
  };

  // src/tags/partial.ts
  var PartialFile = /*#__PURE__*/function () {
    function PartialFile() {
      _classCallCheck(this, PartialFile);
    }
    return _createClass(PartialFile, [{
      key: "validate",
      value: function validate(file, config) {
        var _config$partials = config.partials,
          partials = _config$partials === void 0 ? {} : _config$partials;
        var partial2 = partials[file];
        if (!partial2) return [{
          id: "attribute-value-invalid",
          level: "error",
          message: "Partial `".concat(file, "` not found. The 'file' attribute must be set in `config.partials`")
        }];
        return [];
      }
    }]);
  }();
  var partial = {
    inline: false,
    selfClosing: true,
    attributes: {
      file: {
        type: PartialFile,
        render: false,
        required: true
      },
      variables: {
        type: Object,
        render: false
      }
    },
    transform: function transform(node2, config) {
      var _config$partials2 = config.partials,
        partials = _config$partials2 === void 0 ? {} : _config$partials2;
      var _node2$attributes3 = node2.attributes,
        file = _node2$attributes3.file,
        variables = _node2$attributes3.variables;
      var partial2 = partials[file];
      if (!partial2) return null;
      var scopedConfig = _objectSpread$1(_objectSpread$1({}, config), {}, {
        variables: _objectSpread$1(_objectSpread$1(_objectSpread$1({}, config.variables), variables), {}, _defineProperty({}, "$$partial:filename", file))
      });
      var transformChildren = function transformChildren(part) {
        return part.resolve(scopedConfig).transformChildren(scopedConfig);
      };
      return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);
    }
  };

  // src/tags/table.ts
  var table2 = {
    children: ["table"],
    inline: false
  };

  // src/tags/index.ts
  var tags_default = {
    "if": tagIf,
    "else": tagElse,
    partial: partial,
    table: table2
  };

  // src/tokenizer/index.ts
  var import_lib = __toModule(require_lib());

  // src/tokenizer/plugins/annotations.ts
  var import_tag7 = __toModule(require_tag());
  function createToken(state, content, contentStart) {
    try {
      var _ref12 = (0, import_tag7.parse)(content, {
          Variable: Variable,
          Function: Function2
        }),
        type = _ref12.type,
        meta = _ref12.meta,
        _ref12$nesting = _ref12.nesting,
        nesting = _ref12$nesting === void 0 ? 0 : _ref12$nesting;
      var token = state.push(type, "", nesting);
      token.info = content;
      token.meta = meta;
      if (!state.delimiters) {
        state.delimiters = [];
      }
      return token;
    } catch (error2) {
      if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;
      var message = error2.message,
        _error2$location2 = error2.location,
        start = _error2$location2.start,
        end = _error2$location2.end;
      var location = contentStart ? {
        start: {
          offset: start.offset + contentStart
        },
        end: {
          offset: end.offset + contentStart
        }
      } : null;
      var _token = state.push("error", "", 0);
      _token.meta = {
        error: {
          message: message,
          location: location
        }
      };
      return _token;
    }
  }
  function block(state, startLine, endLine, silent) {
    var start = state.bMarks[startLine] + state.tShift[startLine];
    var finish = state.eMarks[startLine];
    if (!state.src.startsWith(OPEN, start)) return false;
    var tagEnd = findTagEnd(state.src, start);
    var lastPossible = state.src.slice(0, finish).trim().length;
    if (!tagEnd || tagEnd < lastPossible - CLOSE.length) return false;
    var contentStart = start + OPEN.length;
    var content = state.src.slice(contentStart, tagEnd).trim();
    var lines = content.split("\n").length;
    if (content[0] === "$") return false;
    if (silent) return true;
    var token = createToken(state, content, contentStart);
    token.map = [startLine, startLine + lines];
    state.line += lines;
    return true;
  }
  function inline2(state, silent) {
    if (!state.src.startsWith(OPEN, state.pos)) return false;
    var tagEnd = findTagEnd(state.src, state.pos);
    if (!tagEnd) return false;
    var content = state.src.slice(state.pos + OPEN.length, tagEnd);
    if (!silent) createToken(state, content.trim());
    state.pos = tagEnd + CLOSE.length;
    return true;
  }
  function core(state) {
    var token;
    var _iterator25 = _createForOfIteratorHelper$1(state.tokens),
      _step25;
    try {
      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
        var _token2;
        token = _step25.value;
        if (token.type !== "fence") continue;
        if (token.info.includes(OPEN)) {
          var start = token.info.indexOf(OPEN);
          var end = findTagEnd(token.info, start);
          var content = token.info.slice(start + OPEN.length, end);
          try {
            var _ref13 = (0, import_tag7.parse)(content.trim(), {
                Variable: Variable,
                Function: Function2
              }),
              meta = _ref13.meta;
            token.meta = meta;
          } catch (error2) {
            if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;
            if (!token.errors) token.errors = [];
            token.errors.push({
              id: "fence-tag-error",
              level: "error",
              message: "Syntax error in fence tag: ".concat(error2.message)
            });
          }
        }
        if ((_token2 = token) !== null && _token2 !== void 0 && (_token2 = _token2.meta) !== null && _token2 !== void 0 && (_token2 = _token2.attributes) !== null && _token2 !== void 0 && _token2.find(function (attr) {
          return attr.name === "process" && !attr.value;
        })) continue;
        token.children = parseTags(token.content, token.map[0]);
      }
    } catch (err) {
      _iterator25.e(err);
    } finally {
      _iterator25.f();
    }
  }
  function plugin(md) {
    md.block.ruler.before("paragraph", "annotations", block, {
      alt: ["paragraph", "blockquote"]
    });
    md.inline.ruler.push("containers", inline2);
    md.core.ruler.push("annotations", core);
  }

  // src/tokenizer/plugins/frontmatter.ts
  var fence2 = "---";
  function getLine(state, n) {
    return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();
  }
  function findClose(state, endLine) {
    for (var line = 1; line < endLine; line++) if (getLine(state, line) === fence2) return line;
  }
  function block2(state, startLine, endLine, silent) {
    if (startLine != 0 || getLine(state, 0) != fence2) return false;
    var close = findClose(state, endLine);
    if (!close) return false;
    if (silent) return true;
    var token = state.push("frontmatter", "", 0);
    token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();
    token.map = [0, close];
    token.hidden = true;
    state.line = close + 1;
    return true;
  }
  function plugin2(md) {
    md.block.ruler.before("hr", "frontmatter", block2);
  }

  // src/tokenizer/plugins/comments.ts
  var OPEN2 = "<!--";
  var CLOSE2 = "-->";
  function block3(state, startLine, endLine, silent) {
    var start = state.bMarks[startLine] + state.tShift[startLine];
    if (!state.src.startsWith(OPEN2, start)) return false;
    var close = state.src.indexOf(CLOSE2, start);
    if (!close) return false;
    if (silent) return true;
    var content = state.src.slice(start + OPEN2.length, close);
    var lines = content.split("\n").length;
    var token = state.push("comment", "", 0);
    token.content = content.trim();
    token.map = [startLine, startLine + lines];
    state.line += lines;
    return true;
  }
  function inline3(state, silent) {
    if (!state.src.startsWith(OPEN2, state.pos)) return false;
    var close = state.src.indexOf(CLOSE2, state.pos);
    if (!close) return false;
    if (silent) return true;
    var content = state.src.slice(state.pos + OPEN2.length, close);
    var token = state.push("comment", "", 0);
    token.content = content.trim();
    state.pos = close + CLOSE2.length;
    return true;
  }
  function plugin3(md) {
    md.block.ruler.before("table", "comment", block3, {
      alt: ["paragraph"]
    });
    md.inline.ruler.push("comment", inline3);
  }

  // src/tokenizer/index.ts
  var Tokenizer = /*#__PURE__*/function () {
    function Tokenizer() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Tokenizer);
      this.parser = new import_lib["default"](config);
      this.parser.use(plugin, "annotations", {});
      this.parser.use(plugin2, "frontmatter", {});
      this.parser.disable(["lheading", "code"]);
      if (config.allowComments) this.parser.use(plugin3, "comments", {});
    }
    return _createClass(Tokenizer, [{
      key: "tokenize",
      value: function tokenize(content) {
        return this.parser.parse(content.toString(), {});
      }
    }]);
  }();

  // src/validator.ts
  var TypeMappings = {
    String: String,
    Number: Number,
    Array: Array,
    Object: Object,
    Boolean: Boolean
  };
  function validateType(type, value, config) {
    var _config$validation;
    if (!type) return true;
    if (ast_default.isFunction(value) && (_config$validation = config.validation) !== null && _config$validation !== void 0 && _config$validation.validateFunctions) {
      var _config$functions2;
      var schema = (_config$functions2 = config.functions) === null || _config$functions2 === void 0 ? void 0 : _config$functions2[value.name];
      return !(schema !== null && schema !== void 0 && schema.returns) ? true : Array.isArray(schema.returns) ? schema.returns.find(function (t) {
        return t === type;
      }) !== void 0 : schema.returns === type;
    }
    if (ast_default.isAst(value)) return true;
    if (Array.isArray(type)) return type.some(function (t) {
      return validateType(t, value, config);
    });
    if (typeof type === "string") type = TypeMappings[type];
    if (typeof type === "function") {
      var instance = new type();
      if (instance.validate) {
        return instance.validate(value, config);
      }
    }
    return value != null && value.constructor === type;
  }
  function typeToString(type) {
    if (typeof type === "string") return type;
    if (Array.isArray(type)) return type.map(typeToString).join(" | ");
    return type.name;
  }
  function validateFunction(fn, config) {
    var _config$functions3;
    var schema = (_config$functions3 = config.functions) === null || _config$functions3 === void 0 ? void 0 : _config$functions3[fn.name];
    var errors = [];
    if (!schema) return [{
      id: "function-undefined",
      level: "critical",
      message: "Undefined function: '".concat(fn.name, "'")
    }];
    if (schema.validate) errors.push.apply(errors, _toConsumableArray(schema.validate(fn, config)));
    if (schema.parameters) {
      for (var _i10 = 0, _Object$entries7 = Object.entries(fn.parameters); _i10 < _Object$entries7.length; _i10++) {
        var _schema$parameters;
        var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i10], 2),
          key = _Object$entries7$_i[0],
          value = _Object$entries7$_i[1];
        var param = (_schema$parameters = schema.parameters) === null || _schema$parameters === void 0 ? void 0 : _schema$parameters[key];
        if (!param) {
          errors.push({
            id: "parameter-undefined",
            level: "error",
            message: "Invalid parameter: '".concat(key, "'")
          });
          continue;
        }
        if (ast_default.isAst(value) && !ast_default.isFunction(value)) continue;
        if (param.type) {
          var valid = validateType(param.type, value, config);
          if (valid === false) {
            errors.push({
              id: "parameter-type-invalid",
              level: "error",
              message: "Parameter '".concat(key, "' of '").concat(fn.name, "' must be type of '").concat(typeToString(param.type), "'")
            });
          } else if (Array.isArray(valid)) {
            errors.push.apply(errors, _toConsumableArray(valid));
          }
        }
      }
    }
    for (var _i11 = 0, _Object$entries8 = Object.entries((_schema$parameters2 = schema.parameters) !== null && _schema$parameters2 !== void 0 ? _schema$parameters2 : {}); _i11 < _Object$entries8.length; _i11++) {
      var _schema$parameters2;
      var _Object$entries8$_i = _slicedToArray(_Object$entries8[_i11], 2),
        _key = _Object$entries8$_i[0],
        required = _Object$entries8$_i[1].required;
      if (required && fn.parameters[_key] === void 0) errors.push({
        id: "parameter-missing-required",
        level: "error",
        message: "Missing required parameter: '".concat(_key, "'")
      });
    }
    return errors;
  }
  function validator(node2, config) {
    var schema = node2.findSchema(config);
    var errors = _toConsumableArray(node2.errors || []);
    if (!schema) {
      errors.push({
        id: node2.tag ? "tag-undefined" : "node-undefined",
        level: "critical",
        message: node2.tag ? "Undefined tag: '".concat(node2.tag, "'") : "Undefined node: '".concat(node2.type, "'")
      });
      return errors;
    }
    if (schema.inline != void 0 && node2.inline !== schema.inline) errors.push({
      id: "tag-placement-invalid",
      level: "critical",
      message: "'".concat(node2.tag, "' tag should be ").concat(schema.inline ? "inline" : "block")
    });
    if (schema.selfClosing && node2.children.length > 0) errors.push({
      id: "tag-selfclosing-has-children",
      level: "critical",
      message: "'".concat(node2.tag, "' tag should be self-closing")
    });
    var attributes = _objectSpread$1(_objectSpread$1({}, globalAttributes), schema.attributes);
    for (var _i12 = 0, _Object$entries9 = Object.entries(node2.attributes); _i12 < _Object$entries9.length; _i12++) {
      var _Object$entries9$_i = _slicedToArray(_Object$entries9[_i12], 2),
        key = _Object$entries9$_i[0],
        value = _Object$entries9$_i[1];
      var attrib = attributes[key];
      if (!attrib) {
        errors.push({
          id: "attribute-undefined",
          level: "error",
          message: "Invalid attribute: '".concat(key, "'")
        });
        continue;
      }
      var type = attrib.type,
        matches = attrib.matches,
        errorLevel = attrib.errorLevel;
      if (ast_default.isAst(value)) {
        var _config$validation2;
        if (ast_default.isFunction(value) && (_config$validation2 = config.validation) !== null && _config$validation2 !== void 0 && _config$validation2.validateFunctions) errors.push.apply(errors, _toConsumableArray(validateFunction(value, config)));else if (ast_default.isVariable(value) && config.variables) {
          var missing = false;
          var variables = config.variables;
          var _iterator26 = _createForOfIteratorHelper$1(value.path),
            _step26;
          try {
            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
              var key2 = _step26.value;
              if (!Object.prototype.hasOwnProperty.call(variables, key2)) {
                missing = true;
                break;
              }
              variables = variables[key2];
            }
          } catch (err) {
            _iterator26.e(err);
          } finally {
            _iterator26.f();
          }
          if (missing) {
            errors.push({
              id: "variable-undefined",
              level: "error",
              message: "Undefined variable: '".concat(value.path.join("."), "'")
            });
          }
        } else continue;
      }
      value = value;
      if (type) {
        var valid = validateType(type, value, config);
        if (valid === false) {
          errors.push({
            id: "attribute-type-invalid",
            level: errorLevel || "error",
            message: "Attribute '".concat(key, "' must be type of '").concat(typeToString(type), "'")
          });
        }
        if (Array.isArray(valid)) {
          errors.push.apply(errors, _toConsumableArray(valid));
        }
      }
      if (typeof matches === "function") matches = matches(config);
      if (Array.isArray(matches) && !matches.includes(value)) errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: "Attribute '".concat(key, "' must match one of ").concat(JSON.stringify(matches), ". Got '").concat(value, "' instead.")
      });
      if (matches instanceof RegExp && !matches.test(value)) errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: "Attribute '".concat(key, "' must match ").concat(matches, ". Got '").concat(value, "' instead.")
      });
    }
    for (var _i13 = 0, _Object$entries10 = Object.entries(attributes); _i13 < _Object$entries10.length; _i13++) {
      var _Object$entries10$_i = _slicedToArray(_Object$entries10[_i13], 2),
        _key2 = _Object$entries10$_i[0],
        required = _Object$entries10$_i[1].required;
      if (required && node2.attributes[_key2] === void 0) errors.push({
        id: "attribute-missing-required",
        level: "error",
        message: "Missing required attribute: '".concat(_key2, "'")
      });
    }
    var _iterator27 = _createForOfIteratorHelper$1(node2.children),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var _type = _step27.value.type;
        if (schema.children && _type !== "error" && !schema.children.includes(_type)) errors.push({
          id: "child-invalid",
          level: "warning",
          message: "Can't nest '".concat(_type, "' in '").concat(node2.tag || node2.type, "'")
        });
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    if (schema.validate) {
      var schemaErrors = schema.validate(node2, config);
      if (isPromise(schemaErrors)) {
        return schemaErrors.then(function (e) {
          return errors.concat(e);
        });
      }
      errors.push.apply(errors, _toConsumableArray(schemaErrors));
    }
    return errors;
  }

  // index.ts
  var tokenizer = new Tokenizer();
  function mergeConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _objectSpread$1(_objectSpread$1({}, config), {}, {
      tags: _objectSpread$1(_objectSpread$1({}, tags_default), config.tags),
      nodes: _objectSpread$1(_objectSpread$1({}, schema_exports), config.nodes),
      functions: _objectSpread$1(_objectSpread$1({}, functions_default), config.functions)
    });
  }
  function parse3(content, file) {
    if (typeof content === "string") content = tokenizer.tokenize(content);
    return parser(content, file);
  }
  function resolve2(content, config) {
    if (Array.isArray(content)) return content.flatMap(function (child) {
      return child.resolve(config);
    });
    return content.resolve(config);
  }
  function transform2(nodes, options) {
    var config = mergeConfig(options);
    var content = resolve2(nodes, config);
    if (Array.isArray(content)) return content.flatMap(function (child) {
      return child.transform(config);
    });
    return content.transform(config);
  }
  function validate(content, options) {
    var config = mergeConfig(options);
    var output = [content].concat(_toConsumableArray(content.walk())).map(function (node2) {
      var type = node2.type,
        lines = node2.lines,
        location = node2.location;
      var errors = validator(node2, config);
      if (isPromise(errors)) {
        return errors.then(function (e) {
          return e.map(function (error2) {
            return {
              type: type,
              lines: lines,
              location: location,
              error: error2
            };
          });
        });
      }
      return errors.map(function (error2) {
        return {
          type: type,
          lines: lines,
          location: location,
          error: error2
        };
      });
    });
    if (output.some(isPromise)) {
      return Promise.all(output).then(function (o) {
        return o.flat();
      });
    }
    return output.flat();
  }
  function createElement(name) {
    var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key3 = 2; _key3 < _len; _key3++) {
      children[_key3 - 2] = arguments[_key3];
    }
    return {
      name: name,
      attributes: attributes,
      children: children
    };
  }
  var Markdoc = /*#__PURE__*/_createClass(function Markdoc(config) {
    var _this2 = this;
    _classCallCheck(this, Markdoc);
    this.parse = parse3;
    this.resolve = function (content) {
      return resolve2(content, _this2.config);
    };
    this.transform = function (content) {
      return transform2(content, _this2.config);
    };
    this.validate = function (content) {
      return validate(content, _this2.config);
    };
    this.config = config;
  });
  Markdoc.nodes = schema_exports;
  Markdoc.tags = tags_default;
  Markdoc.functions = functions_default;
  Markdoc.globalAttributes = globalAttributes;
  Markdoc.renderers = renderers_default;
  Markdoc.transforms = transforms_default;
  Markdoc.Ast = ast_default;
  Markdoc.Tag = Tag;
  Markdoc.Tokenizer = Tokenizer;
  Markdoc.parseTags = parseTags;
  Markdoc.transformer = transformer_default;
  Markdoc.validator = validator;
  Markdoc.parse = parse3;
  Markdoc.transform = transform2;
  Markdoc.validate = validate;
  Markdoc.createElement = createElement;
  Markdoc.truthy = truthy;
  Markdoc.format = format;

  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
  function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(e, r) { return new BabelRegExp(e, void 0, r); }; var e = RegExp.prototype, r = new WeakMap(); function BabelRegExp(e, t, p) { var o = RegExp(e, t); return r.set(o, p || r.get(e)), _setPrototypeOf(o, BabelRegExp.prototype); } function buildGroups(e, t) { var p = r.get(t); return Object.keys(p).reduce(function (r, t) { var o = p[t]; if ("number" == typeof o) r[t] = e[o];else { for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++; r[t] = e[o[i]]; } return r; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) { var t = e.exec.call(this, r); if (t) { t.groups = buildGroups(t, this); var p = t.indices; p && (p.groups = buildGroups(p, this)); } return t; }, BabelRegExp.prototype[Symbol.replace] = function (t, p) { if ("string" == typeof p) { var o = r.get(this); return e[Symbol.replace].call(this, t, p.replace(/\$<([^>]+)(>|$)/g, function (e, r, t) { if ("" === t) return e; var p = o[r]; return Array.isArray(p) ? "$" + p.join("$") : "number" == typeof p ? "$" + p : ""; })); } if ("function" == typeof p) { var i = this; return e[Symbol.replace].call(this, t, function () { var e = arguments; return "object" != _typeof$1(e[e.length - 1]) && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e); }); } return e[Symbol.replace].call(this, t, p); }, _wrapRegExp.apply(this, arguments); }
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var tagParser_default = {
    defineNodes: [{
      name: "MarkdocTag",
      block: true,
      style: tags$1.meta
    }],
    parseBlock: [{
      name: "MarkdocTag",
      endLeaf: function endLeaf(_cx, line, _leaf) {
        return line.next == 123 && line.text.slice(line.pos).trim().startsWith("{%");
      },
      parse: function parse(cx, line) {
        if (line.next != 123) return false;
        var content = line.text.slice(line.pos).trim();
        if (!content.startsWith("{%") || !content.endsWith("%}")) return false;
        cx.addElement(cx.elt("MarkdocTag", cx.lineStart, cx.lineStart + line.text.length));
        cx.nextLine();
        return true;
      }
    }]
  };
  var highlightStyle_default = HighlightStyle.define([{
    tag: tags$1.heading1,
    fontWeight: "bold",
    fontFamily: "sans-serif",
    fontSize: "32px",
    textDecoration: "none"
  }, {
    tag: tags$1.heading2,
    fontWeight: "bold",
    fontFamily: "sans-serif",
    fontSize: "28px",
    textDecoration: "none"
  }, {
    tag: tags$1.heading3,
    fontWeight: "bold",
    fontFamily: "sans-serif",
    fontSize: "24px",
    textDecoration: "none"
  }, {
    tag: tags$1.heading4,
    fontWeight: "bold",
    fontFamily: "sans-serif",
    fontSize: "22px",
    textDecoration: "none"
  }, {
    tag: tags$1.link,
    fontFamily: "sans-serif",
    textDecoration: "underline",
    color: "blue"
  }, {
    tag: tags$1.emphasis,
    fontFamily: "sans-serif",
    fontStyle: "italic"
  }, {
    tag: tags$1.strong,
    fontFamily: "sans-serif",
    fontWeight: "bold"
  }, {
    tag: tags$1.monospace,
    fontFamily: "monospace"
  }, {
    tag: tags$1.content,
    fontFamily: "sans-serif"
  }, {
    tag: tags$1.meta,
    color: "darkgrey"
  }]);
  var tokenElement = ["InlineCode", "Emphasis", "StrongEmphasis", "FencedCode", "Link"];
  var tokenHidden = ["HardBreak", "LinkMark", "EmphasisMark", "CodeMark", "CodeInfo", "URL"];
  var decorationHidden = Decoration.mark({
    "class": "cm-markdoc-hidden"
  });
  var decorationBullet = Decoration.mark({
    "class": "cm-markdoc-bullet"
  });
  var decorationCode = Decoration.mark({
    "class": "cm-markdoc-code"
  });
  var decorationTag = Decoration.mark({
    "class": "cm-markdoc-tag"
  });
  var RichEditPlugin = /*#__PURE__*/function () {
    function RichEditPlugin(view) {
      _classCallCheck(this, RichEditPlugin);
      _defineProperty(this, "decorations", void 0);
      this.decorations = this.process(view);
    }
    return _createClass(RichEditPlugin, [{
      key: "update",
      value: function update(_update) {
        if (_update.docChanged || _update.viewportChanged || _update.selectionSet) this.decorations = this.process(_update.view);
      }
    }, {
      key: "process",
      value: function process(view) {
        var widgets = [];
        var _view$state$selection = _slicedToArray(view.state.selection.ranges, 1),
          cursor = _view$state$selection[0];
        var _iterator = _createForOfIteratorHelper(view.visibleRanges),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _step.value,
              from = _step$value.from,
              to = _step$value.to;
            syntaxTree(view.state).iterate({
              from: from,
              to: to,
              enter: function enter(node) {
                if (node.name === "MarkdocTag") widgets.push(decorationTag.range(node.from, node.to));
                if (node.name === "FencedCode") widgets.push(decorationCode.range(node.from, node.to));
                if ((node.name.startsWith("ATXHeading") || tokenElement.includes(node.name)) && cursor.from >= node.from && cursor.to <= node.to) return false;
                if (node.name === "ListMark" && node.matchContext(["BulletList", "ListItem"]) && cursor.from != node.from && cursor.from != node.from + 1) widgets.push(decorationBullet.range(node.from, node.to));
                if (node.name === "HeaderMark") widgets.push(decorationHidden.range(node.from, node.to + 1));
                if (tokenHidden.includes(node.name)) widgets.push(decorationHidden.range(node.from, node.to));
              }
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return Decoration.set(widgets);
      }
    }]);
  }();
  var patternTag = /*#__PURE__*/_wrapRegExp(/{%\s*(\/)?([a-zA-Z0-9-_]+)(\s+[^]+)?\s*(\/)?%}\s*$/m, {
    closing: 1,
    tag: 2,
    attrs: 3,
    self: 4
  });
  var RenderBlockWidget = /*#__PURE__*/function (_WidgetType) {
    function RenderBlockWidget(source, config) {
      var _this;
      _classCallCheck(this, RenderBlockWidget);
      _this = _callSuper(this, RenderBlockWidget);
      _defineProperty(_this, "rendered", void 0);
      _this.source = source;
      var document2 = Markdoc.parse(source);
      var transformed = Markdoc.transform(document2, config);
      _this.rendered = Markdoc.renderers.html(transformed);
      return _this;
    }
    _inherits(RenderBlockWidget, _WidgetType);
    return _createClass(RenderBlockWidget, [{
      key: "eq",
      value: function eq(widget) {
        return widget.source === widget.source;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        var content = document.createElement("div");
        content.setAttribute("contenteditable", "false");
        content.className = "cm-markdoc-renderBlock";
        content.innerHTML = this.rendered;
        return content;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  function replaceBlocks(state, config, from, to) {
    var decorations = [];
    var _state$selection$rang = _slicedToArray(state.selection.ranges, 1),
      cursor = _state$selection$rang[0];
    var tags = [];
    var stack = [];
    syntaxTree(state).iterate({
      from: from,
      to: to,
      enter: function enter(node) {
        if (!["Table", "Blockquote", "MarkdocTag"].includes(node.name)) return;
        if (node.name === "MarkdocTag") {
          var _match$groups, _match$groups2;
          var text2 = state.doc.sliceString(node.from, node.to);
          var match = text2.match(patternTag);
          if (match !== null && match !== void 0 && (_match$groups = match.groups) !== null && _match$groups !== void 0 && _match$groups.self) {
            tags.push([node.from, node.to]);
            return;
          }
          if (match !== null && match !== void 0 && (_match$groups2 = match.groups) !== null && _match$groups2 !== void 0 && _match$groups2.closing) {
            var last = stack.pop();
            if (last) tags.push([last, node.to]);
            return;
          }
          stack.push(node.from);
          return;
        }
        if (cursor.from >= node.from && cursor.to <= node.to) return false;
        var text = state.doc.sliceString(node.from, node.to);
        var decoration = Decoration.replace({
          widget: new RenderBlockWidget(text, config),
          block: true
        });
        decorations.push(decoration.range(node.from, node.to));
      }
    });
    for (var _i = 0, _tags = tags; _i < _tags.length; _i++) {
      var _tags$_i = _slicedToArray(_tags[_i], 2),
        from2 = _tags$_i[0],
        to2 = _tags$_i[1];
      if (cursor.from >= from2 && cursor.to <= to2) continue;
      var text = state.doc.sliceString(from2, to2);
      var decoration = Decoration.replace({
        widget: new RenderBlockWidget(text, config),
        block: true
      });
      decorations.push(decoration.range(from2, to2));
    }
    return decorations;
  }
  function renderBlock_default(config) {
    return StateField.define({
      create: function create(state) {
        return RangeSet.of(replaceBlocks(state, config), true);
      },
      update: function update(decorations, transaction) {
        return RangeSet.of(replaceBlocks(transaction.state, config), true);
      },
      provide: function provide(field) {
        return EditorView.decorations.from(field);
      }
    });
  }

  // src/index.ts
  function src_default(config) {
    var _config$lezer, _config$lezer$extensi, _config$lezer2;
    var mergedConfig = _objectSpread(_objectSpread({}, (_config$lezer = config.lezer) !== null && _config$lezer !== void 0 ? _config$lezer : []), {}, {
      extensions: [tagParser_default].concat(_toConsumableArray((_config$lezer$extensi = (_config$lezer2 = config.lezer) === null || _config$lezer2 === void 0 ? void 0 : _config$lezer2.extensions) !== null && _config$lezer$extensi !== void 0 ? _config$lezer$extensi : []))
    });
    return ViewPlugin.fromClass(RichEditPlugin, {
      decorations: function decorations(v) {
        return v.decorations;
      },
      provide: function provide(v) {
        return [renderBlock_default(config.markdoc), syntaxHighlighting(highlightStyle_default), markdown(mergedConfig)];
      },
      eventHandlers: {
        mousedown: function mousedown(_ref, view) {
          var target = _ref.target;
          if (target instanceof Element && target.matches(".cm-markdoc-renderBlock *")) view.dispatch({
            selection: {
              anchor: view.posAtDOM(target)
            }
          });
        }
      }
    });
  }

  // Basic setup extensions
  var basicSetup = [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), dropCursor(), EditorState.allowMultipleSelections.of(true), indentOnInput(), syntaxHighlighting(defaultHighlightStyle, {
    fallback: true
  }), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), highlightSelectionMatches(), lintGutter(),
  // Added lintGutter to the basic setup
  keymap.of([].concat(_toConsumableArray(closeBracketsKeymap), _toConsumableArray(defaultKeymap), _toConsumableArray(searchKeymap), _toConsumableArray(historyKeymap), _toConsumableArray(foldKeymap), _toConsumableArray(completionKeymap), _toConsumableArray(lintKeymap), [indentWithTab // Use Tab for indentation
  ]))];

  //export properties for public use
  window.StateField = StateField;
  window.EditorView = EditorView;
  window.EditorState = EditorState;
  window.autocompletion = autocompletion;
  window.basicSetup = basicSetup;
  window.cpp = cpp;
  window.dracula = dracula; // Changed from oneDark to dracula
  window.lintGutter = lintGutter;
  window.setDiagnostics = setDiagnostics;
  window.linter = linter;
  window.openSearchPanel = openSearchPanel;
  //window.languages = languages;
  window.Table = Table; // Added for potential use in the editor
  window.richMarkdoc = src_default; // Added for potential use in the editor

  //export { setupCodeMirror }; // Also export for potential module usage

})();
